
STM32_infobox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000194cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00073540  08019680  08019680  00029680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0808cbc0  0808cbc0  000b08b0  2**0
                  CONTENTS
  4 .ARM          00000008  0808cbc0  0808cbc0  0009cbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0808cbc8  0808cbc8  000b08b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0808cbc8  0808cbc8  0009cbc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0808cbcc  0808cbcc  0009cbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000268  10000000  0808cbd0  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000008b0  20000000  0808ce38  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001068  200008b0  0808d6e8  000b08b0  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001918  0808d6e8  000b1918  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000b08b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031796  00000000  00000000  000b08e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007612  00000000  00000000  000e2076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c0  00000000  00000000  000e9688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  000ebc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031598  00000000  00000000  000ede88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033b2c  00000000  00000000  0011f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb5ba  00000000  00000000  00152f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  0024e506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b268  00000000  00000000  0024e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200008b0 	.word	0x200008b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019664 	.word	0x08019664

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200008b4 	.word	0x200008b4
 80001ec:	08019664 	.word	0x08019664

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CRC_Init+0x20>)
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <MX_CRC_Init+0x24>)
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_CRC_Init+0x20>)
 8001024:	f003 f95c 	bl	80042e0 <HAL_CRC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800102e:	f001 fa81 	bl	8002534 <Error_Handler>
  }

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200008cc 	.word	0x200008cc
 800103c:	40023000 	.word	0x40023000

08001040 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_CRC_MspInit+0x3c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_CRC_MspInit+0x40>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_CRC_MspInit+0x40>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_CRC_MspInit+0x40>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023000 	.word	0x40023000
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_DMA2D_MspInit+0x48>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d115      	bne.n	80010c2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 80010a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	205a      	movs	r0, #90	; 0x5a
 80010b8:	f003 f8e8 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010bc:	205a      	movs	r0, #90	; 0x5a
 80010be:	f003 f901 	bl	80042c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	4002b000 	.word	0x4002b000
 80010d0:	40023800 	.word	0x40023800

080010d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	4b84      	ldr	r3, [pc, #528]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a83      	ldr	r2, [pc, #524]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b81      	ldr	r3, [pc, #516]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	6a3b      	ldr	r3, [r7, #32]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <MX_GPIO_Init+0x22c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a7c      	ldr	r2, [pc, #496]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b7a      	ldr	r3, [pc, #488]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a75      	ldr	r2, [pc, #468]	; (8001300 <MX_GPIO_Init+0x22c>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b73      	ldr	r3, [pc, #460]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a67      	ldr	r2, [pc, #412]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <MX_GPIO_Init+0x22c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <MX_GPIO_Init+0x22c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a60      	ldr	r2, [pc, #384]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a59      	ldr	r2, [pc, #356]	; (8001300 <MX_GPIO_Init+0x22c>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a52      	ldr	r2, [pc, #328]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2116      	movs	r1, #22
 80011ce:	484d      	ldr	r0, [pc, #308]	; (8001304 <MX_GPIO_Init+0x230>)
 80011d0:	f004 f8b4 	bl	800533c <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <MX_GPIO_Init+0x234>)
 80011da:	f004 f8af 	bl	800533c <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011e4:	4849      	ldr	r0, [pc, #292]	; (800130c <MX_GPIO_Init+0x238>)
 80011e6:	f004 f8a9 	bl	800533c <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011f0:	4847      	ldr	r0, [pc, #284]	; (8001310 <MX_GPIO_Init+0x23c>)
 80011f2:	f004 f8a3 	bl	800533c <HAL_GPIO_WritePin>

/*Configure GPIO pins : PCPin PCPin PCPin */
GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80011f6:	2316      	movs	r3, #22
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	483d      	ldr	r0, [pc, #244]	; (8001304 <MX_GPIO_Init+0x230>)
 800120e:	f003 fddd 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pins : PAPin PAPin PAPin PAPin */
GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001212:	f248 0307 	movw	r3, #32775	; 0x8007
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <MX_GPIO_Init+0x240>)
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4838      	ldr	r0, [pc, #224]	; (8001308 <MX_GPIO_Init+0x234>)
 8001228:	f003 fdd0 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = ACP_RST_Pin;
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4831      	ldr	r0, [pc, #196]	; (8001308 <MX_GPIO_Init+0x234>)
 8001244:	f003 fdc2 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <MX_GPIO_Init+0x240>)
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	482a      	ldr	r0, [pc, #168]	; (8001304 <MX_GPIO_Init+0x230>)
 800125c:	f003 fdb6 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = BOOT1_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4829      	ldr	r0, [pc, #164]	; (8001318 <MX_GPIO_Init+0x244>)
 8001274:	f003 fdaa 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = TE_Pin;
 8001278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_GPIO_Init+0x238>)
 800128e:	f003 fd9d 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pins : PDPin PDPin */
GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001292:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_GPIO_Init+0x238>)
 80012ac:	f003 fd8e 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pins : PGPin PGPin */
GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_GPIO_Init+0x23c>)
 80012ca:	f003 fd7f 	bl	8004dcc <HAL_GPIO_Init>

/*Configure GPIO pin : PA0 */
GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_GPIO_Init+0x248>)
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <MX_GPIO_Init+0x234>)
 80012e2:	f003 fd73 	bl	8004dcc <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2006      	movs	r0, #6
 80012ec:	f002 ffce 	bl	800428c <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012f0:	2006      	movs	r0, #6
 80012f2:	f002 ffe7 	bl	80042c4 <HAL_NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021800 	.word	0x40021800
 8001314:	10120000 	.word	0x10120000
 8001318:	40020400 	.word	0x40020400
 800131c:	10110000 	.word	0x10110000

08001320 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C3_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C3_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C3_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C3_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C3_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C3_Init+0x74>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_I2C3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_I2C3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_I2C3_Init+0x74>)
 800135e:	f005 fd1d 	bl	8006d9c <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001368:	f001 f8e4 	bl	8002534 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C3_Init+0x74>)
 8001370:	f005 fe58 	bl	8007024 <HAL_I2CEx_ConfigAnalogFilter>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800137a:	f001 f8db 	bl	8002534 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_I2C3_Init+0x74>)
 8001382:	f005 fe8b 	bl	800709c <HAL_I2CEx_ConfigDigitalFilter>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800138c:	f001 f8d2 	bl	8002534 <Error_Handler>
  }

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000914 	.word	0x20000914
 8001398:	40005c00 	.word	0x40005c00
 800139c:	000186a0 	.word	0x000186a0

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_I2C_MspInit+0xc4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d14b      	bne.n	800145a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800140c:	2304      	movs	r3, #4
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4815      	ldr	r0, [pc, #84]	; (800146c <HAL_I2C_MspInit+0xcc>)
 8001418:	f003 fcd8 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142e:	2304      	movs	r3, #4
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_I2C_MspInit+0xd0>)
 800143a:	f003 fcc7 	bl	8004dcc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005c00 	.word	0x40005c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7b      	ldr	r2, [pc, #492]	; (8001680 <HAL_LTDC_MspInit+0x20c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f040 80f0 	bne.w	8001678 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a6:	6453      	str	r3, [r2, #68]	; 0x44
 80014a8:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a63      	ldr	r2, [pc, #396]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800156e:	230e      	movs	r3, #14
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4843      	ldr	r0, [pc, #268]	; (8001688 <HAL_LTDC_MspInit+0x214>)
 800157a:	f003 fc27 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800157e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001590:	230e      	movs	r3, #14
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <HAL_LTDC_MspInit+0x218>)
 800159c:	f003 fc16 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015a0:	2303      	movs	r3, #3
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015b0:	2309      	movs	r3, #9
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4835      	ldr	r0, [pc, #212]	; (8001690 <HAL_LTDC_MspInit+0x21c>)
 80015bc:	f003 fc06 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80015c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d2:	230e      	movs	r3, #14
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <HAL_LTDC_MspInit+0x21c>)
 80015de:	f003 fbf5 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80015e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f4:	230e      	movs	r3, #14
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <HAL_LTDC_MspInit+0x220>)
 8001600:	f003 fbe4 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001604:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001616:	230e      	movs	r3, #14
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	481d      	ldr	r0, [pc, #116]	; (8001698 <HAL_LTDC_MspInit+0x224>)
 8001622:	f003 fbd3 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001626:	2348      	movs	r3, #72	; 0x48
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001636:	230e      	movs	r3, #14
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <HAL_LTDC_MspInit+0x228>)
 8001642:	f003 fbc3 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001658:	2309      	movs	r3, #9
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <HAL_LTDC_MspInit+0x220>)
 8001664:	f003 fbb2 	bl	8004dcc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2105      	movs	r1, #5
 800166c:	2058      	movs	r0, #88	; 0x58
 800166e:	f002 fe0d 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001672:	2058      	movs	r0, #88	; 0x58
 8001674:	f002 fe26 	bl	80042c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40016800 	.word	0x40016800
 8001684:	40023800 	.word	0x40023800
 8001688:	40021400 	.word	0x40021400
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40021800 	.word	0x40021800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00

080016a0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	f5ad 3d03 	sub.w	sp, sp, #134144	; 0x20c00
 80016a6:	f5ad 7d54 	sub.w	sp, sp, #848	; 0x350
 80016aa:	af00      	add	r7, sp, #0
  FIL file;
  UINT br;
  uint32_t Tinf1;
  uint32_t Tinf2;
  uint32_t nn_inference_time;
  uint32_t tot_inference_time = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80016b2:	f502 7252 	add.w	r2, r2, #840	; 0x348
 80016b6:	6013      	str	r3, [r2, #0]
    // Specify classes
  const char* classes_folders[] = {"false", "true"};
 80016b8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80016bc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80016c0:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80016c4:	4ac1      	ldr	r2, [pc, #772]	; (80019cc <main+0x32c>)
 80016c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ca:	e883 0003 	stmia.w	r3, {r0, r1}
  char* csv_line[SERIES_LENGTH + 2];
  char* X_test_str[SERIES_LENGTH * CHANNELS];
  double X_test[SERIES_LENGTH * CHANNELS];
  float y_prob[2];
  int y_pred;
  int y_true = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80016d4:	f502 7250 	add.w	r2, r2, #832	; 0x340
 80016d8:	6013      	str	r3, [r2, #0]
  int sample = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80016e0:	f502 724f 	add.w	r2, r2, #828	; 0x33c
 80016e4:	6013      	str	r3, [r2, #0]
  int tn = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80016ec:	f502 724e 	add.w	r2, r2, #824	; 0x338
 80016f0:	6013      	str	r3, [r2, #0]
  int fp = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80016f8:	f502 724d 	add.w	r2, r2, #820	; 0x334
 80016fc:	6013      	str	r3, [r2, #0]
  int fn = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001704:	f502 724c 	add.w	r2, r2, #816	; 0x330
 8001708:	6013      	str	r3, [r2, #0]
  int tp = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001710:	f502 724b 	add.w	r2, r2, #812	; 0x32c
 8001714:	6013      	str	r3, [r2, #0]
  int done = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800171c:	f502 724a 	add.w	r2, r2, #808	; 0x328
 8001720:	6013      	str	r3, [r2, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

  // Pointer to the model
  ai_handle network = AI_HANDLE_NULL;
 8001722:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001726:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the data (tensor height, width, channels)
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800172e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001732:	f6a3 7304 	subw	r3, r3, #3844	; 0xf04
 8001736:	4aa6      	ldr	r2, [pc, #664]	; (80019d0 <main+0x330>)
 8001738:	461c      	mov	r4, r3
 800173a:	4615      	mov	r5, r2
 800173c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001740:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001744:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001748:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800174c:	f6a3 731c 	subw	r3, r3, #3868	; 0xf1c
 8001750:	4aa0      	ldr	r2, [pc, #640]	; (80019d4 <main+0x334>)
 8001752:	461c      	mov	r4, r3
 8001754:	4615      	mov	r5, r2
 8001756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800175a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175e:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001762:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001766:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 800176a:	4a9b      	ldr	r2, [pc, #620]	; (80019d8 <main+0x338>)
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001772:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 8001776:	2201      	movs	r2, #1
 8001778:	809a      	strh	r2, [r3, #4]
 800177a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800177e:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 8001782:	2201      	movs	r2, #1
 8001784:	80da      	strh	r2, [r3, #6]
 8001786:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800178a:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 800178e:	2201      	movs	r2, #1
 8001790:	811a      	strh	r2, [r3, #8]
 8001792:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001796:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 800179a:	4a90      	ldr	r2, [pc, #576]	; (80019dc <main+0x33c>)
 800179c:	60da      	str	r2, [r3, #12]
		  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800179e:	f010 fd29 	bl	80121f4 <ai_network_data_weights_get>
 80017a2:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80017a4:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017a8:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017b2:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017be:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017c2:	4a87      	ldr	r2, [pc, #540]	; (80019e0 <main+0x340>)
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017ca:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017ce:	2201      	movs	r2, #1
 80017d0:	839a      	strh	r2, [r3, #28]
 80017d2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017d6:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017da:	2201      	movs	r2, #1
 80017dc:	83da      	strh	r2, [r3, #30]
 80017de:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017e2:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017e6:	2201      	movs	r2, #1
 80017e8:	841a      	strh	r2, [r3, #32]
 80017ea:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017ee:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 80017f2:	f24e 3208 	movw	r2, #58120	; 0xe308
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
 80017f8:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80017fc:	f6a3 724c 	subw	r2, r3, #3916	; 0xf4c
 8001800:	f507 531d 	add.w	r3, r7, #10048	; 0x2740
 8001804:	f103 0310 	add.w	r3, r3, #16
 8001808:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800180c:	6293      	str	r3, [r2, #40]	; 0x28
 800180e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001812:	f6a3 734c 	subw	r3, r3, #3916	; 0xf4c
 8001816:	2200      	movs	r2, #0
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_NETWORK_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to data buffers
  ai_input[0].n_batches = 1;
 800181a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800181e:	f6a3 7304 	subw	r3, r3, #3844	; 0xf04
 8001822:	2201      	movs	r2, #1
 8001824:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001826:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800182a:	f6a3 7204 	subw	r2, r3, #3844	; 0xf04
 800182e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001832:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001836:	6113      	str	r3, [r2, #16]
  ai_output[0].n_batches = 1;
 8001838:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800183c:	f6a3 731c 	subw	r3, r3, #3868	; 0xf1c
 8001840:	2201      	movs	r2, #1
 8001842:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001844:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001848:	f6a3 721c 	subw	r2, r3, #3868	; 0xf1c
 800184c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001850:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001854:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001856:	f002 fbfb 	bl	8004050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185a:	f000 fdb1 	bl	80023c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185e:	f7ff fc39 	bl	80010d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8001862:	f7ff fbd9 	bl	8001018 <MX_CRC_Init>
  MX_SPI5_Init();
 8001866:	f000 fe6d 	bl	8002544 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 800186a:	f001 f8b3 	bl	80029d4 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800186e:	f010 f813 	bl	8011898 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001872:	f009 fd77 	bl	800b364 <MX_FATFS_Init>
  MX_I2C3_Init();
 8001876:	f7ff fd53 	bl	8001320 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // Start
  sprintf(buf, "LCD config");
 800187a:	495a      	ldr	r1, [pc, #360]	; (80019e4 <main+0x344>)
 800187c:	485a      	ldr	r0, [pc, #360]	; (80019e8 <main+0x348>)
 800187e:	f014 f86f 	bl	8015960 <siprintf>
  LCD_Config();
 8001882:	f000 fe1f 	bl	80024c4 <LCD_Config>
  sprintf(buf, "LCD config OK");
 8001886:	4959      	ldr	r1, [pc, #356]	; (80019ec <main+0x34c>)
 8001888:	4857      	ldr	r0, [pc, #348]	; (80019e8 <main+0x348>)
 800188a:	f014 f869 	bl	8015960 <siprintf>
  BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"STM32F429I-DISC1");
 800188e:	4958      	ldr	r1, [pc, #352]	; (80019f0 <main+0x350>)
 8001890:	2000      	movs	r0, #0
 8001892:	f001 ffa3 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"Infobox");
 8001896:	4957      	ldr	r1, [pc, #348]	; (80019f4 <main+0x354>)
 8001898:	2001      	movs	r0, #1
 800189a:	f001 ff9f 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"From USB Flash Disk");
 800189e:	4956      	ldr	r1, [pc, #344]	; (80019f8 <main+0x358>)
 80018a0:	2002      	movs	r0, #2
 80018a2:	f001 ff9b 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(2000);
 80018a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018aa:	f002 fc13 	bl	80040d4 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80018ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018b2:	f001 fe05 	bl	80034c0 <BSP_LCD_Clear>

  // Create instance of neural network
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80018b6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80018ba:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f010 fc31 	bl	8012128 <ai_network_create>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80018cc:	f502 723c 	add.w	r2, r2, #752	; 0x2f0
 80018d0:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE)
 80018d2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80018d6:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <main+0x24a>
  {
	  sprintf(buf, "Error: could not create NN instance");
 80018e0:	4946      	ldr	r1, [pc, #280]	; (80019fc <main+0x35c>)
 80018e2:	4841      	ldr	r0, [pc, #260]	; (80019e8 <main+0x348>)
 80018e4:	f014 f83c 	bl	8015960 <siprintf>
	  while(1);
 80018e8:	e7fe      	b.n	80018e8 <main+0x248>
  }

  // Initialize neural network
  if (!ai_network_init(network, &ai_params))
 80018ea:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80018ee:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80018f8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f010 fc28 	bl	8012154 <ai_network_init>
 8001904:	4603      	mov	r3, r0
 8001906:	f083 0301 	eor.w	r3, r3, #1
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <main+0x27a>
  {
	  sprintf(buf, "Error: could not initialize NN");
 8001910:	493b      	ldr	r1, [pc, #236]	; (8001a00 <main+0x360>)
 8001912:	4835      	ldr	r0, [pc, #212]	; (80019e8 <main+0x348>)
 8001914:	f014 f824 	bl	8015960 <siprintf>
	  while(1);
 8001918:	e7fe      	b.n	8001918 <main+0x278>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
	MX_USB_HOST_Process();
 800191a:	f00f ffe3 	bl	80118e4 <MX_USB_HOST_Process>

	/* USER CODE BEGIN 3 */
	// Handler of application state
	switch(Appli_state){
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <main+0x364>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b03      	cmp	r3, #3
 8001924:	f000 84dd 	beq.w	80022e2 <main+0xc42>
 8001928:	2b03      	cmp	r3, #3
 800192a:	f300 852f 	bgt.w	800238c <main+0xcec>
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 84ce 	beq.w	80022d0 <main+0xc30>
 8001934:	2b02      	cmp	r3, #2
 8001936:	f040 8529 	bne.w	800238c <main+0xcec>
		case APPLICATION_READY:
			sprintf(buf, "READY");
 800193a:	4933      	ldr	r1, [pc, #204]	; (8001a08 <main+0x368>)
 800193c:	482a      	ldr	r0, [pc, #168]	; (80019e8 <main+0x348>)
 800193e:	f014 f80f 	bl	8015960 <siprintf>

			// Fill input buffer if there are still series to classify
			if (y_true<2)
 8001942:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001946:	f503 7350 	add.w	r3, r3, #832	; 0x340
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	f300 83cb 	bgt.w	80020e8 <main+0xa48>
			{
				sprintf(buf, "Test: %d/%d    ", sample, N_SAMPLES);
 8001952:	f240 1331 	movw	r3, #305	; 0x131
 8001956:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800195a:	f502 724f 	add.w	r2, r2, #828	; 0x33c
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	492a      	ldr	r1, [pc, #168]	; (8001a0c <main+0x36c>)
 8001962:	4821      	ldr	r0, [pc, #132]	; (80019e8 <main+0x348>)
 8001964:	f013 fffc 	bl	8015960 <siprintf>
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)buf);
 8001968:	491f      	ldr	r1, [pc, #124]	; (80019e8 <main+0x348>)
 800196a:	2000      	movs	r0, #0
 800196c:	f001 ff36 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
        // For all the folders
				for (int folders=0;folders<2;folders++)
 8001970:	2300      	movs	r3, #0
 8001972:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001976:	f502 7249 	add.w	r2, r2, #804	; 0x324
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e394      	b.n	80020a8 <main+0xa08>
				{
					sprintf(folder,"/infobox/%s", classes_folders[folders]);
 800197e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001982:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001986:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800198a:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800198e:	f502 7249 	add.w	r2, r2, #804	; 0x324
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	461a      	mov	r2, r3
 800199a:	491d      	ldr	r1, [pc, #116]	; (8001a10 <main+0x370>)
 800199c:	481d      	ldr	r0, [pc, #116]	; (8001a14 <main+0x374>)
 800199e:	f013 ffdf 	bl	8015960 <siprintf>
          // If folder found, check for file, open it, read it, and close it
					if (f_chdir(folder)==FR_OK)
 80019a2:	481c      	ldr	r0, [pc, #112]	; (8001a14 <main+0x374>)
 80019a4:	f00f fcef 	bl	8011386 <f_chdir>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8366 	bne.w	800207c <main+0x9dc>
					{
						res = f_findfirst(&dir, &fno, "","*.csv");
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <main+0x378>)
 80019b2:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <main+0x37c>)
 80019b4:	491a      	ldr	r1, [pc, #104]	; (8001a20 <main+0x380>)
 80019b6:	481b      	ldr	r0, [pc, #108]	; (8001a24 <main+0x384>)
 80019b8:	f00f fe2d 	bl	8011616 <f_findfirst>
 80019bc:	4603      	mov	r3, r0
 80019be:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80019c2:	f202 324f 	addw	r2, r2, #847	; 0x34f
 80019c6:	7013      	strb	r3, [r2, #0]
						while ((res == FR_OK) && (fno.fname[0]))
 80019c8:	e33f      	b.n	800204a <main+0x9aa>
 80019ca:	bf00      	nop
 80019cc:	0801989c 	.word	0x0801989c
 80019d0:	080198a4 	.word	0x080198a4
 80019d4:	080198bc 	.word	0x080198bc
 80019d8:	40040440 	.word	0x40040440
 80019dc:	000701f0 	.word	0x000701f0
 80019e0:	00040440 	.word	0x00040440
 80019e4:	08019690 	.word	0x08019690
 80019e8:	1000015c 	.word	0x1000015c
 80019ec:	0801969c 	.word	0x0801969c
 80019f0:	080196ac 	.word	0x080196ac
 80019f4:	080196c0 	.word	0x080196c0
 80019f8:	080196c8 	.word	0x080196c8
 80019fc:	080196dc 	.word	0x080196dc
 8001a00:	08019700 	.word	0x08019700
 8001a04:	20001594 	.word	0x20001594
 8001a08:	08019720 	.word	0x08019720
 8001a0c:	08019728 	.word	0x08019728
 8001a10:	08019738 	.word	0x08019738
 8001a14:	10000150 	.word	0x10000150
 8001a18:	08019744 	.word	0x08019744
 8001a1c:	0801974c 	.word	0x0801974c
 8001a20:	10000038 	.word	0x10000038
 8001a24:	10000000 	.word	0x10000000
						{
							sprintf(buf, "Open file %s", fno.fname);
 8001a28:	4ace      	ldr	r2, [pc, #824]	; (8001d64 <main+0x6c4>)
 8001a2a:	49cf      	ldr	r1, [pc, #828]	; (8001d68 <main+0x6c8>)
 8001a2c:	48cf      	ldr	r0, [pc, #828]	; (8001d6c <main+0x6cc>)
 8001a2e:	f013 ff97 	bl	8015960 <siprintf>
							if (f_open(&file, fno.fname, FA_READ) != FR_OK)
 8001a32:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001a36:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	49c9      	ldr	r1, [pc, #804]	; (8001d64 <main+0x6c4>)
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f00f f8fc 	bl	8010c3c <f_open>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <main+0x3b2>
							{
								sprintf(buf, "Open file error");
 8001a4a:	49c9      	ldr	r1, [pc, #804]	; (8001d70 <main+0x6d0>)
 8001a4c:	48c7      	ldr	r0, [pc, #796]	; (8001d6c <main+0x6cc>)
 8001a4e:	f013 ff87 	bl	8015960 <siprintf>
							}
							f_read(&file, &csv_full, BTR, &br);
 8001a52:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001a56:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001a5a:	f507 31c6 	add.w	r1, r7, #101376	; 0x18c00
 8001a5e:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8001a62:	3904      	subs	r1, #4
 8001a64:	f507 3003 	add.w	r0, r7, #134144	; 0x20c00
 8001a68:	f100 00c0 	add.w	r0, r0, #192	; 0xc0
 8001a6c:	f248 0267 	movw	r2, #32871	; 0x8067
 8001a70:	f00f faa2 	bl	8010fb8 <f_read>
							if (br!=BTR)
 8001a74:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001a78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8001a7c:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f248 0267 	movw	r2, #32871	; 0x8067
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d003      	beq.n	8001a92 <main+0x3f2>
							{
								sprintf(buf, "Read file error");
 8001a8a:	49ba      	ldr	r1, [pc, #744]	; (8001d74 <main+0x6d4>)
 8001a8c:	48b7      	ldr	r0, [pc, #732]	; (8001d6c <main+0x6cc>)
 8001a8e:	f013 ff67 	bl	8015960 <siprintf>
							}
							f_close (&file);
 8001a92:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001a96:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00f fc49 	bl	8011332 <f_close>
              // Divide the file read into tokens, first lines, then values
							int j = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001aa6:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8001aaa:	6013      	str	r3, [r2, #0]
							char* token = strtok(csv_full, "\r\n");
 8001aac:	f507 33c6 	add.w	r3, r7, #101376	; 0x18c00
 8001ab0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001ab4:	3b04      	subs	r3, #4
 8001ab6:	49b0      	ldr	r1, [pc, #704]	; (8001d78 <main+0x6d8>)
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f014 fda5 	bl	8016608 <strtok>
 8001abe:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ac2:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001ac6:	6018      	str	r0, [r3, #0]
							while( token != NULL )
 8001ac8:	e025      	b.n	8001b16 <main+0x476>
							{
								csv_line[j]=token;
 8001aca:	f507 33bf 	add.w	r3, r7, #97792	; 0x17e00
 8001ace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001ad2:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8001ad6:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001ada:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	f507 3103 	add.w	r1, r7, #134144	; 0x20c00
 8001ae4:	f501 7147 	add.w	r1, r1, #796	; 0x31c
 8001ae8:	6809      	ldr	r1, [r1, #0]
 8001aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
								j ++;
 8001aee:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001af2:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3301      	adds	r3, #1
 8001afa:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001afe:	f502 7248 	add.w	r2, r2, #800	; 0x320
 8001b02:	6013      	str	r3, [r2, #0]
								token = strtok(NULL, "\r\n");
 8001b04:	499c      	ldr	r1, [pc, #624]	; (8001d78 <main+0x6d8>)
 8001b06:	2000      	movs	r0, #0
 8001b08:	f014 fd7e 	bl	8016608 <strtok>
 8001b0c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001b10:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001b14:	6018      	str	r0, [r3, #0]
							while( token != NULL )
 8001b16:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001b1a:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1d2      	bne.n	8001aca <main+0x42a>
							}
							int k = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001b2a:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8001b2e:	6013      	str	r3, [r2, #0]
							for (int i = 1;i<SERIES_LENGTH + 1;i++)
 8001b30:	2301      	movs	r3, #1
 8001b32:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001b36:	f502 7245 	add.w	r2, r2, #788	; 0x314
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e04e      	b.n	8001bdc <main+0x53c>
							{
								char* token2 = strtok(csv_line[i], ",");
 8001b3e:	f507 33bf 	add.w	r3, r7, #97792	; 0x17e00
 8001b42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b46:	f2a3 53cc 	subw	r3, r3, #1484	; 0x5cc
 8001b4a:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001b4e:	f502 7245 	add.w	r2, r2, #788	; 0x314
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	4988      	ldr	r1, [pc, #544]	; (8001d7c <main+0x6dc>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f014 fd54 	bl	8016608 <strtok>
 8001b60:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001b64:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001b68:	6018      	str	r0, [r3, #0]
								while( token2 != NULL )
 8001b6a:	e025      	b.n	8001bb8 <main+0x518>
								{
									X_test_str[k]=token2;
 8001b6c:	f507 33af 	add.w	r3, r7, #89600	; 0x15e00
 8001b70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001b74:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 8001b78:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001b7c:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	f507 3103 	add.w	r1, r7, #134144	; 0x20c00
 8001b86:	f501 7144 	add.w	r1, r1, #784	; 0x310
 8001b8a:	6809      	ldr	r1, [r1, #0]
 8001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									k ++;
 8001b90:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001b94:	f503 7346 	add.w	r3, r3, #792	; 0x318
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001ba0:	f502 7246 	add.w	r2, r2, #792	; 0x318
 8001ba4:	6013      	str	r3, [r2, #0]
									token2 = strtok(NULL, ",");
 8001ba6:	4975      	ldr	r1, [pc, #468]	; (8001d7c <main+0x6dc>)
 8001ba8:	2000      	movs	r0, #0
 8001baa:	f014 fd2d 	bl	8016608 <strtok>
 8001bae:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001bb2:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001bb6:	6018      	str	r0, [r3, #0]
								while( token2 != NULL )
 8001bb8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001bbc:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1d2      	bne.n	8001b6c <main+0x4cc>
							for (int i = 1;i<SERIES_LENGTH + 1;i++)
 8001bc6:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001bca:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001bd6:	f502 7245 	add.w	r2, r2, #788	; 0x314
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001be0:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001bea:	dda8      	ble.n	8001b3e <main+0x49e>
								}
							}
              // Convert values to double
							for (int i = 0;i<SERIES_LENGTH*CHANNELS;i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001bf2:	f502 7243 	add.w	r2, r2, #780	; 0x30c
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e02e      	b.n	8001c58 <main+0x5b8>
							{
								X_test[i] = strtod(X_test_str[i], NULL);
 8001bfa:	f507 33af 	add.w	r3, r7, #89600	; 0x15e00
 8001bfe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c02:	f6a3 334c 	subw	r3, r3, #2892	; 0xb4c
 8001c06:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001c0a:	f502 7243 	add.w	r2, r2, #780	; 0x30c
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f014 fcea 	bl	80165f0 <strtod>
 8001c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c20:	eef0 7a60 	vmov.f32	s15, s1
 8001c24:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001c28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c2c:	f5a3 62ca 	sub.w	r2, r3, #1616	; 0x650
 8001c30:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001c34:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	ed83 7b00 	vstr	d7, [r3]
							for (int i = 0;i<SERIES_LENGTH*CHANNELS;i++)
 8001c42:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001c46:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001c52:	f502 7243 	add.w	r2, r2, #780	; 0x30c
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001c5c:	f503 7343 	add.w	r3, r3, #780	; 0x30c
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001c66:	dbc8      	blt.n	8001bfa <main+0x55a>
							}
              // Fill input buffer for neural network
							for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001c6e:	f502 7242 	add.w	r2, r2, #776	; 0x308
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	e028      	b.n	8001cc8 <main+0x628>
							{
								((ai_float *)in_data)[i] = (ai_float)X_test[i];
 8001c76:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001c7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001c7e:	f5a3 62ca 	sub.w	r2, r3, #1616	; 0x650
 8001c82:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001c86:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c94:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001c98:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001ca4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8001ca8:	189c      	adds	r4, r3, r2
 8001caa:	f7fe ffad 	bl	8000c08 <__aeabi_d2f>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6023      	str	r3, [r4, #0]
							for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001cb2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001cb6:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001cc2:	f502 7242 	add.w	r2, r2, #776	; 0x308
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ccc:	f503 7342 	add.w	r3, r3, #776	; 0x308
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001cd6:	d3ce      	bcc.n	8001c76 <main+0x5d6>
							}

							// Perform inference
							Tinf1 = HAL_GetTick();
 8001cd8:	f002 f9f0 	bl	80040bc <HAL_GetTick>
 8001cdc:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ce0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001ce4:	6018      	str	r0, [r3, #0]
							nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001ce6:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001cea:	f6a3 63ec 	subw	r3, r3, #3820	; 0xeec
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	f507 7254 	add.w	r2, r7, #848	; 0x350
 8001cf4:	f5a2 7247 	sub.w	r2, r2, #796	; 0x31c
 8001cf8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001cfc:	f5a3 7341 	sub.w	r3, r3, #772	; 0x304
 8001d00:	4619      	mov	r1, r3
 8001d02:	f010 fa66 	bl	80121d2 <ai_network_run>
 8001d06:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d0a:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001d0e:	6018      	str	r0, [r3, #0]
							if (nbatch != 1)
 8001d10:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d14:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d003      	beq.n	8001d26 <main+0x686>
							{
								sprintf(buf, "Error: could not run inference");
 8001d1e:	4918      	ldr	r1, [pc, #96]	; (8001d80 <main+0x6e0>)
 8001d20:	4812      	ldr	r0, [pc, #72]	; (8001d6c <main+0x6cc>)
 8001d22:	f013 fe1d 	bl	8015960 <siprintf>
							}
							Tinf2 = HAL_GetTick();
 8001d26:	f002 f9c9 	bl	80040bc <HAL_GetTick>
 8001d2a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d2e:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001d32:	6018      	str	r0, [r3, #0]
              // Compute inference time
							nn_inference_time = ((Tinf2>Tinf1)?(Tinf2-Tinf1):((1<<24)-Tinf1+Tinf2));
 8001d34:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d38:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d42:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d91b      	bls.n	8001d84 <main+0x6e4>
 8001d4c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d50:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d5a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	e01c      	b.n	8001d9e <main+0x6fe>
 8001d64:	1000004e 	.word	0x1000004e
 8001d68:	08019750 	.word	0x08019750
 8001d6c:	1000015c 	.word	0x1000015c
 8001d70:	08019760 	.word	0x08019760
 8001d74:	08019770 	.word	0x08019770
 8001d78:	08019780 	.word	0x08019780
 8001d7c:	08019784 	.word	0x08019784
 8001d80:	08019788 	.word	0x08019788
 8001d84:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d88:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001d92:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001d9e:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001da2:	f502 723d 	add.w	r2, r2, #756	; 0x2f4
 8001da6:	6013      	str	r3, [r2, #0]
							tot_inference_time = tot_inference_time + nn_inference_time;
 8001da8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001dac:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001db6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001dc2:	f502 7252 	add.w	r2, r2, #840	; 0x348
 8001dc6:	6013      	str	r3, [r2, #0]

							// Read output of neural network
							y_prob[0] = ((float *)out_data)[0];
 8001dc8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8001dcc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001dd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001dda:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8001dde:	601a      	str	r2, [r3, #0]
							y_prob[1] = ((float *)out_data)[1];
 8001de0:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8001de4:	f6a3 63e8 	subw	r3, r3, #3816	; 0xee8
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001dee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001df2:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8001df6:	605a      	str	r2, [r3, #4]

							// Make prediction
							if (y_prob[0] > y_prob[1])
 8001df8:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001dfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e00:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	f507 3387 	add.w	r3, r7, #69120	; 0x10e00
 8001e0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001e10:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8001e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e20:	dd06      	ble.n	8001e30 <main+0x790>
							{
								y_pred = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001e28:	f502 7251 	add.w	r2, r2, #836	; 0x344
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e005      	b.n	8001e3c <main+0x79c>
							}
							else
							{
								y_pred = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001e36:	f502 7251 	add.w	r2, r2, #836	; 0x344
 8001e3a:	6013      	str	r3, [r2, #0]
							}

							// Count tn, fp, fn, tp
							if ((y_pred == y_true) && (y_true == 0))
 8001e3c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e40:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e4a:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d112      	bne.n	8001e7a <main+0x7da>
 8001e54:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e58:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10b      	bne.n	8001e7a <main+0x7da>
							{
								tn ++;
 8001e62:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e66:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001e72:	f502 724e 	add.w	r2, r2, #824	; 0x338
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e048      	b.n	8001f0c <main+0x86c>
							}
							else if ((y_pred == y_true) && (y_true == 1))
 8001e7a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e7e:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e88:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d112      	bne.n	8001eb8 <main+0x818>
 8001e92:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001e96:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d10b      	bne.n	8001eb8 <main+0x818>
							{
								tp ++;
 8001ea0:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ea4:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001eb0:	f502 724b 	add.w	r2, r2, #812	; 0x32c
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e029      	b.n	8001f0c <main+0x86c>
							}
							else if ((y_pred != y_true) && (y_true == 0))
 8001eb8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ebc:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ec6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d012      	beq.n	8001ef6 <main+0x856>
 8001ed0:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ed4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <main+0x856>
							{
								fp ++;
 8001ede:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001ee2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001eee:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e00a      	b.n	8001f0c <main+0x86c>
							}
							else
							{
								fn ++;
 8001ef6:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001efa:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3301      	adds	r3, #1
 8001f02:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001f06:	f502 724c 	add.w	r2, r2, #816	; 0x330
 8001f0a:	6013      	str	r3, [r2, #0]
							}

							// Print metrics and inference time (milliseconds)
							sample ++;
 8001f0c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f10:	f503 734f 	add.w	r3, r3, #828	; 0x33c
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001f1c:	f502 724f 	add.w	r2, r2, #828	; 0x33c
 8001f20:	6013      	str	r3, [r2, #0]
							sprintf(buf, "Test: %d/%d    ", sample, N_SAMPLES);
 8001f22:	f240 1331 	movw	r3, #305	; 0x131
 8001f26:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8001f2a:	f502 724f 	add.w	r2, r2, #828	; 0x33c
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	4962      	ldr	r1, [pc, #392]	; (80020bc <main+0xa1c>)
 8001f32:	4863      	ldr	r0, [pc, #396]	; (80020c0 <main+0xa20>)
 8001f34:	f013 fd14 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(0,(uint8_t*)buf);
 8001f38:	4961      	ldr	r1, [pc, #388]	; (80020c0 <main+0xa20>)
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f001 fc4e 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "Accuracy: %f", (float)(tn + tp)/(float)(tn + tp + fn + fp));
 8001f40:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f4e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f62:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f6c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	441a      	add	r2, r3
 8001f74:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f78:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001f84:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	ee07 3a90 	vmov	s15, r3
 8001f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f98:	ee16 0a90 	vmov	r0, s13
 8001f9c:	f7fe fae4 	bl	8000568 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4947      	ldr	r1, [pc, #284]	; (80020c4 <main+0xa24>)
 8001fa6:	4846      	ldr	r0, [pc, #280]	; (80020c0 <main+0xa20>)
 8001fa8:	f013 fcda 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(2,(uint8_t*)buf);
 8001fac:	4944      	ldr	r1, [pc, #272]	; (80020c0 <main+0xa20>)
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f001 fc14 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "Inf. time: %ldms", nn_inference_time);
 8001fb4:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001fb8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4942      	ldr	r1, [pc, #264]	; (80020c8 <main+0xa28>)
 8001fc0:	483f      	ldr	r0, [pc, #252]	; (80020c0 <main+0xa20>)
 8001fc2:	f013 fccd 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buf);
 8001fc6:	493e      	ldr	r1, [pc, #248]	; (80020c0 <main+0xa20>)
 8001fc8:	2004      	movs	r0, #4
 8001fca:	f001 fc07 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "True negatives: %d", tn);
 8001fce:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001fd2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	493c      	ldr	r1, [pc, #240]	; (80020cc <main+0xa2c>)
 8001fda:	4839      	ldr	r0, [pc, #228]	; (80020c0 <main+0xa20>)
 8001fdc:	f013 fcc0 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(6,(uint8_t*)buf);
 8001fe0:	4937      	ldr	r1, [pc, #220]	; (80020c0 <main+0xa20>)
 8001fe2:	2006      	movs	r0, #6
 8001fe4:	f001 fbfa 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "False positives: %d", fp);
 8001fe8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8001fec:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4937      	ldr	r1, [pc, #220]	; (80020d0 <main+0xa30>)
 8001ff4:	4832      	ldr	r0, [pc, #200]	; (80020c0 <main+0xa20>)
 8001ff6:	f013 fcb3 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(7,(uint8_t*)buf);
 8001ffa:	4931      	ldr	r1, [pc, #196]	; (80020c0 <main+0xa20>)
 8001ffc:	2007      	movs	r0, #7
 8001ffe:	f001 fbed 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "False negatives: %d", fn);
 8002002:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002006:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4931      	ldr	r1, [pc, #196]	; (80020d4 <main+0xa34>)
 800200e:	482c      	ldr	r0, [pc, #176]	; (80020c0 <main+0xa20>)
 8002010:	f013 fca6 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(8,(uint8_t*)buf);
 8002014:	492a      	ldr	r1, [pc, #168]	; (80020c0 <main+0xa20>)
 8002016:	2008      	movs	r0, #8
 8002018:	f001 fbe0 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "True positives: %d", tp);
 800201c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002020:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	492c      	ldr	r1, [pc, #176]	; (80020d8 <main+0xa38>)
 8002028:	4825      	ldr	r0, [pc, #148]	; (80020c0 <main+0xa20>)
 800202a:	f013 fc99 	bl	8015960 <siprintf>
							BSP_LCD_DisplayStringAtLine(9,(uint8_t*)buf);
 800202e:	4924      	ldr	r1, [pc, #144]	; (80020c0 <main+0xa20>)
 8002030:	2009      	movs	r0, #9
 8002032:	f001 fbd3 	bl	80037dc <BSP_LCD_DisplayStringAtLine>

							res = f_findnext(&dir,&fno);
 8002036:	4929      	ldr	r1, [pc, #164]	; (80020dc <main+0xa3c>)
 8002038:	4829      	ldr	r0, [pc, #164]	; (80020e0 <main+0xa40>)
 800203a:	f00f fac4 	bl	80115c6 <f_findnext>
 800203e:	4603      	mov	r3, r0
 8002040:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8002044:	f202 324f 	addw	r2, r2, #847	; 0x34f
 8002048:	7013      	strb	r3, [r2, #0]
						while ((res == FR_OK) && (fno.fname[0]))
 800204a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800204e:	f203 334f 	addw	r3, r3, #847	; 0x34f
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <main+0x9c2>
 8002058:	4b20      	ldr	r3, [pc, #128]	; (80020dc <main+0xa3c>)
 800205a:	7d9b      	ldrb	r3, [r3, #22]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f47f ace3 	bne.w	8001a28 <main+0x388>
						}
						f_closedir(&dir);
 8002062:	481f      	ldr	r0, [pc, #124]	; (80020e0 <main+0xa40>)
 8002064:	f00f fa4c 	bl	8011500 <f_closedir>
						sprintf(buf, "Finished %d",res);
 8002068:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800206c:	f203 334f 	addw	r3, r3, #847	; 0x34f
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	491b      	ldr	r1, [pc, #108]	; (80020e4 <main+0xa44>)
 8002076:	4812      	ldr	r0, [pc, #72]	; (80020c0 <main+0xa20>)
 8002078:	f013 fc72 	bl	8015960 <siprintf>
					}
					y_true ++;
 800207c:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002080:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800208c:	f502 7250 	add.w	r2, r2, #832	; 0x340
 8002090:	6013      	str	r3, [r2, #0]
				for (int folders=0;folders<2;folders++)
 8002092:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002096:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80020a2:	f502 7249 	add.w	r2, r2, #804	; 0x324
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80020ac:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	f77f ac63 	ble.w	800197e <main+0x2de>
				sprintf(buf, "Recall: %f", (float)tp/(float)(tp+fn));
				BSP_LCD_DisplayStringAtLine(12,(uint8_t*)buf);
				sprintf(buf, "F1-score: %f", 2*(float)tp/(float)(tp+fp)*(float)tp/(float)(tp+fn)/((float)tp/(float)(tp+fp)+(float)tp/(float)(tp+fn)));
				BSP_LCD_DisplayStringAtLine(13,(uint8_t*)buf);
			}
		break;
 80020b8:	e16c      	b.n	8002394 <main+0xcf4>
 80020ba:	bf00      	nop
 80020bc:	08019728 	.word	0x08019728
 80020c0:	1000015c 	.word	0x1000015c
 80020c4:	080197a8 	.word	0x080197a8
 80020c8:	080197b8 	.word	0x080197b8
 80020cc:	080197cc 	.word	0x080197cc
 80020d0:	080197e0 	.word	0x080197e0
 80020d4:	080197f4 	.word	0x080197f4
 80020d8:	08019808 	.word	0x08019808
 80020dc:	10000038 	.word	0x10000038
 80020e0:	10000000 	.word	0x10000000
 80020e4:	0801981c 	.word	0x0801981c
				done = 1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80020ee:	f502 724a 	add.w	r2, r2, #808	; 0x328
 80020f2:	6013      	str	r3, [r2, #0]
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Test done      ");
 80020f4:	49a8      	ldr	r1, [pc, #672]	; (8002398 <main+0xcf8>)
 80020f6:	2000      	movs	r0, #0
 80020f8:	f001 fb70 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Tot. time: %.3fs", (float)(tot_inference_time)/1000);
 80020fc:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002100:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210e:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800239c <main+0xcfc>
 8002112:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002116:	ee16 0a90 	vmov	r0, s13
 800211a:	f7fe fa25 	bl	8000568 <__aeabi_f2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	499f      	ldr	r1, [pc, #636]	; (80023a0 <main+0xd00>)
 8002124:	489f      	ldr	r0, [pc, #636]	; (80023a4 <main+0xd04>)
 8002126:	f013 fc1b 	bl	8015960 <siprintf>
				BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buf);
 800212a:	499e      	ldr	r1, [pc, #632]	; (80023a4 <main+0xd04>)
 800212c:	2004      	movs	r0, #4
 800212e:	f001 fb55 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Precision: %f", (float)tp/(float)(tp+fp));
 8002132:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002136:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002144:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002148:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002152:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4413      	add	r3, r2
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002162:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002166:	ee16 0a90 	vmov	r0, s13
 800216a:	f7fe f9fd 	bl	8000568 <__aeabi_f2d>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	498d      	ldr	r1, [pc, #564]	; (80023a8 <main+0xd08>)
 8002174:	488b      	ldr	r0, [pc, #556]	; (80023a4 <main+0xd04>)
 8002176:	f013 fbf3 	bl	8015960 <siprintf>
				BSP_LCD_DisplayStringAtLine(11,(uint8_t*)buf);
 800217a:	498a      	ldr	r1, [pc, #552]	; (80023a4 <main+0xd04>)
 800217c:	200b      	movs	r0, #11
 800217e:	f001 fb2d 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Recall: %f", (float)tp/(float)(tp+fn));
 8002182:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002186:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002194:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002198:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80021a2:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021b6:	ee16 0a90 	vmov	r0, s13
 80021ba:	f7fe f9d5 	bl	8000568 <__aeabi_f2d>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	497a      	ldr	r1, [pc, #488]	; (80023ac <main+0xd0c>)
 80021c4:	4877      	ldr	r0, [pc, #476]	; (80023a4 <main+0xd04>)
 80021c6:	f013 fbcb 	bl	8015960 <siprintf>
				BSP_LCD_DisplayStringAtLine(12,(uint8_t*)buf);
 80021ca:	4976      	ldr	r1, [pc, #472]	; (80023a4 <main+0xd04>)
 80021cc:	200c      	movs	r0, #12
 80021ce:	f001 fb05 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "F1-score: %f", 2*(float)tp/(float)(tp+fp)*(float)tp/(float)(tp+fn)/((float)tp/(float)(tp+fp)+(float)tp/(float)(tp+fn)));
 80021d2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80021d6:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021e8:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80021ec:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80021f6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800220a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800220e:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	ee07 3a90 	vmov	s15, r3
 8002218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002220:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002224:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800222e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4413      	add	r3, r2
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002242:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002246:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	ee07 3a90 	vmov	s15, r3
 8002250:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002254:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002258:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002262:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4413      	add	r3, r2
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002272:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002276:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800227a:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8002288:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 800228c:	f503 734b 	add.w	r3, r3, #812	; 0x32c
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002296:	f503 734c 	add.w	r3, r3, #816	; 0x330
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	ee07 3a90 	vmov	s15, r3
 80022a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80022a6:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80022aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022b2:	ee16 0a90 	vmov	r0, s13
 80022b6:	f7fe f957 	bl	8000568 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	493c      	ldr	r1, [pc, #240]	; (80023b0 <main+0xd10>)
 80022c0:	4838      	ldr	r0, [pc, #224]	; (80023a4 <main+0xd04>)
 80022c2:	f013 fb4d 	bl	8015960 <siprintf>
				BSP_LCD_DisplayStringAtLine(13,(uint8_t*)buf);
 80022c6:	4937      	ldr	r1, [pc, #220]	; (80023a4 <main+0xd04>)
 80022c8:	200d      	movs	r0, #13
 80022ca:	f001 fa87 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
		break;
 80022ce:	e061      	b.n	8002394 <main+0xcf4>
		case APPLICATION_IDLE:
			sprintf(buf, "IDLE");
 80022d0:	4938      	ldr	r1, [pc, #224]	; (80023b4 <main+0xd14>)
 80022d2:	4834      	ldr	r0, [pc, #208]	; (80023a4 <main+0xd04>)
 80022d4:	f013 fb44 	bl	8015960 <siprintf>
      // Application is ready but there's no USB connected
			BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Waiting for USB");
 80022d8:	4937      	ldr	r1, [pc, #220]	; (80023b8 <main+0xd18>)
 80022da:	2000      	movs	r0, #0
 80022dc:	f001 fa7e 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
		break;
 80022e0:	e058      	b.n	8002394 <main+0xcf4>
		case APPLICATION_DISCONNECT:
			sprintf(buf, "DISCONNECT");
 80022e2:	4936      	ldr	r1, [pc, #216]	; (80023bc <main+0xd1c>)
 80022e4:	482f      	ldr	r0, [pc, #188]	; (80023a4 <main+0xd04>)
 80022e6:	f013 fb3b 	bl	8015960 <siprintf>

			// If test is not finished while USB is disconnected, reset variables
			if (done == 0)
 80022ea:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 80022ee:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d14c      	bne.n	8002392 <main+0xcf2>
			{
				y_true = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 80022fe:	f502 7250 	add.w	r2, r2, #832	; 0x340
 8002302:	6013      	str	r3, [r2, #0]
				sample = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800230a:	f502 724f 	add.w	r2, r2, #828	; 0x33c
 800230e:	6013      	str	r3, [r2, #0]
				tn = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8002316:	f502 724e 	add.w	r2, r2, #824	; 0x338
 800231a:	6013      	str	r3, [r2, #0]
				fp = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8002322:	f502 724d 	add.w	r2, r2, #820	; 0x334
 8002326:	6013      	str	r3, [r2, #0]
				fn = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800232e:	f502 724c 	add.w	r2, r2, #816	; 0x330
 8002332:	6013      	str	r3, [r2, #0]
				tp = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800233a:	f502 724b 	add.w	r2, r2, #812	; 0x32c
 800233e:	6013      	str	r3, [r2, #0]
				for (int i=2;i<10;i++)
 8002340:	2302      	movs	r3, #2
 8002342:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 8002346:	f502 7241 	add.w	r2, r2, #772	; 0x304
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e012      	b.n	8002374 <main+0xcd4>
				{
					BSP_LCD_ClearStringLine(i);
 800234e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002352:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f001 f8d9 	bl	8003510 <BSP_LCD_ClearStringLine>
				for (int i=2;i<10;i++)
 800235e:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002362:	f503 7341 	add.w	r3, r3, #772	; 0x304
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	f507 3203 	add.w	r2, r7, #134144	; 0x20c00
 800236e:	f502 7241 	add.w	r2, r2, #772	; 0x304
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	f507 3303 	add.w	r3, r7, #134144	; 0x20c00
 8002378:	f503 7341 	add.w	r3, r3, #772	; 0x304
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b09      	cmp	r3, #9
 8002380:	dde5      	ble.n	800234e <main+0xcae>
				}
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Waiting for USB");
 8002382:	490d      	ldr	r1, [pc, #52]	; (80023b8 <main+0xd18>)
 8002384:	2000      	movs	r0, #0
 8002386:	f001 fa29 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
			}
		break;
 800238a:	e002      	b.n	8002392 <main+0xcf2>
		default:
		break;
 800238c:	bf00      	nop
 800238e:	f7ff bac4 	b.w	800191a <main+0x27a>
		break;
 8002392:	bf00      	nop
	MX_USB_HOST_Process();
 8002394:	f7ff bac1 	b.w	800191a <main+0x27a>
 8002398:	08019828 	.word	0x08019828
 800239c:	447a0000 	.word	0x447a0000
 80023a0:	08019838 	.word	0x08019838
 80023a4:	1000015c 	.word	0x1000015c
 80023a8:	0801984c 	.word	0x0801984c
 80023ac:	0801985c 	.word	0x0801985c
 80023b0:	08019868 	.word	0x08019868
 80023b4:	08019878 	.word	0x08019878
 80023b8:	08019880 	.word	0x08019880
 80023bc:	08019890 	.word	0x08019890

080023c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0a0      	sub	sp, #128	; 0x80
 80023c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ca:	2230      	movs	r2, #48	; 0x30
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f012 fad8 	bl	8014984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	2230      	movs	r2, #48	; 0x30
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f012 fac9 	bl	8014984 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <SystemClock_Config+0xfc>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a30      	ldr	r2, [pc, #192]	; (80024bc <SystemClock_Config+0xfc>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <SystemClock_Config+0xfc>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <SystemClock_Config+0x100>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <SystemClock_Config+0x100>)
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <SystemClock_Config+0x100>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800242a:	2301      	movs	r3, #1
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800242e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002434:	2302      	movs	r3, #2
 8002436:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002438:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800243c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800243e:	2304      	movs	r3, #4
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002442:	23a8      	movs	r3, #168	; 0xa8
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002446:	2302      	movs	r3, #2
 8002448:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800244a:	2307      	movs	r3, #7
 800244c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800244e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f005 fa2a 	bl	80078ac <HAL_RCC_OscConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800245e:	f000 f869 	bl	8002534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002462:	230f      	movs	r3, #15
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002466:	2302      	movs	r3, #2
 8002468:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800246a:	2300      	movs	r3, #0
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800246e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002478:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	2105      	movs	r1, #5
 8002480:	4618      	mov	r0, r3
 8002482:	f005 fc81 	bl	8007d88 <HAL_RCC_ClockConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800248c:	f000 f852 	bl	8002534 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002490:	2308      	movs	r3, #8
 8002492:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002494:	2332      	movs	r3, #50	; 0x32
 8002496:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800249c:	2300      	movs	r3, #0
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4618      	mov	r0, r3
 80024a6:	f005 fec1 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80024b0:	f000 f840 	bl	8002534 <Error_Handler>
  }
}
 80024b4:	bf00      	nop
 80024b6:	3780      	adds	r7, #128	; 0x80
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000

080024c4 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	/* Initialize the LCD */
	BSP_LCD_Init();
 80024c8:	f000 fe90 	bl	80031ec <BSP_LCD_Init>

	/* Background Layer Initialization */
	BSP_LCD_LayerDefaultInit(0, LCD_BUFFER);
 80024cc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 ff0d 	bl	80032f0 <BSP_LCD_LayerDefaultInit>

	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 ff6e 	bl	80033b8 <BSP_LCD_SelectLayer>

	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 80024dc:	f001 f9f0 	bl	80038c0 <BSP_LCD_DisplayOn>

	/* Clear the LCD Background layer */
	BSP_LCD_SetTransparency(0,255);
 80024e0:	21ff      	movs	r1, #255	; 0xff
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 ff78 	bl	80033d8 <BSP_LCD_SetTransparency>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80024e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80024ec:	f000 ffe8 	bl	80034c0 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80024f0:	4806      	ldr	r0, [pc, #24]	; (800250c <LCD_Config+0x48>)
 80024f2:	f000 ffb5 	bl	8003460 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024fa:	f000 ff7f 	bl	80033fc <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80024fe:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002502:	f000 ff93 	bl	800342c <BSP_LCD_SetBackColor>
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	2000004c 	.word	0x2000004c

08002510 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002522:	f001 fdb7 	bl	8004094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40001000 	.word	0x40001000

08002534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_SPI5_Init+0x64>)
 800254a:	4a18      	ldr	r2, [pc, #96]	; (80025ac <MX_SPI5_Init+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002550:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002554:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800255c:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <MX_SPI5_Init+0x64>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002568:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <MX_SPI5_Init+0x64>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002570:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002574:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002576:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002578:	2218      	movs	r2, #24
 800257a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800257c:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <MX_SPI5_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002588:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <MX_SPI5_Init+0x64>)
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002590:	220a      	movs	r2, #10
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_SPI5_Init+0x64>)
 8002596:	f006 f892 	bl	80086be <HAL_SPI_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80025a0:	f7ff ffc8 	bl	8002534 <Error_Handler>
  }

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000a10 	.word	0x20000a10
 80025ac:	40015000 	.word	0x40015000

080025b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08a      	sub	sp, #40	; 0x28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	; (8002634 <HAL_SPI_MspInit+0x84>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d12c      	bne.n	800262c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a17      	ldr	r2, [pc, #92]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	4a10      	ldr	r2, [pc, #64]	; (8002638 <HAL_SPI_MspInit+0x88>)
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	6313      	str	r3, [r2, #48]	; 0x30
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_SPI_MspInit+0x88>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800260a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800261c:	2305      	movs	r3, #5
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_SPI_MspInit+0x8c>)
 8002628:	f002 fbd0 	bl	8004dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40015000 	.word	0x40015000
 8002638:	40023800 	.word	0x40023800
 800263c:	40021400 	.word	0x40021400

08002640 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_SPI_MspDeInit+0x30>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d10a      	bne.n	8002668 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_SPI_MspDeInit+0x34>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <HAL_SPI_MspDeInit+0x34>)
 8002658:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800265e:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <HAL_SPI_MspDeInit+0x38>)
 8002664:	f002 fd5e 	bl	8005124 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40015000 	.word	0x40015000
 8002674:	40023800 	.word	0x40023800
 8002678:	40021400 	.word	0x40021400

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_MspInit+0x54>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_MspInit+0x54>)
 800268c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002690:	6453      	str	r3, [r2, #68]	; 0x44
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_MspInit+0x54>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_MspInit+0x54>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_MspInit+0x54>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_MspInit+0x54>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	210f      	movs	r1, #15
 80026be:	f06f 0001 	mvn.w	r0, #1
 80026c2:	f001 fde3 	bl	800428c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_InitTick>:
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08c      	sub	sp, #48	; 0x30
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	2300      	movs	r3, #0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026e0:	2300      	movs	r3, #0
 80026e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e4:	2200      	movs	r2, #0
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	2036      	movs	r0, #54	; 0x36
 80026ea:	f001 fdcf 	bl	800428c <HAL_NVIC_SetPriority>
 80026ee:	2036      	movs	r0, #54	; 0x36
 80026f0:	f001 fde8 	bl	80042c4 <HAL_NVIC_EnableIRQ>
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_InitTick+0xa4>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_InitTick+0xa4>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	6413      	str	r3, [r2, #64]	; 0x40
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_InitTick+0xa4>)
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f107 0210 	add.w	r2, r7, #16
 8002714:	f107 0314 	add.w	r3, r7, #20
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f005 fd54 	bl	80081c8 <HAL_RCC_GetClockConfig>
 8002720:	f005 fd2a 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 8002724:	4603      	mov	r3, r0
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <HAL_InitTick+0xa8>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	3b01      	subs	r3, #1
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_InitTick+0xac>)
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <HAL_InitTick+0xb0>)
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_InitTick+0xac>)
 8002740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	4a0e      	ldr	r2, [pc, #56]	; (8002780 <HAL_InitTick+0xac>)
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	6053      	str	r3, [r2, #4]
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_InitTick+0xac>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_InitTick+0xac>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	4809      	ldr	r0, [pc, #36]	; (8002780 <HAL_InitTick+0xac>)
 800275a:	f006 fd3b 	bl	80091d4 <HAL_TIM_Base_Init>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d104      	bne.n	800276e <HAL_InitTick+0x9a>
 8002764:	4806      	ldr	r0, [pc, #24]	; (8002780 <HAL_InitTick+0xac>)
 8002766:	f006 fd6a 	bl	800923e <HAL_TIM_Base_Start_IT>
 800276a:	4603      	mov	r3, r0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x9c>
 800276e:	2301      	movs	r3, #1
 8002770:	4618      	mov	r0, r3
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40023800 	.word	0x40023800
 800277c:	431bde83 	.word	0x431bde83
 8002780:	20000a68 	.word	0x20000a68
 8002784:	40001000 	.word	0x40001000

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_DisplayStringAtLine(19,(uint8_t*)"HARD FAULT");
 800279c:	4902      	ldr	r1, [pc, #8]	; (80027a8 <HardFault_Handler+0x10>)
 800279e:	2013      	movs	r0, #19
 80027a0:	f001 f81c 	bl	80037dc <BSP_LCD_DisplayStringAtLine>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <HardFault_Handler+0xc>
 80027a6:	bf00      	nop
 80027a8:	080198d4 	.word	0x080198d4

080027ac <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler+0x4>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler+0x4>

080027be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027fc:	4802      	ldr	r0, [pc, #8]	; (8002808 <TIM6_DAC_IRQHandler+0x10>)
 80027fe:	f006 fd42 	bl	8009286 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000a68 	.word	0x20000a68

0800280c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <OTG_HS_IRQHandler+0x10>)
 8002812:	f003 f85f 	bl	80058d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20001598 	.word	0x20001598

08002820 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002824:	4802      	ldr	r0, [pc, #8]	; (8002830 <LTDC_IRQHandler+0x10>)
 8002826:	f004 fd49 	bl	80072bc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800282a:	bf00      	nop
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000968 	.word	0x20000968

08002834 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002838:	4802      	ldr	r0, [pc, #8]	; (8002844 <DMA2D_IRQHandler+0x10>)
 800283a:	f002 f888 	bl	800494e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200008d4 	.word	0x200008d4

08002848 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800284c:	2001      	movs	r0, #1
 800284e:	f002 fd8f 	bl	8005370 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}

08002856 <_getpid>:
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
 800285a:	2301      	movs	r3, #1
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_kill>:
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
 8002870:	f012 f840 	bl	80148f4 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	2216      	movs	r2, #22
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_exit>:
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffe7 	bl	8002866 <_kill>
 8002898:	e7fe      	b.n	8002898 <_exit+0x12>

0800289a <_read>:
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e00a      	b.n	80028c2 <_read+0x28>
 80028ac:	f3af 8000 	nop.w
 80028b0:	4601      	mov	r1, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	60ba      	str	r2, [r7, #8]
 80028b8:	b2ca      	uxtb	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	dbf0      	blt.n	80028ac <_read+0x12>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_close>:
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <_fstat>:
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fc:	605a      	str	r2, [r3, #4]
 80028fe:	2300      	movs	r3, #0
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_isatty>:
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	2301      	movs	r3, #1
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <_lseek>:
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	2300      	movs	r3, #0
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <_sbrk>:
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	4a14      	ldr	r2, [pc, #80]	; (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	4b10      	ldr	r3, [pc, #64]	; (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
 800296c:	f011 ffc2 	bl	80148f4 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20030000 	.word	0x20030000
 800299c:	00000800 	.word	0x00000800
 80029a0:	20000aa8 	.word	0x20000aa8
 80029a4:	20001918 	.word	0x20001918

080029a8 <SystemInit>:
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <SystemInit+0x28>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	4a07      	ldr	r2, [pc, #28]	; (80029d0 <SystemInit+0x28>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <SystemInit+0x28>)
 80029be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029da:	4a12      	ldr	r2, [pc, #72]	; (8002a24 <MX_USART1_UART_Init+0x50>)
 80029dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029de:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 80029fa:	220c      	movs	r2, #12
 80029fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a04:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a0a:	4805      	ldr	r0, [pc, #20]	; (8002a20 <MX_USART1_UART_Init+0x4c>)
 8002a0c:	f006 fe20 	bl	8009650 <HAL_UART_Init>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a16:	f7ff fd8d 	bl	8002534 <Error_Handler>
  }

}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000aac 	.word	0x20000aac
 8002a24:	40011000 	.word	0x40011000

08002a28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08a      	sub	sp, #40	; 0x28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_UART_MspInit+0x84>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d12c      	bne.n	8002aa4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
 8002a4e:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	4a10      	ldr	r2, [pc, #64]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	6313      	str	r3, [r2, #48]	; 0x30
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <HAL_UART_MspInit+0x88>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a94:	2307      	movs	r3, #7
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <HAL_UART_MspInit+0x8c>)
 8002aa0:	f002 f994 	bl	8004dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40011000 	.word	0x40011000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020000 	.word	0x40020000

08002ab8 <_write>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len){
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)ptr,len,1000);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <_write+0x28>)
 8002ad0:	f006 fe0b 	bl	80096ea <HAL_UART_Transmit>

	return len;
 8002ad4:	687b      	ldr	r3, [r7, #4]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000aac 	.word	0x20000aac

08002ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b1c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002ae8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aea:	e003      	b.n	8002af4 <LoopCopyDataInit>

08002aec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002af0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002af2:	3104      	adds	r1, #4

08002af4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002af8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002afa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002afc:	d3f6      	bcc.n	8002aec <CopyDataInit>
  ldr  r2, =_sbss
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b00:	e002      	b.n	8002b08 <LoopFillZerobss>

08002b02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b04:	f842 3b04 	str.w	r3, [r2], #4

08002b08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b08:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b0c:	d3f9      	bcc.n	8002b02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b0e:	f7ff ff4b 	bl	80029a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b12:	f011 fef5 	bl	8014900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b16:	f7fe fdc3 	bl	80016a0 <main>
  bx  lr    
 8002b1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b1c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b20:	0808ce38 	.word	0x0808ce38
  ldr  r0, =_sdata
 8002b24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b28:	200008b0 	.word	0x200008b0
  ldr  r2, =_sbss
 8002b2c:	200008b0 	.word	0x200008b0
  ldr  r3, = _ebss
 8002b30:	20001918 	.word	0x20001918

08002b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b34:	e7fe      	b.n	8002b34 <ADC_IRQHandler>

08002b36 <ili9341_Init>:
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	f000 fa5d 	bl	8002ff8 <LCD_IO_Init>
 8002b3e:	20ca      	movs	r0, #202	; 0xca
 8002b40:	f000 f95d 	bl	8002dfe <ili9341_WriteReg>
 8002b44:	20c3      	movs	r0, #195	; 0xc3
 8002b46:	f000 f967 	bl	8002e18 <ili9341_WriteData>
 8002b4a:	2008      	movs	r0, #8
 8002b4c:	f000 f964 	bl	8002e18 <ili9341_WriteData>
 8002b50:	2050      	movs	r0, #80	; 0x50
 8002b52:	f000 f961 	bl	8002e18 <ili9341_WriteData>
 8002b56:	20cf      	movs	r0, #207	; 0xcf
 8002b58:	f000 f951 	bl	8002dfe <ili9341_WriteReg>
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f000 f95b 	bl	8002e18 <ili9341_WriteData>
 8002b62:	20c1      	movs	r0, #193	; 0xc1
 8002b64:	f000 f958 	bl	8002e18 <ili9341_WriteData>
 8002b68:	2030      	movs	r0, #48	; 0x30
 8002b6a:	f000 f955 	bl	8002e18 <ili9341_WriteData>
 8002b6e:	20ed      	movs	r0, #237	; 0xed
 8002b70:	f000 f945 	bl	8002dfe <ili9341_WriteReg>
 8002b74:	2064      	movs	r0, #100	; 0x64
 8002b76:	f000 f94f 	bl	8002e18 <ili9341_WriteData>
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	f000 f94c 	bl	8002e18 <ili9341_WriteData>
 8002b80:	2012      	movs	r0, #18
 8002b82:	f000 f949 	bl	8002e18 <ili9341_WriteData>
 8002b86:	2081      	movs	r0, #129	; 0x81
 8002b88:	f000 f946 	bl	8002e18 <ili9341_WriteData>
 8002b8c:	20e8      	movs	r0, #232	; 0xe8
 8002b8e:	f000 f936 	bl	8002dfe <ili9341_WriteReg>
 8002b92:	2085      	movs	r0, #133	; 0x85
 8002b94:	f000 f940 	bl	8002e18 <ili9341_WriteData>
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f93d 	bl	8002e18 <ili9341_WriteData>
 8002b9e:	2078      	movs	r0, #120	; 0x78
 8002ba0:	f000 f93a 	bl	8002e18 <ili9341_WriteData>
 8002ba4:	20cb      	movs	r0, #203	; 0xcb
 8002ba6:	f000 f92a 	bl	8002dfe <ili9341_WriteReg>
 8002baa:	2039      	movs	r0, #57	; 0x39
 8002bac:	f000 f934 	bl	8002e18 <ili9341_WriteData>
 8002bb0:	202c      	movs	r0, #44	; 0x2c
 8002bb2:	f000 f931 	bl	8002e18 <ili9341_WriteData>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f000 f92e 	bl	8002e18 <ili9341_WriteData>
 8002bbc:	2034      	movs	r0, #52	; 0x34
 8002bbe:	f000 f92b 	bl	8002e18 <ili9341_WriteData>
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f000 f928 	bl	8002e18 <ili9341_WriteData>
 8002bc8:	20f7      	movs	r0, #247	; 0xf7
 8002bca:	f000 f918 	bl	8002dfe <ili9341_WriteReg>
 8002bce:	2020      	movs	r0, #32
 8002bd0:	f000 f922 	bl	8002e18 <ili9341_WriteData>
 8002bd4:	20ea      	movs	r0, #234	; 0xea
 8002bd6:	f000 f912 	bl	8002dfe <ili9341_WriteReg>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f000 f91c 	bl	8002e18 <ili9341_WriteData>
 8002be0:	2000      	movs	r0, #0
 8002be2:	f000 f919 	bl	8002e18 <ili9341_WriteData>
 8002be6:	20b1      	movs	r0, #177	; 0xb1
 8002be8:	f000 f909 	bl	8002dfe <ili9341_WriteReg>
 8002bec:	2000      	movs	r0, #0
 8002bee:	f000 f913 	bl	8002e18 <ili9341_WriteData>
 8002bf2:	201b      	movs	r0, #27
 8002bf4:	f000 f910 	bl	8002e18 <ili9341_WriteData>
 8002bf8:	20b6      	movs	r0, #182	; 0xb6
 8002bfa:	f000 f900 	bl	8002dfe <ili9341_WriteReg>
 8002bfe:	200a      	movs	r0, #10
 8002c00:	f000 f90a 	bl	8002e18 <ili9341_WriteData>
 8002c04:	20a2      	movs	r0, #162	; 0xa2
 8002c06:	f000 f907 	bl	8002e18 <ili9341_WriteData>
 8002c0a:	20c0      	movs	r0, #192	; 0xc0
 8002c0c:	f000 f8f7 	bl	8002dfe <ili9341_WriteReg>
 8002c10:	2010      	movs	r0, #16
 8002c12:	f000 f901 	bl	8002e18 <ili9341_WriteData>
 8002c16:	20c1      	movs	r0, #193	; 0xc1
 8002c18:	f000 f8f1 	bl	8002dfe <ili9341_WriteReg>
 8002c1c:	2010      	movs	r0, #16
 8002c1e:	f000 f8fb 	bl	8002e18 <ili9341_WriteData>
 8002c22:	20c5      	movs	r0, #197	; 0xc5
 8002c24:	f000 f8eb 	bl	8002dfe <ili9341_WriteReg>
 8002c28:	2045      	movs	r0, #69	; 0x45
 8002c2a:	f000 f8f5 	bl	8002e18 <ili9341_WriteData>
 8002c2e:	2015      	movs	r0, #21
 8002c30:	f000 f8f2 	bl	8002e18 <ili9341_WriteData>
 8002c34:	20c7      	movs	r0, #199	; 0xc7
 8002c36:	f000 f8e2 	bl	8002dfe <ili9341_WriteReg>
 8002c3a:	2090      	movs	r0, #144	; 0x90
 8002c3c:	f000 f8ec 	bl	8002e18 <ili9341_WriteData>
 8002c40:	2036      	movs	r0, #54	; 0x36
 8002c42:	f000 f8dc 	bl	8002dfe <ili9341_WriteReg>
 8002c46:	20c8      	movs	r0, #200	; 0xc8
 8002c48:	f000 f8e6 	bl	8002e18 <ili9341_WriteData>
 8002c4c:	20f2      	movs	r0, #242	; 0xf2
 8002c4e:	f000 f8d6 	bl	8002dfe <ili9341_WriteReg>
 8002c52:	2000      	movs	r0, #0
 8002c54:	f000 f8e0 	bl	8002e18 <ili9341_WriteData>
 8002c58:	20b0      	movs	r0, #176	; 0xb0
 8002c5a:	f000 f8d0 	bl	8002dfe <ili9341_WriteReg>
 8002c5e:	20c2      	movs	r0, #194	; 0xc2
 8002c60:	f000 f8da 	bl	8002e18 <ili9341_WriteData>
 8002c64:	20b6      	movs	r0, #182	; 0xb6
 8002c66:	f000 f8ca 	bl	8002dfe <ili9341_WriteReg>
 8002c6a:	200a      	movs	r0, #10
 8002c6c:	f000 f8d4 	bl	8002e18 <ili9341_WriteData>
 8002c70:	20a7      	movs	r0, #167	; 0xa7
 8002c72:	f000 f8d1 	bl	8002e18 <ili9341_WriteData>
 8002c76:	2027      	movs	r0, #39	; 0x27
 8002c78:	f000 f8ce 	bl	8002e18 <ili9341_WriteData>
 8002c7c:	2004      	movs	r0, #4
 8002c7e:	f000 f8cb 	bl	8002e18 <ili9341_WriteData>
 8002c82:	202a      	movs	r0, #42	; 0x2a
 8002c84:	f000 f8bb 	bl	8002dfe <ili9341_WriteReg>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 f8c5 	bl	8002e18 <ili9341_WriteData>
 8002c8e:	2000      	movs	r0, #0
 8002c90:	f000 f8c2 	bl	8002e18 <ili9341_WriteData>
 8002c94:	2000      	movs	r0, #0
 8002c96:	f000 f8bf 	bl	8002e18 <ili9341_WriteData>
 8002c9a:	20ef      	movs	r0, #239	; 0xef
 8002c9c:	f000 f8bc 	bl	8002e18 <ili9341_WriteData>
 8002ca0:	202b      	movs	r0, #43	; 0x2b
 8002ca2:	f000 f8ac 	bl	8002dfe <ili9341_WriteReg>
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 f8b6 	bl	8002e18 <ili9341_WriteData>
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 f8b3 	bl	8002e18 <ili9341_WriteData>
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 f8b0 	bl	8002e18 <ili9341_WriteData>
 8002cb8:	203f      	movs	r0, #63	; 0x3f
 8002cba:	f000 f8ad 	bl	8002e18 <ili9341_WriteData>
 8002cbe:	20f6      	movs	r0, #246	; 0xf6
 8002cc0:	f000 f89d 	bl	8002dfe <ili9341_WriteReg>
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f000 f8a7 	bl	8002e18 <ili9341_WriteData>
 8002cca:	2000      	movs	r0, #0
 8002ccc:	f000 f8a4 	bl	8002e18 <ili9341_WriteData>
 8002cd0:	2006      	movs	r0, #6
 8002cd2:	f000 f8a1 	bl	8002e18 <ili9341_WriteData>
 8002cd6:	202c      	movs	r0, #44	; 0x2c
 8002cd8:	f000 f891 	bl	8002dfe <ili9341_WriteReg>
 8002cdc:	20c8      	movs	r0, #200	; 0xc8
 8002cde:	f000 fa79 	bl	80031d4 <LCD_Delay>
 8002ce2:	2026      	movs	r0, #38	; 0x26
 8002ce4:	f000 f88b 	bl	8002dfe <ili9341_WriteReg>
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f000 f895 	bl	8002e18 <ili9341_WriteData>
 8002cee:	20e0      	movs	r0, #224	; 0xe0
 8002cf0:	f000 f885 	bl	8002dfe <ili9341_WriteReg>
 8002cf4:	200f      	movs	r0, #15
 8002cf6:	f000 f88f 	bl	8002e18 <ili9341_WriteData>
 8002cfa:	2029      	movs	r0, #41	; 0x29
 8002cfc:	f000 f88c 	bl	8002e18 <ili9341_WriteData>
 8002d00:	2024      	movs	r0, #36	; 0x24
 8002d02:	f000 f889 	bl	8002e18 <ili9341_WriteData>
 8002d06:	200c      	movs	r0, #12
 8002d08:	f000 f886 	bl	8002e18 <ili9341_WriteData>
 8002d0c:	200e      	movs	r0, #14
 8002d0e:	f000 f883 	bl	8002e18 <ili9341_WriteData>
 8002d12:	2009      	movs	r0, #9
 8002d14:	f000 f880 	bl	8002e18 <ili9341_WriteData>
 8002d18:	204e      	movs	r0, #78	; 0x4e
 8002d1a:	f000 f87d 	bl	8002e18 <ili9341_WriteData>
 8002d1e:	2078      	movs	r0, #120	; 0x78
 8002d20:	f000 f87a 	bl	8002e18 <ili9341_WriteData>
 8002d24:	203c      	movs	r0, #60	; 0x3c
 8002d26:	f000 f877 	bl	8002e18 <ili9341_WriteData>
 8002d2a:	2009      	movs	r0, #9
 8002d2c:	f000 f874 	bl	8002e18 <ili9341_WriteData>
 8002d30:	2013      	movs	r0, #19
 8002d32:	f000 f871 	bl	8002e18 <ili9341_WriteData>
 8002d36:	2005      	movs	r0, #5
 8002d38:	f000 f86e 	bl	8002e18 <ili9341_WriteData>
 8002d3c:	2017      	movs	r0, #23
 8002d3e:	f000 f86b 	bl	8002e18 <ili9341_WriteData>
 8002d42:	2011      	movs	r0, #17
 8002d44:	f000 f868 	bl	8002e18 <ili9341_WriteData>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f000 f865 	bl	8002e18 <ili9341_WriteData>
 8002d4e:	20e1      	movs	r0, #225	; 0xe1
 8002d50:	f000 f855 	bl	8002dfe <ili9341_WriteReg>
 8002d54:	2000      	movs	r0, #0
 8002d56:	f000 f85f 	bl	8002e18 <ili9341_WriteData>
 8002d5a:	2016      	movs	r0, #22
 8002d5c:	f000 f85c 	bl	8002e18 <ili9341_WriteData>
 8002d60:	201b      	movs	r0, #27
 8002d62:	f000 f859 	bl	8002e18 <ili9341_WriteData>
 8002d66:	2004      	movs	r0, #4
 8002d68:	f000 f856 	bl	8002e18 <ili9341_WriteData>
 8002d6c:	2011      	movs	r0, #17
 8002d6e:	f000 f853 	bl	8002e18 <ili9341_WriteData>
 8002d72:	2007      	movs	r0, #7
 8002d74:	f000 f850 	bl	8002e18 <ili9341_WriteData>
 8002d78:	2031      	movs	r0, #49	; 0x31
 8002d7a:	f000 f84d 	bl	8002e18 <ili9341_WriteData>
 8002d7e:	2033      	movs	r0, #51	; 0x33
 8002d80:	f000 f84a 	bl	8002e18 <ili9341_WriteData>
 8002d84:	2042      	movs	r0, #66	; 0x42
 8002d86:	f000 f847 	bl	8002e18 <ili9341_WriteData>
 8002d8a:	2005      	movs	r0, #5
 8002d8c:	f000 f844 	bl	8002e18 <ili9341_WriteData>
 8002d90:	200c      	movs	r0, #12
 8002d92:	f000 f841 	bl	8002e18 <ili9341_WriteData>
 8002d96:	200a      	movs	r0, #10
 8002d98:	f000 f83e 	bl	8002e18 <ili9341_WriteData>
 8002d9c:	2028      	movs	r0, #40	; 0x28
 8002d9e:	f000 f83b 	bl	8002e18 <ili9341_WriteData>
 8002da2:	202f      	movs	r0, #47	; 0x2f
 8002da4:	f000 f838 	bl	8002e18 <ili9341_WriteData>
 8002da8:	200f      	movs	r0, #15
 8002daa:	f000 f835 	bl	8002e18 <ili9341_WriteData>
 8002dae:	2011      	movs	r0, #17
 8002db0:	f000 f825 	bl	8002dfe <ili9341_WriteReg>
 8002db4:	20c8      	movs	r0, #200	; 0xc8
 8002db6:	f000 fa0d 	bl	80031d4 <LCD_Delay>
 8002dba:	2029      	movs	r0, #41	; 0x29
 8002dbc:	f000 f81f 	bl	8002dfe <ili9341_WriteReg>
 8002dc0:	202c      	movs	r0, #44	; 0x2c
 8002dc2:	f000 f81c 	bl	8002dfe <ili9341_WriteReg>
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <ili9341_ReadID>:
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	f000 f913 	bl	8002ff8 <LCD_IO_Init>
 8002dd2:	2103      	movs	r1, #3
 8002dd4:	20d3      	movs	r0, #211	; 0xd3
 8002dd6:	f000 f82c 	bl	8002e32 <ili9341_ReadData>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ili9341_DisplayOn>:
 8002de2:	b580      	push	{r7, lr}
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	2029      	movs	r0, #41	; 0x29
 8002de8:	f000 f809 	bl	8002dfe <ili9341_WriteReg>
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <ili9341_DisplayOff>:
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	2028      	movs	r0, #40	; 0x28
 8002df6:	f000 f802 	bl	8002dfe <ili9341_WriteReg>
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ili9341_WriteReg>:
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f98e 	bl	800312c <LCD_IO_WriteReg>
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <ili9341_WriteData>:
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 f95f 	bl	80030e8 <LCD_IO_WriteData>
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <ili9341_ReadData>:
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	4603      	mov	r3, r0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	80fb      	strh	r3, [r7, #6]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	717b      	strb	r3, [r7, #5]
 8002e42:	797a      	ldrb	r2, [r7, #5]
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f991 	bl	8003170 <LCD_IO_ReadData>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	4618      	mov	r0, r3
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <ili9341_GetLcdPixelWidth>:
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	23f0      	movs	r3, #240	; 0xf0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <ili9341_GetLcdPixelHeight>:
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SPIx_Init>:
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4819      	ldr	r0, [pc, #100]	; (8002ee8 <SPIx_Init+0x6c>)
 8002e82:	f006 f887 	bl	8008f94 <HAL_SPI_GetState>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d12b      	bne.n	8002ee4 <SPIx_Init+0x68>
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <SPIx_Init+0x6c>)
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <SPIx_Init+0x70>)
 8002e90:	601a      	str	r2, [r3, #0]
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <SPIx_Init+0x6c>)
 8002e94:	2218      	movs	r2, #24
 8002e96:	61da      	str	r2, [r3, #28]
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <SPIx_Init+0x6c>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	4b12      	ldr	r3, [pc, #72]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
 8002ea4:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	611a      	str	r2, [r3, #16]
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <SPIx_Init+0x6c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <SPIx_Init+0x6c>)
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <SPIx_Init+0x6c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	619a      	str	r2, [r3, #24]
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ed2:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	4803      	ldr	r0, [pc, #12]	; (8002ee8 <SPIx_Init+0x6c>)
 8002eda:	f000 f853 	bl	8002f84 <SPIx_MspInit>
 8002ede:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <SPIx_Init+0x6c>)
 8002ee0:	f005 fbed 	bl	80086be <HAL_SPI_Init>
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000aec 	.word	0x20000aec
 8002eec:	40015000 	.word	0x40015000

08002ef0 <SPIx_Read>:
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <SPIx_Read+0x38>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f107 0108 	add.w	r1, r7, #8
 8002f0a:	4808      	ldr	r0, [pc, #32]	; (8002f2c <SPIx_Read+0x3c>)
 8002f0c:	f005 fd97 	bl	8008a3e <HAL_SPI_Receive>
 8002f10:	4603      	mov	r3, r0
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <SPIx_Read+0x2e>
 8002f1a:	f000 f827 	bl	8002f6c <SPIx_Error>
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000003c 	.word	0x2000003c
 8002f2c:	20000aec 	.word	0x20000aec

08002f30 <SPIx_Write>:
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	73fb      	strb	r3, [r7, #15]
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <SPIx_Write+0x34>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1db9      	adds	r1, r7, #6
 8002f44:	2201      	movs	r2, #1
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <SPIx_Write+0x38>)
 8002f48:	f005 fc45 	bl	80087d6 <HAL_SPI_Transmit>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <SPIx_Write+0x2a>
 8002f56:	f000 f809 	bl	8002f6c <SPIx_Error>
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	2000003c 	.word	0x2000003c
 8002f68:	20000aec 	.word	0x20000aec

08002f6c <SPIx_Error>:
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4803      	ldr	r0, [pc, #12]	; (8002f80 <SPIx_Error+0x14>)
 8002f72:	f005 fc08 	bl	8008786 <HAL_SPI_DeInit>
 8002f76:	f7ff ff81 	bl	8002e7c <SPIx_Init>
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000aec 	.word	0x20000aec

08002f84 <SPIx_MspInit>:
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	4a16      	ldr	r2, [pc, #88]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <SPIx_MspInit+0x6c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	2302      	movs	r3, #2
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4804      	ldr	r0, [pc, #16]	; (8002ff4 <SPIx_MspInit+0x70>)
 8002fe2:	f001 fef3 	bl	8004dcc <HAL_GPIO_Init>
 8002fe6:	bf00      	nop
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40021400 	.word	0x40021400

08002ff8 <LCD_IO_Init>:
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <LCD_IO_Init+0xe0>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d164      	bne.n	80030d0 <LCD_IO_Init+0xd8>
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <LCD_IO_Init+0xe0>)
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	4b32      	ldr	r3, [pc, #200]	; (80030dc <LCD_IO_Init+0xe4>)
 8003012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003014:	4a31      	ldr	r2, [pc, #196]	; (80030dc <LCD_IO_Init+0xe4>)
 8003016:	f043 0308 	orr.w	r3, r3, #8
 800301a:	6313      	str	r3, [r2, #48]	; 0x30
 800301c:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <LCD_IO_Init+0xe4>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	2301      	movs	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	4619      	mov	r1, r3
 8003040:	4827      	ldr	r0, [pc, #156]	; (80030e0 <LCD_IO_Init+0xe8>)
 8003042:	f001 fec3 	bl	8004dcc <HAL_GPIO_Init>
 8003046:	2300      	movs	r3, #0
 8003048:	607b      	str	r3, [r7, #4]
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <LCD_IO_Init+0xe4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <LCD_IO_Init+0xe4>)
 8003050:	f043 0308 	orr.w	r3, r3, #8
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <LCD_IO_Init+0xe4>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	2301      	movs	r3, #1
 800306a:	613b      	str	r3, [r7, #16]
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	2302      	movs	r3, #2
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	4619      	mov	r1, r3
 800307a:	4819      	ldr	r0, [pc, #100]	; (80030e0 <LCD_IO_Init+0xe8>)
 800307c:	f001 fea6 	bl	8004dcc <HAL_GPIO_Init>
 8003080:	2300      	movs	r3, #0
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <LCD_IO_Init+0xe4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4a14      	ldr	r2, [pc, #80]	; (80030dc <LCD_IO_Init+0xe4>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6313      	str	r3, [r2, #48]	; 0x30
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <LCD_IO_Init+0xe4>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2304      	movs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	2301      	movs	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	2302      	movs	r3, #2
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	f107 030c 	add.w	r3, r7, #12
 80030b0:	4619      	mov	r1, r3
 80030b2:	480c      	ldr	r0, [pc, #48]	; (80030e4 <LCD_IO_Init+0xec>)
 80030b4:	f001 fe8a 	bl	8004dcc <HAL_GPIO_Init>
 80030b8:	2200      	movs	r2, #0
 80030ba:	2104      	movs	r1, #4
 80030bc:	4809      	ldr	r0, [pc, #36]	; (80030e4 <LCD_IO_Init+0xec>)
 80030be:	f002 f93d 	bl	800533c <HAL_GPIO_WritePin>
 80030c2:	2201      	movs	r2, #1
 80030c4:	2104      	movs	r1, #4
 80030c6:	4807      	ldr	r0, [pc, #28]	; (80030e4 <LCD_IO_Init+0xec>)
 80030c8:	f002 f938 	bl	800533c <HAL_GPIO_WritePin>
 80030cc:	f7ff fed6 	bl	8002e7c <SPIx_Init>
 80030d0:	bf00      	nop
 80030d2:	3720      	adds	r7, #32
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000b44 	.word	0x20000b44
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40020c00 	.word	0x40020c00
 80030e4:	40020800 	.word	0x40020800

080030e8 <LCD_IO_WriteData>:
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	80fb      	strh	r3, [r7, #6]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030f8:	480a      	ldr	r0, [pc, #40]	; (8003124 <LCD_IO_WriteData+0x3c>)
 80030fa:	f002 f91f 	bl	800533c <HAL_GPIO_WritePin>
 80030fe:	2200      	movs	r2, #0
 8003100:	2104      	movs	r1, #4
 8003102:	4809      	ldr	r0, [pc, #36]	; (8003128 <LCD_IO_WriteData+0x40>)
 8003104:	f002 f91a 	bl	800533c <HAL_GPIO_WritePin>
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff10 	bl	8002f30 <SPIx_Write>
 8003110:	2201      	movs	r2, #1
 8003112:	2104      	movs	r1, #4
 8003114:	4804      	ldr	r0, [pc, #16]	; (8003128 <LCD_IO_WriteData+0x40>)
 8003116:	f002 f911 	bl	800533c <HAL_GPIO_WritePin>
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40020c00 	.word	0x40020c00
 8003128:	40020800 	.word	0x40020800

0800312c <LCD_IO_WriteReg>:
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	2200      	movs	r2, #0
 8003138:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800313c:	480a      	ldr	r0, [pc, #40]	; (8003168 <LCD_IO_WriteReg+0x3c>)
 800313e:	f002 f8fd 	bl	800533c <HAL_GPIO_WritePin>
 8003142:	2200      	movs	r2, #0
 8003144:	2104      	movs	r1, #4
 8003146:	4809      	ldr	r0, [pc, #36]	; (800316c <LCD_IO_WriteReg+0x40>)
 8003148:	f002 f8f8 	bl	800533c <HAL_GPIO_WritePin>
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff feed 	bl	8002f30 <SPIx_Write>
 8003156:	2201      	movs	r2, #1
 8003158:	2104      	movs	r1, #4
 800315a:	4804      	ldr	r0, [pc, #16]	; (800316c <LCD_IO_WriteReg+0x40>)
 800315c:	f002 f8ee 	bl	800533c <HAL_GPIO_WritePin>
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40020800 	.word	0x40020800

08003170 <LCD_IO_ReadData>:
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	460a      	mov	r2, r1
 800317a:	80fb      	strh	r3, [r7, #6]
 800317c:	4613      	mov	r3, r2
 800317e:	717b      	strb	r3, [r7, #5]
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	2104      	movs	r1, #4
 8003188:	4810      	ldr	r0, [pc, #64]	; (80031cc <LCD_IO_ReadData+0x5c>)
 800318a:	f002 f8d7 	bl	800533c <HAL_GPIO_WritePin>
 800318e:	2200      	movs	r2, #0
 8003190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003194:	480e      	ldr	r0, [pc, #56]	; (80031d0 <LCD_IO_ReadData+0x60>)
 8003196:	f002 f8d1 	bl	800533c <HAL_GPIO_WritePin>
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fec7 	bl	8002f30 <SPIx_Write>
 80031a2:	797b      	ldrb	r3, [r7, #5]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fea3 	bl	8002ef0 <SPIx_Read>
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031b2:	4807      	ldr	r0, [pc, #28]	; (80031d0 <LCD_IO_ReadData+0x60>)
 80031b4:	f002 f8c2 	bl	800533c <HAL_GPIO_WritePin>
 80031b8:	2201      	movs	r2, #1
 80031ba:	2104      	movs	r1, #4
 80031bc:	4803      	ldr	r0, [pc, #12]	; (80031cc <LCD_IO_ReadData+0x5c>)
 80031be:	f002 f8bd 	bl	800533c <HAL_GPIO_WritePin>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40020800 	.word	0x40020800
 80031d0:	40020c00 	.word	0x40020c00

080031d4 <LCD_Delay>:
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 ff79 	bl	80040d4 <HAL_Delay>
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <BSP_LCD_Init>:
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <BSP_LCD_Init+0xbc>)
 80031f2:	4a2e      	ldr	r2, [pc, #184]	; (80032ac <BSP_LCD_Init+0xc0>)
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <BSP_LCD_Init+0xbc>)
 80031f8:	2209      	movs	r2, #9
 80031fa:	615a      	str	r2, [r3, #20]
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <BSP_LCD_Init+0xbc>)
 80031fe:	2201      	movs	r2, #1
 8003200:	619a      	str	r2, [r3, #24]
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003204:	221d      	movs	r2, #29
 8003206:	61da      	str	r2, [r3, #28]
 8003208:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <BSP_LCD_Init+0xbc>)
 800320a:	2203      	movs	r2, #3
 800320c:	621a      	str	r2, [r3, #32]
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003210:	f240 120d 	movw	r2, #269	; 0x10d
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
 8003216:	4b24      	ldr	r3, [pc, #144]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003218:	f240 1243 	movw	r2, #323	; 0x143
 800321c:	629a      	str	r2, [r3, #40]	; 0x28
 800321e:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003220:	f240 1217 	movw	r2, #279	; 0x117
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003228:	f240 1247 	movw	r2, #327	; 0x147
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
 800322e:	4b1e      	ldr	r3, [pc, #120]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8003236:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003246:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <BSP_LCD_Init+0xc4>)
 8003248:	2208      	movs	r2, #8
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <BSP_LCD_Init+0xc4>)
 800324e:	22c0      	movs	r2, #192	; 0xc0
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <BSP_LCD_Init+0xc4>)
 8003254:	2204      	movs	r2, #4
 8003256:	619a      	str	r2, [r3, #24]
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <BSP_LCD_Init+0xc4>)
 800325a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800325e:	625a      	str	r2, [r3, #36]	; 0x24
 8003260:	4813      	ldr	r0, [pc, #76]	; (80032b0 <BSP_LCD_Init+0xc4>)
 8003262:	f004 ffe3 	bl	800822c <HAL_RCCEx_PeriphCLKConfig>
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003268:	2200      	movs	r2, #0
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <BSP_LCD_Init+0xbc>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <BSP_LCD_Init+0xbc>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
 800327e:	f000 fb2f 	bl	80038e0 <BSP_LCD_MspInit>
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <BSP_LCD_Init+0xbc>)
 8003284:	f003 ff4a 	bl	800711c <HAL_LTDC_Init>
 8003288:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <BSP_LCD_Init+0xc8>)
 800328a:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <BSP_LCD_Init+0xcc>)
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <BSP_LCD_Init+0xc8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4798      	blx	r3
 8003296:	f000 fd11 	bl	8003cbc <BSP_SDRAM_Init>
 800329a:	4808      	ldr	r0, [pc, #32]	; (80032bc <BSP_LCD_Init+0xd0>)
 800329c:	f000 f8e0 	bl	8003460 <BSP_LCD_SetFont>
 80032a0:	2300      	movs	r3, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000b48 	.word	0x20000b48
 80032ac:	40016800 	.word	0x40016800
 80032b0:	20000c30 	.word	0x20000c30
 80032b4:	20000c7c 	.word	0x20000c7c
 80032b8:	20000004 	.word	0x20000004
 80032bc:	20000054 	.word	0x20000054

080032c0 <BSP_LCD_GetXSize>:
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <BSP_LCD_GetXSize+0x14>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	4798      	blx	r3
 80032cc:	4603      	mov	r3, r0
 80032ce:	4618      	mov	r0, r3
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000c7c 	.word	0x20000c7c

080032d8 <BSP_LCD_GetYSize>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <BSP_LCD_GetYSize+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	4798      	blx	r3
 80032e4:	4603      	mov	r3, r0
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000c7c 	.word	0x20000c7c

080032f0 <BSP_LCD_LayerDefaultInit>:
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b090      	sub	sp, #64	; 0x40
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	80fb      	strh	r3, [r7, #6]
 80032fc:	2300      	movs	r3, #0
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	f7ff ffde 	bl	80032c0 <BSP_LCD_GetXSize>
 8003304:	4603      	mov	r3, r0
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	f7ff ffe4 	bl	80032d8 <BSP_LCD_GetYSize>
 8003310:	4603      	mov	r3, r0
 8003312:	61bb      	str	r3, [r7, #24]
 8003314:	2300      	movs	r3, #0
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	633b      	str	r3, [r7, #48]	; 0x30
 800331c:	23ff      	movs	r3, #255	; 0xff
 800331e:	623b      	str	r3, [r7, #32]
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	2300      	movs	r3, #0
 8003326:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800332a:	2300      	movs	r3, #0
 800332c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003330:	2300      	movs	r3, #0
 8003332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003336:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
 800333c:	2307      	movs	r3, #7
 800333e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003340:	f7ff ffbe 	bl	80032c0 <BSP_LCD_GetXSize>
 8003344:	4603      	mov	r3, r0
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
 8003348:	f7ff ffc6 	bl	80032d8 <BSP_LCD_GetYSize>
 800334c:	4603      	mov	r3, r0
 800334e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003350:	88fa      	ldrh	r2, [r7, #6]
 8003352:	f107 030c 	add.w	r3, r7, #12
 8003356:	4619      	mov	r1, r3
 8003358:	4814      	ldr	r0, [pc, #80]	; (80033ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800335a:	f004 f871 	bl	8007440 <HAL_LTDC_ConfigLayer>
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	4913      	ldr	r1, [pc, #76]	; (80033b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003362:	4613      	mov	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4413      	add	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3304      	adds	r3, #4
 800336e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	490e      	ldr	r1, [pc, #56]	; (80033b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3308      	adds	r3, #8
 8003384:	4a0b      	ldr	r2, [pc, #44]	; (80033b4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	88fa      	ldrh	r2, [r7, #6]
 800338a:	4909      	ldr	r1, [pc, #36]	; (80033b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	4803      	ldr	r0, [pc, #12]	; (80033ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800339e:	f004 f88d 	bl	80074bc <HAL_LTDC_EnableDither>
 80033a2:	bf00      	nop
 80033a4:	3740      	adds	r7, #64	; 0x40
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000b48 	.word	0x20000b48
 80033b0:	20000c64 	.word	0x20000c64
 80033b4:	20000054 	.word	0x20000054

080033b8 <BSP_LCD_SelectLayer>:
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <BSP_LCD_SelectLayer+0x1c>)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000c60 	.word	0x20000c60

080033d8 <BSP_LCD_SetTransparency>:
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	4619      	mov	r1, r3
 80033ea:	4803      	ldr	r0, [pc, #12]	; (80033f8 <BSP_LCD_SetTransparency+0x20>)
 80033ec:	f004 f890 	bl	8007510 <HAL_LTDC_SetAlpha>
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000b48 	.word	0x20000b48

080033fc <BSP_LCD_SetTextColor>:
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	4b07      	ldr	r3, [pc, #28]	; (8003424 <BSP_LCD_SetTextColor+0x28>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4907      	ldr	r1, [pc, #28]	; (8003428 <BSP_LCD_SetTextColor+0x2c>)
 800340a:	4613      	mov	r3, r2
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	20000c60 	.word	0x20000c60
 8003428:	20000c64 	.word	0x20000c64

0800342c <BSP_LCD_SetBackColor>:
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	4b08      	ldr	r3, [pc, #32]	; (8003458 <BSP_LCD_SetBackColor+0x2c>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4908      	ldr	r1, [pc, #32]	; (800345c <BSP_LCD_SetBackColor+0x30>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3304      	adds	r3, #4
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	20000c60 	.word	0x20000c60
 800345c:	20000c64 	.word	0x20000c64

08003460 <BSP_LCD_SetFont>:
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <BSP_LCD_SetFont+0x2c>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4908      	ldr	r1, [pc, #32]	; (8003490 <BSP_LCD_SetFont+0x30>)
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3308      	adds	r3, #8
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000c60 	.word	0x20000c60
 8003490:	20000c64 	.word	0x20000c64

08003494 <BSP_LCD_GetFont>:
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <BSP_LCD_GetFont+0x24>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <BSP_LCD_GetFont+0x28>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	3308      	adds	r3, #8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	20000c60 	.word	0x20000c60
 80034bc:	20000c64 	.word	0x20000c64

080034c0 <BSP_LCD_Clear>:
 80034c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <BSP_LCD_Clear+0x48>)
 80034ca:	681c      	ldr	r4, [r3, #0]
 80034cc:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <BSP_LCD_Clear+0x48>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <BSP_LCD_Clear+0x4c>)
 80034d2:	2134      	movs	r1, #52	; 0x34
 80034d4:	fb01 f303 	mul.w	r3, r1, r3
 80034d8:	4413      	add	r3, r2
 80034da:	335c      	adds	r3, #92	; 0x5c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461e      	mov	r6, r3
 80034e0:	f7ff feee 	bl	80032c0 <BSP_LCD_GetXSize>
 80034e4:	4605      	mov	r5, r0
 80034e6:	f7ff fef7 	bl	80032d8 <BSP_LCD_GetYSize>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	9301      	str	r3, [sp, #4]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	462a      	mov	r2, r5
 80034f8:	4631      	mov	r1, r6
 80034fa:	4620      	mov	r0, r4
 80034fc:	f000 fba6 	bl	8003c4c <FillBuffer>
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003508:	20000c60 	.word	0x20000c60
 800350c:	20000b48 	.word	0x20000b48

08003510 <BSP_LCD_ClearStringLine>:
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	4b2d      	ldr	r3, [pc, #180]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	492d      	ldr	r1, [pc, #180]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	4b27      	ldr	r3, [pc, #156]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4827      	ldr	r0, [pc, #156]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 8003536:	460b      	mov	r3, r1
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	440b      	add	r3, r1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	3304      	adds	r3, #4
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	4823      	ldr	r0, [pc, #140]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 8003546:	4613      	mov	r3, r2
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	4413      	add	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4403      	add	r3, r0
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	4b1f      	ldr	r3, [pc, #124]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	491f      	ldr	r1, [pc, #124]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	3308      	adds	r3, #8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	88da      	ldrh	r2, [r3, #6]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	b29b      	uxth	r3, r3
 800356c:	fb12 f303 	smulbb	r3, r2, r3
 8003570:	b29c      	uxth	r4, r3
 8003572:	f7ff fea5 	bl	80032c0 <BSP_LCD_GetXSize>
 8003576:	4603      	mov	r3, r0
 8003578:	b299      	uxth	r1, r3
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4815      	ldr	r0, [pc, #84]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4403      	add	r3, r0
 800358a:	3308      	adds	r3, #8
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	88db      	ldrh	r3, [r3, #6]
 8003590:	460a      	mov	r2, r1
 8003592:	4621      	mov	r1, r4
 8003594:	2000      	movs	r0, #0
 8003596:	f000 f939 	bl	800380c <BSP_LCD_FillRect>
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	490d      	ldr	r1, [pc, #52]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <BSP_LCD_ClearStringLine+0xc0>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4908      	ldr	r1, [pc, #32]	; (80035d4 <BSP_LCD_ClearStringLine+0xc4>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff1b 	bl	80033fc <BSP_LCD_SetTextColor>
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd90      	pop	{r4, r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000c60 	.word	0x20000c60
 80035d4:	20000c64 	.word	0x20000c64

080035d8 <BSP_LCD_DisplayChar>:
 80035d8:	b590      	push	{r4, r7, lr}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	80fb      	strh	r3, [r7, #6]
 80035e2:	460b      	mov	r3, r1
 80035e4:	80bb      	strh	r3, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	70fb      	strb	r3, [r7, #3]
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <BSP_LCD_DisplayChar+0x80>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	491b      	ldr	r1, [pc, #108]	; (800365c <BSP_LCD_DisplayChar+0x84>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3308      	adds	r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f1a3 0020 	sub.w	r0, r3, #32
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <BSP_LCD_DisplayChar+0x80>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	4c14      	ldr	r4, [pc, #80]	; (800365c <BSP_LCD_DisplayChar+0x84>)
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4423      	add	r3, r4
 8003616:	3308      	adds	r3, #8
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	88db      	ldrh	r3, [r3, #6]
 800361c:	fb03 f000 	mul.w	r0, r3, r0
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <BSP_LCD_DisplayChar+0x80>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <BSP_LCD_DisplayChar+0x84>)
 8003626:	4613      	mov	r3, r2
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4423      	add	r3, r4
 8003630:	3308      	adds	r3, #8
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	889b      	ldrh	r3, [r3, #4]
 8003636:	3307      	adds	r3, #7
 8003638:	2b00      	cmp	r3, #0
 800363a:	da00      	bge.n	800363e <BSP_LCD_DisplayChar+0x66>
 800363c:	3307      	adds	r3, #7
 800363e:	10db      	asrs	r3, r3, #3
 8003640:	fb00 f303 	mul.w	r3, r0, r3
 8003644:	18ca      	adds	r2, r1, r3
 8003646:	88b9      	ldrh	r1, [r7, #4]
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fa44 	bl	8003ad8 <DrawChar>
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	20000c60 	.word	0x20000c60
 800365c:	20000c64 	.word	0x20000c64

08003660 <BSP_LCD_DisplayStringAt>:
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	60ba      	str	r2, [r7, #8]
 8003668:	461a      	mov	r2, r3
 800366a:	4603      	mov	r3, r0
 800366c:	81fb      	strh	r3, [r7, #14]
 800366e:	460b      	mov	r3, r1
 8003670:	81bb      	strh	r3, [r7, #12]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
 8003676:	2301      	movs	r3, #1
 8003678:	83fb      	strh	r3, [r7, #30]
 800367a:	2300      	movs	r3, #0
 800367c:	83bb      	strh	r3, [r7, #28]
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e002      	b.n	8003692 <BSP_LCD_DisplayStringAt+0x32>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	3301      	adds	r3, #1
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	617a      	str	r2, [r7, #20]
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f6      	bne.n	800368c <BSP_LCD_DisplayStringAt+0x2c>
 800369e:	f7ff fe0f 	bl	80032c0 <BSP_LCD_GetXSize>
 80036a2:	4601      	mov	r1, r0
 80036a4:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	484b      	ldr	r0, [pc, #300]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4403      	add	r3, r0
 80036b4:	3308      	adds	r3, #8
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d01c      	beq.n	8003700 <BSP_LCD_DisplayStringAt+0xa0>
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	dc33      	bgt.n	8003732 <BSP_LCD_DisplayStringAt+0xd2>
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d002      	beq.n	80036d4 <BSP_LCD_DisplayStringAt+0x74>
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d019      	beq.n	8003706 <BSP_LCD_DisplayStringAt+0xa6>
 80036d2:	e02e      	b.n	8003732 <BSP_LCD_DisplayStringAt+0xd2>
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad1      	subs	r1, r2, r3
 80036da:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	483e      	ldr	r0, [pc, #248]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4403      	add	r3, r0
 80036ea:	3308      	adds	r3, #8
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	889b      	ldrh	r3, [r3, #4]
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	085b      	lsrs	r3, r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	4413      	add	r3, r2
 80036fc:	83fb      	strh	r3, [r7, #30]
 80036fe:	e01b      	b.n	8003738 <BSP_LCD_DisplayStringAt+0xd8>
 8003700:	89fb      	ldrh	r3, [r7, #14]
 8003702:	83fb      	strh	r3, [r7, #30]
 8003704:	e018      	b.n	8003738 <BSP_LCD_DisplayStringAt+0xd8>
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	b299      	uxth	r1, r3
 800370e:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4831      	ldr	r0, [pc, #196]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4403      	add	r3, r0
 800371e:	3308      	adds	r3, #8
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	889b      	ldrh	r3, [r3, #4]
 8003724:	fb11 f303 	smulbb	r3, r1, r3
 8003728:	b29a      	uxth	r2, r3
 800372a:	89fb      	ldrh	r3, [r7, #14]
 800372c:	4413      	add	r3, r2
 800372e:	83fb      	strh	r3, [r7, #30]
 8003730:	e002      	b.n	8003738 <BSP_LCD_DisplayStringAt+0xd8>
 8003732:	89fb      	ldrh	r3, [r7, #14]
 8003734:	83fb      	strh	r3, [r7, #30]
 8003736:	bf00      	nop
 8003738:	e01a      	b.n	8003770 <BSP_LCD_DisplayStringAt+0x110>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	89b9      	ldrh	r1, [r7, #12]
 8003740:	8bfb      	ldrh	r3, [r7, #30]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff48 	bl	80035d8 <BSP_LCD_DisplayChar>
 8003748:	4b22      	ldr	r3, [pc, #136]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4922      	ldr	r1, [pc, #136]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3308      	adds	r3, #8
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	889a      	ldrh	r2, [r3, #4]
 800375e:	8bfb      	ldrh	r3, [r7, #30]
 8003760:	4413      	add	r3, r2
 8003762:	83fb      	strh	r3, [r7, #30]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	8bbb      	ldrh	r3, [r7, #28]
 800376c:	3301      	adds	r3, #1
 800376e:	83bb      	strh	r3, [r7, #28]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2dc      	uxtb	r4, r3
 800377e:	f7ff fd9f 	bl	80032c0 <BSP_LCD_GetXSize>
 8003782:	8bb9      	ldrh	r1, [r7, #28]
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4d13      	ldr	r5, [pc, #76]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	442b      	add	r3, r5
 8003794:	3308      	adds	r3, #8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	889b      	ldrh	r3, [r3, #4]
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	1ac3      	subs	r3, r0, r3
 80037a0:	b299      	uxth	r1, r3
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <BSP_LCD_DisplayStringAt+0x174>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <BSP_LCD_DisplayStringAt+0x178>)
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4403      	add	r3, r0
 80037b2:	3308      	adds	r3, #8
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	889b      	ldrh	r3, [r3, #4]
 80037b8:	4299      	cmp	r1, r3
 80037ba:	bf2c      	ite	cs
 80037bc:	2301      	movcs	r3, #1
 80037be:	2300      	movcc	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	4023      	ands	r3, r4
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1b7      	bne.n	800373a <BSP_LCD_DisplayStringAt+0xda>
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}
 80037d4:	20000c60 	.word	0x20000c60
 80037d8:	20000c64 	.word	0x20000c64

080037dc <BSP_LCD_DisplayStringAtLine>:
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	80fb      	strh	r3, [r7, #6]
 80037e8:	f7ff fe54 	bl	8003494 <BSP_LCD_GetFont>
 80037ec:	4603      	mov	r3, r0
 80037ee:	88db      	ldrh	r3, [r3, #6]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	fb12 f303 	smulbb	r3, r2, r3
 80037f6:	b299      	uxth	r1, r3
 80037f8:	2303      	movs	r3, #3
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7ff ff2f 	bl	8003660 <BSP_LCD_DisplayStringAt>
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <BSP_LCD_FillRect>:
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af02      	add	r7, sp, #8
 8003814:	4604      	mov	r4, r0
 8003816:	4608      	mov	r0, r1
 8003818:	4611      	mov	r1, r2
 800381a:	461a      	mov	r2, r3
 800381c:	4623      	mov	r3, r4
 800381e:	80fb      	strh	r3, [r7, #6]
 8003820:	4603      	mov	r3, r0
 8003822:	80bb      	strh	r3, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	803b      	strh	r3, [r7, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <BSP_LCD_FillRect+0xa8>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4920      	ldr	r1, [pc, #128]	; (80038b8 <BSP_LCD_FillRect+0xac>)
 8003836:	4613      	mov	r3, r2
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fdda 	bl	80033fc <BSP_LCD_SetTextColor>
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <BSP_LCD_FillRect+0xa8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1b      	ldr	r2, [pc, #108]	; (80038bc <BSP_LCD_FillRect+0xb0>)
 800384e:	2134      	movs	r1, #52	; 0x34
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	335c      	adds	r3, #92	; 0x5c
 8003858:	681c      	ldr	r4, [r3, #0]
 800385a:	f7ff fd31 	bl	80032c0 <BSP_LCD_GetXSize>
 800385e:	4602      	mov	r2, r0
 8003860:	88bb      	ldrh	r3, [r7, #4]
 8003862:	fb03 f202 	mul.w	r2, r3, r2
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4423      	add	r3, r4
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <BSP_LCD_FillRect+0xa8>)
 8003872:	681c      	ldr	r4, [r3, #0]
 8003874:	68fd      	ldr	r5, [r7, #12]
 8003876:	887e      	ldrh	r6, [r7, #2]
 8003878:	f8b7 8000 	ldrh.w	r8, [r7]
 800387c:	f7ff fd20 	bl	80032c0 <BSP_LCD_GetXSize>
 8003880:	4602      	mov	r2, r0
 8003882:	887b      	ldrh	r3, [r7, #2]
 8003884:	1ad1      	subs	r1, r2, r3
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <BSP_LCD_FillRect+0xa8>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	480b      	ldr	r0, [pc, #44]	; (80038b8 <BSP_LCD_FillRect+0xac>)
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	9100      	str	r1, [sp, #0]
 800389c:	4643      	mov	r3, r8
 800389e:	4632      	mov	r2, r6
 80038a0:	4629      	mov	r1, r5
 80038a2:	4620      	mov	r0, r4
 80038a4:	f000 f9d2 	bl	8003c4c <FillBuffer>
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b2:	bf00      	nop
 80038b4:	20000c60 	.word	0x20000c60
 80038b8:	20000c64 	.word	0x20000c64
 80038bc:	20000b48 	.word	0x20000b48

080038c0 <BSP_LCD_DisplayOn>:
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <BSP_LCD_DisplayOn+0x1c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <BSP_LCD_DisplayOn+0x16>
 80038ce:	4b03      	ldr	r3, [pc, #12]	; (80038dc <BSP_LCD_DisplayOn+0x1c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4798      	blx	r3
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000c7c 	.word	0x20000c7c

080038e0 <BSP_LCD_MspInit>:
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
 80038ea:	4b61      	ldr	r3, [pc, #388]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	4a60      	ldr	r2, [pc, #384]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80038f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f4:	6453      	str	r3, [r2, #68]	; 0x44
 80038f6:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a59      	ldr	r2, [pc, #356]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b57      	ldr	r3, [pc, #348]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a52      	ldr	r2, [pc, #328]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b50      	ldr	r3, [pc, #320]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	4b4c      	ldr	r3, [pc, #304]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a4b      	ldr	r2, [pc, #300]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003944:	f043 0302 	orr.w	r3, r3, #2
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b49      	ldr	r3, [pc, #292]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2300      	movs	r3, #0
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	4b45      	ldr	r3, [pc, #276]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a44      	ldr	r2, [pc, #272]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	613b      	str	r3, [r7, #16]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2300      	movs	r3, #0
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a3d      	ldr	r2, [pc, #244]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 800397c:	f043 0308 	orr.w	r3, r3, #8
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2300      	movs	r3, #0
 8003990:	60bb      	str	r3, [r7, #8]
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 8003998:	f043 0320 	orr.w	r3, r3, #32
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2300      	movs	r3, #0
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a2f      	ldr	r2, [pc, #188]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <BSP_LCD_MspInit+0x190>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f641 0358 	movw	r3, #6232	; 0x1858
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
 80039cc:	2302      	movs	r3, #2
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80039d0:	2300      	movs	r3, #0
 80039d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d4:	2302      	movs	r3, #2
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
 80039d8:	230e      	movs	r3, #14
 80039da:	637b      	str	r3, [r7, #52]	; 0x34
 80039dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e0:	4619      	mov	r1, r3
 80039e2:	4824      	ldr	r0, [pc, #144]	; (8003a74 <BSP_LCD_MspInit+0x194>)
 80039e4:	f001 f9f2 	bl	8004dcc <HAL_GPIO_Init>
 80039e8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f2:	4619      	mov	r1, r3
 80039f4:	4820      	ldr	r0, [pc, #128]	; (8003a78 <BSP_LCD_MspInit+0x198>)
 80039f6:	f001 f9e9 	bl	8004dcc <HAL_GPIO_Init>
 80039fa:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a04:	4619      	mov	r1, r3
 8003a06:	481d      	ldr	r0, [pc, #116]	; (8003a7c <BSP_LCD_MspInit+0x19c>)
 8003a08:	f001 f9e0 	bl	8004dcc <HAL_GPIO_Init>
 8003a0c:	2348      	movs	r3, #72	; 0x48
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a14:	4619      	mov	r1, r3
 8003a16:	481a      	ldr	r0, [pc, #104]	; (8003a80 <BSP_LCD_MspInit+0x1a0>)
 8003a18:	f001 f9d8 	bl	8004dcc <HAL_GPIO_Init>
 8003a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
 8003a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a26:	4619      	mov	r1, r3
 8003a28:	4816      	ldr	r0, [pc, #88]	; (8003a84 <BSP_LCD_MspInit+0x1a4>)
 8003a2a:	f001 f9cf 	bl	8004dcc <HAL_GPIO_Init>
 8003a2e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4813      	ldr	r0, [pc, #76]	; (8003a88 <BSP_LCD_MspInit+0x1a8>)
 8003a3c:	f001 f9c6 	bl	8004dcc <HAL_GPIO_Init>
 8003a40:	2303      	movs	r3, #3
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
 8003a44:	2309      	movs	r3, #9
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	480a      	ldr	r0, [pc, #40]	; (8003a78 <BSP_LCD_MspInit+0x198>)
 8003a50:	f001 f9bc 	bl	8004dcc <HAL_GPIO_Init>
 8003a54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4809      	ldr	r0, [pc, #36]	; (8003a88 <BSP_LCD_MspInit+0x1a8>)
 8003a62:	f001 f9b3 	bl	8004dcc <HAL_GPIO_Init>
 8003a66:	bf00      	nop
 8003a68:	3738      	adds	r7, #56	; 0x38
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40020000 	.word	0x40020000
 8003a78:	40020400 	.word	0x40020400
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	40020c00 	.word	0x40020c00
 8003a84:	40021400 	.word	0x40021400
 8003a88:	40021800 	.word	0x40021800

08003a8c <BSP_LCD_DrawPixel>:
 8003a8c:	b5b0      	push	{r4, r5, r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	603a      	str	r2, [r7, #0]
 8003a96:	80fb      	strh	r3, [r7, #6]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	80bb      	strh	r3, [r7, #4]
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <BSP_LCD_DrawPixel+0x44>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a0c      	ldr	r2, [pc, #48]	; (8003ad4 <BSP_LCD_DrawPixel+0x48>)
 8003aa2:	2134      	movs	r1, #52	; 0x34
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	335c      	adds	r3, #92	; 0x5c
 8003aac:	681c      	ldr	r4, [r3, #0]
 8003aae:	88bd      	ldrh	r5, [r7, #4]
 8003ab0:	f7ff fc06 	bl	80032c0 <BSP_LCD_GetXSize>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	fb03 f205 	mul.w	r2, r3, r5
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4423      	add	r3, r4
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bdb0      	pop	{r4, r5, r7, pc}
 8003ad0:	20000c60 	.word	0x20000c60
 8003ad4:	20000b48 	.word	0x20000b48

08003ad8 <DrawChar>:
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	603a      	str	r2, [r7, #0]
 8003ae2:	80fb      	strh	r3, [r7, #6]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	80bb      	strh	r3, [r7, #4]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61fb      	str	r3, [r7, #28]
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <DrawChar+0x16c>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4953      	ldr	r1, [pc, #332]	; (8003c48 <DrawChar+0x170>)
 8003afa:	4613      	mov	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3308      	adds	r3, #8
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	88db      	ldrh	r3, [r3, #6]
 8003b0a:	827b      	strh	r3, [r7, #18]
 8003b0c:	4b4d      	ldr	r3, [pc, #308]	; (8003c44 <DrawChar+0x16c>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	494d      	ldr	r1, [pc, #308]	; (8003c48 <DrawChar+0x170>)
 8003b12:	4613      	mov	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	889b      	ldrh	r3, [r3, #4]
 8003b22:	823b      	strh	r3, [r7, #16]
 8003b24:	8a3b      	ldrh	r3, [r7, #16]
 8003b26:	3307      	adds	r3, #7
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da00      	bge.n	8003b2e <DrawChar+0x56>
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	10db      	asrs	r3, r3, #3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	8a3b      	ldrh	r3, [r7, #16]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e076      	b.n	8003c32 <DrawChar+0x15a>
 8003b44:	8a3b      	ldrh	r3, [r7, #16]
 8003b46:	3307      	adds	r3, #7
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	da00      	bge.n	8003b4e <DrawChar+0x76>
 8003b4c:	3307      	adds	r3, #7
 8003b4e:	10db      	asrs	r3, r3, #3
 8003b50:	461a      	mov	r2, r3
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	8a3b      	ldrh	r3, [r7, #16]
 8003b60:	3307      	adds	r3, #7
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	da00      	bge.n	8003b68 <DrawChar+0x90>
 8003b66:	3307      	adds	r3, #7
 8003b68:	10db      	asrs	r3, r3, #3
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d002      	beq.n	8003b74 <DrawChar+0x9c>
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d004      	beq.n	8003b7c <DrawChar+0xa4>
 8003b72:	e00c      	b.n	8003b8e <DrawChar+0xb6>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e016      	b.n	8003baa <DrawChar+0xd2>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	3201      	adds	r2, #1
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e00d      	b.n	8003baa <DrawChar+0xd2>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	041a      	lsls	r2, r3, #16
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3301      	adds	r3, #1
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	021b      	lsls	r3, r3, #8
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	3202      	adds	r2, #2
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	bf00      	nop
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
 8003bae:	e036      	b.n	8003c1e <DrawChar+0x146>
 8003bb0:	8a3a      	ldrh	r2, [r7, #16]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	4413      	add	r3, r2
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d012      	beq.n	8003bf2 <DrawChar+0x11a>
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b298      	uxth	r0, r3
 8003bd6:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <DrawChar+0x16c>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	491b      	ldr	r1, [pc, #108]	; (8003c48 <DrawChar+0x170>)
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	88bb      	ldrh	r3, [r7, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7ff ff4e 	bl	8003a8c <BSP_LCD_DrawPixel>
 8003bf0:	e012      	b.n	8003c18 <DrawChar+0x140>
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	b298      	uxth	r0, r3
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <DrawChar+0x16c>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4911      	ldr	r1, [pc, #68]	; (8003c48 <DrawChar+0x170>)
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	88bb      	ldrh	r3, [r7, #4]
 8003c12:	4619      	mov	r1, r3
 8003c14:	f7ff ff3a 	bl	8003a8c <BSP_LCD_DrawPixel>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	61bb      	str	r3, [r7, #24]
 8003c1e:	8a3b      	ldrh	r3, [r7, #16]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d3c4      	bcc.n	8003bb0 <DrawChar+0xd8>
 8003c26:	88bb      	ldrh	r3, [r7, #4]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	80bb      	strh	r3, [r7, #4]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	8a7b      	ldrh	r3, [r7, #18]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d384      	bcc.n	8003b44 <DrawChar+0x6c>
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000c60 	.word	0x20000c60
 8003c48:	20000c64 	.word	0x20000c64

08003c4c <FillBuffer>:
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b16      	ldr	r3, [pc, #88]	; (8003cb4 <FillBuffer+0x68>)
 8003c5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <FillBuffer+0x68>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <FillBuffer+0x68>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	60d3      	str	r3, [r2, #12]
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <FillBuffer+0x68>)
 8003c70:	4a11      	ldr	r2, [pc, #68]	; (8003cb8 <FillBuffer+0x6c>)
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	480f      	ldr	r0, [pc, #60]	; (8003cb4 <FillBuffer+0x68>)
 8003c76:	f000 fd0d 	bl	8004694 <HAL_DMA2D_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d115      	bne.n	8003cac <FillBuffer+0x60>
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <FillBuffer+0x68>)
 8003c84:	f000 ff74 	bl	8004b70 <HAL_DMA2D_ConfigLayer>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10e      	bne.n	8003cac <FillBuffer+0x60>
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69f9      	ldr	r1, [r7, #28]
 8003c98:	4806      	ldr	r0, [pc, #24]	; (8003cb4 <FillBuffer+0x68>)
 8003c9a:	f000 fd44 	bl	8004726 <HAL_DMA2D_Start>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d103      	bne.n	8003cac <FillBuffer+0x60>
 8003ca4:	210a      	movs	r1, #10
 8003ca6:	4803      	ldr	r0, [pc, #12]	; (8003cb4 <FillBuffer+0x68>)
 8003ca8:	f000 fd68 	bl	800477c <HAL_DMA2D_PollForTransfer>
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000bf0 	.word	0x20000bf0
 8003cb8:	4002b000 	.word	0x4002b000

08003cbc <BSP_SDRAM_Init>:
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <BSP_SDRAM_Init+0xb0>)
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003cc8:	2202      	movs	r2, #2
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	4b28      	ldr	r3, [pc, #160]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003cce:	2207      	movs	r2, #7
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	4b27      	ldr	r3, [pc, #156]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	4b25      	ldr	r3, [pc, #148]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003cda:	2207      	movs	r2, #7
 8003cdc:	60da      	str	r2, [r3, #12]
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	611a      	str	r2, [r3, #16]
 8003ce4:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	615a      	str	r2, [r3, #20]
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003cec:	2202      	movs	r2, #2
 8003cee:	619a      	str	r2, [r3, #24]
 8003cf0:	4b1d      	ldr	r3, [pc, #116]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003cfe:	2204      	movs	r2, #4
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d04:	2210      	movs	r2, #16
 8003d06:	611a      	str	r2, [r3, #16]
 8003d08:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d0a:	2240      	movs	r2, #64	; 0x40
 8003d0c:	615a      	str	r2, [r3, #20]
 8003d0e:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d10:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003d14:	619a      	str	r2, [r3, #24]
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61da      	str	r2, [r3, #28]
 8003d1c:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d22:	621a      	str	r2, [r3, #32]
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d30:	629a      	str	r2, [r3, #40]	; 0x28
 8003d32:	2100      	movs	r1, #0
 8003d34:	480c      	ldr	r0, [pc, #48]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d36:	f000 f87f 	bl	8003e38 <BSP_SDRAM_MspInit>
 8003d3a:	490d      	ldr	r1, [pc, #52]	; (8003d70 <BSP_SDRAM_Init+0xb4>)
 8003d3c:	480a      	ldr	r0, [pc, #40]	; (8003d68 <BSP_SDRAM_Init+0xac>)
 8003d3e:	f004 fc35 	bl	80085ac <HAL_SDRAM_Init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <BSP_SDRAM_Init+0x94>
 8003d48:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <BSP_SDRAM_Init+0xb8>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	e002      	b.n	8003d56 <BSP_SDRAM_Init+0x9a>
 8003d50:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <BSP_SDRAM_Init+0xb8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	f240 506a 	movw	r0, #1386	; 0x56a
 8003d5a:	f000 f80d 	bl	8003d78 <BSP_SDRAM_Initialization_sequence>
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <BSP_SDRAM_Init+0xb8>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	20000c80 	.word	0x20000c80
 8003d6c:	a0000140 	.word	0xa0000140
 8003d70:	20000cb4 	.word	0x20000cb4
 8003d74:	20000040 	.word	0x20000040

08003d78 <BSP_SDRAM_Initialization_sequence>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	4b2a      	ldr	r3, [pc, #168]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	609a      	str	r2, [r3, #8]
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da0:	4923      	ldr	r1, [pc, #140]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003da2:	4824      	ldr	r0, [pc, #144]	; (8003e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003da4:	f004 fc40 	bl	8008628 <HAL_SDRAM_SendCommand>
 8003da8:	2001      	movs	r0, #1
 8003daa:	f000 f993 	bl	80040d4 <HAL_Delay>
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db0:	2202      	movs	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db6:	2208      	movs	r2, #8
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dca:	4919      	ldr	r1, [pc, #100]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dcc:	4819      	ldr	r0, [pc, #100]	; (8003e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003dce:	f004 fc2b 	bl	8008628 <HAL_SDRAM_SendCommand>
 8003dd2:	4b17      	ldr	r3, [pc, #92]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dd4:	2203      	movs	r2, #3
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dda:	2208      	movs	r2, #8
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003de0:	2204      	movs	r2, #4
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dee:	4910      	ldr	r1, [pc, #64]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003df0:	4810      	ldr	r0, [pc, #64]	; (8003e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003df2:	f004 fc19 	bl	8008628 <HAL_SDRAM_SendCommand>
 8003df6:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dfe:	2204      	movs	r2, #4
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e04:	2208      	movs	r2, #8
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	609a      	str	r2, [r3, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a07      	ldr	r2, [pc, #28]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e12:	60d3      	str	r3, [r2, #12]
 8003e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e18:	4905      	ldr	r1, [pc, #20]	; (8003e30 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e1a:	4806      	ldr	r0, [pc, #24]	; (8003e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e1c:	f004 fc04 	bl	8008628 <HAL_SDRAM_SendCommand>
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4804      	ldr	r0, [pc, #16]	; (8003e34 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e24:	f004 fc2b 	bl	800867e <HAL_SDRAM_ProgramRefreshRate>
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20000cd0 	.word	0x20000cd0
 8003e34:	20000c80 	.word	0x20000c80

08003e38 <BSP_SDRAM_MspInit>:
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b090      	sub	sp, #64	; 0x40
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80ec 	beq.w	8004022 <BSP_SDRAM_MspInit+0x1ea>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4e:	4b77      	ldr	r3, [pc, #476]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	4a76      	ldr	r2, [pc, #472]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	6393      	str	r3, [r2, #56]	; 0x38
 8003e5a:	4b74      	ldr	r3, [pc, #464]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6a:	4b70      	ldr	r3, [pc, #448]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a6f      	ldr	r2, [pc, #444]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b6d      	ldr	r3, [pc, #436]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	2300      	movs	r3, #0
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	4b69      	ldr	r3, [pc, #420]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a68      	ldr	r2, [pc, #416]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b66      	ldr	r3, [pc, #408]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
 8003ea2:	4b62      	ldr	r3, [pc, #392]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a61      	ldr	r2, [pc, #388]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b5f      	ldr	r3, [pc, #380]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a5a      	ldr	r2, [pc, #360]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b58      	ldr	r3, [pc, #352]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a53      	ldr	r2, [pc, #332]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ee0:	f043 0310 	orr.w	r3, r3, #16
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b51      	ldr	r3, [pc, #324]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	4b4d      	ldr	r3, [pc, #308]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a4c      	ldr	r2, [pc, #304]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003efc:	f043 0320 	orr.w	r3, r3, #32
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b4a      	ldr	r3, [pc, #296]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	4b46      	ldr	r3, [pc, #280]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	4a45      	ldr	r2, [pc, #276]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f1e:	4b43      	ldr	r3, [pc, #268]	; (800402c <BSP_SDRAM_MspInit+0x1f4>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f2e:	2302      	movs	r3, #2
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
 8003f36:	230c      	movs	r3, #12
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3a:	2360      	movs	r3, #96	; 0x60
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	483a      	ldr	r0, [pc, #232]	; (8004030 <BSP_SDRAM_MspInit+0x1f8>)
 8003f46:	f000 ff41 	bl	8004dcc <HAL_GPIO_Init>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f52:	4619      	mov	r1, r3
 8003f54:	4837      	ldr	r0, [pc, #220]	; (8004034 <BSP_SDRAM_MspInit+0x1fc>)
 8003f56:	f000 ff39 	bl	8004dcc <HAL_GPIO_Init>
 8003f5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f64:	4619      	mov	r1, r3
 8003f66:	4834      	ldr	r0, [pc, #208]	; (8004038 <BSP_SDRAM_MspInit+0x200>)
 8003f68:	f000 ff30 	bl	8004dcc <HAL_GPIO_Init>
 8003f6c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f76:	4619      	mov	r1, r3
 8003f78:	4830      	ldr	r0, [pc, #192]	; (800403c <BSP_SDRAM_MspInit+0x204>)
 8003f7a:	f000 ff27 	bl	8004dcc <HAL_GPIO_Init>
 8003f7e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f88:	4619      	mov	r1, r3
 8003f8a:	482d      	ldr	r0, [pc, #180]	; (8004040 <BSP_SDRAM_MspInit+0x208>)
 8003f8c:	f000 ff1e 	bl	8004dcc <HAL_GPIO_Init>
 8003f90:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4829      	ldr	r0, [pc, #164]	; (8004044 <BSP_SDRAM_MspInit+0x20c>)
 8003f9e:	f000 ff15 	bl	8004dcc <HAL_GPIO_Init>
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003faa:	2280      	movs	r2, #128	; 0x80
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fbc:	611a      	str	r2, [r3, #16]
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc4:	615a      	str	r2, [r3, #20]
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fcc:	619a      	str	r2, [r3, #24]
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61da      	str	r2, [r3, #28]
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fda:	621a      	str	r2, [r3, #32]
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003fee:	4b16      	ldr	r3, [pc, #88]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ff4:	4b14      	ldr	r3, [pc, #80]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003ff6:	4a15      	ldr	r2, [pc, #84]	; (800404c <BSP_SDRAM_MspInit+0x214>)
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a12      	ldr	r2, [pc, #72]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6393      	str	r3, [r2, #56]	; 0x38
 8004006:	4810      	ldr	r0, [pc, #64]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 8004008:	f000 fa34 	bl	8004474 <HAL_DMA_DeInit>
 800400c:	480e      	ldr	r0, [pc, #56]	; (8004048 <BSP_SDRAM_MspInit+0x210>)
 800400e:	f000 f983 	bl	8004318 <HAL_DMA_Init>
 8004012:	2200      	movs	r2, #0
 8004014:	210f      	movs	r1, #15
 8004016:	2038      	movs	r0, #56	; 0x38
 8004018:	f000 f938 	bl	800428c <HAL_NVIC_SetPriority>
 800401c:	2038      	movs	r0, #56	; 0x38
 800401e:	f000 f951 	bl	80042c4 <HAL_NVIC_EnableIRQ>
 8004022:	bf00      	nop
 8004024:	3740      	adds	r7, #64	; 0x40
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	40020400 	.word	0x40020400
 8004034:	40020800 	.word	0x40020800
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40021400 	.word	0x40021400
 8004044:	40021800 	.word	0x40021800
 8004048:	20000ce0 	.word	0x20000ce0
 800404c:	40026410 	.word	0x40026410

08004050 <HAL_Init>:
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <HAL_Init+0x40>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0d      	ldr	r2, [pc, #52]	; (8004090 <HAL_Init+0x40>)
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_Init+0x40>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_Init+0x40>)
 8004066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b08      	ldr	r3, [pc, #32]	; (8004090 <HAL_Init+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a07      	ldr	r2, [pc, #28]	; (8004090 <HAL_Init+0x40>)
 8004072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	2003      	movs	r0, #3
 800407a:	f000 f8fc 	bl	8004276 <HAL_NVIC_SetPriorityGrouping>
 800407e:	2000      	movs	r0, #0
 8004080:	f7fe fb28 	bl	80026d4 <HAL_InitTick>
 8004084:	f7fe fafa 	bl	800267c <HAL_MspInit>
 8004088:	2300      	movs	r3, #0
 800408a:	4618      	mov	r0, r3
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40023c00 	.word	0x40023c00

08004094 <HAL_IncTick>:
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
 8004098:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <HAL_IncTick+0x20>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_IncTick+0x24>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4413      	add	r3, r2
 80040a4:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <HAL_IncTick+0x24>)
 80040a6:	6013      	str	r3, [r2, #0]
 80040a8:	bf00      	nop
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000048 	.word	0x20000048
 80040b8:	20000d40 	.word	0x20000d40

080040bc <HAL_GetTick>:
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
 80040c0:	4b03      	ldr	r3, [pc, #12]	; (80040d0 <HAL_GetTick+0x14>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000d40 	.word	0x20000d40

080040d4 <HAL_Delay>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	f7ff ffee 	bl	80040bc <HAL_GetTick>
 80040e0:	60b8      	str	r0, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ec:	d005      	beq.n	80040fa <HAL_Delay+0x26>
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_Delay+0x44>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	461a      	mov	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	bf00      	nop
 80040fc:	f7ff ffde 	bl	80040bc <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	429a      	cmp	r2, r3
 800410a:	d8f7      	bhi.n	80040fc <HAL_Delay+0x28>
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000048 	.word	0x20000048

0800411c <__NVIC_SetPriorityGrouping>:
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004138:	4013      	ands	r3, r2
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	021a      	lsls	r2, r3, #8
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <__NVIC_SetPriorityGrouping+0x44>)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	60d3      	str	r3, [r2, #12]
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_GetPriorityGrouping>:
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <__NVIC_GetPriorityGrouping+0x18>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00

08004180 <__NVIC_EnableIRQ>:
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	2b00      	cmp	r3, #0
 8004190:	db0b      	blt.n	80041aa <__NVIC_EnableIRQ+0x2a>
 8004192:	79fb      	ldrb	r3, [r7, #7]
 8004194:	f003 021f 	and.w	r2, r3, #31
 8004198:	4907      	ldr	r1, [pc, #28]	; (80041b8 <__NVIC_EnableIRQ+0x38>)
 800419a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2001      	movs	r0, #1
 80041a2:	fa00 f202 	lsl.w	r2, r0, r2
 80041a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e100 	.word	0xe000e100

080041bc <__NVIC_SetPriority>:
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	6039      	str	r1, [r7, #0]
 80041c6:	71fb      	strb	r3, [r7, #7]
 80041c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db0a      	blt.n	80041e6 <__NVIC_SetPriority+0x2a>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	490c      	ldr	r1, [pc, #48]	; (8004208 <__NVIC_SetPriority+0x4c>)
 80041d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041da:	0112      	lsls	r2, r2, #4
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	440b      	add	r3, r1
 80041e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80041e4:	e00a      	b.n	80041fc <__NVIC_SetPriority+0x40>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4908      	ldr	r1, [pc, #32]	; (800420c <__NVIC_SetPriority+0x50>)
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	3b04      	subs	r3, #4
 80041f4:	0112      	lsls	r2, r2, #4
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	440b      	add	r3, r1
 80041fa:	761a      	strb	r2, [r3, #24]
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	e000e100 	.word	0xe000e100
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <NVIC_EncodePriority>:
 8004210:	b480      	push	{r7}
 8004212:	b089      	sub	sp, #36	; 0x24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	61fb      	str	r3, [r7, #28]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f1c3 0307 	rsb	r3, r3, #7
 800422a:	2b04      	cmp	r3, #4
 800422c:	bf28      	it	cs
 800422e:	2304      	movcs	r3, #4
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3304      	adds	r3, #4
 8004236:	2b06      	cmp	r3, #6
 8004238:	d902      	bls.n	8004240 <NVIC_EncodePriority+0x30>
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3b03      	subs	r3, #3
 800423e:	e000      	b.n	8004242 <NVIC_EncodePriority+0x32>
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43da      	mvns	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	401a      	ands	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	409a      	lsls	r2, r3
 8004258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	fa01 f303 	lsl.w	r3, r1, r3
 8004262:	43d9      	mvns	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	400b      	ands	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	4618      	mov	r0, r3
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_NVIC_SetPriorityGrouping>:
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ff4c 	bl	800411c <__NVIC_SetPriorityGrouping>
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_NVIC_SetPriority>:
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	73fb      	strb	r3, [r7, #15]
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	f7ff ff61 	bl	8004164 <__NVIC_GetPriorityGrouping>
 80042a2:	6178      	str	r0, [r7, #20]
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	6978      	ldr	r0, [r7, #20]
 80042aa:	f7ff ffb1 	bl	8004210 <NVIC_EncodePriority>
 80042ae:	4602      	mov	r2, r0
 80042b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b4:	4611      	mov	r1, r2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ff80 	bl	80041bc <__NVIC_SetPriority>
 80042bc:	bf00      	nop
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_NVIC_EnableIRQ>:
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	71fb      	strb	r3, [r7, #7]
 80042ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff ff54 	bl	8004180 <__NVIC_EnableIRQ>
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_CRC_Init>:
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_CRC_Init+0x12>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e00e      	b.n	8004310 <HAL_CRC_Init+0x30>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	795b      	ldrb	r3, [r3, #5]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <HAL_CRC_Init+0x28>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	711a      	strb	r2, [r3, #4]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fc fe9c 	bl	8001040 <HAL_CRC_MspInit>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	715a      	strb	r2, [r3, #5]
 800430e:	2300      	movs	r3, #0
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_DMA_Init>:
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	f7ff feca 	bl	80040bc <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_DMA_Init+0x1c>
 8004330:	2301      	movs	r3, #1
 8004332:	e099      	b.n	8004468 <HAL_DMA_Init+0x150>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	e00f      	b.n	8004376 <HAL_DMA_Init+0x5e>
 8004356:	f7ff feb1 	bl	80040bc <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b05      	cmp	r3, #5
 8004362:	d908      	bls.n	8004376 <HAL_DMA_Init+0x5e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	655a      	str	r2, [r3, #84]	; 0x54
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004372:	2303      	movs	r3, #3
 8004374:	e078      	b.n	8004468 <HAL_DMA_Init+0x150>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e8      	bne.n	8004356 <HAL_DMA_Init+0x3e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4b38      	ldr	r3, [pc, #224]	; (8004470 <HAL_DMA_Init+0x158>)
 8004390:	4013      	ands	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d107      	bne.n	80043e0 <HAL_DMA_Init+0xc8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	4313      	orrs	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	4313      	orrs	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	2b04      	cmp	r3, #4
 8004408:	d117      	bne.n	800443a <HAL_DMA_Init+0x122>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00e      	beq.n	800443a <HAL_DMA_Init+0x122>
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f8bd 	bl	800459c <DMA_CheckFifoParam>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d008      	beq.n	800443a <HAL_DMA_Init+0x122>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2240      	movs	r2, #64	; 0x40
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004436:	2301      	movs	r3, #1
 8004438:	e016      	b.n	8004468 <HAL_DMA_Init+0x150>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	615a      	str	r2, [r3, #20]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f874 	bl	8004530 <DMA_CalcBaseAndBitshift>
 8004448:	4603      	mov	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004450:	223f      	movs	r2, #63	; 0x3f
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004466:	2300      	movs	r3, #0
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	f010803f 	.word	0xf010803f

08004474 <HAL_DMA_DeInit>:
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_DMA_DeInit+0x12>
 8004482:	2301      	movs	r3, #1
 8004484:	e050      	b.n	8004528 <HAL_DMA_DeInit+0xb4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d101      	bne.n	8004496 <HAL_DMA_DeInit+0x22>
 8004492:	2302      	movs	r3, #2
 8004494:	e048      	b.n	8004528 <HAL_DMA_DeInit+0xb4>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	605a      	str	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2221      	movs	r2, #33	; 0x21
 80044d4:	615a      	str	r2, [r3, #20]
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f82a 	bl	8004530 <DMA_CalcBaseAndBitshift>
 80044dc:	4603      	mov	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	649a      	str	r2, [r3, #72]	; 0x48
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	651a      	str	r2, [r3, #80]	; 0x50
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	223f      	movs	r2, #63	; 0x3f
 800450a:	409a      	lsls	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8004526:	2300      	movs	r3, #0
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <DMA_CalcBaseAndBitshift>:
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	3b10      	subs	r3, #16
 8004540:	4a14      	ldr	r2, [pc, #80]	; (8004594 <DMA_CalcBaseAndBitshift+0x64>)
 8004542:	fba2 2303 	umull	r2, r3, r2, r3
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <DMA_CalcBaseAndBitshift+0x68>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	; 0x5c
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b03      	cmp	r3, #3
 800455c:	d909      	bls.n	8004572 <DMA_CalcBaseAndBitshift+0x42>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004566:	f023 0303 	bic.w	r3, r3, #3
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	659a      	str	r2, [r3, #88]	; 0x58
 8004570:	e007      	b.n	8004582 <DMA_CalcBaseAndBitshift+0x52>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6593      	str	r3, [r2, #88]	; 0x58
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	aaaaaaab 	.word	0xaaaaaaab
 8004598:	0801999c 	.word	0x0801999c

0800459c <DMA_CheckFifoParam>:
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d11f      	bne.n	80045f6 <DMA_CheckFifoParam+0x5a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d856      	bhi.n	800466a <DMA_CheckFifoParam+0xce>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <DMA_CheckFifoParam+0x28>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	080045d5 	.word	0x080045d5
 80045c8:	080045e7 	.word	0x080045e7
 80045cc:	080045d5 	.word	0x080045d5
 80045d0:	0800466b 	.word	0x0800466b
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d046      	beq.n	800466e <DMA_CheckFifoParam+0xd2>
 80045e0:	2301      	movs	r3, #1
 80045e2:	73fb      	strb	r3, [r7, #15]
 80045e4:	e043      	b.n	800466e <DMA_CheckFifoParam+0xd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ee:	d140      	bne.n	8004672 <DMA_CheckFifoParam+0xd6>
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
 80045f4:	e03d      	b.n	8004672 <DMA_CheckFifoParam+0xd6>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045fe:	d121      	bne.n	8004644 <DMA_CheckFifoParam+0xa8>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b03      	cmp	r3, #3
 8004604:	d837      	bhi.n	8004676 <DMA_CheckFifoParam+0xda>
 8004606:	a201      	add	r2, pc, #4	; (adr r2, 800460c <DMA_CheckFifoParam+0x70>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	0800461d 	.word	0x0800461d
 8004610:	08004623 	.word	0x08004623
 8004614:	0800461d 	.word	0x0800461d
 8004618:	08004635 	.word	0x08004635
 800461c:	2301      	movs	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e030      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d025      	beq.n	800467a <DMA_CheckFifoParam+0xde>
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e022      	b.n	800467a <DMA_CheckFifoParam+0xde>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800463c:	d11f      	bne.n	800467e <DMA_CheckFifoParam+0xe2>
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e01c      	b.n	800467e <DMA_CheckFifoParam+0xe2>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d903      	bls.n	8004652 <DMA_CheckFifoParam+0xb6>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d003      	beq.n	8004658 <DMA_CheckFifoParam+0xbc>
 8004650:	e018      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e015      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <DMA_CheckFifoParam+0xe6>
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e00b      	b.n	8004682 <DMA_CheckFifoParam+0xe6>
 800466a:	bf00      	nop
 800466c:	e00a      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 800466e:	bf00      	nop
 8004670:	e008      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004672:	bf00      	nop
 8004674:	e006      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004676:	bf00      	nop
 8004678:	e004      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 800467a:	bf00      	nop
 800467c:	e002      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 800467e:	bf00      	nop
 8004680:	e000      	b.n	8004684 <DMA_CheckFifoParam+0xe8>
 8004682:	bf00      	nop
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <HAL_DMA2D_Init>:
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_DMA2D_Init+0x12>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e03b      	b.n	800471e <HAL_DMA2D_Init+0x8a>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <HAL_DMA2D_Init+0x2c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fce2 	bl	8001084 <HAL_DMA2D_MspInit>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e4:	f023 0107 	bic.w	r1, r3, #7
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	635a      	str	r2, [r3, #52]	; 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80046fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	68d1      	ldr	r1, [r2, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	430b      	orrs	r3, r1
 800470c:	6413      	str	r3, [r2, #64]	; 0x40
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	63da      	str	r2, [r3, #60]	; 0x3c
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800471c:	2300      	movs	r3, #0
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_DMA2D_Start>:
 8004726:	b580      	push	{r7, lr}
 8004728:	b086      	sub	sp, #24
 800472a:	af02      	add	r7, sp, #8
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_DMA2D_Start+0x1c>
 800473e:	2302      	movs	r3, #2
 8004740:	e018      	b.n	8004774 <HAL_DMA2D_Start+0x4e>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 fa99 	bl	8004c94 <DMA2D_SetConfig>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	2300      	movs	r3, #0
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_DMA2D_PollForTransfer>:
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d056      	beq.n	8004846 <HAL_DMA2D_PollForTransfer+0xca>
 8004798:	f7ff fc90 	bl	80040bc <HAL_GetTick>
 800479c:	6178      	str	r0, [r7, #20]
 800479e:	e04b      	b.n	8004838 <HAL_DMA2D_PollForTransfer+0xbc>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d023      	beq.n	80047fa <HAL_DMA2D_PollForTransfer+0x7e>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0320 	and.w	r3, r3, #32
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_DMA2D_PollForTransfer+0x4c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c0:	f043 0202 	orr.w	r2, r3, #2
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d005      	beq.n	80047de <HAL_DMA2D_PollForTransfer+0x62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	f043 0201 	orr.w	r2, r3, #1
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2221      	movs	r2, #33	; 0x21
 80047e4:	609a      	str	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2204      	movs	r2, #4
 80047ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0a5      	b.n	8004946 <HAL_DMA2D_PollForTransfer+0x1ca>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004800:	d01a      	beq.n	8004838 <HAL_DMA2D_PollForTransfer+0xbc>
 8004802:	f7ff fc5b 	bl	80040bc <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <HAL_DMA2D_PollForTransfer+0x9c>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10f      	bne.n	8004838 <HAL_DMA2D_PollForTransfer+0xbc>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2203      	movs	r2, #3
 8004828:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004834:	2303      	movs	r3, #3
 8004836:	e086      	b.n	8004946 <HAL_DMA2D_PollForTransfer+0x1ca>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ac      	beq.n	80047a0 <HAL_DMA2D_PollForTransfer+0x24>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d061      	beq.n	800492c <HAL_DMA2D_PollForTransfer+0x1b0>
 8004868:	f7ff fc28 	bl	80040bc <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]
 800486e:	e056      	b.n	800491e <HAL_DMA2D_PollForTransfer+0x1a2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02e      	beq.n	80048e0 <HAL_DMA2D_PollForTransfer+0x164>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_DMA2D_PollForTransfer+0x11c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	63da      	str	r2, [r3, #60]	; 0x3c
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_DMA2D_PollForTransfer+0x132>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	f043 0202 	orr.w	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_DMA2D_PollForTransfer+0x148>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2229      	movs	r2, #41	; 0x29
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2204      	movs	r2, #4
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_DMA2D_PollForTransfer+0x1ca>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048e6:	d01a      	beq.n	800491e <HAL_DMA2D_PollForTransfer+0x1a2>
 80048e8:	f7ff fbe8 	bl	80040bc <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <HAL_DMA2D_PollForTransfer+0x182>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10f      	bne.n	800491e <HAL_DMA2D_PollForTransfer+0x1a2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	f043 0220 	orr.w	r2, r3, #32
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	63da      	str	r2, [r3, #60]	; 0x3c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800491a:	2303      	movs	r3, #3
 800491c:	e013      	b.n	8004946 <HAL_DMA2D_PollForTransfer+0x1ca>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0a1      	beq.n	8004870 <HAL_DMA2D_PollForTransfer+0xf4>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2212      	movs	r2, #18
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004944:	2300      	movs	r3, #0
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <HAL_DMA2D_IRQHandler>:
 800494e:	b580      	push	{r7, lr}
 8004950:	b084      	sub	sp, #16
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d026      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d021      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2204      	movs	r2, #4
 80049a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_DMA2D_IRQHandler+0x70>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d026      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d021      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2204      	movs	r2, #4
 80049fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_DMA2D_IRQHandler+0xc8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	4798      	blx	r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d026      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d021      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2208      	movs	r2, #8
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a46:	f043 0204 	orr.w	r2, r3, #4
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_DMA2D_IRQHandler+0x120>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <HAL_DMA2D_IRQHandler+0x152>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	609a      	str	r2, [r3, #8]
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f853 	bl	8004b46 <HAL_DMA2D_LineEventCallback>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d024      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01f      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_DMA2D_IRQHandler+0x1a6>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01f      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01a      	beq.n	8004b3e <HAL_DMA2D_IRQHandler+0x1f0>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f80e 	bl	8004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_DMA2D_LineEventCallback>:
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_DMA2D_ConfigLayer>:
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_DMA2D_ConfigLayer+0x20>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e079      	b.n	8004c84 <HAL_DMA2D_ConfigLayer+0x114>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_DMA2D_ConfigLayer+0x120>)
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b0a      	cmp	r3, #10
 8004bc4:	d003      	beq.n	8004bce <HAL_DMA2D_ConfigLayer+0x5e>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	d107      	bne.n	8004bde <HAL_DMA2D_ConfigLayer+0x6e>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	e005      	b.n	8004bea <HAL_DMA2D_ConfigLayer+0x7a>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	061b      	lsls	r3, r3, #24
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d120      	bne.n	8004c32 <HAL_DMA2D_ConfigLayer+0xc2>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	43db      	mvns	r3, r3
 8004bfa:	ea02 0103 	and.w	r1, r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	619a      	str	r2, [r3, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b0a      	cmp	r3, #10
 8004c18:	d003      	beq.n	8004c22 <HAL_DMA2D_ConfigLayer+0xb2>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b09      	cmp	r3, #9
 8004c20:	d127      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c30:	e01f      	b.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43db      	mvns	r3, r3
 8004c3c:	ea02 0103 	and.w	r1, r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	61da      	str	r2, [r3, #28]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	611a      	str	r2, [r3, #16]
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b0a      	cmp	r3, #10
 8004c5a:	d003      	beq.n	8004c64 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b09      	cmp	r3, #9
 8004c62:	d106      	bne.n	8004c72 <HAL_DMA2D_ConfigLayer+0x102>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c70:	621a      	str	r2, [r3, #32]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c82:	2300      	movs	r3, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	ff03000f 	.word	0xff03000f

08004c94 <DMA2D_SetConfig>:
 8004c94:	b480      	push	{r7}
 8004c96:	b08b      	sub	sp, #44	; 0x2c
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	041a      	lsls	r2, r3, #16
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ccc:	d174      	bne.n	8004db8 <DMA2D_SetConfig+0x124>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cd4:	623b      	str	r3, [r7, #32]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <DMA2D_SetConfig+0x72>
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e053      	b.n	8004dae <DMA2D_SetConfig+0x11a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d106      	bne.n	8004d1c <DMA2D_SetConfig+0x88>
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1a:	e048      	b.n	8004dae <DMA2D_SetConfig+0x11a>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d111      	bne.n	8004d48 <DMA2D_SetConfig+0xb4>
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	0cdb      	lsrs	r3, r3, #19
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	0a9b      	lsrs	r3, r3, #10
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	02db      	lsls	r3, r3, #11
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
 8004d46:	e032      	b.n	8004dae <DMA2D_SetConfig+0x11a>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d117      	bne.n	8004d80 <DMA2D_SetConfig+0xec>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	0fdb      	lsrs	r3, r3, #31
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	0cdb      	lsrs	r3, r3, #19
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	0adb      	lsrs	r3, r3, #11
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	08db      	lsrs	r3, r3, #3
 8004d66:	617b      	str	r3, [r7, #20]
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	029b      	lsls	r3, r3, #10
 8004d70:	431a      	orrs	r2, r3
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	03db      	lsls	r3, r3, #15
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e016      	b.n	8004dae <DMA2D_SetConfig+0x11a>
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	0f1b      	lsrs	r3, r3, #28
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	431a      	orrs	r2, r3
 8004da2:	6a3b      	ldr	r3, [r7, #32]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4313      	orrs	r3, r2
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
 8004db6:	e003      	b.n	8004dc0 <DMA2D_SetConfig+0x12c>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	bf00      	nop
 8004dc2:	372c      	adds	r7, #44	; 0x2c
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_Init>:
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e177      	b.n	80050d8 <HAL_GPIO_Init+0x30c>
 8004de8:	2201      	movs	r2, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	f040 8166 	bne.w	80050d2 <HAL_GPIO_Init+0x306>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d00b      	beq.n	8004e26 <HAL_GPIO_Init+0x5a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d007      	beq.n	8004e26 <HAL_GPIO_Init+0x5a>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b11      	cmp	r3, #17
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x5a>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b12      	cmp	r3, #18
 8004e24:	d130      	bne.n	8004e88 <HAL_GPIO_Init+0xbc>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	61bb      	str	r3, [r7, #24]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	f003 0201 	and.w	r2, r3, #1
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	2203      	movs	r2, #3
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	60da      	str	r2, [r3, #12]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0xfc>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b12      	cmp	r3, #18
 8004ec6:	d123      	bne.n	8004f10 <HAL_GPIO_Init+0x144>
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3208      	adds	r2, #8
 8004ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	220f      	movs	r2, #15
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691a      	ldr	r2, [r3, #16]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	08da      	lsrs	r2, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3208      	adds	r2, #8
 8004f0a:	69b9      	ldr	r1, [r7, #24]
 8004f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0203 	and.w	r2, r3, #3
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80c0 	beq.w	80050d2 <HAL_GPIO_Init+0x306>
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	4b66      	ldr	r3, [pc, #408]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	4a65      	ldr	r2, [pc, #404]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f60:	6453      	str	r3, [r2, #68]	; 0x44
 8004f62:	4b63      	ldr	r3, [pc, #396]	; (80050f0 <HAL_GPIO_Init+0x324>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <HAL_GPIO_Init+0x328>)
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	089b      	lsrs	r3, r3, #2
 8004f74:	3302      	adds	r3, #2
 8004f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	220f      	movs	r2, #15
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_GPIO_Init+0x32c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d037      	beq.n	800500a <HAL_GPIO_Init+0x23e>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a57      	ldr	r2, [pc, #348]	; (80050fc <HAL_GPIO_Init+0x330>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_GPIO_Init+0x23a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a56      	ldr	r2, [pc, #344]	; (8005100 <HAL_GPIO_Init+0x334>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d02b      	beq.n	8005002 <HAL_GPIO_Init+0x236>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a55      	ldr	r2, [pc, #340]	; (8005104 <HAL_GPIO_Init+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d025      	beq.n	8004ffe <HAL_GPIO_Init+0x232>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a54      	ldr	r2, [pc, #336]	; (8005108 <HAL_GPIO_Init+0x33c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <HAL_GPIO_Init+0x22e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a53      	ldr	r2, [pc, #332]	; (800510c <HAL_GPIO_Init+0x340>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d019      	beq.n	8004ff6 <HAL_GPIO_Init+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a52      	ldr	r2, [pc, #328]	; (8005110 <HAL_GPIO_Init+0x344>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_GPIO_Init+0x226>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_GPIO_Init+0x348>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00d      	beq.n	8004fee <HAL_GPIO_Init+0x222>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_GPIO_Init+0x34c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <HAL_GPIO_Init+0x21e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4f      	ldr	r2, [pc, #316]	; (800511c <HAL_GPIO_Init+0x350>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GPIO_Init+0x21a>
 8004fe2:	2309      	movs	r3, #9
 8004fe4:	e012      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fe6:	230a      	movs	r3, #10
 8004fe8:	e010      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fea:	2308      	movs	r3, #8
 8004fec:	e00e      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004fee:	2307      	movs	r3, #7
 8004ff0:	e00c      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	e00a      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ff6:	2305      	movs	r3, #5
 8004ff8:	e008      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e006      	b.n	800500c <HAL_GPIO_Init+0x240>
 8004ffe:	2303      	movs	r3, #3
 8005000:	e004      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005002:	2302      	movs	r3, #2
 8005004:	e002      	b.n	800500c <HAL_GPIO_Init+0x240>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <HAL_GPIO_Init+0x240>
 800500a:	2300      	movs	r3, #0
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	f002 0203 	and.w	r2, r2, #3
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	4093      	lsls	r3, r2
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	4935      	ldr	r1, [pc, #212]	; (80050f4 <HAL_GPIO_Init+0x328>)
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800502a:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_GPIO_Init+0x354>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x282>
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	4a34      	ldr	r2, [pc, #208]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6013      	str	r3, [r2, #0]
 8005054:	4b32      	ldr	r3, [pc, #200]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2ac>
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
 8005078:	4a29      	ldr	r2, [pc, #164]	; (8005120 <HAL_GPIO_Init+0x354>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6053      	str	r3, [r2, #4]
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <HAL_GPIO_Init+0x354>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x2d6>
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6093      	str	r3, [r2, #8]
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x300>
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
 80050cc:	4a14      	ldr	r2, [pc, #80]	; (8005120 <HAL_GPIO_Init+0x354>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	60d3      	str	r3, [r2, #12]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3301      	adds	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	f67f ae84 	bls.w	8004de8 <HAL_GPIO_Init+0x1c>
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3724      	adds	r7, #36	; 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40013800 	.word	0x40013800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40020800 	.word	0x40020800
 8005104:	40020c00 	.word	0x40020c00
 8005108:	40021000 	.word	0x40021000
 800510c:	40021400 	.word	0x40021400
 8005110:	40021800 	.word	0x40021800
 8005114:	40021c00 	.word	0x40021c00
 8005118:	40022000 	.word	0x40022000
 800511c:	40022400 	.word	0x40022400
 8005120:	40013c00 	.word	0x40013c00

08005124 <HAL_GPIO_DeInit>:
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
 800513e:	e0d9      	b.n	80052f4 <HAL_GPIO_DeInit+0x1d0>
 8005140:	2201      	movs	r2, #1
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4013      	ands	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	429a      	cmp	r2, r3
 8005158:	f040 80c9 	bne.w	80052ee <HAL_GPIO_DeInit+0x1ca>
 800515c:	4a6b      	ldr	r2, [pc, #428]	; (800530c <HAL_GPIO_DeInit+0x1e8>)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	3302      	adds	r3, #2
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	220f      	movs	r2, #15
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a63      	ldr	r2, [pc, #396]	; (8005310 <HAL_GPIO_DeInit+0x1ec>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d037      	beq.n	80051f6 <HAL_GPIO_DeInit+0xd2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a62      	ldr	r2, [pc, #392]	; (8005314 <HAL_GPIO_DeInit+0x1f0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d031      	beq.n	80051f2 <HAL_GPIO_DeInit+0xce>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a61      	ldr	r2, [pc, #388]	; (8005318 <HAL_GPIO_DeInit+0x1f4>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d02b      	beq.n	80051ee <HAL_GPIO_DeInit+0xca>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a60      	ldr	r2, [pc, #384]	; (800531c <HAL_GPIO_DeInit+0x1f8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d025      	beq.n	80051ea <HAL_GPIO_DeInit+0xc6>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a5f      	ldr	r2, [pc, #380]	; (8005320 <HAL_GPIO_DeInit+0x1fc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01f      	beq.n	80051e6 <HAL_GPIO_DeInit+0xc2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a5e      	ldr	r2, [pc, #376]	; (8005324 <HAL_GPIO_DeInit+0x200>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d019      	beq.n	80051e2 <HAL_GPIO_DeInit+0xbe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a5d      	ldr	r2, [pc, #372]	; (8005328 <HAL_GPIO_DeInit+0x204>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_GPIO_DeInit+0xba>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a5c      	ldr	r2, [pc, #368]	; (800532c <HAL_GPIO_DeInit+0x208>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00d      	beq.n	80051da <HAL_GPIO_DeInit+0xb6>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a5b      	ldr	r2, [pc, #364]	; (8005330 <HAL_GPIO_DeInit+0x20c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <HAL_GPIO_DeInit+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a5a      	ldr	r2, [pc, #360]	; (8005334 <HAL_GPIO_DeInit+0x210>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_GPIO_DeInit+0xae>
 80051ce:	2309      	movs	r3, #9
 80051d0:	e012      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051d2:	230a      	movs	r3, #10
 80051d4:	e010      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051d6:	2308      	movs	r3, #8
 80051d8:	e00e      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051da:	2307      	movs	r3, #7
 80051dc:	e00c      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051de:	2306      	movs	r3, #6
 80051e0:	e00a      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051e2:	2305      	movs	r3, #5
 80051e4:	e008      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051e6:	2304      	movs	r3, #4
 80051e8:	e006      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051ea:	2303      	movs	r3, #3
 80051ec:	e004      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e002      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_GPIO_DeInit+0xd4>
 80051f6:	2300      	movs	r3, #0
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	f002 0203 	and.w	r2, r2, #3
 80051fe:	0092      	lsls	r2, r2, #2
 8005200:	4093      	lsls	r3, r2
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	d132      	bne.n	800526e <HAL_GPIO_DeInit+0x14a>
 8005208:	4b4b      	ldr	r3, [pc, #300]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	43db      	mvns	r3, r3
 8005210:	4949      	ldr	r1, [pc, #292]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 8005212:	4013      	ands	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
 8005216:	4b48      	ldr	r3, [pc, #288]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	43db      	mvns	r3, r3
 800521e:	4946      	ldr	r1, [pc, #280]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 8005220:	4013      	ands	r3, r2
 8005222:	604b      	str	r3, [r1, #4]
 8005224:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	43db      	mvns	r3, r3
 800522c:	4942      	ldr	r1, [pc, #264]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 800522e:	4013      	ands	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	43db      	mvns	r3, r3
 800523a:	493f      	ldr	r1, [pc, #252]	; (8005338 <HAL_GPIO_DeInit+0x214>)
 800523c:	4013      	ands	r3, r2
 800523e:	60cb      	str	r3, [r1, #12]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	4a2e      	ldr	r2, [pc, #184]	; (800530c <HAL_GPIO_DeInit+0x1e8>)
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	089b      	lsrs	r3, r3, #2
 8005256:	3302      	adds	r3, #2
 8005258:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	43da      	mvns	r2, r3
 8005260:	482a      	ldr	r0, [pc, #168]	; (800530c <HAL_GPIO_DeInit+0x1e8>)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	089b      	lsrs	r3, r3, #2
 8005266:	400a      	ands	r2, r1
 8005268:	3302      	adds	r3, #2
 800526a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2103      	movs	r1, #3
 8005278:	fa01 f303 	lsl.w	r3, r1, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	08da      	lsrs	r2, r3, #3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3208      	adds	r2, #8
 800528c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f003 0307 	and.w	r3, r3, #7
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	220f      	movs	r2, #15
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	08d2      	lsrs	r2, r2, #3
 80052a4:	4019      	ands	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3208      	adds	r2, #8
 80052aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2103      	movs	r1, #3
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	401a      	ands	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	60da      	str	r2, [r3, #12]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	2101      	movs	r1, #1
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	2103      	movs	r1, #3
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	3301      	adds	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	f67f af22 	bls.w	8005140 <HAL_GPIO_DeInit+0x1c>
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40013800 	.word	0x40013800
 8005310:	40020000 	.word	0x40020000
 8005314:	40020400 	.word	0x40020400
 8005318:	40020800 	.word	0x40020800
 800531c:	40020c00 	.word	0x40020c00
 8005320:	40021000 	.word	0x40021000
 8005324:	40021400 	.word	0x40021400
 8005328:	40021800 	.word	0x40021800
 800532c:	40021c00 	.word	0x40021c00
 8005330:	40022000 	.word	0x40022000
 8005334:	40022400 	.word	0x40022400
 8005338:	40013c00 	.word	0x40013c00

0800533c <HAL_GPIO_WritePin>:
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	807b      	strh	r3, [r7, #2]
 8005348:	4613      	mov	r3, r2
 800534a:	707b      	strb	r3, [r7, #1]
 800534c:	787b      	ldrb	r3, [r7, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_GPIO_WritePin+0x1e>
 8005352:	887a      	ldrh	r2, [r7, #2]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	619a      	str	r2, [r3, #24]
 8005358:	e003      	b.n	8005362 <HAL_GPIO_WritePin+0x26>
 800535a:	887b      	ldrh	r3, [r7, #2]
 800535c:	041a      	lsls	r2, r3, #16
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	619a      	str	r2, [r3, #24]
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_GPIO_EXTI_IRQHandler>:
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	80fb      	strh	r3, [r7, #6]
 800537a:	4b08      	ldr	r3, [pc, #32]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	88fb      	ldrh	r3, [r7, #6]
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d006      	beq.n	8005394 <HAL_GPIO_EXTI_IRQHandler+0x24>
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	6153      	str	r3, [r2, #20]
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f806 	bl	80053a0 <HAL_GPIO_EXTI_Callback>
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40013c00 	.word	0x40013c00

080053a0 <HAL_GPIO_EXTI_Callback>:
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	4603      	mov	r3, r0
 80053a8:	80fb      	strh	r3, [r7, #6]
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_HCD_Init>:
 80053b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b8:	b08f      	sub	sp, #60	; 0x3c
 80053ba:	af0a      	add	r7, sp, #40	; 0x28
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_HCD_Init+0x12>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e054      	b.n	8005472 <HAL_HCD_Init+0xbc>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <HAL_HCD_Init+0x32>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f00c fada 	bl	801199c <HAL_HCD_MspInit>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2203      	movs	r2, #3
 80053ec:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <HAL_HCD_Init+0x4c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	611a      	str	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f005 f8d3 	bl	800a5b2 <USB_DisableGlobalInt>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	687e      	ldr	r6, [r7, #4]
 8005414:	466d      	mov	r5, sp
 8005416:	f106 0410 	add.w	r4, r6, #16
 800541a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800541e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005422:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005426:	e885 0003 	stmia.w	r5, {r0, r1}
 800542a:	1d33      	adds	r3, r6, #4
 800542c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542e:	6838      	ldr	r0, [r7, #0]
 8005430:	f005 f84d 	bl	800a4ce <USB_CoreInit>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2101      	movs	r1, #1
 800543a:	4618      	mov	r0, r3
 800543c:	f005 f8ca 	bl	800a5d4 <USB_SetCurrentMode>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	687e      	ldr	r6, [r7, #4]
 8005448:	466d      	mov	r5, sp
 800544a:	f106 0410 	add.w	r4, r6, #16
 800544e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005454:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005456:	e894 0003 	ldmia.w	r4, {r0, r1}
 800545a:	e885 0003 	stmia.w	r5, {r0, r1}
 800545e:	1d33      	adds	r3, r6, #4
 8005460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005462:	6838      	ldr	r0, [r7, #0]
 8005464:	f005 f9dc 	bl	800a820 <USB_HostInit>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9
 8005470:	2300      	movs	r3, #0
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800547a <HAL_HCD_HC_Init>:
 800547a:	b590      	push	{r4, r7, lr}
 800547c:	b089      	sub	sp, #36	; 0x24
 800547e:	af04      	add	r7, sp, #16
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	4608      	mov	r0, r1
 8005484:	4611      	mov	r1, r2
 8005486:	461a      	mov	r2, r3
 8005488:	4603      	mov	r3, r0
 800548a:	70fb      	strb	r3, [r7, #3]
 800548c:	460b      	mov	r3, r1
 800548e:	70bb      	strb	r3, [r7, #2]
 8005490:	4613      	mov	r3, r2
 8005492:	707b      	strb	r3, [r7, #1]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_HCD_HC_Init+0x28>
 800549e:	2302      	movs	r3, #2
 80054a0:	e07f      	b.n	80055a2 <HAL_HCD_HC_Init+0x128>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80054aa:	78fa      	ldrb	r2, [r7, #3]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	333d      	adds	r3, #61	; 0x3d
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	3338      	adds	r3, #56	; 0x38
 80054ce:	787a      	ldrb	r2, [r7, #1]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	00db      	lsls	r3, r3, #3
 80054de:	440b      	add	r3, r1
 80054e0:	3340      	adds	r3, #64	; 0x40
 80054e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	440b      	add	r3, r1
 80054f4:	3339      	adds	r3, #57	; 0x39
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
 8005508:	333f      	adds	r3, #63	; 0x3f
 800550a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800550e:	701a      	strb	r2, [r3, #0]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	78bb      	ldrb	r3, [r7, #2]
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005518:	b2d8      	uxtb	r0, r3
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	333a      	adds	r3, #58	; 0x3a
 8005528:	4602      	mov	r2, r0
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da0a      	bge.n	800554a <HAL_HCD_HC_Init+0xd0>
 8005534:	78fa      	ldrb	r2, [r7, #3]
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	440b      	add	r3, r1
 8005542:	333b      	adds	r3, #59	; 0x3b
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e009      	b.n	800555e <HAL_HCD_HC_Init+0xe4>
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	440b      	add	r3, r1
 8005558:	333b      	adds	r3, #59	; 0x3b
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	78fa      	ldrb	r2, [r7, #3]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	440b      	add	r3, r1
 800556c:	333c      	adds	r3, #60	; 0x3c
 800556e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	787c      	ldrb	r4, [r7, #1]
 800557a:	78ba      	ldrb	r2, [r7, #2]
 800557c:	78f9      	ldrb	r1, [r7, #3]
 800557e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	f897 3020 	ldrb.w	r3, [r7, #32]
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4623      	mov	r3, r4
 8005590:	f005 fac8 	bl	800ab24 <USB_HC_Init>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	4618      	mov	r0, r3
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd90      	pop	{r4, r7, pc}

080055aa <HAL_HCD_HC_Halt>:
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
 80055b6:	2300      	movs	r3, #0
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_HCD_HC_Halt+0x1e>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e00f      	b.n	80055e8 <HAL_HCD_HC_Halt+0x3e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	4611      	mov	r1, r2
 80055d8:	4618      	mov	r0, r3
 80055da:	f005 fd02 	bl	800afe2 <USB_HC_Halt>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_HCD_HC_SubmitRequest>:
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	4608      	mov	r0, r1
 80055fa:	4611      	mov	r1, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4603      	mov	r3, r0
 8005600:	70fb      	strb	r3, [r7, #3]
 8005602:	460b      	mov	r3, r1
 8005604:	70bb      	strb	r3, [r7, #2]
 8005606:	4613      	mov	r3, r2
 8005608:	707b      	strb	r3, [r7, #1]
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	333b      	adds	r3, #59	; 0x3b
 800561a:	78ba      	ldrb	r2, [r7, #2]
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	333f      	adds	r3, #63	; 0x3f
 800562e:	787a      	ldrb	r2, [r7, #1]
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	7c3b      	ldrb	r3, [r7, #16]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d114      	bne.n	8005662 <HAL_HCD_HC_SubmitRequest+0x72>
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	440b      	add	r3, r1
 8005646:	3342      	adds	r3, #66	; 0x42
 8005648:	2203      	movs	r2, #3
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	440b      	add	r3, r1
 800565a:	333d      	adds	r3, #61	; 0x3d
 800565c:	7f3a      	ldrb	r2, [r7, #28]
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	e009      	b.n	8005676 <HAL_HCD_HC_SubmitRequest+0x86>
 8005662:	78fa      	ldrb	r2, [r7, #3]
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	440b      	add	r3, r1
 8005670:	3342      	adds	r3, #66	; 0x42
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	787b      	ldrb	r3, [r7, #1]
 8005678:	2b03      	cmp	r3, #3
 800567a:	f200 80d6 	bhi.w	800582a <HAL_HCD_HC_SubmitRequest+0x23a>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005695 	.word	0x08005695
 8005688:	08005815 	.word	0x08005815
 800568c:	08005701 	.word	0x08005701
 8005690:	0800578b 	.word	0x0800578b
 8005694:	7c3b      	ldrb	r3, [r7, #16]
 8005696:	2b01      	cmp	r3, #1
 8005698:	f040 80c9 	bne.w	800582e <HAL_HCD_HC_SubmitRequest+0x23e>
 800569c:	78bb      	ldrb	r3, [r7, #2]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 80c5 	bne.w	800582e <HAL_HCD_HC_SubmitRequest+0x23e>
 80056a4:	8b3b      	ldrh	r3, [r7, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <HAL_HCD_HC_SubmitRequest+0xce>
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	4413      	add	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	440b      	add	r3, r1
 80056b8:	3351      	adds	r3, #81	; 0x51
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	440b      	add	r3, r1
 80056cc:	3351      	adds	r3, #81	; 0x51
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10a      	bne.n	80056ea <HAL_HCD_HC_SubmitRequest+0xfa>
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	440b      	add	r3, r1
 80056e2:	3342      	adds	r3, #66	; 0x42
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
 80056e8:	e0a1      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x23e>
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3342      	adds	r3, #66	; 0x42
 80056fa:	2202      	movs	r2, #2
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e096      	b.n	800582e <HAL_HCD_HC_SubmitRequest+0x23e>
 8005700:	78bb      	ldrb	r3, [r7, #2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d120      	bne.n	8005748 <HAL_HCD_HC_SubmitRequest+0x158>
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	440b      	add	r3, r1
 8005714:	3351      	adds	r3, #81	; 0x51
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <HAL_HCD_HC_SubmitRequest+0x142>
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	440b      	add	r3, r1
 800572a:	3342      	adds	r3, #66	; 0x42
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e07e      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	440b      	add	r3, r1
 8005740:	3342      	adds	r3, #66	; 0x42
 8005742:	2202      	movs	r2, #2
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	e073      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 8005748:	78fa      	ldrb	r2, [r7, #3]
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	4613      	mov	r3, r2
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	440b      	add	r3, r1
 8005756:	3350      	adds	r3, #80	; 0x50
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_HCD_HC_SubmitRequest+0x184>
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	440b      	add	r3, r1
 800576c:	3342      	adds	r3, #66	; 0x42
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e05d      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	3342      	adds	r3, #66	; 0x42
 8005784:	2202      	movs	r2, #2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	e052      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 800578a:	78bb      	ldrb	r3, [r7, #2]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d120      	bne.n	80057d2 <HAL_HCD_HC_SubmitRequest+0x1e2>
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	440b      	add	r3, r1
 800579e:	3351      	adds	r3, #81	; 0x51
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <HAL_HCD_HC_SubmitRequest+0x1cc>
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	3342      	adds	r3, #66	; 0x42
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e039      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	3342      	adds	r3, #66	; 0x42
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e02e      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	440b      	add	r3, r1
 80057e0:	3350      	adds	r3, #80	; 0x50
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10a      	bne.n	80057fe <HAL_HCD_HC_SubmitRequest+0x20e>
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	3342      	adds	r3, #66	; 0x42
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e018      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	3342      	adds	r3, #66	; 0x42
 800580e:	2202      	movs	r2, #2
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e00d      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	3342      	adds	r3, #66	; 0x42
 8005824:	2200      	movs	r2, #0
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e002      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_HCD_HC_SubmitRequest+0x240>
 800582e:	bf00      	nop
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	440b      	add	r3, r1
 800583e:	3344      	adds	r3, #68	; 0x44
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	78fa      	ldrb	r2, [r7, #3]
 8005846:	8b39      	ldrh	r1, [r7, #24]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4403      	add	r3, r0
 8005854:	3348      	adds	r3, #72	; 0x48
 8005856:	6019      	str	r1, [r3, #0]
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	335c      	adds	r3, #92	; 0x5c
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	440b      	add	r3, r1
 800587a:	334c      	adds	r3, #76	; 0x4c
 800587c:	2200      	movs	r2, #0
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	440b      	add	r3, r1
 800588e:	3339      	adds	r3, #57	; 0x39
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	335d      	adds	r3, #93	; 0x5d
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6818      	ldr	r0, [r3, #0]
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	3338      	adds	r3, #56	; 0x38
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	18d1      	adds	r1, r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	f005 fa38 	bl	800ad38 <USB_HC_StartXfer>
 80058c8:	4603      	mov	r3, r0
 80058ca:	4618      	mov	r0, r3
 80058cc:	3708      	adds	r7, #8
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop

080058d4 <HAL_HCD_IRQHandler>:
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	613b      	str	r3, [r7, #16]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	60fb      	str	r3, [r7, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f004 ff55 	bl	800a79a <USB_GetMode>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f040 80ef 	bne.w	8005ad6 <HAL_HCD_IRQHandler+0x202>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f004 ff39 	bl	800a774 <USB_ReadInterrupts>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80e5 	beq.w	8005ad4 <HAL_HCD_IRQHandler+0x200>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f004 ff30 	bl	800a774 <USB_ReadInterrupts>
 8005914:	4603      	mov	r3, r0
 8005916:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800591a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591e:	d104      	bne.n	800592a <HAL_HCD_IRQHandler+0x56>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005928:	615a      	str	r2, [r3, #20]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4618      	mov	r0, r3
 8005930:	f004 ff20 	bl	800a774 <USB_ReadInterrupts>
 8005934:	4603      	mov	r3, r0
 8005936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800593e:	d104      	bne.n	800594a <HAL_HCD_IRQHandler+0x76>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f004 ff10 	bl	800a774 <USB_ReadInterrupts>
 8005954:	4603      	mov	r3, r0
 8005956:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800595a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800595e:	d104      	bne.n	800596a <HAL_HCD_IRQHandler+0x96>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f004 ff00 	bl	800a774 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d103      	bne.n	8005986 <HAL_HCD_IRQHandler+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2202      	movs	r2, #2
 8005984:	615a      	str	r2, [r3, #20]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f004 fef2 	bl	800a774 <USB_ReadInterrupts>
 8005990:	4603      	mov	r3, r0
 8005992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800599a:	d115      	bne.n	80059c8 <HAL_HCD_IRQHandler+0xf4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059a4:	615a      	str	r2, [r3, #20]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <HAL_HCD_IRQHandler+0xf4>
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f00c f86a 	bl	8011a90 <HAL_HCD_Disconnect_Callback>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f004 ffe8 	bl	800a998 <USB_InitFSLSPClkSel>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fed1 	bl	800a774 <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059dc:	d102      	bne.n	80059e4 <HAL_HCD_IRQHandler+0x110>
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 f968 	bl	8006cb4 <HCD_Port_IRQHandler>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f004 fec3 	bl	800a774 <USB_ReadInterrupts>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d106      	bne.n	8005a06 <HAL_HCD_IRQHandler+0x132>
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f00c f82d 	bl	8011a58 <HAL_HCD_SOF_Callback>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2208      	movs	r2, #8
 8005a04:	615a      	str	r2, [r3, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f004 feb2 	bl	800a774 <USB_ReadInterrupts>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a1a:	d138      	bne.n	8005a8e <HAL_HCD_IRQHandler+0x1ba>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f005 facd 	bl	800afc0 <USB_HC_ReadInterrupt>
 8005a26:	60b8      	str	r0, [r7, #8]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	e025      	b.n	8005a7a <HAL_HCD_IRQHandler+0x1a6>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	fa22 f303 	lsr.w	r3, r2, r3
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <HAL_HCD_IRQHandler+0x1a0>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a58:	d106      	bne.n	8005a68 <HAL_HCD_IRQHandler+0x194>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8cf 	bl	8005c04 <HCD_HC_IN_IRQHandler>
 8005a66:	e005      	b.n	8005a74 <HAL_HCD_IRQHandler+0x1a0>
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fcfd 	bl	800646e <HCD_HC_OUT_IRQHandler>
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	3301      	adds	r3, #1
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3d4      	bcc.n	8005a2e <HAL_HCD_IRQHandler+0x15a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f004 fe6e 	bl	800a774 <USB_ReadInterrupts>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b10      	cmp	r3, #16
 8005aa0:	d101      	bne.n	8005aa6 <HAL_HCD_IRQHandler+0x1d2>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <HAL_HCD_IRQHandler+0x1d4>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d014      	beq.n	8005ad6 <HAL_HCD_IRQHandler+0x202>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0210 	bic.w	r2, r2, #16
 8005aba:	619a      	str	r2, [r3, #24]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 f84b 	bl	8006b58 <HCD_RXQLVL_IRQHandler>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0210 	orr.w	r2, r2, #16
 8005ad0:	619a      	str	r2, [r3, #24]
 8005ad2:	e000      	b.n	8005ad6 <HAL_HCD_IRQHandler+0x202>
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_HCD_Start>:
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_HCD_Start+0x16>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e013      	b.n	8005b1a <HAL_HCD_Start+0x3e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f004 fd46 	bl	800a590 <USB_EnableGlobalInt>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 ffa8 	bl	800aa60 <USB_DriveVbus>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005b18:	2300      	movs	r3, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_HCD_Stop>:
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_HCD_Stop+0x16>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e00d      	b.n	8005b54 <HAL_HCD_Stop+0x32>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f005 fb87 	bl	800b258 <USB_StopHost>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
 8005b52:	2300      	movs	r3, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_HCD_ResetPort>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f004 ff4f 	bl	800aa0c <USB_ResetPort>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4618      	mov	r0, r3
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_HCD_HC_GetURBState>:
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	440b      	add	r3, r1
 8005b92:	335c      	adds	r3, #92	; 0x5c
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_HCD_HC_GetXferCount>:
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	440b      	add	r3, r1
 8005bbc:	334c      	adds	r3, #76	; 0x4c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_HCD_GetCurrentFrame>:
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 ff91 	bl	800ab00 <USB_GetCurrentFrame>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_HCD_GetCurrentSpeed>:
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f004 ff6c 	bl	800aad2 <USB_GetHostSpeed>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HCD_HC_IN_IRQHandler>:
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d119      	bne.n	8005c68 <HCD_HC_IN_IRQHandler+0x64>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	461a      	mov	r2, r3
 8005c42:	2304      	movs	r3, #4
 8005c44:	6093      	str	r3, [r2, #8]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	60d3      	str	r3, [r2, #12]
 8005c66:	e0ce      	b.n	8005e06 <HCD_HC_IN_IRQHandler+0x202>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c7e:	d12c      	bne.n	8005cda <HCD_HC_IN_IRQHandler+0xd6>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c92:	6093      	str	r3, [r2, #8]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	440b      	add	r3, r1
 8005ca2:	335d      	adds	r3, #93	; 0x5d
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc2:	f043 0302 	orr.w	r3, r3, #2
 8005cc6:	60d3      	str	r3, [r2, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f005 f985 	bl	800afe2 <USB_HC_Halt>
 8005cd8:	e095      	b.n	8005e06 <HCD_HC_IN_IRQHandler+0x202>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d109      	bne.n	8005d04 <HCD_HC_IN_IRQHandler+0x100>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	2320      	movs	r3, #32
 8005d00:	6093      	str	r3, [r2, #8]
 8005d02:	e080      	b.n	8005e06 <HCD_HC_IN_IRQHandler+0x202>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d134      	bne.n	8005d84 <HCD_HC_IN_IRQHandler+0x180>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d34:	f043 0302 	orr.w	r3, r3, #2
 8005d38:	60d3      	str	r3, [r2, #12]
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	440b      	add	r3, r1
 8005d48:	335d      	adds	r3, #93	; 0x5d
 8005d4a:	2205      	movs	r2, #5
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	6093      	str	r3, [r2, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	2308      	movs	r3, #8
 8005d70:	6093      	str	r3, [r2, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f005 f930 	bl	800afe2 <USB_HC_Halt>
 8005d82:	e040      	b.n	8005e06 <HCD_HC_IN_IRQHandler+0x202>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d9a:	d134      	bne.n	8005e06 <HCD_HC_IN_IRQHandler+0x202>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db6:	f043 0302 	orr.w	r3, r3, #2
 8005dba:	60d3      	str	r3, [r2, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f005 f90b 	bl	800afe2 <USB_HC_Halt>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2310      	movs	r3, #16
 8005ddc:	6093      	str	r3, [r2, #8]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4613      	mov	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	440b      	add	r3, r1
 8005dec:	335d      	adds	r3, #93	; 0x5d
 8005dee:	2208      	movs	r2, #8
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	015a      	lsls	r2, r3, #5
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	4413      	add	r3, r2
 8005dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e04:	6093      	str	r3, [r2, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1c:	d122      	bne.n	8005e64 <HCD_HC_IN_IRQHandler+0x260>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e38:	f043 0302 	orr.w	r3, r3, #2
 8005e3c:	60d3      	str	r3, [r2, #12]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	4611      	mov	r1, r2
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f005 f8ca 	bl	800afe2 <USB_HC_Halt>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e60:	6093      	str	r3, [r2, #8]
 8005e62:	e300      	b.n	8006466 <HCD_HC_IN_IRQHandler+0x862>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	f040 80fd 	bne.w	8006076 <HCD_HC_IN_IRQHandler+0x472>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <HCD_HC_IN_IRQHandler+0x2b8>
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	440b      	add	r3, r1
 8005e92:	3348      	adds	r3, #72	; 0x48
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	0159      	lsls	r1, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	440b      	add	r3, r1
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea8:	1ad1      	subs	r1, r2, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	4403      	add	r3, r0
 8005eb8:	334c      	adds	r3, #76	; 0x4c
 8005eba:	6019      	str	r1, [r3, #0]
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	440b      	add	r3, r1
 8005eca:	335d      	adds	r3, #93	; 0x5d
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	440b      	add	r3, r1
 8005ede:	3358      	adds	r3, #88	; 0x58
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4613      	mov	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	00db      	lsls	r3, r3, #3
 8005f02:	440b      	add	r3, r1
 8005f04:	333f      	adds	r3, #63	; 0x3f
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HCD_HC_IN_IRQHandler+0x31e>
 8005f0c:	6879      	ldr	r1, [r7, #4]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	440b      	add	r3, r1
 8005f1a:	333f      	adds	r3, #63	; 0x3f
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d121      	bne.n	8005f66 <HCD_HC_IN_IRQHandler+0x362>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	60d3      	str	r3, [r2, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f005 f848 	bl	800afe2 <USB_HC_Halt>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2310      	movs	r3, #16
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e070      	b.n	8006048 <HCD_HC_IN_IRQHandler+0x444>
 8005f66:	6879      	ldr	r1, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	440b      	add	r3, r1
 8005f74:	333f      	adds	r3, #63	; 0x3f
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d12a      	bne.n	8005fd2 <HCD_HC_IN_IRQHandler+0x3ce>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	440b      	add	r3, r1
 8005faa:	335c      	adds	r3, #92	; 0x5c
 8005fac:	2201      	movs	r2, #1
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	b2d8      	uxtb	r0, r3
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	00db      	lsls	r3, r3, #3
 8005fc0:	440b      	add	r3, r1
 8005fc2:	335c      	adds	r3, #92	; 0x5c
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4601      	mov	r1, r0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f00b fd6e 	bl	8011aac <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fd0:	e03a      	b.n	8006048 <HCD_HC_IN_IRQHandler+0x444>
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	440b      	add	r3, r1
 8005fe0:	333f      	adds	r3, #63	; 0x3f
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d12f      	bne.n	8006048 <HCD_HC_IN_IRQHandler+0x444>
 8005fe8:	6879      	ldr	r1, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	440b      	add	r3, r1
 8005ff6:	335c      	adds	r3, #92	; 0x5c
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	440b      	add	r3, r1
 800600a:	3350      	adds	r3, #80	; 0x50
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	f083 0301 	eor.w	r3, r3, #1
 8006012:	b2d8      	uxtb	r0, r3
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3350      	adds	r3, #80	; 0x50
 8006024:	4602      	mov	r2, r0
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	b2d8      	uxtb	r0, r3
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	440b      	add	r3, r1
 800603a:	335c      	adds	r3, #92	; 0x5c
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	4601      	mov	r1, r0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f00b fd32 	bl	8011aac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	00db      	lsls	r3, r3, #3
 8006054:	440b      	add	r3, r1
 8006056:	3350      	adds	r3, #80	; 0x50
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	f083 0301 	eor.w	r3, r3, #1
 800605e:	b2d8      	uxtb	r0, r3
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	3350      	adds	r3, #80	; 0x50
 8006070:	4602      	mov	r2, r0
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e1f7      	b.n	8006466 <HCD_HC_IN_IRQHandler+0x862>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4413      	add	r3, r2
 800607e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b02      	cmp	r3, #2
 800608a:	f040 811a 	bne.w	80062c2 <HCD_HC_IN_IRQHandler+0x6be>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	0151      	lsls	r1, r2, #5
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	440a      	add	r2, r1
 80060a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a8:	f023 0302 	bic.w	r3, r3, #2
 80060ac:	60d3      	str	r3, [r2, #12]
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	00db      	lsls	r3, r3, #3
 80060ba:	440b      	add	r3, r1
 80060bc:	335d      	adds	r3, #93	; 0x5d
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10a      	bne.n	80060da <HCD_HC_IN_IRQHandler+0x4d6>
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	440b      	add	r3, r1
 80060d2:	335c      	adds	r3, #92	; 0x5c
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e0d9      	b.n	800628e <HCD_HC_IN_IRQHandler+0x68a>
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	440b      	add	r3, r1
 80060e8:	335d      	adds	r3, #93	; 0x5d
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d10a      	bne.n	8006106 <HCD_HC_IN_IRQHandler+0x502>
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	440b      	add	r3, r1
 80060fe:	335c      	adds	r3, #92	; 0x5c
 8006100:	2205      	movs	r2, #5
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e0c3      	b.n	800628e <HCD_HC_IN_IRQHandler+0x68a>
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	440b      	add	r3, r1
 8006114:	335d      	adds	r3, #93	; 0x5d
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b06      	cmp	r3, #6
 800611a:	d00a      	beq.n	8006132 <HCD_HC_IN_IRQHandler+0x52e>
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4613      	mov	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	440b      	add	r3, r1
 800612a:	335d      	adds	r3, #93	; 0x5d
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	2b08      	cmp	r3, #8
 8006130:	d156      	bne.n	80061e0 <HCD_HC_IN_IRQHandler+0x5dc>
 8006132:	6879      	ldr	r1, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4613      	mov	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	440b      	add	r3, r1
 8006140:	3358      	adds	r3, #88	; 0x58
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	1c59      	adds	r1, r3, #1
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4403      	add	r3, r0
 8006154:	3358      	adds	r3, #88	; 0x58
 8006156:	6019      	str	r1, [r3, #0]
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	440b      	add	r3, r1
 8006166:	3358      	adds	r3, #88	; 0x58
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b03      	cmp	r3, #3
 800616c:	d914      	bls.n	8006198 <HCD_HC_IN_IRQHandler+0x594>
 800616e:	6879      	ldr	r1, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	440b      	add	r3, r1
 800617c:	3358      	adds	r3, #88	; 0x58
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4613      	mov	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	440b      	add	r3, r1
 8006190:	335c      	adds	r3, #92	; 0x5c
 8006192:	2204      	movs	r2, #4
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	e009      	b.n	80061ac <HCD_HC_IN_IRQHandler+0x5a8>
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	440b      	add	r3, r1
 80061a6:	335c      	adds	r3, #92	; 0x5c
 80061a8:	2202      	movs	r2, #2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60bb      	str	r3, [r7, #8]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061c2:	60bb      	str	r3, [r7, #8]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d8:	461a      	mov	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e056      	b.n	800628e <HCD_HC_IN_IRQHandler+0x68a>
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4613      	mov	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	440b      	add	r3, r1
 80061ee:	335d      	adds	r3, #93	; 0x5d
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d123      	bne.n	800623e <HCD_HC_IN_IRQHandler+0x63a>
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	00db      	lsls	r3, r3, #3
 8006202:	440b      	add	r3, r1
 8006204:	335c      	adds	r3, #92	; 0x5c
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4413      	add	r3, r2
 8006212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e027      	b.n	800628e <HCD_HC_IN_IRQHandler+0x68a>
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	335d      	adds	r3, #93	; 0x5d
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b07      	cmp	r3, #7
 8006252:	d11c      	bne.n	800628e <HCD_HC_IN_IRQHandler+0x68a>
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	440b      	add	r3, r1
 8006262:	3358      	adds	r3, #88	; 0x58
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4613      	mov	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	4413      	add	r3, r2
 8006272:	00db      	lsls	r3, r3, #3
 8006274:	4403      	add	r3, r0
 8006276:	3358      	adds	r3, #88	; 0x58
 8006278:	6019      	str	r1, [r3, #0]
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	440b      	add	r3, r1
 8006288:	335c      	adds	r3, #92	; 0x5c
 800628a:	2204      	movs	r2, #4
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	015a      	lsls	r2, r3, #5
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	4413      	add	r3, r2
 8006296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629a:	461a      	mov	r2, r3
 800629c:	2302      	movs	r3, #2
 800629e:	6093      	str	r3, [r2, #8]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	b2d8      	uxtb	r0, r3
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	335c      	adds	r3, #92	; 0x5c
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	4601      	mov	r1, r0
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f00b fbf6 	bl	8011aac <HAL_HCD_HC_NotifyURBChange_Callback>
 80062c0:	e0d1      	b.n	8006466 <HCD_HC_IN_IRQHandler+0x862>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d4:	2b80      	cmp	r3, #128	; 0x80
 80062d6:	d13e      	bne.n	8006356 <HCD_HC_IN_IRQHandler+0x752>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062f2:	f043 0302 	orr.w	r3, r3, #2
 80062f6:	60d3      	str	r3, [r2, #12]
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	440b      	add	r3, r1
 8006306:	3358      	adds	r3, #88	; 0x58
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	1c59      	adds	r1, r3, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4403      	add	r3, r0
 800631a:	3358      	adds	r3, #88	; 0x58
 800631c:	6019      	str	r1, [r3, #0]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	440b      	add	r3, r1
 800632c:	335d      	adds	r3, #93	; 0x5d
 800632e:	2206      	movs	r2, #6
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	4611      	mov	r1, r2
 800633c:	4618      	mov	r0, r3
 800633e:	f004 fe50 	bl	800afe2 <USB_HC_Halt>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4413      	add	r3, r2
 800634a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634e:	461a      	mov	r2, r3
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	6093      	str	r3, [r2, #8]
 8006354:	e087      	b.n	8006466 <HCD_HC_IN_IRQHandler+0x862>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b10      	cmp	r3, #16
 800636a:	d17c      	bne.n	8006466 <HCD_HC_IN_IRQHandler+0x862>
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	333f      	adds	r3, #63	; 0x3f
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b03      	cmp	r3, #3
 8006380:	d122      	bne.n	80063c8 <HCD_HC_IN_IRQHandler+0x7c4>
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	440b      	add	r3, r1
 8006390:	3358      	adds	r3, #88	; 0x58
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4413      	add	r3, r2
 800639e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b0:	f043 0302 	orr.w	r3, r3, #2
 80063b4:	60d3      	str	r3, [r2, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f004 fe0e 	bl	800afe2 <USB_HC_Halt>
 80063c6:	e045      	b.n	8006454 <HCD_HC_IN_IRQHandler+0x850>
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	440b      	add	r3, r1
 80063d6:	333f      	adds	r3, #63	; 0x3f
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <HCD_HC_IN_IRQHandler+0x7f0>
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	333f      	adds	r3, #63	; 0x3f
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d12f      	bne.n	8006454 <HCD_HC_IN_IRQHandler+0x850>
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	440b      	add	r3, r1
 8006402:	3358      	adds	r3, #88	; 0x58
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d121      	bne.n	8006454 <HCD_HC_IN_IRQHandler+0x850>
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	440b      	add	r3, r1
 800641e:	335d      	adds	r3, #93	; 0x5d
 8006420:	2203      	movs	r2, #3
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800643e:	f043 0302 	orr.w	r3, r3, #2
 8006442:	60d3      	str	r3, [r2, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	4611      	mov	r1, r2
 800644e:	4618      	mov	r0, r3
 8006450:	f004 fdc7 	bl	800afe2 <USB_HC_Halt>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006460:	461a      	mov	r2, r3
 8006462:	2310      	movs	r3, #16
 8006464:	6093      	str	r3, [r2, #8]
 8006466:	bf00      	nop
 8006468:	3718      	adds	r7, #24
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HCD_HC_OUT_IRQHandler>:
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	460b      	mov	r3, r1
 8006478:	70fb      	strb	r3, [r7, #3]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b04      	cmp	r3, #4
 800649c:	d119      	bne.n	80064d2 <HCD_HC_OUT_IRQHandler+0x64>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	461a      	mov	r2, r3
 80064ac:	2304      	movs	r3, #4
 80064ae:	6093      	str	r3, [r2, #8]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	60d3      	str	r3, [r2, #12]
 80064d0:	e33e      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f003 0320 	and.w	r3, r3, #32
 80064e4:	2b20      	cmp	r3, #32
 80064e6:	d141      	bne.n	800656c <HCD_HC_OUT_IRQHandler+0xfe>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	2320      	movs	r3, #32
 80064f8:	6093      	str	r3, [r2, #8]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	440b      	add	r3, r1
 8006508:	333d      	adds	r3, #61	; 0x3d
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 831f 	bne.w	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	333d      	adds	r3, #61	; 0x3d
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	440b      	add	r3, r1
 8006534:	335c      	adds	r3, #92	; 0x5c
 8006536:	2202      	movs	r2, #2
 8006538:	701a      	strb	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	60d3      	str	r3, [r2, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f004 fd3c 	bl	800afe2 <USB_HC_Halt>
 800656a:	e2f1      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	015a      	lsls	r2, r3, #5
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d13f      	bne.n	8006602 <HCD_HC_OUT_IRQHandler+0x194>
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	440b      	add	r3, r1
 8006590:	335d      	adds	r3, #93	; 0x5d
 8006592:	2204      	movs	r2, #4
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	333d      	adds	r3, #61	; 0x3d
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	6879      	ldr	r1, [r7, #4]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	440b      	add	r3, r1
 80065b8:	3358      	adds	r3, #88	; 0x58
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f043 0302 	orr.w	r3, r3, #2
 80065dc:	60d3      	str	r3, [r2, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	4611      	mov	r1, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f004 fcfa 	bl	800afe2 <USB_HC_Halt>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	461a      	mov	r2, r3
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	6093      	str	r3, [r2, #8]
 8006600:	e2a6      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	4413      	add	r3, r2
 800660a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006618:	d122      	bne.n	8006660 <HCD_HC_OUT_IRQHandler+0x1f2>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	440a      	add	r2, r1
 8006630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006634:	f043 0302 	orr.w	r3, r3, #2
 8006638:	60d3      	str	r3, [r2, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f004 fccc 	bl	800afe2 <USB_HC_Halt>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4413      	add	r3, r2
 8006652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006656:	461a      	mov	r2, r3
 8006658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800665c:	6093      	str	r3, [r2, #8]
 800665e:	e277      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	d135      	bne.n	80066e2 <HCD_HC_OUT_IRQHandler+0x274>
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4613      	mov	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	440b      	add	r3, r1
 8006684:	3358      	adds	r3, #88	; 0x58
 8006686:	2200      	movs	r2, #0
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a4:	f043 0302 	orr.w	r3, r3, #2
 80066a8:	60d3      	str	r3, [r2, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	b2d2      	uxtb	r2, r2
 80066b2:	4611      	mov	r1, r2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f004 fc94 	bl	800afe2 <USB_HC_Halt>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c6:	461a      	mov	r2, r3
 80066c8:	2301      	movs	r3, #1
 80066ca:	6093      	str	r3, [r2, #8]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	440b      	add	r3, r1
 80066da:	335d      	adds	r3, #93	; 0x5d
 80066dc:	2201      	movs	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	e236      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d12b      	bne.n	8006750 <HCD_HC_OUT_IRQHandler+0x2e2>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006704:	461a      	mov	r2, r3
 8006706:	2308      	movs	r3, #8
 8006708:	6093      	str	r3, [r2, #8]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	0151      	lsls	r1, r2, #5
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	440a      	add	r2, r1
 8006720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006724:	f043 0302 	orr.w	r3, r3, #2
 8006728:	60d3      	str	r3, [r2, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f004 fc54 	bl	800afe2 <USB_HC_Halt>
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	00db      	lsls	r3, r3, #3
 8006746:	440b      	add	r3, r1
 8006748:	335d      	adds	r3, #93	; 0x5d
 800674a:	2205      	movs	r2, #5
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	e1ff      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4413      	add	r3, r2
 8006758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b10      	cmp	r3, #16
 8006764:	d155      	bne.n	8006812 <HCD_HC_OUT_IRQHandler+0x3a4>
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	440b      	add	r3, r1
 8006774:	3358      	adds	r3, #88	; 0x58
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	6879      	ldr	r1, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	440b      	add	r3, r1
 8006788:	335d      	adds	r3, #93	; 0x5d
 800678a:	2203      	movs	r2, #3
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	440b      	add	r3, r1
 800679c:	333d      	adds	r3, #61	; 0x3d
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d114      	bne.n	80067ce <HCD_HC_OUT_IRQHandler+0x360>
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	440b      	add	r3, r1
 80067b2:	333c      	adds	r3, #60	; 0x3c
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HCD_HC_OUT_IRQHandler+0x360>
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	440b      	add	r3, r1
 80067c8:	333d      	adds	r3, #61	; 0x3d
 80067ca:	2201      	movs	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e8:	f043 0302 	orr.w	r3, r3, #2
 80067ec:	60d3      	str	r3, [r2, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f004 fbf2 	bl	800afe2 <USB_HC_Halt>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800680a:	461a      	mov	r2, r3
 800680c:	2310      	movs	r3, #16
 800680e:	6093      	str	r3, [r2, #8]
 8006810:	e19e      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006824:	2b80      	cmp	r3, #128	; 0x80
 8006826:	d12b      	bne.n	8006880 <HCD_HC_OUT_IRQHandler+0x412>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	015a      	lsls	r2, r3, #5
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4413      	add	r3, r2
 8006830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	0151      	lsls	r1, r2, #5
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	440a      	add	r2, r1
 800683e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006842:	f043 0302 	orr.w	r3, r3, #2
 8006846:	60d3      	str	r3, [r2, #12]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f004 fbc5 	bl	800afe2 <USB_HC_Halt>
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4613      	mov	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	4413      	add	r3, r2
 8006862:	00db      	lsls	r3, r3, #3
 8006864:	440b      	add	r3, r1
 8006866:	335d      	adds	r3, #93	; 0x5d
 8006868:	2206      	movs	r2, #6
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	4413      	add	r3, r2
 8006874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006878:	461a      	mov	r2, r3
 800687a:	2380      	movs	r3, #128	; 0x80
 800687c:	6093      	str	r3, [r2, #8]
 800687e:	e167      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006896:	d135      	bne.n	8006904 <HCD_HC_OUT_IRQHandler+0x496>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b2:	f043 0302 	orr.w	r3, r3, #2
 80068b6:	60d3      	str	r3, [r2, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f004 fb8d 	bl	800afe2 <USB_HC_Halt>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d4:	461a      	mov	r2, r3
 80068d6:	2310      	movs	r3, #16
 80068d8:	6093      	str	r3, [r2, #8]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068e6:	461a      	mov	r2, r3
 80068e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ec:	6093      	str	r3, [r2, #8]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4613      	mov	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	00db      	lsls	r3, r3, #3
 80068fa:	440b      	add	r3, r1
 80068fc:	335d      	adds	r3, #93	; 0x5d
 80068fe:	2208      	movs	r2, #8
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e125      	b.n	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4413      	add	r3, r2
 800690c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	f040 811a 	bne.w	8006b50 <HCD_HC_OUT_IRQHandler+0x6e2>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	440a      	add	r2, r1
 8006932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006936:	f023 0302 	bic.w	r3, r3, #2
 800693a:	60d3      	str	r3, [r2, #12]
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	440b      	add	r3, r1
 800694a:	335d      	adds	r3, #93	; 0x5d
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d137      	bne.n	80069c2 <HCD_HC_OUT_IRQHandler+0x554>
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	440b      	add	r3, r1
 8006960:	335c      	adds	r3, #92	; 0x5c
 8006962:	2201      	movs	r2, #1
 8006964:	701a      	strb	r2, [r3, #0]
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4613      	mov	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	440b      	add	r3, r1
 8006974:	333f      	adds	r3, #63	; 0x3f
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d00b      	beq.n	8006994 <HCD_HC_OUT_IRQHandler+0x526>
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	440b      	add	r3, r1
 800698a:	333f      	adds	r3, #63	; 0x3f
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b03      	cmp	r3, #3
 8006990:	f040 80c5 	bne.w	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	440b      	add	r3, r1
 80069a2:	3351      	adds	r3, #81	; 0x51
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2d8      	uxtb	r0, r3
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	440b      	add	r3, r1
 80069ba:	3351      	adds	r3, #81	; 0x51
 80069bc:	4602      	mov	r2, r0
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e0ad      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 80069c2:	6879      	ldr	r1, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	00db      	lsls	r3, r3, #3
 80069ce:	440b      	add	r3, r1
 80069d0:	335d      	adds	r3, #93	; 0x5d
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d10a      	bne.n	80069ee <HCD_HC_OUT_IRQHandler+0x580>
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	440b      	add	r3, r1
 80069e6:	335c      	adds	r3, #92	; 0x5c
 80069e8:	2202      	movs	r2, #2
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	e097      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	440b      	add	r3, r1
 80069fc:	335d      	adds	r3, #93	; 0x5d
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d10a      	bne.n	8006a1a <HCD_HC_OUT_IRQHandler+0x5ac>
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	440b      	add	r3, r1
 8006a12:	335c      	adds	r3, #92	; 0x5c
 8006a14:	2202      	movs	r2, #2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e081      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	440b      	add	r3, r1
 8006a28:	335d      	adds	r3, #93	; 0x5d
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d10a      	bne.n	8006a46 <HCD_HC_OUT_IRQHandler+0x5d8>
 8006a30:	6879      	ldr	r1, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4613      	mov	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	440b      	add	r3, r1
 8006a3e:	335c      	adds	r3, #92	; 0x5c
 8006a40:	2205      	movs	r2, #5
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	e06b      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	440b      	add	r3, r1
 8006a54:	335d      	adds	r3, #93	; 0x5d
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	2b06      	cmp	r3, #6
 8006a5a:	d00a      	beq.n	8006a72 <HCD_HC_OUT_IRQHandler+0x604>
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4613      	mov	r3, r2
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	440b      	add	r3, r1
 8006a6a:	335d      	adds	r3, #93	; 0x5d
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	d155      	bne.n	8006b1e <HCD_HC_OUT_IRQHandler+0x6b0>
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	440b      	add	r3, r1
 8006a80:	3358      	adds	r3, #88	; 0x58
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	1c59      	adds	r1, r3, #1
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	00db      	lsls	r3, r3, #3
 8006a92:	4403      	add	r3, r0
 8006a94:	3358      	adds	r3, #88	; 0x58
 8006a96:	6019      	str	r1, [r3, #0]
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3358      	adds	r3, #88	; 0x58
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d914      	bls.n	8006ad8 <HCD_HC_OUT_IRQHandler+0x66a>
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	440b      	add	r3, r1
 8006abc:	3358      	adds	r3, #88	; 0x58
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4413      	add	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	440b      	add	r3, r1
 8006ad0:	335c      	adds	r3, #92	; 0x5c
 8006ad2:	2204      	movs	r2, #4
 8006ad4:	701a      	strb	r2, [r3, #0]
 8006ad6:	e009      	b.n	8006aec <HCD_HC_OUT_IRQHandler+0x67e>
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	440b      	add	r3, r1
 8006ae6:	335c      	adds	r3, #92	; 0x5c
 8006ae8:	2202      	movs	r2, #2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60bb      	str	r3, [r7, #8]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b02:	60bb      	str	r3, [r7, #8]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	6093      	str	r3, [r2, #8]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	b2d8      	uxtb	r0, r3
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	4413      	add	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	440b      	add	r3, r1
 8006b42:	335c      	adds	r3, #92	; 0x5c
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	4601      	mov	r1, r0
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f00a ffae 	bl	8011aac <HAL_HCD_HC_NotifyURBChange_Callback>
 8006b50:	bf00      	nop
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HCD_RXQLVL_IRQHandler>:
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08a      	sub	sp, #40	; 0x28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	623b      	str	r3, [r7, #32]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a1b      	ldr	r3, [r3, #32]
 8006b70:	61fb      	str	r3, [r7, #28]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	61bb      	str	r3, [r7, #24]
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	0c5b      	lsrs	r3, r3, #17
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d004      	beq.n	8006b9e <HCD_RXQLVL_IRQHandler+0x46>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	2b05      	cmp	r3, #5
 8006b98:	f000 8082 	beq.w	8006ca0 <HCD_RXQLVL_IRQHandler+0x148>
 8006b9c:	e083      	b.n	8006ca6 <HCD_RXQLVL_IRQHandler+0x14e>
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d07f      	beq.n	8006ca4 <HCD_RXQLVL_IRQHandler+0x14c>
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3344      	adds	r3, #68	; 0x44
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d074      	beq.n	8006ca4 <HCD_RXQLVL_IRQHandler+0x14c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	440b      	add	r3, r1
 8006bcc:	3344      	adds	r3, #68	; 0x44
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	b292      	uxth	r2, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	f003 fda4 	bl	800a722 <USB_ReadPacket>
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	440b      	add	r3, r1
 8006be8:	3344      	adds	r3, #68	; 0x44
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	18d1      	adds	r1, r2, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	4413      	add	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4403      	add	r3, r0
 8006bfe:	3344      	adds	r3, #68	; 0x44
 8006c00:	6019      	str	r1, [r3, #0]
 8006c02:	6879      	ldr	r1, [r7, #4]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	440b      	add	r3, r1
 8006c10:	334c      	adds	r3, #76	; 0x4c
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	18d1      	adds	r1, r2, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4403      	add	r3, r0
 8006c26:	334c      	adds	r3, #76	; 0x4c
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	015a      	lsls	r2, r3, #5
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	4413      	add	r3, r2
 8006c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <HCD_RXQLVL_IRQHandler+0x158>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d031      	beq.n	8006ca4 <HCD_RXQLVL_IRQHandler+0x14c>
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	4613      	mov	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	00db      	lsls	r3, r3, #3
 8006c7e:	440b      	add	r3, r1
 8006c80:	3350      	adds	r3, #80	; 0x50
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	f083 0301 	eor.w	r3, r3, #1
 8006c88:	b2d8      	uxtb	r0, r3
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4413      	add	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	440b      	add	r3, r1
 8006c98:	3350      	adds	r3, #80	; 0x50
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	e001      	b.n	8006ca4 <HCD_RXQLVL_IRQHandler+0x14c>
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HCD_RXQLVL_IRQHandler+0x14e>
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	3728      	adds	r7, #40	; 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	1ff80000 	.word	0x1ff80000

08006cb4 <HCD_Port_IRQHandler>:
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d10b      	bne.n	8006d04 <HCD_Port_IRQHandler+0x50>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d102      	bne.n	8006cfc <HCD_Port_IRQHandler+0x48>
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f00a febc 	bl	8011a74 <HAL_HCD_Connect_Callback>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f043 0302 	orr.w	r3, r3, #2
 8006d02:	60bb      	str	r3, [r7, #8]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d132      	bne.n	8006d74 <HCD_Port_IRQHandler+0xc0>
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f043 0308 	orr.w	r3, r3, #8
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d126      	bne.n	8006d6e <HCD_Port_IRQHandler+0xba>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d113      	bne.n	8006d50 <HCD_Port_IRQHandler+0x9c>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d32:	d106      	bne.n	8006d42 <HCD_Port_IRQHandler+0x8e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2102      	movs	r1, #2
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f003 fe2c 	bl	800a998 <USB_InitFSLSPClkSel>
 8006d40:	e011      	b.n	8006d66 <HCD_Port_IRQHandler+0xb2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2101      	movs	r1, #1
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f003 fe25 	bl	800a998 <USB_InitFSLSPClkSel>
 8006d4e:	e00a      	b.n	8006d66 <HCD_Port_IRQHandler+0xb2>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d106      	bne.n	8006d66 <HCD_Port_IRQHandler+0xb2>
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d64:	6053      	str	r3, [r2, #4]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f00a feae 	bl	8011ac8 <HAL_HCD_PortEnabled_Callback>
 8006d6c:	e002      	b.n	8006d74 <HCD_Port_IRQHandler+0xc0>
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f00a feb8 	bl	8011ae4 <HAL_HCD_PortDisabled_Callback>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d103      	bne.n	8006d86 <HCD_Port_IRQHandler+0xd2>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f043 0320 	orr.w	r3, r3, #32
 8006d84:	60bb      	str	r3, [r7, #8]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	bf00      	nop
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <HAL_I2C_Init>:
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_I2C_Init+0x12>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e12b      	b.n	8007006 <HAL_I2C_Init+0x26a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_I2C_Init+0x2c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa faec 	bl	80013a0 <HAL_I2C_MspInit>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2224      	movs	r2, #36	; 0x24
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	f001 f9ba 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4a81      	ldr	r2, [pc, #516]	; (8007010 <HAL_I2C_Init+0x274>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d807      	bhi.n	8006e20 <HAL_I2C_Init+0x84>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	4a80      	ldr	r2, [pc, #512]	; (8007014 <HAL_I2C_Init+0x278>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	bf94      	ite	ls
 8006e18:	2301      	movls	r3, #1
 8006e1a:	2300      	movhi	r3, #0
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	e006      	b.n	8006e2e <HAL_I2C_Init+0x92>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4a7d      	ldr	r2, [pc, #500]	; (8007018 <HAL_I2C_Init+0x27c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	bf94      	ite	ls
 8006e28:	2301      	movls	r3, #1
 8006e2a:	2300      	movhi	r3, #0
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_I2C_Init+0x9a>
 8006e32:	2301      	movs	r3, #1
 8006e34:	e0e7      	b.n	8007006 <HAL_I2C_Init+0x26a>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4a78      	ldr	r2, [pc, #480]	; (800701c <HAL_I2C_Init+0x280>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0c9b      	lsrs	r3, r3, #18
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a6a      	ldr	r2, [pc, #424]	; (8007010 <HAL_I2C_Init+0x274>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d802      	bhi.n	8006e70 <HAL_I2C_Init+0xd4>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	e009      	b.n	8006e84 <HAL_I2C_Init+0xe8>
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	4a69      	ldr	r2, [pc, #420]	; (8007020 <HAL_I2C_Init+0x284>)
 8006e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e80:	099b      	lsrs	r3, r3, #6
 8006e82:	3301      	adds	r3, #1
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6213      	str	r3, [r2, #32]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	495c      	ldr	r1, [pc, #368]	; (8007010 <HAL_I2C_Init+0x274>)
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	d819      	bhi.n	8006ed8 <HAL_I2C_Init+0x13c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1e59      	subs	r1, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006eb8:	400b      	ands	r3, r1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <HAL_I2C_Init+0x138>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1e59      	subs	r1, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ed2:	e051      	b.n	8006f78 <HAL_I2C_Init+0x1dc>
 8006ed4:	2304      	movs	r3, #4
 8006ed6:	e04f      	b.n	8006f78 <HAL_I2C_Init+0x1dc>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d111      	bne.n	8006f04 <HAL_I2C_Init+0x168>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	1e58      	subs	r0, r3, #1
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6859      	ldr	r1, [r3, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	440b      	add	r3, r1
 8006eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	e012      	b.n	8006f2a <HAL_I2C_Init+0x18e>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	1e58      	subs	r0, r3, #1
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	440b      	add	r3, r1
 8006f12:	0099      	lsls	r1, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	bf0c      	ite	eq
 8006f24:	2301      	moveq	r3, #1
 8006f26:	2300      	movne	r3, #0
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <HAL_I2C_Init+0x196>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e022      	b.n	8006f78 <HAL_I2C_Init+0x1dc>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10e      	bne.n	8006f58 <HAL_I2C_Init+0x1bc>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1e58      	subs	r0, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	460b      	mov	r3, r1
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	440b      	add	r3, r1
 8006f48:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f56:	e00f      	b.n	8006f78 <HAL_I2C_Init+0x1dc>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	1e58      	subs	r0, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6859      	ldr	r1, [r3, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	440b      	add	r3, r1
 8006f66:	0099      	lsls	r1, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f6e:	3301      	adds	r3, #1
 8006f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	6809      	ldr	r1, [r1, #0]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	61cb      	str	r3, [r1, #28]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69da      	ldr	r2, [r3, #28]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fa6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6911      	ldr	r1, [r2, #16]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68d2      	ldr	r2, [r2, #12]
 8006fb2:	4311      	orrs	r1, r2
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6093      	str	r3, [r2, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695a      	ldr	r2, [r3, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	60da      	str	r2, [r3, #12]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007004:	2300      	movs	r3, #0
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	000186a0 	.word	0x000186a0
 8007014:	001e847f 	.word	0x001e847f
 8007018:	003d08ff 	.word	0x003d08ff
 800701c:	431bde83 	.word	0x431bde83
 8007020:	10624dd3 	.word	0x10624dd3

08007024 <HAL_I2CEx_ConfigAnalogFilter>:
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b20      	cmp	r3, #32
 8007038:	d129      	bne.n	800708e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2224      	movs	r2, #36	; 0x24
 800703e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0201 	bic.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0210 	bic.w	r2, r2, #16
 8007060:	625a      	str	r2, [r3, #36]	; 0x24
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	625a      	str	r2, [r3, #36]	; 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0201 	orr.w	r2, r2, #1
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 800708e:	2302      	movs	r3, #2
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_I2CEx_ConfigDigitalFilter>:
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	81fb      	strh	r3, [r7, #14]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d12a      	bne.n	800710c <HAL_I2CEx_ConfigDigitalFilter+0x70>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2224      	movs	r2, #36	; 0x24
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	81fb      	strh	r3, [r7, #14]
 80070d6:	89fb      	ldrh	r3, [r7, #14]
 80070d8:	f023 030f 	bic.w	r3, r3, #15
 80070dc:	81fb      	strh	r3, [r7, #14]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	89fb      	ldrh	r3, [r7, #14]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	81fb      	strh	r3, [r7, #14]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	89fa      	ldrh	r2, [r7, #14]
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0201 	orr.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007108:	2300      	movs	r3, #0
 800710a:	e000      	b.n	800710e <HAL_I2CEx_ConfigDigitalFilter+0x72>
 800710c:	2302      	movs	r3, #2
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
	...

0800711c <HAL_LTDC_Init>:
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_LTDC_Init+0x12>
 800712a:	2301      	movs	r3, #1
 800712c:	e0bf      	b.n	80072ae <HAL_LTDC_Init+0x192>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_LTDC_Init+0x2c>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa f996 	bl	8001474 <HAL_LTDC_MspInit>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800715e:	619a      	str	r2, [r3, #24]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6999      	ldr	r1, [r3, #24]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	619a      	str	r2, [r3, #24]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6899      	ldr	r1, [r3, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b4a      	ldr	r3, [pc, #296]	; (80072b8 <HAL_LTDC_Init+0x19c>)
 8007190:	400b      	ands	r3, r1
 8007192:	6093      	str	r3, [r2, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	041b      	lsls	r3, r3, #16
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6899      	ldr	r1, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	609a      	str	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68d9      	ldr	r1, [r3, #12]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	4b3e      	ldr	r3, [pc, #248]	; (80072b8 <HAL_LTDC_Init+0x19c>)
 80071be:	400b      	ands	r3, r1
 80071c0:	60d3      	str	r3, [r2, #12]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68d9      	ldr	r1, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1a      	ldr	r2, [r3, #32]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	431a      	orrs	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6919      	ldr	r1, [r3, #16]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	4b33      	ldr	r3, [pc, #204]	; (80072b8 <HAL_LTDC_Init+0x19c>)
 80071ec:	400b      	ands	r3, r1
 80071ee:	6113      	str	r3, [r2, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6919      	ldr	r1, [r3, #16]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	611a      	str	r2, [r3, #16]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6959      	ldr	r1, [r3, #20]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b27      	ldr	r3, [pc, #156]	; (80072b8 <HAL_LTDC_Init+0x19c>)
 800721a:	400b      	ands	r3, r1
 800721c:	6153      	str	r3, [r2, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	60fb      	str	r3, [r7, #12]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6959      	ldr	r1, [r3, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	615a      	str	r2, [r3, #20]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800724c:	041b      	lsls	r3, r3, #16
 800724e:	60bb      	str	r3, [r7, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800725e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4313      	orrs	r3, r2
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007272:	431a      	orrs	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	62da      	str	r2, [r3, #44]	; 0x2c
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0206 	orr.w	r2, r2, #6
 800728a:	635a      	str	r2, [r3, #52]	; 0x34
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0201 	orr.w	r2, r2, #1
 800729a:	619a      	str	r2, [r3, #24]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80072ac:	2300      	movs	r3, #0
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	f000f800 	.word	0xf000f800

080072bc <HAL_LTDC_IRQHandler>:
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d2:	60bb      	str	r3, [r7, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0304 	and.w	r3, r3, #4
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d023      	beq.n	8007326 <HAL_LTDC_IRQHandler+0x6a>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 0304 	and.w	r3, r3, #4
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01e      	beq.n	8007326 <HAL_LTDC_IRQHandler+0x6a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	635a      	str	r2, [r3, #52]	; 0x34
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2204      	movs	r2, #4
 80072fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007306:	f043 0201 	orr.w	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2204      	movs	r2, #4
 8007314:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f86f 	bl	8007404 <HAL_LTDC_ErrorCallback>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d023      	beq.n	8007378 <HAL_LTDC_IRQHandler+0xbc>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01e      	beq.n	8007378 <HAL_LTDC_IRQHandler+0xbc>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0202 	bic.w	r2, r2, #2
 8007348:	635a      	str	r2, [r3, #52]	; 0x34
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2202      	movs	r2, #2
 8007350:	63da      	str	r2, [r3, #60]	; 0x3c
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007358:	f043 0202 	orr.w	r2, r3, #2
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f846 	bl	8007404 <HAL_LTDC_ErrorCallback>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	2b00      	cmp	r3, #0
 8007380:	d01b      	beq.n	80073ba <HAL_LTDC_IRQHandler+0xfe>
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d016      	beq.n	80073ba <HAL_LTDC_IRQHandler+0xfe>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	635a      	str	r2, [r3, #52]	; 0x34
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2201      	movs	r2, #1
 80073a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f82f 	bl	8007418 <HAL_LTDC_LineEventCallback>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01b      	beq.n	80073fc <HAL_LTDC_IRQHandler+0x140>
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0308 	and.w	r3, r3, #8
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d016      	beq.n	80073fc <HAL_LTDC_IRQHandler+0x140>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0208 	bic.w	r2, r2, #8
 80073dc:	635a      	str	r2, [r3, #52]	; 0x34
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2208      	movs	r2, #8
 80073e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f818 	bl	800742c <HAL_LTDC_ReloadEventCallback>
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_LTDC_ErrorCallback>:
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_LTDC_LineEventCallback>:
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_LTDC_ReloadEventCallback>:
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_LTDC_ConfigLayer>:
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_LTDC_ConfigLayer+0x1a>
 8007456:	2302      	movs	r3, #2
 8007458:	e02c      	b.n	80074b4 <HAL_LTDC_ConfigLayer+0x74>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2134      	movs	r1, #52	; 0x34
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	4614      	mov	r4, r2
 800747e:	461d      	mov	r5, r3
 8007480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800748a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	6023      	str	r3, [r4, #0]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f871 	bl	800757c <LTDC_SetConfig>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2201      	movs	r2, #1
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bdb0      	pop	{r4, r5, r7, pc}

080074bc <HAL_LTDC_EnableDither>:
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_LTDC_EnableDither+0x16>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e016      	b.n	8007500 <HAL_LTDC_EnableDither+0x44>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80074e2:	4b0a      	ldr	r3, [pc, #40]	; (800750c <HAL_LTDC_EnableDither+0x50>)
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	4a09      	ldr	r2, [pc, #36]	; (800750c <HAL_LTDC_EnableDither+0x50>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6193      	str	r3, [r2, #24]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80074fe:	2300      	movs	r3, #0
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40016800 	.word	0x40016800

08007510 <HAL_LTDC_SetAlpha>:
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007522:	2b01      	cmp	r3, #1
 8007524:	d101      	bne.n	800752a <HAL_LTDC_SetAlpha+0x1a>
 8007526:	2302      	movs	r3, #2
 8007528:	e024      	b.n	8007574 <HAL_LTDC_SetAlpha+0x64>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2201      	movs	r2, #1
 800752e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2234      	movs	r2, #52	; 0x34
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	3338      	adds	r3, #56	; 0x38
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	615a      	str	r2, [r3, #20]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6979      	ldr	r1, [r7, #20]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f811 	bl	800757c <LTDC_SetConfig>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2201      	movs	r2, #1
 8007560:	625a      	str	r2, [r3, #36]	; 0x24
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 8007572:	2300      	movs	r3, #0
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <LTDC_SetConfig>:
 800757c:	b480      	push	{r7}
 800757e:	b089      	sub	sp, #36	; 0x24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	0c1b      	lsrs	r3, r3, #16
 8007594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007598:	4413      	add	r3, r2
 800759a:	041b      	lsls	r3, r3, #16
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	461a      	mov	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	4413      	add	r3, r2
 80075aa:	3384      	adds	r3, #132	; 0x84
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	6812      	ldr	r2, [r2, #0]
 80075b2:	4611      	mov	r1, r2
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	01d2      	lsls	r2, r2, #7
 80075b8:	440a      	add	r2, r1
 80075ba:	3284      	adds	r2, #132	; 0x84
 80075bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075c0:	6053      	str	r3, [r2, #4]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d2:	4413      	add	r3, r2
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4619      	mov	r1, r3
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	01db      	lsls	r3, r3, #7
 80075e0:	440b      	add	r3, r1
 80075e2:	3384      	adds	r3, #132	; 0x84
 80075e4:	4619      	mov	r1, r3
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	604b      	str	r3, [r1, #4]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075fa:	4413      	add	r3, r2
 80075fc:	041b      	lsls	r3, r3, #16
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	01db      	lsls	r3, r3, #7
 800760a:	4413      	add	r3, r2
 800760c:	3384      	adds	r3, #132	; 0x84
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	4611      	mov	r1, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	01d2      	lsls	r2, r2, #7
 800761a:	440a      	add	r2, r1
 800761c:	3284      	adds	r2, #132	; 0x84
 800761e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007622:	6093      	str	r3, [r2, #8]
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007632:	4413      	add	r3, r2
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4619      	mov	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	01db      	lsls	r3, r3, #7
 8007640:	440b      	add	r3, r1
 8007642:	3384      	adds	r3, #132	; 0x84
 8007644:	4619      	mov	r1, r3
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	608b      	str	r3, [r1, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	461a      	mov	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	01db      	lsls	r3, r3, #7
 8007656:	4413      	add	r3, r2
 8007658:	3384      	adds	r3, #132	; 0x84
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	4611      	mov	r1, r2
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	01d2      	lsls	r2, r2, #7
 8007666:	440a      	add	r2, r1
 8007668:	3284      	adds	r2, #132	; 0x84
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	6113      	str	r3, [r2, #16]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	01db      	lsls	r3, r3, #7
 800767a:	4413      	add	r3, r2
 800767c:	3384      	adds	r3, #132	; 0x84
 800767e:	461a      	mov	r2, r3
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	6113      	str	r3, [r2, #16]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800768c:	021b      	lsls	r3, r3, #8
 800768e:	61fb      	str	r3, [r7, #28]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	01db      	lsls	r3, r3, #7
 80076ac:	4413      	add	r3, r2
 80076ae:	3384      	adds	r3, #132	; 0x84
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	01db      	lsls	r3, r3, #7
 80076bc:	4413      	add	r3, r2
 80076be:	3384      	adds	r3, #132	; 0x84
 80076c0:	461a      	mov	r2, r3
 80076c2:	2300      	movs	r3, #0
 80076c4:	6193      	str	r3, [r2, #24]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076cc:	461a      	mov	r2, r3
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	01db      	lsls	r3, r3, #7
 80076e0:	440b      	add	r3, r1
 80076e2:	3384      	adds	r3, #132	; 0x84
 80076e4:	4619      	mov	r1, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	618b      	str	r3, [r1, #24]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	01db      	lsls	r3, r3, #7
 80076f6:	4413      	add	r3, r2
 80076f8:	3384      	adds	r3, #132	; 0x84
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	4611      	mov	r1, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	01d2      	lsls	r2, r2, #7
 8007706:	440a      	add	r2, r1
 8007708:	3284      	adds	r2, #132	; 0x84
 800770a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800770e:	6153      	str	r3, [r2, #20]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	01db      	lsls	r3, r3, #7
 800771a:	4413      	add	r3, r2
 800771c:	3384      	adds	r3, #132	; 0x84
 800771e:	461a      	mov	r2, r3
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	6153      	str	r3, [r2, #20]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	01db      	lsls	r3, r3, #7
 8007730:	4413      	add	r3, r2
 8007732:	3384      	adds	r3, #132	; 0x84
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	4611      	mov	r1, r2
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	01d2      	lsls	r2, r2, #7
 8007740:	440a      	add	r2, r1
 8007742:	3284      	adds	r2, #132	; 0x84
 8007744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007748:	f023 0307 	bic.w	r3, r3, #7
 800774c:	61d3      	str	r3, [r2, #28]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	69da      	ldr	r2, [r3, #28]
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	6809      	ldr	r1, [r1, #0]
 800775a:	4608      	mov	r0, r1
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	01c9      	lsls	r1, r1, #7
 8007760:	4401      	add	r1, r0
 8007762:	3184      	adds	r1, #132	; 0x84
 8007764:	4313      	orrs	r3, r2
 8007766:	61cb      	str	r3, [r1, #28]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	461a      	mov	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	01db      	lsls	r3, r3, #7
 8007772:	4413      	add	r3, r2
 8007774:	3384      	adds	r3, #132	; 0x84
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	01db      	lsls	r3, r3, #7
 8007782:	4413      	add	r3, r2
 8007784:	3384      	adds	r3, #132	; 0x84
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6293      	str	r3, [r2, #40]	; 0x28
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	01db      	lsls	r3, r3, #7
 8007796:	4413      	add	r3, r2
 8007798:	3384      	adds	r3, #132	; 0x84
 800779a:	461a      	mov	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	6293      	str	r3, [r2, #40]	; 0x28
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <LTDC_SetConfig+0x234>
 80077aa:	2304      	movs	r3, #4
 80077ac:	61fb      	str	r3, [r7, #28]
 80077ae:	e01b      	b.n	80077e8 <LTDC_SetConfig+0x26c>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d102      	bne.n	80077be <LTDC_SetConfig+0x242>
 80077b8:	2303      	movs	r3, #3
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	e014      	b.n	80077e8 <LTDC_SetConfig+0x26c>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d00b      	beq.n	80077de <LTDC_SetConfig+0x262>
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d007      	beq.n	80077de <LTDC_SetConfig+0x262>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d003      	beq.n	80077de <LTDC_SetConfig+0x262>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	2b07      	cmp	r3, #7
 80077dc:	d102      	bne.n	80077e4 <LTDC_SetConfig+0x268>
 80077de:	2302      	movs	r3, #2
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	e001      	b.n	80077e8 <LTDC_SetConfig+0x26c>
 80077e4:	2301      	movs	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	01db      	lsls	r3, r3, #7
 80077f2:	4413      	add	r3, r2
 80077f4:	3384      	adds	r3, #132	; 0x84
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	6812      	ldr	r2, [r2, #0]
 80077fc:	4611      	mov	r1, r2
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	01d2      	lsls	r2, r2, #7
 8007802:	440a      	add	r2, r1
 8007804:	3284      	adds	r2, #132	; 0x84
 8007806:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800780a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	fb02 f303 	mul.w	r3, r2, r3
 8007816:	041a      	lsls	r2, r3, #16
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6859      	ldr	r1, [r3, #4]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	1acb      	subs	r3, r1, r3
 8007822:	69f9      	ldr	r1, [r7, #28]
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	3303      	adds	r3, #3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	6809      	ldr	r1, [r1, #0]
 800782e:	4608      	mov	r0, r1
 8007830:	6879      	ldr	r1, [r7, #4]
 8007832:	01c9      	lsls	r1, r1, #7
 8007834:	4401      	add	r1, r0
 8007836:	3184      	adds	r1, #132	; 0x84
 8007838:	4313      	orrs	r3, r2
 800783a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	01db      	lsls	r3, r3, #7
 8007846:	4413      	add	r3, r2
 8007848:	3384      	adds	r3, #132	; 0x84
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	6812      	ldr	r2, [r2, #0]
 8007850:	4611      	mov	r1, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	01d2      	lsls	r2, r2, #7
 8007856:	440a      	add	r2, r1
 8007858:	3284      	adds	r2, #132	; 0x84
 800785a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	6313      	str	r3, [r2, #48]	; 0x30
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	01db      	lsls	r3, r3, #7
 800786e:	4413      	add	r3, r2
 8007870:	3384      	adds	r3, #132	; 0x84
 8007872:	461a      	mov	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007878:	6313      	str	r3, [r2, #48]	; 0x30
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	01db      	lsls	r3, r3, #7
 8007884:	4413      	add	r3, r2
 8007886:	3384      	adds	r3, #132	; 0x84
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	6812      	ldr	r2, [r2, #0]
 800788e:	4611      	mov	r1, r2
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	01d2      	lsls	r2, r2, #7
 8007894:	440a      	add	r2, r1
 8007896:	3284      	adds	r2, #132	; 0x84
 8007898:	f043 0301 	orr.w	r3, r3, #1
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	bf00      	nop
 80078a0:	3724      	adds	r7, #36	; 0x24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <HAL_RCC_OscConfig>:
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCC_OscConfig+0x12>
 80078ba:	2301      	movs	r3, #1
 80078bc:	e25e      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d075      	beq.n	80079b6 <HAL_RCC_OscConfig+0x10a>
 80078ca:	4b88      	ldr	r3, [pc, #544]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d00c      	beq.n	80078f0 <HAL_RCC_OscConfig+0x44>
 80078d6:	4b85      	ldr	r3, [pc, #532]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 030c 	and.w	r3, r3, #12
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d112      	bne.n	8007908 <HAL_RCC_OscConfig+0x5c>
 80078e2:	4b82      	ldr	r3, [pc, #520]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ee:	d10b      	bne.n	8007908 <HAL_RCC_OscConfig+0x5c>
 80078f0:	4b7e      	ldr	r3, [pc, #504]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d05b      	beq.n	80079b4 <HAL_RCC_OscConfig+0x108>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d157      	bne.n	80079b4 <HAL_RCC_OscConfig+0x108>
 8007904:	2301      	movs	r3, #1
 8007906:	e239      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007910:	d106      	bne.n	8007920 <HAL_RCC_OscConfig+0x74>
 8007912:	4b76      	ldr	r3, [pc, #472]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a75      	ldr	r2, [pc, #468]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e01d      	b.n	800795c <HAL_RCC_OscConfig+0xb0>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007928:	d10c      	bne.n	8007944 <HAL_RCC_OscConfig+0x98>
 800792a:	4b70      	ldr	r3, [pc, #448]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a6f      	ldr	r2, [pc, #444]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	4b6d      	ldr	r3, [pc, #436]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a6c      	ldr	r2, [pc, #432]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 800793c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	e00b      	b.n	800795c <HAL_RCC_OscConfig+0xb0>
 8007944:	4b69      	ldr	r3, [pc, #420]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a68      	ldr	r2, [pc, #416]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 800794a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4b66      	ldr	r3, [pc, #408]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a65      	ldr	r2, [pc, #404]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <HAL_RCC_OscConfig+0xe0>
 8007964:	f7fc fbaa 	bl	80040bc <HAL_GetTick>
 8007968:	6138      	str	r0, [r7, #16]
 800796a:	e008      	b.n	800797e <HAL_RCC_OscConfig+0xd2>
 800796c:	f7fc fba6 	bl	80040bc <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b64      	cmp	r3, #100	; 0x64
 8007978:	d901      	bls.n	800797e <HAL_RCC_OscConfig+0xd2>
 800797a:	2303      	movs	r3, #3
 800797c:	e1fe      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 800797e:	4b5b      	ldr	r3, [pc, #364]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0f0      	beq.n	800796c <HAL_RCC_OscConfig+0xc0>
 800798a:	e014      	b.n	80079b6 <HAL_RCC_OscConfig+0x10a>
 800798c:	f7fc fb96 	bl	80040bc <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0xfa>
 8007994:	f7fc fb92 	bl	80040bc <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b64      	cmp	r3, #100	; 0x64
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0xfa>
 80079a2:	2303      	movs	r3, #3
 80079a4:	e1ea      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 80079a6:	4b51      	ldr	r3, [pc, #324]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f0      	bne.n	8007994 <HAL_RCC_OscConfig+0xe8>
 80079b2:	e000      	b.n	80079b6 <HAL_RCC_OscConfig+0x10a>
 80079b4:	bf00      	nop
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d063      	beq.n	8007a8a <HAL_RCC_OscConfig+0x1de>
 80079c2:	4b4a      	ldr	r3, [pc, #296]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f003 030c 	and.w	r3, r3, #12
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00b      	beq.n	80079e6 <HAL_RCC_OscConfig+0x13a>
 80079ce:	4b47      	ldr	r3, [pc, #284]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f003 030c 	and.w	r3, r3, #12
 80079d6:	2b08      	cmp	r3, #8
 80079d8:	d11c      	bne.n	8007a14 <HAL_RCC_OscConfig+0x168>
 80079da:	4b44      	ldr	r3, [pc, #272]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d116      	bne.n	8007a14 <HAL_RCC_OscConfig+0x168>
 80079e6:	4b41      	ldr	r3, [pc, #260]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <HAL_RCC_OscConfig+0x152>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d001      	beq.n	80079fe <HAL_RCC_OscConfig+0x152>
 80079fa:	2301      	movs	r3, #1
 80079fc:	e1be      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 80079fe:	4b3b      	ldr	r3, [pc, #236]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4937      	ldr	r1, [pc, #220]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	600b      	str	r3, [r1, #0]
 8007a12:	e03a      	b.n	8007a8a <HAL_RCC_OscConfig+0x1de>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d020      	beq.n	8007a5e <HAL_RCC_OscConfig+0x1b2>
 8007a1c:	4b34      	ldr	r3, [pc, #208]	; (8007af0 <HAL_RCC_OscConfig+0x244>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f7fc fb4b 	bl	80040bc <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]
 8007a28:	e008      	b.n	8007a3c <HAL_RCC_OscConfig+0x190>
 8007a2a:	f7fc fb47 	bl	80040bc <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x190>
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e19f      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007a3c:	4b2b      	ldr	r3, [pc, #172]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f0      	beq.n	8007a2a <HAL_RCC_OscConfig+0x17e>
 8007a48:	4b28      	ldr	r3, [pc, #160]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	4925      	ldr	r1, [pc, #148]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	600b      	str	r3, [r1, #0]
 8007a5c:	e015      	b.n	8007a8a <HAL_RCC_OscConfig+0x1de>
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <HAL_RCC_OscConfig+0x244>)
 8007a60:	2200      	movs	r2, #0
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f7fc fb2a 	bl	80040bc <HAL_GetTick>
 8007a68:	6138      	str	r0, [r7, #16]
 8007a6a:	e008      	b.n	8007a7e <HAL_RCC_OscConfig+0x1d2>
 8007a6c:	f7fc fb26 	bl	80040bc <HAL_GetTick>
 8007a70:	4602      	mov	r2, r0
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d901      	bls.n	8007a7e <HAL_RCC_OscConfig+0x1d2>
 8007a7a:	2303      	movs	r3, #3
 8007a7c:	e17e      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007a7e:	4b1b      	ldr	r3, [pc, #108]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1f0      	bne.n	8007a6c <HAL_RCC_OscConfig+0x1c0>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0308 	and.w	r3, r3, #8
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d036      	beq.n	8007b04 <HAL_RCC_OscConfig+0x258>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d016      	beq.n	8007acc <HAL_RCC_OscConfig+0x220>
 8007a9e:	4b15      	ldr	r3, [pc, #84]	; (8007af4 <HAL_RCC_OscConfig+0x248>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f7fc fb0a 	bl	80040bc <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]
 8007aaa:	e008      	b.n	8007abe <HAL_RCC_OscConfig+0x212>
 8007aac:	f7fc fb06 	bl	80040bc <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x212>
 8007aba:	2303      	movs	r3, #3
 8007abc:	e15e      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007abe:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <HAL_RCC_OscConfig+0x240>)
 8007ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0f0      	beq.n	8007aac <HAL_RCC_OscConfig+0x200>
 8007aca:	e01b      	b.n	8007b04 <HAL_RCC_OscConfig+0x258>
 8007acc:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <HAL_RCC_OscConfig+0x248>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	f7fc faf3 	bl	80040bc <HAL_GetTick>
 8007ad6:	6138      	str	r0, [r7, #16]
 8007ad8:	e00e      	b.n	8007af8 <HAL_RCC_OscConfig+0x24c>
 8007ada:	f7fc faef 	bl	80040bc <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d907      	bls.n	8007af8 <HAL_RCC_OscConfig+0x24c>
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e147      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007aec:	40023800 	.word	0x40023800
 8007af0:	42470000 	.word	0x42470000
 8007af4:	42470e80 	.word	0x42470e80
 8007af8:	4b88      	ldr	r3, [pc, #544]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1ea      	bne.n	8007ada <HAL_RCC_OscConfig+0x22e>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 8097 	beq.w	8007c40 <HAL_RCC_OscConfig+0x394>
 8007b12:	2300      	movs	r3, #0
 8007b14:	75fb      	strb	r3, [r7, #23]
 8007b16:	4b81      	ldr	r3, [pc, #516]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10f      	bne.n	8007b42 <HAL_RCC_OscConfig+0x296>
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	4b7d      	ldr	r3, [pc, #500]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	4a7c      	ldr	r2, [pc, #496]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b30:	6413      	str	r3, [r2, #64]	; 0x40
 8007b32:	4b7a      	ldr	r3, [pc, #488]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3a:	60bb      	str	r3, [r7, #8]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2301      	movs	r3, #1
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	4b77      	ldr	r3, [pc, #476]	; (8007d20 <HAL_RCC_OscConfig+0x474>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d118      	bne.n	8007b80 <HAL_RCC_OscConfig+0x2d4>
 8007b4e:	4b74      	ldr	r3, [pc, #464]	; (8007d20 <HAL_RCC_OscConfig+0x474>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a73      	ldr	r2, [pc, #460]	; (8007d20 <HAL_RCC_OscConfig+0x474>)
 8007b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	f7fc faaf 	bl	80040bc <HAL_GetTick>
 8007b5e:	6138      	str	r0, [r7, #16]
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x2c8>
 8007b62:	f7fc faab 	bl	80040bc <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x2c8>
 8007b70:	2303      	movs	r3, #3
 8007b72:	e103      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007b74:	4b6a      	ldr	r3, [pc, #424]	; (8007d20 <HAL_RCC_OscConfig+0x474>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d0f0      	beq.n	8007b62 <HAL_RCC_OscConfig+0x2b6>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d106      	bne.n	8007b96 <HAL_RCC_OscConfig+0x2ea>
 8007b88:	4b64      	ldr	r3, [pc, #400]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	4a63      	ldr	r2, [pc, #396]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	6713      	str	r3, [r2, #112]	; 0x70
 8007b94:	e01c      	b.n	8007bd0 <HAL_RCC_OscConfig+0x324>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x30c>
 8007b9e:	4b5f      	ldr	r3, [pc, #380]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba2:	4a5e      	ldr	r2, [pc, #376]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007ba4:	f043 0304 	orr.w	r3, r3, #4
 8007ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8007baa:	4b5c      	ldr	r3, [pc, #368]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	4a5b      	ldr	r2, [pc, #364]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007bb6:	e00b      	b.n	8007bd0 <HAL_RCC_OscConfig+0x324>
 8007bb8:	4b58      	ldr	r3, [pc, #352]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbc:	4a57      	ldr	r2, [pc, #348]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007bc4:	4b55      	ldr	r3, [pc, #340]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc8:	4a54      	ldr	r2, [pc, #336]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bca:	f023 0304 	bic.w	r3, r3, #4
 8007bce:	6713      	str	r3, [r2, #112]	; 0x70
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d015      	beq.n	8007c04 <HAL_RCC_OscConfig+0x358>
 8007bd8:	f7fc fa70 	bl	80040bc <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]
 8007bde:	e00a      	b.n	8007bf6 <HAL_RCC_OscConfig+0x34a>
 8007be0:	f7fc fa6c 	bl	80040bc <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x34a>
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e0c2      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007bf6:	4b49      	ldr	r3, [pc, #292]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d0ee      	beq.n	8007be0 <HAL_RCC_OscConfig+0x334>
 8007c02:	e014      	b.n	8007c2e <HAL_RCC_OscConfig+0x382>
 8007c04:	f7fc fa5a 	bl	80040bc <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]
 8007c0a:	e00a      	b.n	8007c22 <HAL_RCC_OscConfig+0x376>
 8007c0c:	f7fc fa56 	bl	80040bc <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x376>
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e0ac      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007c22:	4b3e      	ldr	r3, [pc, #248]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1ee      	bne.n	8007c0c <HAL_RCC_OscConfig+0x360>
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d105      	bne.n	8007c40 <HAL_RCC_OscConfig+0x394>
 8007c34:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	4a38      	ldr	r2, [pc, #224]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8098 	beq.w	8007d7a <HAL_RCC_OscConfig+0x4ce>
 8007c4a:	4b34      	ldr	r3, [pc, #208]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f003 030c 	and.w	r3, r3, #12
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d05c      	beq.n	8007d10 <HAL_RCC_OscConfig+0x464>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d141      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x436>
 8007c5e:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <HAL_RCC_OscConfig+0x478>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	f7fc fa2a 	bl	80040bc <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x3d2>
 8007c6c:	f7fc fa26 	bl	80040bc <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x3d2>
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e07e      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007c7e:	4b27      	ldr	r3, [pc, #156]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f0      	bne.n	8007c6c <HAL_RCC_OscConfig+0x3c0>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69da      	ldr	r2, [r3, #28]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	019b      	lsls	r3, r3, #6
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	3b01      	subs	r3, #1
 8007ca4:	041b      	lsls	r3, r3, #16
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cac:	061b      	lsls	r3, r3, #24
 8007cae:	491b      	ldr	r1, [pc, #108]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	604b      	str	r3, [r1, #4]
 8007cb4:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <HAL_RCC_OscConfig+0x478>)
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f7fc f9ff 	bl	80040bc <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]
 8007cc0:	e008      	b.n	8007cd4 <HAL_RCC_OscConfig+0x428>
 8007cc2:	f7fc f9fb 	bl	80040bc <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d901      	bls.n	8007cd4 <HAL_RCC_OscConfig+0x428>
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e053      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007cd4:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f0      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x416>
 8007ce0:	e04b      	b.n	8007d7a <HAL_RCC_OscConfig+0x4ce>
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <HAL_RCC_OscConfig+0x478>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	f7fc f9e8 	bl	80040bc <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x456>
 8007cf0:	f7fc f9e4 	bl	80040bc <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x456>
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e03c      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <HAL_RCC_OscConfig+0x470>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f0      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x444>
 8007d0e:	e034      	b.n	8007d7a <HAL_RCC_OscConfig+0x4ce>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d107      	bne.n	8007d28 <HAL_RCC_OscConfig+0x47c>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e02f      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007d1c:	40023800 	.word	0x40023800
 8007d20:	40007000 	.word	0x40007000
 8007d24:	42470060 	.word	0x42470060
 8007d28:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <HAL_RCC_OscConfig+0x4d8>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d11c      	bne.n	8007d76 <HAL_RCC_OscConfig+0x4ca>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d115      	bne.n	8007d76 <HAL_RCC_OscConfig+0x4ca>
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d50:	4013      	ands	r3, r2
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d10d      	bne.n	8007d76 <HAL_RCC_OscConfig+0x4ca>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d106      	bne.n	8007d76 <HAL_RCC_OscConfig+0x4ca>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d001      	beq.n	8007d7a <HAL_RCC_OscConfig+0x4ce>
 8007d76:	2301      	movs	r3, #1
 8007d78:	e000      	b.n	8007d7c <HAL_RCC_OscConfig+0x4d0>
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	40023800 	.word	0x40023800

08007d88 <HAL_RCC_ClockConfig>:
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_RCC_ClockConfig+0x14>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0cc      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007d9c:	4b68      	ldr	r3, [pc, #416]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d90c      	bls.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
 8007daa:	4b65      	ldr	r3, [pc, #404]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	4b63      	ldr	r3, [pc, #396]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d001      	beq.n	8007dc4 <HAL_RCC_ClockConfig+0x3c>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e0b8      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d020      	beq.n	8007e12 <HAL_RCC_ClockConfig+0x8a>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <HAL_RCC_ClockConfig+0x60>
 8007ddc:	4b59      	ldr	r3, [pc, #356]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	4a58      	ldr	r2, [pc, #352]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007de6:	6093      	str	r3, [r2, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d005      	beq.n	8007e00 <HAL_RCC_ClockConfig+0x78>
 8007df4:	4b53      	ldr	r3, [pc, #332]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4a52      	ldr	r2, [pc, #328]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dfe:	6093      	str	r3, [r2, #8]
 8007e00:	4b50      	ldr	r3, [pc, #320]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	494d      	ldr	r1, [pc, #308]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	608b      	str	r3, [r1, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d044      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x120>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d107      	bne.n	8007e36 <HAL_RCC_ClockConfig+0xae>
 8007e26:	4b47      	ldr	r3, [pc, #284]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d119      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e07f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCC_ClockConfig+0xbe>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d107      	bne.n	8007e56 <HAL_RCC_ClockConfig+0xce>
 8007e46:	4b3f      	ldr	r3, [pc, #252]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d109      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e06f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007e56:	4b3b      	ldr	r3, [pc, #236]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_RCC_ClockConfig+0xde>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e067      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007e66:	4b37      	ldr	r3, [pc, #220]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f023 0203 	bic.w	r2, r3, #3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4934      	ldr	r1, [pc, #208]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	f7fc f920 	bl	80040bc <HAL_GetTick>
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
 8007e80:	f7fc f91c 	bl	80040bc <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_ClockConfig+0x10e>
 8007e92:	2303      	movs	r3, #3
 8007e94:	e04f      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007e96:	4b2b      	ldr	r3, [pc, #172]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 020c 	and.w	r2, r3, #12
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d1eb      	bne.n	8007e80 <HAL_RCC_ClockConfig+0xf8>
 8007ea8:	4b25      	ldr	r3, [pc, #148]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d20c      	bcs.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCC_ClockConfig+0x148>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e032      	b.n	8007f36 <HAL_RCC_ClockConfig+0x1ae>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCC_ClockConfig+0x166>
 8007edc:	4b19      	ldr	r3, [pc, #100]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4916      	ldr	r1, [pc, #88]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0308 	and.w	r3, r3, #8
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d009      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x186>
 8007efa:	4b12      	ldr	r3, [pc, #72]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	490e      	ldr	r1, [pc, #56]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
 8007f0e:	f000 f821 	bl	8007f54 <HAL_RCC_GetSysClockFreq>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <HAL_RCC_ClockConfig+0x1bc>)
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	091b      	lsrs	r3, r3, #4
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	490a      	ldr	r1, [pc, #40]	; (8007f48 <HAL_RCC_ClockConfig+0x1c0>)
 8007f20:	5ccb      	ldrb	r3, [r1, r3]
 8007f22:	fa22 f303 	lsr.w	r3, r2, r3
 8007f26:	4a09      	ldr	r2, [pc, #36]	; (8007f4c <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fa fbd0 	bl	80026d4 <HAL_InitTick>
 8007f34:	2300      	movs	r3, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40023c00 	.word	0x40023c00
 8007f44:	40023800 	.word	0x40023800
 8007f48:	08019984 	.word	0x08019984
 8007f4c:	20000000 	.word	0x20000000
 8007f50:	20000044 	.word	0x20000044

08007f54 <HAL_RCC_GetSysClockFreq>:
 8007f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f58:	b094      	sub	sp, #80	; 0x50
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007f60:	2300      	movs	r3, #0
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f64:	2300      	movs	r3, #0
 8007f66:	643b      	str	r3, [r7, #64]	; 0x40
 8007f68:	2300      	movs	r3, #0
 8007f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f6c:	4b79      	ldr	r3, [pc, #484]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 030c 	and.w	r3, r3, #12
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d00d      	beq.n	8007f94 <HAL_RCC_GetSysClockFreq+0x40>
 8007f78:	2b08      	cmp	r3, #8
 8007f7a:	f200 80e1 	bhi.w	8008140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x34>
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d003      	beq.n	8007f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8007f86:	e0db      	b.n	8008140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f88:	4b73      	ldr	r3, [pc, #460]	; (8008158 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f8c:	e0db      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
 8007f8e:	4b73      	ldr	r3, [pc, #460]	; (800815c <HAL_RCC_GetSysClockFreq+0x208>)
 8007f90:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f92:	e0d8      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
 8007f94:	4b6f      	ldr	r3, [pc, #444]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f9c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f9e:	4b6d      	ldr	r3, [pc, #436]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d063      	beq.n	8008072 <HAL_RCC_GetSysClockFreq+0x11e>
 8007faa:	4b6a      	ldr	r3, [pc, #424]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	462b      	mov	r3, r5
 8007fca:	f04f 0000 	mov.w	r0, #0
 8007fce:	f04f 0100 	mov.w	r1, #0
 8007fd2:	0159      	lsls	r1, r3, #5
 8007fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fd8:	0150      	lsls	r0, r2, #5
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4621      	mov	r1, r4
 8007fe0:	1a51      	subs	r1, r2, r1
 8007fe2:	6139      	str	r1, [r7, #16]
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ff8:	4659      	mov	r1, fp
 8007ffa:	018b      	lsls	r3, r1, #6
 8007ffc:	4651      	mov	r1, sl
 8007ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008002:	4651      	mov	r1, sl
 8008004:	018a      	lsls	r2, r1, #6
 8008006:	4651      	mov	r1, sl
 8008008:	ebb2 0801 	subs.w	r8, r2, r1
 800800c:	4659      	mov	r1, fp
 800800e:	eb63 0901 	sbc.w	r9, r3, r1
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800801e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008026:	4690      	mov	r8, r2
 8008028:	4699      	mov	r9, r3
 800802a:	4623      	mov	r3, r4
 800802c:	eb18 0303 	adds.w	r3, r8, r3
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	462b      	mov	r3, r5
 8008034:	eb49 0303 	adc.w	r3, r9, r3
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	f04f 0300 	mov.w	r3, #0
 8008042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008046:	4629      	mov	r1, r5
 8008048:	024b      	lsls	r3, r1, #9
 800804a:	4621      	mov	r1, r4
 800804c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008050:	4621      	mov	r1, r4
 8008052:	024a      	lsls	r2, r1, #9
 8008054:	4610      	mov	r0, r2
 8008056:	4619      	mov	r1, r3
 8008058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805a:	2200      	movs	r2, #0
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
 800805e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008064:	f7f8 fe20 	bl	8000ca8 <__aeabi_uldivmod>
 8008068:	4602      	mov	r2, r0
 800806a:	460b      	mov	r3, r1
 800806c:	4613      	mov	r3, r2
 800806e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008070:	e058      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x1d0>
 8008072:	4b38      	ldr	r3, [pc, #224]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	099b      	lsrs	r3, r3, #6
 8008078:	2200      	movs	r2, #0
 800807a:	4618      	mov	r0, r3
 800807c:	4611      	mov	r1, r2
 800807e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008082:	623b      	str	r3, [r7, #32]
 8008084:	2300      	movs	r3, #0
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
 8008088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800808c:	4642      	mov	r2, r8
 800808e:	464b      	mov	r3, r9
 8008090:	f04f 0000 	mov.w	r0, #0
 8008094:	f04f 0100 	mov.w	r1, #0
 8008098:	0159      	lsls	r1, r3, #5
 800809a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800809e:	0150      	lsls	r0, r2, #5
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4641      	mov	r1, r8
 80080a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80080aa:	4649      	mov	r1, r9
 80080ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080c4:	ebb2 040a 	subs.w	r4, r2, sl
 80080c8:	eb63 050b 	sbc.w	r5, r3, fp
 80080cc:	f04f 0200 	mov.w	r2, #0
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	00eb      	lsls	r3, r5, #3
 80080d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080da:	00e2      	lsls	r2, r4, #3
 80080dc:	4614      	mov	r4, r2
 80080de:	461d      	mov	r5, r3
 80080e0:	4643      	mov	r3, r8
 80080e2:	18e3      	adds	r3, r4, r3
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	464b      	mov	r3, r9
 80080e8:	eb45 0303 	adc.w	r3, r5, r3
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	f04f 0200 	mov.w	r2, #0
 80080f2:	f04f 0300 	mov.w	r3, #0
 80080f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080fa:	4629      	mov	r1, r5
 80080fc:	028b      	lsls	r3, r1, #10
 80080fe:	4621      	mov	r1, r4
 8008100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008104:	4621      	mov	r1, r4
 8008106:	028a      	lsls	r2, r1, #10
 8008108:	4610      	mov	r0, r2
 800810a:	4619      	mov	r1, r3
 800810c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800810e:	2200      	movs	r2, #0
 8008110:	61bb      	str	r3, [r7, #24]
 8008112:	61fa      	str	r2, [r7, #28]
 8008114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008118:	f7f8 fdc6 	bl	8000ca8 <__aeabi_uldivmod>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4613      	mov	r3, r2
 8008122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008124:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <HAL_RCC_GetSysClockFreq+0x200>)
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	0c1b      	lsrs	r3, r3, #16
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	3301      	adds	r3, #1
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	643b      	str	r3, [r7, #64]	; 0x40
 8008134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008138:	fbb2 f3f3 	udiv	r3, r2, r3
 800813c:	64bb      	str	r3, [r7, #72]	; 0x48
 800813e:	e002      	b.n	8008146 <HAL_RCC_GetSysClockFreq+0x1f2>
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <HAL_RCC_GetSysClockFreq+0x204>)
 8008142:	64bb      	str	r3, [r7, #72]	; 0x48
 8008144:	bf00      	nop
 8008146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008148:	4618      	mov	r0, r3
 800814a:	3750      	adds	r7, #80	; 0x50
 800814c:	46bd      	mov	sp, r7
 800814e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008152:	bf00      	nop
 8008154:	40023800 	.word	0x40023800
 8008158:	00f42400 	.word	0x00f42400
 800815c:	007a1200 	.word	0x007a1200

08008160 <HAL_RCC_GetHCLKFreq>:
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
 8008164:	4b03      	ldr	r3, [pc, #12]	; (8008174 <HAL_RCC_GetHCLKFreq+0x14>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	20000000 	.word	0x20000000

08008178 <HAL_RCC_GetPCLK1Freq>:
 8008178:	b580      	push	{r7, lr}
 800817a:	af00      	add	r7, sp, #0
 800817c:	f7ff fff0 	bl	8008160 <HAL_RCC_GetHCLKFreq>
 8008180:	4602      	mov	r2, r0
 8008182:	4b05      	ldr	r3, [pc, #20]	; (8008198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	0a9b      	lsrs	r3, r3, #10
 8008188:	f003 0307 	and.w	r3, r3, #7
 800818c:	4903      	ldr	r1, [pc, #12]	; (800819c <HAL_RCC_GetPCLK1Freq+0x24>)
 800818e:	5ccb      	ldrb	r3, [r1, r3]
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	4618      	mov	r0, r3
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40023800 	.word	0x40023800
 800819c:	08019994 	.word	0x08019994

080081a0 <HAL_RCC_GetPCLK2Freq>:
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	f7ff ffdc 	bl	8008160 <HAL_RCC_GetHCLKFreq>
 80081a8:	4602      	mov	r2, r0
 80081aa:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	0b5b      	lsrs	r3, r3, #13
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	4903      	ldr	r1, [pc, #12]	; (80081c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081b6:	5ccb      	ldrb	r3, [r1, r3]
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40023800 	.word	0x40023800
 80081c4:	08019994 	.word	0x08019994

080081c8 <HAL_RCC_GetClockConfig>:
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220f      	movs	r2, #15
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	4b12      	ldr	r3, [pc, #72]	; (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 0203 	and.w	r2, r3, #3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	4b0f      	ldr	r3, [pc, #60]	; (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	609a      	str	r2, [r3, #8]
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	60da      	str	r2, [r3, #12]
 80081fc:	4b09      	ldr	r3, [pc, #36]	; (8008224 <HAL_RCC_GetClockConfig+0x5c>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	08db      	lsrs	r3, r3, #3
 8008202:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	611a      	str	r2, [r3, #16]
 800820a:	4b07      	ldr	r3, [pc, #28]	; (8008228 <HAL_RCC_GetClockConfig+0x60>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 020f 	and.w	r2, r3, #15
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	601a      	str	r2, [r3, #0]
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40023800 	.word	0x40023800
 8008228:	40023c00 	.word	0x40023c00

0800822c <HAL_RCCEx_PeriphCLKConfig>:
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	2300      	movs	r3, #0
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10b      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 0302 	and.w	r3, r3, #2
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825c:	2b00      	cmp	r3, #0
 800825e:	d075      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8008260:	4b91      	ldr	r3, [pc, #580]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	f7fb ff29 	bl	80040bc <HAL_GetTick>
 800826a:	6178      	str	r0, [r7, #20]
 800826c:	e008      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800826e:	f7fb ff25 	bl	80040bc <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d901      	bls.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800827c:	2303      	movs	r3, #3
 800827e:	e189      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008280:	4b8a      	ldr	r3, [pc, #552]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1f0      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x42>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x80>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	019a      	lsls	r2, r3, #6
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	071b      	lsls	r3, r3, #28
 80082a4:	4981      	ldr	r1, [pc, #516]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01f      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80082b8:	4b7c      	ldr	r3, [pc, #496]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082be:	0f1b      	lsrs	r3, r3, #28
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	613b      	str	r3, [r7, #16]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	019a      	lsls	r2, r3, #6
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	061b      	lsls	r3, r3, #24
 80082d2:	431a      	orrs	r2, r3
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	071b      	lsls	r3, r3, #28
 80082d8:	4974      	ldr	r1, [pc, #464]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80082e0:	4b72      	ldr	r3, [pc, #456]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e6:	f023 021f 	bic.w	r2, r3, #31
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	496e      	ldr	r1, [pc, #440]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	019a      	lsls	r2, r3, #6
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	061b      	lsls	r3, r3, #24
 8008310:	431a      	orrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	071b      	lsls	r3, r3, #28
 8008318:	4964      	ldr	r1, [pc, #400]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800831a:	4313      	orrs	r3, r2
 800831c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8008320:	4b61      	ldr	r3, [pc, #388]	; (80084a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008322:	2201      	movs	r2, #1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f7fb fec9 	bl	80040bc <HAL_GetTick>
 800832a:	6178      	str	r0, [r7, #20]
 800832c:	e008      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800832e:	f7fb fec5 	bl	80040bc <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800833c:	2303      	movs	r3, #3
 800833e:	e129      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008340:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0f0      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x102>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0308 	and.w	r3, r3, #8
 8008360:	2b00      	cmp	r3, #0
 8008362:	d079      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8008364:	4b52      	ldr	r3, [pc, #328]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
 800836a:	f7fb fea7 	bl	80040bc <HAL_GetTick>
 800836e:	6178      	str	r0, [r7, #20]
 8008370:	e008      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008372:	f7fb fea3 	bl	80040bc <HAL_GetTick>
 8008376:	4602      	mov	r2, r0
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	2b02      	cmp	r3, #2
 800837e:	d901      	bls.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8008380:	2303      	movs	r3, #3
 8008382:	e107      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008384:	4b49      	ldr	r3, [pc, #292]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800838c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008390:	d0ef      	beq.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	2b00      	cmp	r3, #0
 800839c:	d020      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800839e:	4b43      	ldr	r3, [pc, #268]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083a4:	0f1b      	lsrs	r3, r3, #28
 80083a6:	f003 0307 	and.w	r3, r3, #7
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	019a      	lsls	r2, r3, #6
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	431a      	orrs	r2, r3
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	493b      	ldr	r1, [pc, #236]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80083c6:	4b39      	ldr	r3, [pc, #228]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	3b01      	subs	r3, #1
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	4934      	ldr	r1, [pc, #208]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01e      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80083ec:	4b2f      	ldr	r3, [pc, #188]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083f2:	0e1b      	lsrs	r3, r3, #24
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	613b      	str	r3, [r7, #16]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	019a      	lsls	r2, r3, #6
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	061b      	lsls	r3, r3, #24
 8008404:	431a      	orrs	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	071b      	lsls	r3, r3, #28
 800840c:	4927      	ldr	r1, [pc, #156]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008414:	4b25      	ldr	r3, [pc, #148]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800841a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	4922      	ldr	r1, [pc, #136]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008424:	4313      	orrs	r3, r2
 8008426:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 800842a:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800842c:	2201      	movs	r2, #1
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	f7fb fe44 	bl	80040bc <HAL_GetTick>
 8008434:	6178      	str	r0, [r7, #20]
 8008436:	e008      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008438:	f7fb fe40 	bl	80040bc <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b02      	cmp	r3, #2
 8008444:	d901      	bls.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008446:	2303      	movs	r3, #3
 8008448:	e0a4      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800844a:	4b18      	ldr	r3, [pc, #96]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008456:	d1ef      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 808b 	beq.w	800857c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8008466:	2300      	movs	r3, #0
 8008468:	60fb      	str	r3, [r7, #12]
 800846a:	4b10      	ldr	r3, [pc, #64]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	4a0f      	ldr	r2, [pc, #60]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008474:	6413      	str	r3, [r2, #64]	; 0x40
 8008476:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4b0c      	ldr	r3, [pc, #48]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	f7fb fe15 	bl	80040bc <HAL_GetTick>
 8008492:	6178      	str	r0, [r7, #20]
 8008494:	e010      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8008496:	f7fb fe11 	bl	80040bc <HAL_GetTick>
 800849a:	4602      	mov	r2, r0
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d909      	bls.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80084a4:	2303      	movs	r3, #3
 80084a6:	e075      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80084a8:	42470068 	.word	0x42470068
 80084ac:	40023800 	.word	0x40023800
 80084b0:	42470070 	.word	0x42470070
 80084b4:	40007000 	.word	0x40007000
 80084b8:	4b38      	ldr	r3, [pc, #224]	; (800859c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0e8      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80084c4:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084cc:	613b      	str	r3, [r7, #16]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d02f      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d028      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80084e2:	4b2f      	ldr	r3, [pc, #188]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ea:	613b      	str	r3, [r7, #16]
 80084ec:	4b2d      	ldr	r3, [pc, #180]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
 80084f2:	4b2c      	ldr	r3, [pc, #176]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6713      	str	r3, [r2, #112]	; 0x70
 80084fe:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b01      	cmp	r3, #1
 8008508:	d114      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x308>
 800850a:	f7fb fdd7 	bl	80040bc <HAL_GetTick>
 800850e:	6178      	str	r0, [r7, #20]
 8008510:	e00a      	b.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008512:	f7fb fdd3 	bl	80040bc <HAL_GetTick>
 8008516:	4602      	mov	r2, r0
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008520:	4293      	cmp	r3, r2
 8008522:	d901      	bls.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008524:	2303      	movs	r3, #3
 8008526:	e035      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8008528:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0ee      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008540:	d10d      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	4912      	ldr	r1, [pc, #72]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008558:	4313      	orrs	r3, r2
 800855a:	608b      	str	r3, [r1, #8]
 800855c:	e005      	b.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800855e:	4b10      	ldr	r3, [pc, #64]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	4a0f      	ldr	r2, [pc, #60]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008564:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008568:	6093      	str	r3, [r2, #8]
 800856a:	4b0d      	ldr	r3, [pc, #52]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800856c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008576:	490a      	ldr	r1, [pc, #40]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008578:	4313      	orrs	r3, r2
 800857a:	670b      	str	r3, [r1, #112]	; 0x70
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800858e:	4b06      	ldr	r3, [pc, #24]	; (80085a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40007000 	.word	0x40007000
 80085a0:	40023800 	.word	0x40023800
 80085a4:	42470e40 	.word	0x42470e40
 80085a8:	424711e0 	.word	0x424711e0

080085ac <HAL_SDRAM_Init>:
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_SDRAM_Init+0x14>
 80085bc:	2301      	movs	r3, #1
 80085be:	e025      	b.n	800860c <HAL_SDRAM_Init+0x60>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <HAL_SDRAM_Init+0x2e>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f81d 	bl	8008614 <HAL_SDRAM_MspInit>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4619      	mov	r1, r3
 80085ec:	4610      	mov	r0, r2
 80085ee:	f001 fe2d 	bl	800a24c <FMC_SDRAM_Init>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	461a      	mov	r2, r3
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	f001 fe98 	bl	800a332 <FMC_SDRAM_Timing_Init>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800860a:	2300      	movs	r3, #0
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <HAL_SDRAM_MspInit>:
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_SDRAM_SendCommand>:
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b02      	cmp	r3, #2
 800863e:	d101      	bne.n	8008644 <HAL_SDRAM_SendCommand+0x1c>
 8008640:	2302      	movs	r3, #2
 8008642:	e018      	b.n	8008676 <HAL_SDRAM_SendCommand+0x4e>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	4618      	mov	r0, r3
 8008656:	f001 feeb 	bl	800a430 <FMC_SDRAM_SendCommand>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d104      	bne.n	800866c <HAL_SDRAM_SendCommand+0x44>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2205      	movs	r2, #5
 8008666:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800866a:	e003      	b.n	8008674 <HAL_SDRAM_SendCommand+0x4c>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008674:	2300      	movs	r3, #0
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <HAL_SDRAM_ProgramRefreshRate>:
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800868e:	b2db      	uxtb	r3, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d101      	bne.n	8008698 <HAL_SDRAM_ProgramRefreshRate+0x1a>
 8008694:	2302      	movs	r3, #2
 8008696:	e00e      	b.n	80086b6 <HAL_SDRAM_ProgramRefreshRate+0x38>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2202      	movs	r2, #2
 800869c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f001 fefe 	bl	800a4a8 <FMC_SDRAM_ProgramRefreshRate>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80086b4:	2300      	movs	r3, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_SPI_Init>:
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_SPI_Init+0x12>
 80086cc:	2301      	movs	r3, #1
 80086ce:	e056      	b.n	800877e <HAL_SPI_Init+0xc0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <HAL_SPI_Init+0x32>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7f9 ff60 	bl	80025b0 <HAL_SPI_MspInit>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	431a      	orrs	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	699b      	ldr	r3, [r3, #24]
 8008728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	431a      	orrs	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	ea42 0103 	orr.w	r1, r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	0c1b      	lsrs	r3, r3, #16
 800874e:	f003 0104 	and.w	r1, r3, #4
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	430a      	orrs	r2, r1
 800875c:	605a      	str	r2, [r3, #4]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69da      	ldr	r2, [r3, #28]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800876c:	61da      	str	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	655a      	str	r2, [r3, #84]	; 0x54
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800877c:	2300      	movs	r3, #0
 800877e:	4618      	mov	r0, r3
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_SPI_DeInit>:
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_SPI_DeInit+0x12>
 8008794:	2301      	movs	r3, #1
 8008796:	e01a      	b.n	80087ce <HAL_SPI_DeInit+0x48>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7f9 ff45 	bl	8002640 <HAL_SPI_MspDeInit>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	655a      	str	r2, [r3, #84]	; 0x54
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80087cc:	2300      	movs	r3, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_SPI_Transmit>:
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b088      	sub	sp, #32
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	4613      	mov	r3, r2
 80087e4:	80fb      	strh	r3, [r7, #6]
 80087e6:	2300      	movs	r3, #0
 80087e8:	77fb      	strb	r3, [r7, #31]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_SPI_Transmit+0x22>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e11e      	b.n	8008a36 <HAL_SPI_Transmit+0x260>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008800:	f7fb fc5c 	bl	80040bc <HAL_GetTick>
 8008804:	61b8      	str	r0, [r7, #24]
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	82fb      	strh	r3, [r7, #22]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	d002      	beq.n	800881c <HAL_SPI_Transmit+0x46>
 8008816:	2302      	movs	r3, #2
 8008818:	77fb      	strb	r3, [r7, #31]
 800881a:	e103      	b.n	8008a24 <HAL_SPI_Transmit+0x24e>
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_SPI_Transmit+0x52>
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <HAL_SPI_Transmit+0x58>
 8008828:	2301      	movs	r3, #1
 800882a:	77fb      	strb	r3, [r7, #31]
 800882c:	e0fa      	b.n	8008a24 <HAL_SPI_Transmit+0x24e>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2203      	movs	r2, #3
 8008832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	631a      	str	r2, [r3, #48]	; 0x30
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	869a      	strh	r2, [r3, #52]	; 0x34
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	86da      	strh	r2, [r3, #54]	; 0x36
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	639a      	str	r2, [r3, #56]	; 0x38
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	879a      	strh	r2, [r3, #60]	; 0x3c
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	645a      	str	r2, [r3, #68]	; 0x44
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	641a      	str	r2, [r3, #64]	; 0x40
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008874:	d107      	bne.n	8008886 <HAL_SPI_Transmit+0xb0>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008890:	2b40      	cmp	r3, #64	; 0x40
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_Transmit+0xce>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ac:	d14b      	bne.n	8008946 <HAL_SPI_Transmit+0x170>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_SPI_Transmit+0xe6>
 80088b6:	8afb      	ldrh	r3, [r7, #22]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d13e      	bne.n	800893a <HAL_SPI_Transmit+0x164>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c0:	881a      	ldrh	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60da      	str	r2, [r3, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088cc:	1c9a      	adds	r2, r3, #2
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	631a      	str	r2, [r3, #48]	; 0x30
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	86da      	strh	r2, [r3, #54]	; 0x36
 80088e0:	e02b      	b.n	800893a <HAL_SPI_Transmit+0x164>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0302 	and.w	r3, r3, #2
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d112      	bne.n	8008916 <HAL_SPI_Transmit+0x140>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	881a      	ldrh	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60da      	str	r2, [r3, #12]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	1c9a      	adds	r2, r3, #2
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	86da      	strh	r2, [r3, #54]	; 0x36
 8008914:	e011      	b.n	800893a <HAL_SPI_Transmit+0x164>
 8008916:	f7fb fbd1 	bl	80040bc <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d803      	bhi.n	800892e <HAL_SPI_Transmit+0x158>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800892c:	d102      	bne.n	8008934 <HAL_SPI_Transmit+0x15e>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d102      	bne.n	800893a <HAL_SPI_Transmit+0x164>
 8008934:	2303      	movs	r3, #3
 8008936:	77fb      	strb	r3, [r7, #31]
 8008938:	e074      	b.n	8008a24 <HAL_SPI_Transmit+0x24e>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800893e:	b29b      	uxth	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1ce      	bne.n	80088e2 <HAL_SPI_Transmit+0x10c>
 8008944:	e04c      	b.n	80089e0 <HAL_SPI_Transmit+0x20a>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <HAL_SPI_Transmit+0x17e>
 800894e:	8afb      	ldrh	r3, [r7, #22]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d140      	bne.n	80089d6 <HAL_SPI_Transmit+0x200>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	7812      	ldrb	r2, [r2, #0]
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	1c5a      	adds	r2, r3, #1
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	631a      	str	r2, [r3, #48]	; 0x30
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008970:	b29b      	uxth	r3, r3
 8008972:	3b01      	subs	r3, #1
 8008974:	b29a      	uxth	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	86da      	strh	r2, [r3, #54]	; 0x36
 800897a:	e02c      	b.n	80089d6 <HAL_SPI_Transmit+0x200>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b02      	cmp	r3, #2
 8008988:	d113      	bne.n	80089b2 <HAL_SPI_Transmit+0x1dc>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	330c      	adds	r3, #12
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	701a      	strb	r2, [r3, #0]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80089b0:	e011      	b.n	80089d6 <HAL_SPI_Transmit+0x200>
 80089b2:	f7fb fb83 	bl	80040bc <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d803      	bhi.n	80089ca <HAL_SPI_Transmit+0x1f4>
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089c8:	d102      	bne.n	80089d0 <HAL_SPI_Transmit+0x1fa>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <HAL_SPI_Transmit+0x200>
 80089d0:	2303      	movs	r3, #3
 80089d2:	77fb      	strb	r3, [r7, #31]
 80089d4:	e026      	b.n	8008a24 <HAL_SPI_Transmit+0x24e>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1cd      	bne.n	800897c <HAL_SPI_Transmit+0x1a6>
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	6839      	ldr	r1, [r7, #0]
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fbb3 	bl	8009150 <SPI_EndRxTxTransaction>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <HAL_SPI_Transmit+0x220>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	655a      	str	r2, [r3, #84]	; 0x54
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <HAL_SPI_Transmit+0x23e>
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	613b      	str	r3, [r7, #16]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Transmit+0x24c>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	77fb      	strb	r3, [r7, #31]
 8008a20:	e000      	b.n	8008a24 <HAL_SPI_Transmit+0x24e>
 8008a22:	bf00      	nop
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008a34:	7ffb      	ldrb	r3, [r7, #31]
 8008a36:	4618      	mov	r0, r3
 8008a38:	3720      	adds	r7, #32
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_SPI_Receive>:
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b088      	sub	sp, #32
 8008a42:	af02      	add	r7, sp, #8
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	75fb      	strb	r3, [r7, #23]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a5a:	d112      	bne.n	8008a82 <HAL_SPI_Receive+0x44>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10e      	bne.n	8008a82 <HAL_SPI_Receive+0x44>
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2204      	movs	r2, #4
 8008a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008a6c:	88fa      	ldrh	r2, [r7, #6]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	68b9      	ldr	r1, [r7, #8]
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 f8e9 	bl	8008c50 <HAL_SPI_TransmitReceive>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	e0e2      	b.n	8008c48 <HAL_SPI_Receive+0x20a>
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d101      	bne.n	8008a90 <HAL_SPI_Receive+0x52>
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	e0db      	b.n	8008c48 <HAL_SPI_Receive+0x20a>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008a98:	f7fb fb10 	bl	80040bc <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d002      	beq.n	8008ab0 <HAL_SPI_Receive+0x72>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	75fb      	strb	r3, [r7, #23]
 8008aae:	e0c2      	b.n	8008c36 <HAL_SPI_Receive+0x1f8>
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <HAL_SPI_Receive+0x7e>
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <HAL_SPI_Receive+0x84>
 8008abc:	2301      	movs	r3, #1
 8008abe:	75fb      	strb	r3, [r7, #23]
 8008ac0:	e0b9      	b.n	8008c36 <HAL_SPI_Receive+0x1f8>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2204      	movs	r2, #4
 8008ac6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	655a      	str	r2, [r3, #84]	; 0x54
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	88fa      	ldrh	r2, [r7, #6]
 8008ada:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	88fa      	ldrh	r2, [r7, #6]
 8008ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2200      	movs	r2, #0
 8008aec:	869a      	strh	r2, [r3, #52]	; 0x34
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	645a      	str	r2, [r3, #68]	; 0x44
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b08:	d107      	bne.n	8008b1a <HAL_SPI_Receive+0xdc>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b24:	2b40      	cmp	r3, #64	; 0x40
 8008b26:	d007      	beq.n	8008b38 <HAL_SPI_Receive+0xfa>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d162      	bne.n	8008c06 <HAL_SPI_Receive+0x1c8>
 8008b40:	e02e      	b.n	8008ba0 <HAL_SPI_Receive+0x162>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d115      	bne.n	8008b7c <HAL_SPI_Receive+0x13e>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f103 020c 	add.w	r2, r3, #12
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	b2d2      	uxtb	r2, r2
 8008b60:	701a      	strb	r2, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b7a:	e011      	b.n	8008ba0 <HAL_SPI_Receive+0x162>
 8008b7c:	f7fb fa9e 	bl	80040bc <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d803      	bhi.n	8008b94 <HAL_SPI_Receive+0x156>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b92:	d102      	bne.n	8008b9a <HAL_SPI_Receive+0x15c>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <HAL_SPI_Receive+0x162>
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	75fb      	strb	r3, [r7, #23]
 8008b9e:	e04a      	b.n	8008c36 <HAL_SPI_Receive+0x1f8>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1cb      	bne.n	8008b42 <HAL_SPI_Receive+0x104>
 8008baa:	e031      	b.n	8008c10 <HAL_SPI_Receive+0x1d2>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d113      	bne.n	8008be2 <HAL_SPI_Receive+0x1a4>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	b292      	uxth	r2, r2
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bcc:	1c9a      	adds	r2, r3, #2
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008be0:	e011      	b.n	8008c06 <HAL_SPI_Receive+0x1c8>
 8008be2:	f7fb fa6b 	bl	80040bc <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d803      	bhi.n	8008bfa <HAL_SPI_Receive+0x1bc>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf8:	d102      	bne.n	8008c00 <HAL_SPI_Receive+0x1c2>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d102      	bne.n	8008c06 <HAL_SPI_Receive+0x1c8>
 8008c00:	2303      	movs	r3, #3
 8008c02:	75fb      	strb	r3, [r7, #23]
 8008c04:	e017      	b.n	8008c36 <HAL_SPI_Receive+0x1f8>
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1cd      	bne.n	8008bac <HAL_SPI_Receive+0x16e>
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fa35 	bl	8009084 <SPI_EndRxTransaction>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_SPI_Receive+0x1e8>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	655a      	str	r2, [r3, #84]	; 0x54
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <HAL_SPI_Receive+0x1f6>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	75fb      	strb	r3, [r7, #23]
 8008c32:	e000      	b.n	8008c36 <HAL_SPI_Receive+0x1f8>
 8008c34:	bf00      	nop
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_SPI_TransmitReceive>:
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08c      	sub	sp, #48	; 0x30
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	807b      	strh	r3, [r7, #2]
 8008c5e:	2301      	movs	r3, #1
 8008c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c62:	2300      	movs	r3, #0
 8008c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d101      	bne.n	8008c76 <HAL_SPI_TransmitReceive+0x26>
 8008c72:	2302      	movs	r3, #2
 8008c74:	e18a      	b.n	8008f8c <HAL_SPI_TransmitReceive+0x33c>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008c7e:	f7fb fa1d 	bl	80040bc <HAL_GetTick>
 8008c82:	6278      	str	r0, [r7, #36]	; 0x24
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	61fb      	str	r3, [r7, #28]
 8008c94:	887b      	ldrh	r3, [r7, #2]
 8008c96:	837b      	strh	r3, [r7, #26]
 8008c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d00f      	beq.n	8008cc0 <HAL_SPI_TransmitReceive+0x70>
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ca6:	d107      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x68>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0x68>
 8008cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d003      	beq.n	8008cc0 <HAL_SPI_TransmitReceive+0x70>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cbe:	e15b      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x82>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x82>
 8008ccc:	887b      	ldrh	r3, [r7, #2]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d103      	bne.n	8008cda <HAL_SPI_TransmitReceive+0x8a>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd8:	e14e      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d003      	beq.n	8008cee <HAL_SPI_TransmitReceive+0x9e>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2205      	movs	r2, #5
 8008cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	639a      	str	r2, [r3, #56]	; 0x38
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	887a      	ldrh	r2, [r7, #2]
 8008cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	887a      	ldrh	r2, [r7, #2]
 8008d04:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	887a      	ldrh	r2, [r7, #2]
 8008d10:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	887a      	ldrh	r2, [r7, #2]
 8008d16:	869a      	strh	r2, [r3, #52]	; 0x34
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	645a      	str	r2, [r3, #68]	; 0x44
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d007      	beq.n	8008d42 <HAL_SPI_TransmitReceive+0xf2>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4a:	d178      	bne.n	8008e3e <HAL_SPI_TransmitReceive+0x1ee>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <HAL_SPI_TransmitReceive+0x10a>
 8008d54:	8b7b      	ldrh	r3, [r7, #26]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d166      	bne.n	8008e28 <HAL_SPI_TransmitReceive+0x1d8>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	881a      	ldrh	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60da      	str	r2, [r3, #12]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6a:	1c9a      	adds	r2, r3, #2
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b29a      	uxth	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	86da      	strh	r2, [r3, #54]	; 0x36
 8008d7e:	e053      	b.n	8008e28 <HAL_SPI_TransmitReceive+0x1d8>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d11b      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x176>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d016      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x176>
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d113      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x176>
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008da2:	881a      	ldrh	r2, [r3, #0]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	1c9a      	adds	r2, r3, #2
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d119      	bne.n	8008e08 <HAL_SPI_TransmitReceive+0x1b8>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d014      	beq.n	8008e08 <HAL_SPI_TransmitReceive+0x1b8>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	b292      	uxth	r2, r2
 8008dea:	801a      	strh	r2, [r3, #0]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	1c9a      	adds	r2, r3, #2
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	639a      	str	r2, [r3, #56]	; 0x38
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008e04:	2301      	movs	r3, #1
 8008e06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e08:	f7fb f958 	bl	80040bc <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d807      	bhi.n	8008e28 <HAL_SPI_TransmitReceive+0x1d8>
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e1e:	d003      	beq.n	8008e28 <HAL_SPI_TransmitReceive+0x1d8>
 8008e20:	2303      	movs	r3, #3
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e26:	e0a7      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1a6      	bne.n	8008d80 <HAL_SPI_TransmitReceive+0x130>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1a1      	bne.n	8008d80 <HAL_SPI_TransmitReceive+0x130>
 8008e3c:	e07c      	b.n	8008f38 <HAL_SPI_TransmitReceive+0x2e8>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_SPI_TransmitReceive+0x1fc>
 8008e46:	8b7b      	ldrh	r3, [r7, #26]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d16b      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x2d4>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	701a      	strb	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	631a      	str	r2, [r3, #48]	; 0x30
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	86da      	strh	r2, [r3, #54]	; 0x36
 8008e72:	e057      	b.n	8008f24 <HAL_SPI_TransmitReceive+0x2d4>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d11c      	bne.n	8008ebc <HAL_SPI_TransmitReceive+0x26c>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d017      	beq.n	8008ebc <HAL_SPI_TransmitReceive+0x26c>
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d114      	bne.n	8008ebc <HAL_SPI_TransmitReceive+0x26c>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	330c      	adds	r3, #12
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 0301 	and.w	r3, r3, #1
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d119      	bne.n	8008efe <HAL_SPI_TransmitReceive+0x2ae>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d014      	beq.n	8008efe <HAL_SPI_TransmitReceive+0x2ae>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	b2d2      	uxtb	r2, r2
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	1c5a      	adds	r2, r3, #1
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	639a      	str	r2, [r3, #56]	; 0x38
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008efa:	2301      	movs	r3, #1
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008efe:	f7fb f8dd 	bl	80040bc <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d803      	bhi.n	8008f16 <HAL_SPI_TransmitReceive+0x2c6>
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f14:	d102      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x2cc>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d103      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x2d4>
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f22:	e029      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1a2      	bne.n	8008e74 <HAL_SPI_TransmitReceive+0x224>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d19d      	bne.n	8008e74 <HAL_SPI_TransmitReceive+0x224>
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f000 f907 	bl	8009150 <SPI_EndRxTxTransaction>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d006      	beq.n	8008f56 <HAL_SPI_TransmitReceive+0x306>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2220      	movs	r2, #32
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54
 8008f54:	e010      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10b      	bne.n	8008f76 <HAL_SPI_TransmitReceive+0x326>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	e000      	b.n	8008f78 <HAL_SPI_TransmitReceive+0x328>
 8008f76:	bf00      	nop
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008f88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <HAL_SPI_GetState>:
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <SPI_WaitFlagStateUntilTimeout>:
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	71fb      	strb	r3, [r7, #7]
 8008fc0:	e04c      	b.n	800905c <SPI_WaitFlagStateUntilTimeout+0xac>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc8:	d048      	beq.n	800905c <SPI_WaitFlagStateUntilTimeout+0xac>
 8008fca:	f7fb f877 	bl	80040bc <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d902      	bls.n	8008fe0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d13d      	bne.n	800905c <SPI_WaitFlagStateUntilTimeout+0xac>
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fee:	605a      	str	r2, [r3, #4]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ff8:	d111      	bne.n	800901e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009002:	d004      	beq.n	800900e <SPI_WaitFlagStateUntilTimeout+0x5e>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800900c:	d107      	bne.n	800901e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009026:	d10f      	bne.n	8009048 <SPI_WaitFlagStateUntilTimeout+0x98>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8009058:	2303      	movs	r3, #3
 800905a:	e00f      	b.n	800907c <SPI_WaitFlagStateUntilTimeout+0xcc>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689a      	ldr	r2, [r3, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	4013      	ands	r3, r2
 8009066:	68ba      	ldr	r2, [r7, #8]
 8009068:	429a      	cmp	r2, r3
 800906a:	bf0c      	ite	eq
 800906c:	2301      	moveq	r3, #1
 800906e:	2300      	movne	r3, #0
 8009070:	b2db      	uxtb	r3, r3
 8009072:	461a      	mov	r2, r3
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	429a      	cmp	r2, r3
 8009078:	d1a3      	bne.n	8008fc2 <SPI_WaitFlagStateUntilTimeout+0x12>
 800907a:	2300      	movs	r3, #0
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <SPI_EndRxTransaction>:
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af02      	add	r7, sp, #8
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009098:	d111      	bne.n	80090be <SPI_EndRxTransaction+0x3a>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090a2:	d004      	beq.n	80090ae <SPI_EndRxTransaction+0x2a>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ac:	d107      	bne.n	80090be <SPI_EndRxTransaction+0x3a>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090c6:	d12a      	bne.n	800911e <SPI_EndRxTransaction+0x9a>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d0:	d012      	beq.n	80090f8 <SPI_EndRxTransaction+0x74>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2200      	movs	r2, #0
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	68f8      	ldr	r0, [r7, #12]
 80090de:	f7ff ff67 	bl	8008fb0 <SPI_WaitFlagStateUntilTimeout>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d02d      	beq.n	8009144 <SPI_EndRxTransaction+0xc0>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090ec:	f043 0220 	orr.w	r2, r3, #32
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	655a      	str	r2, [r3, #84]	; 0x54
 80090f4:	2303      	movs	r3, #3
 80090f6:	e026      	b.n	8009146 <SPI_EndRxTransaction+0xc2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	9300      	str	r3, [sp, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2200      	movs	r2, #0
 8009100:	2101      	movs	r1, #1
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff ff54 	bl	8008fb0 <SPI_WaitFlagStateUntilTimeout>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01a      	beq.n	8009144 <SPI_EndRxTransaction+0xc0>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009112:	f043 0220 	orr.w	r2, r3, #32
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	655a      	str	r2, [r3, #84]	; 0x54
 800911a:	2303      	movs	r3, #3
 800911c:	e013      	b.n	8009146 <SPI_EndRxTransaction+0xc2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	2101      	movs	r1, #1
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f7ff ff41 	bl	8008fb0 <SPI_WaitFlagStateUntilTimeout>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d007      	beq.n	8009144 <SPI_EndRxTransaction+0xc0>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	f043 0220 	orr.w	r2, r3, #32
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	655a      	str	r2, [r3, #84]	; 0x54
 8009140:	2303      	movs	r3, #3
 8009142:	e000      	b.n	8009146 <SPI_EndRxTransaction+0xc2>
 8009144:	2300      	movs	r3, #0
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <SPI_EndRxTxTransaction>:
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <SPI_EndRxTxTransaction+0x7c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <SPI_EndRxTxTransaction+0x80>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	0d5b      	lsrs	r3, r3, #21
 8009168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800916c:	fb02 f303 	mul.w	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800917a:	d112      	bne.n	80091a2 <SPI_EndRxTxTransaction+0x52>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	2180      	movs	r1, #128	; 0x80
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff ff12 	bl	8008fb0 <SPI_WaitFlagStateUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d016      	beq.n	80091c0 <SPI_EndRxTxTransaction+0x70>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009196:	f043 0220 	orr.w	r2, r3, #32
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	655a      	str	r2, [r3, #84]	; 0x54
 800919e:	2303      	movs	r3, #3
 80091a0:	e00f      	b.n	80091c2 <SPI_EndRxTxTransaction+0x72>
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00a      	beq.n	80091be <SPI_EndRxTxTransaction+0x6e>
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	617b      	str	r3, [r7, #20]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b8:	2b80      	cmp	r3, #128	; 0x80
 80091ba:	d0f2      	beq.n	80091a2 <SPI_EndRxTxTransaction+0x52>
 80091bc:	e000      	b.n	80091c0 <SPI_EndRxTxTransaction+0x70>
 80091be:	bf00      	nop
 80091c0:	2300      	movs	r3, #0
 80091c2:	4618      	mov	r0, r3
 80091c4:	3718      	adds	r7, #24
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20000000 	.word	0x20000000
 80091d0:	165e9f81 	.word	0x165e9f81

080091d4 <HAL_TIM_Base_Init>:
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_TIM_Base_Init+0x12>
 80091e2:	2301      	movs	r3, #1
 80091e4:	e01d      	b.n	8009222 <HAL_TIM_Base_Init+0x4e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_TIM_Base_Init+0x2c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f815 	bl	800922a <HAL_TIM_Base_MspInit>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3304      	adds	r3, #4
 8009210:	4619      	mov	r1, r3
 8009212:	4610      	mov	r0, r2
 8009214:	f000 f968 	bl	80094e8 <TIM_Base_SetConfig>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009220:	2300      	movs	r3, #0
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_TIM_Base_MspInit>:
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_TIM_Base_Start_IT>:
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0201 	orr.w	r2, r2, #1
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	60fb      	str	r3, [r7, #12]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b06      	cmp	r3, #6
 8009266:	d007      	beq.n	8009278 <HAL_TIM_Base_Start_IT+0x3a>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
 8009278:	2300      	movs	r3, #0
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_TIM_IRQHandler>:
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d122      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x5c>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d11b      	bne.n	80092e2 <HAL_TIM_IRQHandler+0x5c>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f06f 0202 	mvn.w	r2, #2
 80092b2:	611a      	str	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	771a      	strb	r2, [r3, #28]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <HAL_TIM_IRQHandler+0x4a>
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f8ee 	bl	80094aa <HAL_TIM_IC_CaptureCallback>
 80092ce:	e005      	b.n	80092dc <HAL_TIM_IRQHandler+0x56>
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f8e0 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f8f1 	bl	80094be <HAL_TIM_PWM_PulseFinishedCallback>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	771a      	strb	r2, [r3, #28]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f003 0304 	and.w	r3, r3, #4
 80092ec:	2b04      	cmp	r3, #4
 80092ee:	d122      	bne.n	8009336 <HAL_TIM_IRQHandler+0xb0>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d11b      	bne.n	8009336 <HAL_TIM_IRQHandler+0xb0>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f06f 0204 	mvn.w	r2, #4
 8009306:	611a      	str	r2, [r3, #16]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2202      	movs	r2, #2
 800930c:	771a      	strb	r2, [r3, #28]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <HAL_TIM_IRQHandler+0x9e>
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f8c4 	bl	80094aa <HAL_TIM_IC_CaptureCallback>
 8009322:	e005      	b.n	8009330 <HAL_TIM_IRQHandler+0xaa>
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f8b6 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f8c7 	bl	80094be <HAL_TIM_PWM_PulseFinishedCallback>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	771a      	strb	r2, [r3, #28]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b08      	cmp	r3, #8
 8009342:	d122      	bne.n	800938a <HAL_TIM_IRQHandler+0x104>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b08      	cmp	r3, #8
 8009350:	d11b      	bne.n	800938a <HAL_TIM_IRQHandler+0x104>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0208 	mvn.w	r2, #8
 800935a:	611a      	str	r2, [r3, #16]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2204      	movs	r2, #4
 8009360:	771a      	strb	r2, [r3, #28]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_TIM_IRQHandler+0xf2>
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f89a 	bl	80094aa <HAL_TIM_IC_CaptureCallback>
 8009376:	e005      	b.n	8009384 <HAL_TIM_IRQHandler+0xfe>
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f88c 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f89d 	bl	80094be <HAL_TIM_PWM_PulseFinishedCallback>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	771a      	strb	r2, [r3, #28]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0310 	and.w	r3, r3, #16
 8009394:	2b10      	cmp	r3, #16
 8009396:	d122      	bne.n	80093de <HAL_TIM_IRQHandler+0x158>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0310 	and.w	r3, r3, #16
 80093a2:	2b10      	cmp	r3, #16
 80093a4:	d11b      	bne.n	80093de <HAL_TIM_IRQHandler+0x158>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f06f 0210 	mvn.w	r2, #16
 80093ae:	611a      	str	r2, [r3, #16]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2208      	movs	r2, #8
 80093b4:	771a      	strb	r2, [r3, #28]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d003      	beq.n	80093cc <HAL_TIM_IRQHandler+0x146>
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f870 	bl	80094aa <HAL_TIM_IC_CaptureCallback>
 80093ca:	e005      	b.n	80093d8 <HAL_TIM_IRQHandler+0x152>
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f862 	bl	8009496 <HAL_TIM_OC_DelayElapsedCallback>
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f873 	bl	80094be <HAL_TIM_PWM_PulseFinishedCallback>
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	771a      	strb	r2, [r3, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d10e      	bne.n	800940a <HAL_TIM_IRQHandler+0x184>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d107      	bne.n	800940a <HAL_TIM_IRQHandler+0x184>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f06f 0201 	mvn.w	r2, #1
 8009402:	611a      	str	r2, [r3, #16]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7f9 f883 	bl	8002510 <HAL_TIM_PeriodElapsedCallback>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009414:	2b80      	cmp	r3, #128	; 0x80
 8009416:	d10e      	bne.n	8009436 <HAL_TIM_IRQHandler+0x1b0>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d107      	bne.n	8009436 <HAL_TIM_IRQHandler+0x1b0>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800942e:	611a      	str	r2, [r3, #16]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f903 	bl	800963c <HAL_TIMEx_BreakCallback>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009440:	2b40      	cmp	r3, #64	; 0x40
 8009442:	d10e      	bne.n	8009462 <HAL_TIM_IRQHandler+0x1dc>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b40      	cmp	r3, #64	; 0x40
 8009450:	d107      	bne.n	8009462 <HAL_TIM_IRQHandler+0x1dc>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800945a:	611a      	str	r2, [r3, #16]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f838 	bl	80094d2 <HAL_TIM_TriggerCallback>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b20      	cmp	r3, #32
 800946e:	d10e      	bne.n	800948e <HAL_TIM_IRQHandler+0x208>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b20      	cmp	r3, #32
 800947c:	d107      	bne.n	800948e <HAL_TIM_IRQHandler+0x208>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f06f 0220 	mvn.w	r2, #32
 8009486:	611a      	str	r2, [r3, #16]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f8cd 	bl	8009628 <HAL_TIMEx_CommutCallback>
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <HAL_TIM_OC_DelayElapsedCallback>:
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_TIM_IC_CaptureCallback>:
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_TIM_PWM_PulseFinishedCallback>:
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_TIM_TriggerCallback>:
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
	...

080094e8 <TIM_Base_SetConfig>:
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	60fb      	str	r3, [r7, #12]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a40      	ldr	r2, [pc, #256]	; (80095fc <TIM_Base_SetConfig+0x114>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d013      	beq.n	8009528 <TIM_Base_SetConfig+0x40>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009506:	d00f      	beq.n	8009528 <TIM_Base_SetConfig+0x40>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a3d      	ldr	r2, [pc, #244]	; (8009600 <TIM_Base_SetConfig+0x118>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00b      	beq.n	8009528 <TIM_Base_SetConfig+0x40>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a3c      	ldr	r2, [pc, #240]	; (8009604 <TIM_Base_SetConfig+0x11c>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d007      	beq.n	8009528 <TIM_Base_SetConfig+0x40>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a3b      	ldr	r2, [pc, #236]	; (8009608 <TIM_Base_SetConfig+0x120>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_Base_SetConfig+0x40>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a3a      	ldr	r2, [pc, #232]	; (800960c <TIM_Base_SetConfig+0x124>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d108      	bne.n	800953a <TIM_Base_SetConfig+0x52>
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	4313      	orrs	r3, r2
 8009538:	60fb      	str	r3, [r7, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a2f      	ldr	r2, [pc, #188]	; (80095fc <TIM_Base_SetConfig+0x114>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d02b      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009548:	d027      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	4a2c      	ldr	r2, [pc, #176]	; (8009600 <TIM_Base_SetConfig+0x118>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d023      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a2b      	ldr	r2, [pc, #172]	; (8009604 <TIM_Base_SetConfig+0x11c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d01f      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a2a      	ldr	r2, [pc, #168]	; (8009608 <TIM_Base_SetConfig+0x120>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d01b      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a29      	ldr	r2, [pc, #164]	; (800960c <TIM_Base_SetConfig+0x124>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d017      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a28      	ldr	r2, [pc, #160]	; (8009610 <TIM_Base_SetConfig+0x128>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a27      	ldr	r2, [pc, #156]	; (8009614 <TIM_Base_SetConfig+0x12c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00f      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a26      	ldr	r2, [pc, #152]	; (8009618 <TIM_Base_SetConfig+0x130>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00b      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a25      	ldr	r2, [pc, #148]	; (800961c <TIM_Base_SetConfig+0x134>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d007      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a24      	ldr	r2, [pc, #144]	; (8009620 <TIM_Base_SetConfig+0x138>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_Base_SetConfig+0xb2>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a23      	ldr	r2, [pc, #140]	; (8009624 <TIM_Base_SetConfig+0x13c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d108      	bne.n	80095ac <TIM_Base_SetConfig+0xc4>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	629a      	str	r2, [r3, #40]	; 0x28
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a0a      	ldr	r2, [pc, #40]	; (80095fc <TIM_Base_SetConfig+0x114>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d003      	beq.n	80095e0 <TIM_Base_SetConfig+0xf8>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a0c      	ldr	r2, [pc, #48]	; (800960c <TIM_Base_SetConfig+0x124>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d103      	bne.n	80095e8 <TIM_Base_SetConfig+0x100>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	691a      	ldr	r2, [r3, #16]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	631a      	str	r2, [r3, #48]	; 0x30
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	615a      	str	r2, [r3, #20]
 80095ee:	bf00      	nop
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
 80095fa:	bf00      	nop
 80095fc:	40010000 	.word	0x40010000
 8009600:	40000400 	.word	0x40000400
 8009604:	40000800 	.word	0x40000800
 8009608:	40000c00 	.word	0x40000c00
 800960c:	40010400 	.word	0x40010400
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800
 800961c:	40001800 	.word	0x40001800
 8009620:	40001c00 	.word	0x40001c00
 8009624:	40002000 	.word	0x40002000

08009628 <HAL_TIMEx_CommutCallback>:
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIMEx_BreakCallback>:
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_UART_Init>:
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_UART_Init+0x12>
 800965e:	2301      	movs	r3, #1
 8009660:	e03f      	b.n	80096e2 <HAL_UART_Init+0x92>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <HAL_UART_Init+0x2c>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f7f9 f9d6 	bl	8002a28 <HAL_UART_MspInit>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2224      	movs	r2, #36	; 0x24
 8009680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009692:	60da      	str	r2, [r3, #12]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f90b 	bl	80098b0 <UART_SetConfig>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096a8:	611a      	str	r2, [r3, #16]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	695a      	ldr	r2, [r3, #20]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096b8:	615a      	str	r2, [r3, #20]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2220      	movs	r2, #32
 80096d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80096e0:	2300      	movs	r3, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <HAL_UART_Transmit>:
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b088      	sub	sp, #32
 80096ee:	af02      	add	r7, sp, #8
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	603b      	str	r3, [r7, #0]
 80096f6:	4613      	mov	r3, r2
 80096f8:	80fb      	strh	r3, [r7, #6]
 80096fa:	2300      	movs	r3, #0
 80096fc:	617b      	str	r3, [r7, #20]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b20      	cmp	r3, #32
 8009708:	f040 8083 	bne.w	8009812 <HAL_UART_Transmit+0x128>
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <HAL_UART_Transmit+0x2e>
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_UART_Transmit+0x32>
 8009718:	2301      	movs	r3, #1
 800971a:	e07b      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009722:	2b01      	cmp	r3, #1
 8009724:	d101      	bne.n	800972a <HAL_UART_Transmit+0x40>
 8009726:	2302      	movs	r3, #2
 8009728:	e074      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	63da      	str	r2, [r3, #60]	; 0x3c
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2221      	movs	r2, #33	; 0x21
 800973c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009740:	f7fa fcbc 	bl	80040bc <HAL_GetTick>
 8009744:	6178      	str	r0, [r7, #20]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	88fa      	ldrh	r2, [r7, #6]
 800974a:	849a      	strh	r2, [r3, #36]	; 0x24
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	88fa      	ldrh	r2, [r7, #6]
 8009750:	84da      	strh	r2, [r3, #38]	; 0x26
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800975a:	e042      	b.n	80097e2 <HAL_UART_Transmit+0xf8>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	84da      	strh	r2, [r3, #38]	; 0x26
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009772:	d122      	bne.n	80097ba <HAL_UART_Transmit+0xd0>
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2200      	movs	r2, #0
 800977c:	2180      	movs	r1, #128	; 0x80
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 f84c 	bl	800981c <UART_WaitOnFlagUntilTimeout>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	d001      	beq.n	800978e <HAL_UART_Transmit+0xa4>
 800978a:	2303      	movs	r3, #3
 800978c:	e042      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	613b      	str	r3, [r7, #16]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097a0:	605a      	str	r2, [r3, #4]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d103      	bne.n	80097b2 <HAL_UART_Transmit+0xc8>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3302      	adds	r3, #2
 80097ae:	60bb      	str	r3, [r7, #8]
 80097b0:	e017      	b.n	80097e2 <HAL_UART_Transmit+0xf8>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	3301      	adds	r3, #1
 80097b6:	60bb      	str	r3, [r7, #8]
 80097b8:	e013      	b.n	80097e2 <HAL_UART_Transmit+0xf8>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	9300      	str	r3, [sp, #0]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	2200      	movs	r2, #0
 80097c2:	2180      	movs	r1, #128	; 0x80
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f829 	bl	800981c <UART_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <HAL_UART_Transmit+0xea>
 80097d0:	2303      	movs	r3, #3
 80097d2:	e01f      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	1c5a      	adds	r2, r3, #1
 80097d8:	60ba      	str	r2, [r7, #8]
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	605a      	str	r2, [r3, #4]
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1b7      	bne.n	800975c <HAL_UART_Transmit+0x72>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	9300      	str	r3, [sp, #0]
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	2200      	movs	r2, #0
 80097f4:	2140      	movs	r1, #64	; 0x40
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f810 	bl	800981c <UART_WaitOnFlagUntilTimeout>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <HAL_UART_Transmit+0x11c>
 8009802:	2303      	movs	r3, #3
 8009804:	e006      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2220      	movs	r2, #32
 800980a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800980e:	2300      	movs	r3, #0
 8009810:	e000      	b.n	8009814 <HAL_UART_Transmit+0x12a>
 8009812:	2302      	movs	r3, #2
 8009814:	4618      	mov	r0, r3
 8009816:	3718      	adds	r7, #24
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <UART_WaitOnFlagUntilTimeout>:
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	4613      	mov	r3, r2
 800982a:	71fb      	strb	r3, [r7, #7]
 800982c:	e02c      	b.n	8009888 <UART_WaitOnFlagUntilTimeout+0x6c>
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009834:	d028      	beq.n	8009888 <UART_WaitOnFlagUntilTimeout+0x6c>
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <UART_WaitOnFlagUntilTimeout+0x30>
 800983c:	f7fa fc3e 	bl	80040bc <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	429a      	cmp	r2, r3
 800984a:	d21d      	bcs.n	8009888 <UART_WaitOnFlagUntilTimeout+0x6c>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800985a:	60da      	str	r2, [r3, #12]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	695a      	ldr	r2, [r3, #20]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f022 0201 	bic.w	r2, r2, #1
 800986a:	615a      	str	r2, [r3, #20]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009884:	2303      	movs	r3, #3
 8009886:	e00f      	b.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x8c>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	4013      	ands	r3, r2
 8009892:	68ba      	ldr	r2, [r7, #8]
 8009894:	429a      	cmp	r2, r3
 8009896:	bf0c      	ite	eq
 8009898:	2301      	moveq	r3, #1
 800989a:	2300      	movne	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	461a      	mov	r2, r3
 80098a0:	79fb      	ldrb	r3, [r7, #7]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d0c3      	beq.n	800982e <UART_WaitOnFlagUntilTimeout+0x12>
 80098a6:	2300      	movs	r3, #0
 80098a8:	4618      	mov	r0, r3
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <UART_SetConfig>:
 80098b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098b4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
 80098be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098ce:	68d9      	ldr	r1, [r3, #12]
 80098d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	ea40 0301 	orr.w	r3, r0, r1
 80098da:	6113      	str	r3, [r2, #16]
 80098dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098e0:	689a      	ldr	r2, [r3, #8]
 80098e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	431a      	orrs	r2, r3
 80098ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	431a      	orrs	r2, r3
 80098f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80098fe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800990a:	f021 010c 	bic.w	r1, r1, #12
 800990e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8009918:	430b      	orrs	r3, r1
 800991a:	60d3      	str	r3, [r2, #12]
 800991c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009928:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800992c:	6999      	ldr	r1, [r3, #24]
 800992e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	ea40 0301 	orr.w	r3, r0, r1
 8009938:	6153      	str	r3, [r2, #20]
 800993a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009944:	f040 824a 	bne.w	8009ddc <UART_SetConfig+0x52c>
 8009948:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	4b96      	ldr	r3, [pc, #600]	; (8009ba8 <UART_SetConfig+0x2f8>)
 8009950:	429a      	cmp	r2, r3
 8009952:	d006      	beq.n	8009962 <UART_SetConfig+0xb2>
 8009954:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b94      	ldr	r3, [pc, #592]	; (8009bac <UART_SetConfig+0x2fc>)
 800995c:	429a      	cmp	r2, r3
 800995e:	f040 8129 	bne.w	8009bb4 <UART_SetConfig+0x304>
 8009962:	f7fe fc1d 	bl	80081a0 <HAL_RCC_GetPCLK2Freq>
 8009966:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 800996a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800996e:	2200      	movs	r2, #0
 8009970:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8009974:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8009978:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800997c:	4622      	mov	r2, r4
 800997e:	462b      	mov	r3, r5
 8009980:	1891      	adds	r1, r2, r2
 8009982:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009986:	415b      	adcs	r3, r3
 8009988:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800998c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009990:	4621      	mov	r1, r4
 8009992:	1851      	adds	r1, r2, r1
 8009994:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8009998:	4629      	mov	r1, r5
 800999a:	414b      	adcs	r3, r1
 800999c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	f04f 0300 	mov.w	r3, #0
 80099a8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80099ac:	4649      	mov	r1, r9
 80099ae:	00cb      	lsls	r3, r1, #3
 80099b0:	4641      	mov	r1, r8
 80099b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099b6:	4641      	mov	r1, r8
 80099b8:	00ca      	lsls	r2, r1, #3
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	4603      	mov	r3, r0
 80099c0:	4622      	mov	r2, r4
 80099c2:	189b      	adds	r3, r3, r2
 80099c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80099c8:	462b      	mov	r3, r5
 80099ca:	460a      	mov	r2, r1
 80099cc:	eb42 0303 	adc.w	r3, r2, r3
 80099d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80099d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80099e0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80099e4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80099e8:	460b      	mov	r3, r1
 80099ea:	18db      	adds	r3, r3, r3
 80099ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099f0:	4613      	mov	r3, r2
 80099f2:	eb42 0303 	adc.w	r3, r2, r3
 80099f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099fa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80099fe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8009a02:	f7f7 f951 	bl	8000ca8 <__aeabi_uldivmod>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4b69      	ldr	r3, [pc, #420]	; (8009bb0 <UART_SetConfig+0x300>)
 8009a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8009a10:	095b      	lsrs	r3, r3, #5
 8009a12:	011c      	lsls	r4, r3, #4
 8009a14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8009a1e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8009a22:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	1891      	adds	r1, r2, r2
 8009a2c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009a30:	415b      	adcs	r3, r3
 8009a32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a36:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	1851      	adds	r1, r2, r1
 8009a3e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8009a42:	4649      	mov	r1, r9
 8009a44:	414b      	adcs	r3, r1
 8009a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a4a:	f04f 0200 	mov.w	r2, #0
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8009a56:	4659      	mov	r1, fp
 8009a58:	00cb      	lsls	r3, r1, #3
 8009a5a:	4651      	mov	r1, sl
 8009a5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a60:	4651      	mov	r1, sl
 8009a62:	00ca      	lsls	r2, r1, #3
 8009a64:	4610      	mov	r0, r2
 8009a66:	4619      	mov	r1, r3
 8009a68:	4603      	mov	r3, r0
 8009a6a:	4642      	mov	r2, r8
 8009a6c:	189b      	adds	r3, r3, r2
 8009a6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8009a72:	464b      	mov	r3, r9
 8009a74:	460a      	mov	r2, r1
 8009a76:	eb42 0303 	adc.w	r3, r2, r3
 8009a7a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8009a7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8009a8a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8009a8e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8009a92:	460b      	mov	r3, r1
 8009a94:	18db      	adds	r3, r3, r3
 8009a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	eb42 0303 	adc.w	r3, r2, r3
 8009aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aa4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009aa8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8009aac:	f7f7 f8fc 	bl	8000ca8 <__aeabi_uldivmod>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4b3e      	ldr	r3, [pc, #248]	; (8009bb0 <UART_SetConfig+0x300>)
 8009ab8:	fba3 2301 	umull	r2, r3, r3, r1
 8009abc:	095b      	lsrs	r3, r3, #5
 8009abe:	2264      	movs	r2, #100	; 0x64
 8009ac0:	fb02 f303 	mul.w	r3, r2, r3
 8009ac4:	1acb      	subs	r3, r1, r3
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009acc:	4b38      	ldr	r3, [pc, #224]	; (8009bb0 <UART_SetConfig+0x300>)
 8009ace:	fba3 2302 	umull	r2, r3, r3, r2
 8009ad2:	095b      	lsrs	r3, r3, #5
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ada:	441c      	add	r4, r3
 8009adc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009ae6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8009aea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8009aee:	4642      	mov	r2, r8
 8009af0:	464b      	mov	r3, r9
 8009af2:	1891      	adds	r1, r2, r2
 8009af4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009af8:	415b      	adcs	r3, r3
 8009afa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009afe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009b02:	4641      	mov	r1, r8
 8009b04:	1851      	adds	r1, r2, r1
 8009b06:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	414b      	adcs	r3, r1
 8009b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b12:	f04f 0200 	mov.w	r2, #0
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8009b1e:	4659      	mov	r1, fp
 8009b20:	00cb      	lsls	r3, r1, #3
 8009b22:	4651      	mov	r1, sl
 8009b24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b28:	4651      	mov	r1, sl
 8009b2a:	00ca      	lsls	r2, r1, #3
 8009b2c:	4610      	mov	r0, r2
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4603      	mov	r3, r0
 8009b32:	4642      	mov	r2, r8
 8009b34:	189b      	adds	r3, r3, r2
 8009b36:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8009b3a:	464b      	mov	r3, r9
 8009b3c:	460a      	mov	r2, r1
 8009b3e:	eb42 0303 	adc.w	r3, r2, r3
 8009b42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009b46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8009b52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8009b56:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	18db      	adds	r3, r3, r3
 8009b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b62:	4613      	mov	r3, r2
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b6c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009b70:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8009b74:	f7f7 f898 	bl	8000ca8 <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <UART_SetConfig+0x300>)
 8009b7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	2164      	movs	r1, #100	; 0x64
 8009b86:	fb01 f303 	mul.w	r3, r1, r3
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	3332      	adds	r3, #50	; 0x32
 8009b90:	4a07      	ldr	r2, [pc, #28]	; (8009bb0 <UART_SetConfig+0x300>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	095b      	lsrs	r3, r3, #5
 8009b98:	f003 0207 	and.w	r2, r3, #7
 8009b9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4422      	add	r2, r4
 8009ba4:	609a      	str	r2, [r3, #8]
 8009ba6:	e349      	b.n	800a23c <UART_SetConfig+0x98c>
 8009ba8:	40011000 	.word	0x40011000
 8009bac:	40011400 	.word	0x40011400
 8009bb0:	51eb851f 	.word	0x51eb851f
 8009bb4:	f7fe fae0 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 8009bb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 8009bbc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8009bc6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8009bca:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8009bce:	4622      	mov	r2, r4
 8009bd0:	462b      	mov	r3, r5
 8009bd2:	1891      	adds	r1, r2, r2
 8009bd4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009bd8:	415b      	adcs	r3, r3
 8009bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009bde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009be2:	4621      	mov	r1, r4
 8009be4:	eb12 0a01 	adds.w	sl, r2, r1
 8009be8:	4629      	mov	r1, r5
 8009bea:	eb43 0b01 	adc.w	fp, r3, r1
 8009bee:	f04f 0200 	mov.w	r2, #0
 8009bf2:	f04f 0300 	mov.w	r3, #0
 8009bf6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bfa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c02:	4692      	mov	sl, r2
 8009c04:	469b      	mov	fp, r3
 8009c06:	4623      	mov	r3, r4
 8009c08:	eb1a 0303 	adds.w	r3, sl, r3
 8009c0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009c10:	462b      	mov	r3, r5
 8009c12:	eb4b 0303 	adc.w	r3, fp, r3
 8009c16:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009c1a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8009c26:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8009c2a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8009c2e:	460b      	mov	r3, r1
 8009c30:	18db      	adds	r3, r3, r3
 8009c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c36:	4613      	mov	r3, r2
 8009c38:	eb42 0303 	adc.w	r3, r2, r3
 8009c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c40:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c44:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8009c48:	f7f7 f82e 	bl	8000ca8 <__aeabi_uldivmod>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4b61      	ldr	r3, [pc, #388]	; (8009dd8 <UART_SetConfig+0x528>)
 8009c52:	fba3 2302 	umull	r2, r3, r3, r2
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	011c      	lsls	r4, r3, #4
 8009c5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8009c64:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8009c68:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	1891      	adds	r1, r2, r2
 8009c72:	67b9      	str	r1, [r7, #120]	; 0x78
 8009c74:	415b      	adcs	r3, r3
 8009c76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009c7c:	4641      	mov	r1, r8
 8009c7e:	1851      	adds	r1, r2, r1
 8009c80:	6739      	str	r1, [r7, #112]	; 0x70
 8009c82:	4649      	mov	r1, r9
 8009c84:	414b      	adcs	r3, r1
 8009c86:	677b      	str	r3, [r7, #116]	; 0x74
 8009c88:	f04f 0200 	mov.w	r2, #0
 8009c8c:	f04f 0300 	mov.w	r3, #0
 8009c90:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8009c94:	4659      	mov	r1, fp
 8009c96:	00cb      	lsls	r3, r1, #3
 8009c98:	4651      	mov	r1, sl
 8009c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c9e:	4651      	mov	r1, sl
 8009ca0:	00ca      	lsls	r2, r1, #3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4642      	mov	r2, r8
 8009caa:	189b      	adds	r3, r3, r2
 8009cac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	460a      	mov	r2, r1
 8009cb4:	eb42 0303 	adc.w	r3, r2, r3
 8009cb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009cbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009cc8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8009ccc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	18db      	adds	r3, r3, r3
 8009cd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	eb42 0303 	adc.w	r3, r2, r3
 8009cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cde:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009ce2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009ce6:	f7f6 ffdf 	bl	8000ca8 <__aeabi_uldivmod>
 8009cea:	4602      	mov	r2, r0
 8009cec:	460b      	mov	r3, r1
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4b39      	ldr	r3, [pc, #228]	; (8009dd8 <UART_SetConfig+0x528>)
 8009cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	2264      	movs	r2, #100	; 0x64
 8009cfa:	fb02 f303 	mul.w	r3, r2, r3
 8009cfe:	1acb      	subs	r3, r1, r3
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d06:	4b34      	ldr	r3, [pc, #208]	; (8009dd8 <UART_SetConfig+0x528>)
 8009d08:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0c:	095b      	lsrs	r3, r3, #5
 8009d0e:	005b      	lsls	r3, r3, #1
 8009d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d14:	441c      	add	r4, r3
 8009d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8009d20:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8009d24:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8009d28:	4642      	mov	r2, r8
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	1891      	adds	r1, r2, r2
 8009d2e:	6639      	str	r1, [r7, #96]	; 0x60
 8009d30:	415b      	adcs	r3, r3
 8009d32:	667b      	str	r3, [r7, #100]	; 0x64
 8009d34:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009d38:	4641      	mov	r1, r8
 8009d3a:	1851      	adds	r1, r2, r1
 8009d3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d3e:	4649      	mov	r1, r9
 8009d40:	414b      	adcs	r3, r1
 8009d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d44:	f04f 0200 	mov.w	r2, #0
 8009d48:	f04f 0300 	mov.w	r3, #0
 8009d4c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8009d50:	4659      	mov	r1, fp
 8009d52:	00cb      	lsls	r3, r1, #3
 8009d54:	4651      	mov	r1, sl
 8009d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d5a:	4651      	mov	r1, sl
 8009d5c:	00ca      	lsls	r2, r1, #3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	4619      	mov	r1, r3
 8009d62:	4603      	mov	r3, r0
 8009d64:	4642      	mov	r2, r8
 8009d66:	189b      	adds	r3, r3, r2
 8009d68:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	460a      	mov	r2, r1
 8009d70:	eb42 0303 	adc.w	r3, r2, r3
 8009d74:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009d78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009d7c:	685b      	ldr	r3, [r3, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8009d84:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8009d88:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	18db      	adds	r3, r3, r3
 8009d90:	653b      	str	r3, [r7, #80]	; 0x50
 8009d92:	4613      	mov	r3, r2
 8009d94:	eb42 0303 	adc.w	r3, r2, r3
 8009d98:	657b      	str	r3, [r7, #84]	; 0x54
 8009d9a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d9e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8009da2:	f7f6 ff81 	bl	8000ca8 <__aeabi_uldivmod>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <UART_SetConfig+0x528>)
 8009dac:	fba3 1302 	umull	r1, r3, r3, r2
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	2164      	movs	r1, #100	; 0x64
 8009db4:	fb01 f303 	mul.w	r3, r1, r3
 8009db8:	1ad3      	subs	r3, r2, r3
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	3332      	adds	r3, #50	; 0x32
 8009dbe:	4a06      	ldr	r2, [pc, #24]	; (8009dd8 <UART_SetConfig+0x528>)
 8009dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	f003 0207 	and.w	r2, r3, #7
 8009dca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4422      	add	r2, r4
 8009dd2:	609a      	str	r2, [r3, #8]
 8009dd4:	e232      	b.n	800a23c <UART_SetConfig+0x98c>
 8009dd6:	bf00      	nop
 8009dd8:	51eb851f 	.word	0x51eb851f
 8009ddc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b8d      	ldr	r3, [pc, #564]	; (800a018 <UART_SetConfig+0x768>)
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d006      	beq.n	8009df6 <UART_SetConfig+0x546>
 8009de8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b8b      	ldr	r3, [pc, #556]	; (800a01c <UART_SetConfig+0x76c>)
 8009df0:	429a      	cmp	r2, r3
 8009df2:	f040 8117 	bne.w	800a024 <UART_SetConfig+0x774>
 8009df6:	f7fe f9d3 	bl	80081a0 <HAL_RCC_GetPCLK2Freq>
 8009dfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 8009dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009e08:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8009e0c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8009e10:	4622      	mov	r2, r4
 8009e12:	462b      	mov	r3, r5
 8009e14:	1891      	adds	r1, r2, r2
 8009e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8009e18:	415b      	adcs	r3, r3
 8009e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e20:	4621      	mov	r1, r4
 8009e22:	eb12 0801 	adds.w	r8, r2, r1
 8009e26:	4629      	mov	r1, r5
 8009e28:	eb43 0901 	adc.w	r9, r3, r1
 8009e2c:	f04f 0200 	mov.w	r2, #0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e40:	4690      	mov	r8, r2
 8009e42:	4699      	mov	r9, r3
 8009e44:	4623      	mov	r3, r4
 8009e46:	eb18 0303 	adds.w	r3, r8, r3
 8009e4a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009e4e:	462b      	mov	r3, r5
 8009e50:	eb49 0303 	adc.w	r3, r9, r3
 8009e54:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009e58:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009e64:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009e68:	f04f 0200 	mov.w	r2, #0
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8009e74:	4629      	mov	r1, r5
 8009e76:	008b      	lsls	r3, r1, #2
 8009e78:	4621      	mov	r1, r4
 8009e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e7e:	4621      	mov	r1, r4
 8009e80:	008a      	lsls	r2, r1, #2
 8009e82:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8009e86:	f7f6 ff0f 	bl	8000ca8 <__aeabi_uldivmod>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	460b      	mov	r3, r1
 8009e8e:	4b64      	ldr	r3, [pc, #400]	; (800a020 <UART_SetConfig+0x770>)
 8009e90:	fba3 2302 	umull	r2, r3, r3, r2
 8009e94:	095b      	lsrs	r3, r3, #5
 8009e96:	011c      	lsls	r4, r3, #4
 8009e98:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009ea2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009ea6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8009eaa:	4642      	mov	r2, r8
 8009eac:	464b      	mov	r3, r9
 8009eae:	1891      	adds	r1, r2, r2
 8009eb0:	6439      	str	r1, [r7, #64]	; 0x40
 8009eb2:	415b      	adcs	r3, r3
 8009eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009eba:	4641      	mov	r1, r8
 8009ebc:	1851      	adds	r1, r2, r1
 8009ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	414b      	adcs	r3, r1
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ec6:	f04f 0200 	mov.w	r2, #0
 8009eca:	f04f 0300 	mov.w	r3, #0
 8009ece:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8009ed2:	4659      	mov	r1, fp
 8009ed4:	00cb      	lsls	r3, r1, #3
 8009ed6:	4651      	mov	r1, sl
 8009ed8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009edc:	4651      	mov	r1, sl
 8009ede:	00ca      	lsls	r2, r1, #3
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	4642      	mov	r2, r8
 8009ee8:	189b      	adds	r3, r3, r2
 8009eea:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009eee:	464b      	mov	r3, r9
 8009ef0:	460a      	mov	r2, r1
 8009ef2:	eb42 0303 	adc.w	r3, r2, r3
 8009ef6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8009efa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009f06:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8009f0a:	f04f 0200 	mov.w	r2, #0
 8009f0e:	f04f 0300 	mov.w	r3, #0
 8009f12:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8009f16:	4649      	mov	r1, r9
 8009f18:	008b      	lsls	r3, r1, #2
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f20:	4641      	mov	r1, r8
 8009f22:	008a      	lsls	r2, r1, #2
 8009f24:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009f28:	f7f6 febe 	bl	8000ca8 <__aeabi_uldivmod>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4b3b      	ldr	r3, [pc, #236]	; (800a020 <UART_SetConfig+0x770>)
 8009f32:	fba3 1302 	umull	r1, r3, r3, r2
 8009f36:	095b      	lsrs	r3, r3, #5
 8009f38:	2164      	movs	r1, #100	; 0x64
 8009f3a:	fb01 f303 	mul.w	r3, r1, r3
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	011b      	lsls	r3, r3, #4
 8009f42:	3332      	adds	r3, #50	; 0x32
 8009f44:	4a36      	ldr	r2, [pc, #216]	; (800a020 <UART_SetConfig+0x770>)
 8009f46:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f50:	441c      	add	r4, r3
 8009f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009f5c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009f60:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	1891      	adds	r1, r2, r2
 8009f6a:	6339      	str	r1, [r7, #48]	; 0x30
 8009f6c:	415b      	adcs	r3, r3
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f74:	4641      	mov	r1, r8
 8009f76:	1851      	adds	r1, r2, r1
 8009f78:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	414b      	adcs	r3, r1
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	00cb      	lsls	r3, r1, #3
 8009f90:	4651      	mov	r1, sl
 8009f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f96:	4651      	mov	r1, sl
 8009f98:	00ca      	lsls	r2, r1, #3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009fa8:	464b      	mov	r3, r9
 8009faa:	460a      	mov	r2, r1
 8009fac:	eb42 0303 	adc.w	r3, r2, r3
 8009fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009fb4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009fc0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009fc4:	f04f 0200 	mov.w	r2, #0
 8009fc8:	f04f 0300 	mov.w	r3, #0
 8009fcc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	008b      	lsls	r3, r1, #2
 8009fd4:	4641      	mov	r1, r8
 8009fd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fda:	4641      	mov	r1, r8
 8009fdc:	008a      	lsls	r2, r1, #2
 8009fde:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8009fe2:	f7f6 fe61 	bl	8000ca8 <__aeabi_uldivmod>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <UART_SetConfig+0x770>)
 8009fec:	fba3 1302 	umull	r1, r3, r3, r2
 8009ff0:	095b      	lsrs	r3, r3, #5
 8009ff2:	2164      	movs	r1, #100	; 0x64
 8009ff4:	fb01 f303 	mul.w	r3, r1, r3
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	3332      	adds	r3, #50	; 0x32
 8009ffe:	4a08      	ldr	r2, [pc, #32]	; (800a020 <UART_SetConfig+0x770>)
 800a000:	fba2 2303 	umull	r2, r3, r2, r3
 800a004:	095b      	lsrs	r3, r3, #5
 800a006:	f003 020f 	and.w	r2, r3, #15
 800a00a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4422      	add	r2, r4
 800a012:	609a      	str	r2, [r3, #8]
 800a014:	e112      	b.n	800a23c <UART_SetConfig+0x98c>
 800a016:	bf00      	nop
 800a018:	40011000 	.word	0x40011000
 800a01c:	40011400 	.word	0x40011400
 800a020:	51eb851f 	.word	0x51eb851f
 800a024:	f7fe f8a8 	bl	8008178 <HAL_RCC_GetPCLK1Freq>
 800a028:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
 800a02c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a030:	2200      	movs	r2, #0
 800a032:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a036:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800a03a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800a03e:	4642      	mov	r2, r8
 800a040:	464b      	mov	r3, r9
 800a042:	1891      	adds	r1, r2, r2
 800a044:	6239      	str	r1, [r7, #32]
 800a046:	415b      	adcs	r3, r3
 800a048:	627b      	str	r3, [r7, #36]	; 0x24
 800a04a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a04e:	4641      	mov	r1, r8
 800a050:	1854      	adds	r4, r2, r1
 800a052:	4649      	mov	r1, r9
 800a054:	eb43 0501 	adc.w	r5, r3, r1
 800a058:	f04f 0200 	mov.w	r2, #0
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	00eb      	lsls	r3, r5, #3
 800a062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a066:	00e2      	lsls	r2, r4, #3
 800a068:	4614      	mov	r4, r2
 800a06a:	461d      	mov	r5, r3
 800a06c:	4643      	mov	r3, r8
 800a06e:	18e3      	adds	r3, r4, r3
 800a070:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a074:	464b      	mov	r3, r9
 800a076:	eb45 0303 	adc.w	r3, r5, r3
 800a07a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a07e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a08a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800a08e:	f04f 0200 	mov.w	r2, #0
 800a092:	f04f 0300 	mov.w	r3, #0
 800a096:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800a09a:	4629      	mov	r1, r5
 800a09c:	008b      	lsls	r3, r1, #2
 800a09e:	4621      	mov	r1, r4
 800a0a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	008a      	lsls	r2, r1, #2
 800a0a8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800a0ac:	f7f6 fdfc 	bl	8000ca8 <__aeabi_uldivmod>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4b64      	ldr	r3, [pc, #400]	; (800a248 <UART_SetConfig+0x998>)
 800a0b6:	fba3 2302 	umull	r2, r3, r3, r2
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	011c      	lsls	r4, r3, #4
 800a0be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a0c8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a0cc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800a0d0:	4642      	mov	r2, r8
 800a0d2:	464b      	mov	r3, r9
 800a0d4:	1891      	adds	r1, r2, r2
 800a0d6:	61b9      	str	r1, [r7, #24]
 800a0d8:	415b      	adcs	r3, r3
 800a0da:	61fb      	str	r3, [r7, #28]
 800a0dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	1851      	adds	r1, r2, r1
 800a0e4:	6139      	str	r1, [r7, #16]
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	414b      	adcs	r3, r1
 800a0ea:	617b      	str	r3, [r7, #20]
 800a0ec:	f04f 0200 	mov.w	r2, #0
 800a0f0:	f04f 0300 	mov.w	r3, #0
 800a0f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0f8:	4659      	mov	r1, fp
 800a0fa:	00cb      	lsls	r3, r1, #3
 800a0fc:	4651      	mov	r1, sl
 800a0fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a102:	4651      	mov	r1, sl
 800a104:	00ca      	lsls	r2, r1, #3
 800a106:	4610      	mov	r0, r2
 800a108:	4619      	mov	r1, r3
 800a10a:	4603      	mov	r3, r0
 800a10c:	4642      	mov	r2, r8
 800a10e:	189b      	adds	r3, r3, r2
 800a110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a114:	464b      	mov	r3, r9
 800a116:	460a      	mov	r2, r1
 800a118:	eb42 0303 	adc.w	r3, r2, r3
 800a11c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a120:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a12c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a130:	f04f 0200 	mov.w	r2, #0
 800a134:	f04f 0300 	mov.w	r3, #0
 800a138:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800a13c:	4649      	mov	r1, r9
 800a13e:	008b      	lsls	r3, r1, #2
 800a140:	4641      	mov	r1, r8
 800a142:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a146:	4641      	mov	r1, r8
 800a148:	008a      	lsls	r2, r1, #2
 800a14a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a14e:	f7f6 fdab 	bl	8000ca8 <__aeabi_uldivmod>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4b3c      	ldr	r3, [pc, #240]	; (800a248 <UART_SetConfig+0x998>)
 800a158:	fba3 1302 	umull	r1, r3, r3, r2
 800a15c:	095b      	lsrs	r3, r3, #5
 800a15e:	2164      	movs	r1, #100	; 0x64
 800a160:	fb01 f303 	mul.w	r3, r1, r3
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	3332      	adds	r3, #50	; 0x32
 800a16a:	4a37      	ldr	r2, [pc, #220]	; (800a248 <UART_SetConfig+0x998>)
 800a16c:	fba2 2303 	umull	r2, r3, r2, r3
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a176:	441c      	add	r4, r3
 800a178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a17c:	2200      	movs	r2, #0
 800a17e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a182:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a186:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800a18a:	4642      	mov	r2, r8
 800a18c:	464b      	mov	r3, r9
 800a18e:	1891      	adds	r1, r2, r2
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	415b      	adcs	r3, r3
 800a194:	60fb      	str	r3, [r7, #12]
 800a196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a19a:	4641      	mov	r1, r8
 800a19c:	1851      	adds	r1, r2, r1
 800a19e:	6039      	str	r1, [r7, #0]
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	414b      	adcs	r3, r1
 800a1a4:	607b      	str	r3, [r7, #4]
 800a1a6:	f04f 0200 	mov.w	r2, #0
 800a1aa:	f04f 0300 	mov.w	r3, #0
 800a1ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a1b2:	4659      	mov	r1, fp
 800a1b4:	00cb      	lsls	r3, r1, #3
 800a1b6:	4651      	mov	r1, sl
 800a1b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1bc:	4651      	mov	r1, sl
 800a1be:	00ca      	lsls	r2, r1, #3
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	189b      	adds	r3, r3, r2
 800a1ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	460a      	mov	r2, r1
 800a1d2:	eb42 0303 	adc.w	r3, r2, r3
 800a1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1ea:	f04f 0200 	mov.w	r2, #0
 800a1ee:	f04f 0300 	mov.w	r3, #0
 800a1f2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	008b      	lsls	r3, r1, #2
 800a1fa:	4641      	mov	r1, r8
 800a1fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a200:	4641      	mov	r1, r8
 800a202:	008a      	lsls	r2, r1, #2
 800a204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a208:	f7f6 fd4e 	bl	8000ca8 <__aeabi_uldivmod>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <UART_SetConfig+0x998>)
 800a212:	fba3 1302 	umull	r1, r3, r3, r2
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	2164      	movs	r1, #100	; 0x64
 800a21a:	fb01 f303 	mul.w	r3, r1, r3
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	011b      	lsls	r3, r3, #4
 800a222:	3332      	adds	r3, #50	; 0x32
 800a224:	4a08      	ldr	r2, [pc, #32]	; (800a248 <UART_SetConfig+0x998>)
 800a226:	fba2 2303 	umull	r2, r3, r2, r3
 800a22a:	095b      	lsrs	r3, r3, #5
 800a22c:	f003 020f 	and.w	r2, r3, #15
 800a230:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4422      	add	r2, r4
 800a238:	609a      	str	r2, [r3, #8]
 800a23a:	e7ff      	b.n	800a23c <UART_SetConfig+0x98c>
 800a23c:	bf00      	nop
 800a23e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800a242:	46bd      	mov	sp, r7
 800a244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a248:	51eb851f 	.word	0x51eb851f

0800a24c <FMC_SDRAM_Init>:
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d029      	beq.n	800a2ba <FMC_SDRAM_Init+0x6e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a272:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a276:	60fb      	str	r3, [r7, #12]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	431a      	orrs	r2, r3
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	431a      	orrs	r2, r3
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	431a      	orrs	r2, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	431a      	orrs	r2, r3
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	431a      	orrs	r2, r3
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	69db      	ldr	r3, [r3, #28]
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	6a1b      	ldr	r3, [r3, #32]
 800a2a4:	431a      	orrs	r2, r3
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	e034      	b.n	800a324 <FMC_SDRAM_Init+0xd8>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2c6:	60fb      	str	r3, [r7, #12]
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	69da      	ldr	r2, [r3, #28]
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	60fb      	str	r3, [r7, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	60bb      	str	r3, [r7, #8]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2ee:	60bb      	str	r3, [r7, #8]
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	431a      	orrs	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	4313      	orrs	r3, r2
 800a312:	68ba      	ldr	r2, [r7, #8]
 800a314:	4313      	orrs	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	2300      	movs	r3, #0
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr

0800a332 <FMC_SDRAM_Timing_Init>:
 800a332:	b480      	push	{r7}
 800a334:	b087      	sub	sp, #28
 800a336:	af00      	add	r7, sp, #0
 800a338:	60f8      	str	r0, [r7, #12]
 800a33a:	60b9      	str	r1, [r7, #8]
 800a33c:	607a      	str	r2, [r7, #4]
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	2300      	movs	r3, #0
 800a344:	613b      	str	r3, [r7, #16]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d02e      	beq.n	800a3aa <FMC_SDRAM_Timing_Init+0x78>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a358:	617b      	str	r3, [r7, #20]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	1e5a      	subs	r2, r3, #1
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	3b01      	subs	r3, #1
 800a366:	011b      	lsls	r3, r3, #4
 800a368:	431a      	orrs	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	689b      	ldr	r3, [r3, #8]
 800a36e:	3b01      	subs	r3, #1
 800a370:	021b      	lsls	r3, r3, #8
 800a372:	431a      	orrs	r2, r3
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	3b01      	subs	r3, #1
 800a37a:	031b      	lsls	r3, r3, #12
 800a37c:	431a      	orrs	r2, r3
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	3b01      	subs	r3, #1
 800a384:	041b      	lsls	r3, r3, #16
 800a386:	431a      	orrs	r2, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	3b01      	subs	r3, #1
 800a38e:	051b      	lsls	r3, r3, #20
 800a390:	431a      	orrs	r2, r3
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	3b01      	subs	r3, #1
 800a398:	061b      	lsls	r3, r3, #24
 800a39a:	4313      	orrs	r3, r2
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	609a      	str	r2, [r3, #8]
 800a3a8:	e03b      	b.n	800a422 <FMC_SDRAM_Timing_Init+0xf0>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	617b      	str	r3, [r7, #20]
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	031a      	lsls	r2, r3, #12
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	051b      	lsls	r3, r3, #20
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	617b      	str	r3, [r7, #20]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3e0:	613b      	str	r3, [r7, #16]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	1e5a      	subs	r2, r3, #1
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	431a      	orrs	r2, r3
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	021b      	lsls	r3, r3, #8
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	3b01      	subs	r3, #1
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	431a      	orrs	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	061b      	lsls	r3, r3, #24
 800a40e:	4313      	orrs	r3, r2
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	4313      	orrs	r3, r2
 800a414:	613b      	str	r3, [r7, #16]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	609a      	str	r2, [r3, #8]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	60da      	str	r2, [r3, #12]
 800a422:	2300      	movs	r3, #0
 800a424:	4618      	mov	r0, r3
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <FMC_SDRAM_SendCommand>:
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	2300      	movs	r3, #0
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	431a      	orrs	r2, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	3b01      	subs	r3, #1
 800a454:	015b      	lsls	r3, r3, #5
 800a456:	431a      	orrs	r2, r3
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	025b      	lsls	r3, r3, #9
 800a45e:	4313      	orrs	r3, r2
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	611a      	str	r2, [r3, #16]
 800a468:	f7f9 fe28 	bl	80040bc <HAL_GetTick>
 800a46c:	6178      	str	r0, [r7, #20]
 800a46e:	e010      	b.n	800a492 <FMC_SDRAM_SendCommand+0x62>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a476:	d00c      	beq.n	800a492 <FMC_SDRAM_SendCommand+0x62>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <FMC_SDRAM_SendCommand+0x5e>
 800a47e:	f7f9 fe1d 	bl	80040bc <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d201      	bcs.n	800a492 <FMC_SDRAM_SendCommand+0x62>
 800a48e:	2303      	movs	r3, #3
 800a490:	e006      	b.n	800a4a0 <FMC_SDRAM_SendCommand+0x70>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	f003 0320 	and.w	r3, r3, #32
 800a49a:	2b20      	cmp	r3, #32
 800a49c:	d0e8      	beq.n	800a470 <FMC_SDRAM_SendCommand+0x40>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3718      	adds	r7, #24
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <FMC_SDRAM_ProgramRefreshRate>:
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	695a      	ldr	r2, [r3, #20]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	005b      	lsls	r3, r3, #1
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	615a      	str	r2, [r3, #20]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <USB_CoreInit>:
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	f107 001c 	add.w	r0, r7, #28
 800a4dc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d122      	bne.n	800a52c <USB_CoreInit+0x5e>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	639a      	str	r2, [r3, #56]	; 0x38
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	60d3      	str	r3, [r2, #12]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60da      	str	r2, [r3, #12]
 800a50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a510:	2b01      	cmp	r3, #1
 800a512:	d105      	bne.n	800a520 <USB_CoreInit+0x52>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	60da      	str	r2, [r3, #12]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f949 	bl	800a7b8 <USB_CoreReset>
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
 800a52a:	e01a      	b.n	800a562 <USB_CoreInit+0x94>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	68db      	ldr	r3, [r3, #12]
 800a530:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	60da      	str	r2, [r3, #12]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f93d 	bl	800a7b8 <USB_CoreReset>
 800a53e:	4603      	mov	r3, r0
 800a540:	73fb      	strb	r3, [r7, #15]
 800a542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <USB_CoreInit+0x88>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	639a      	str	r2, [r3, #56]	; 0x38
 800a554:	e005      	b.n	800a562 <USB_CoreInit+0x94>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	639a      	str	r2, [r3, #56]	; 0x38
 800a562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a564:	2b01      	cmp	r3, #1
 800a566:	d10b      	bne.n	800a580 <USB_CoreInit+0xb2>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f043 0206 	orr.w	r2, r3, #6
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	609a      	str	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f043 0220 	orr.w	r2, r3, #32
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	609a      	str	r2, [r3, #8]
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a58c:	b004      	add	sp, #16
 800a58e:	4770      	bx	lr

0800a590 <USB_EnableGlobalInt>:
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f043 0201 	orr.w	r2, r3, #1
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	609a      	str	r2, [r3, #8]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USB_DisableGlobalInt>:
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	689b      	ldr	r3, [r3, #8]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	609a      	str	r2, [r3, #8]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USB_SetCurrentMode>:
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	60da      	str	r2, [r3, #12]
 800a5ec:	78fb      	ldrb	r3, [r7, #3]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d106      	bne.n	800a600 <USB_SetCurrentMode+0x2c>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60da      	str	r2, [r3, #12]
 800a5fe:	e00b      	b.n	800a618 <USB_SetCurrentMode+0x44>
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d106      	bne.n	800a614 <USB_SetCurrentMode+0x40>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	60da      	str	r2, [r3, #12]
 800a612:	e001      	b.n	800a618 <USB_SetCurrentMode+0x44>
 800a614:	2301      	movs	r3, #1
 800a616:	e003      	b.n	800a620 <USB_SetCurrentMode+0x4c>
 800a618:	2032      	movs	r0, #50	; 0x32
 800a61a:	f7f9 fd5b 	bl	80040d4 <HAL_Delay>
 800a61e:	2300      	movs	r3, #0
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USB_FlushTxFifo>:
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	2300      	movs	r3, #0
 800a634:	60fb      	str	r3, [r7, #12]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	019b      	lsls	r3, r3, #6
 800a63a:	f043 0220 	orr.w	r2, r3, #32
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	611a      	str	r2, [r3, #16]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	3301      	adds	r3, #1
 800a646:	60fb      	str	r3, [r7, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4a09      	ldr	r2, [pc, #36]	; (800a670 <USB_FlushTxFifo+0x48>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d901      	bls.n	800a654 <USB_FlushTxFifo+0x2c>
 800a650:	2303      	movs	r3, #3
 800a652:	e006      	b.n	800a662 <USB_FlushTxFifo+0x3a>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	691b      	ldr	r3, [r3, #16]
 800a658:	f003 0320 	and.w	r3, r3, #32
 800a65c:	2b20      	cmp	r3, #32
 800a65e:	d0f0      	beq.n	800a642 <USB_FlushTxFifo+0x1a>
 800a660:	2300      	movs	r3, #0
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	00030d40 	.word	0x00030d40

0800a674 <USB_FlushRxFifo>:
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2210      	movs	r2, #16
 800a684:	611a      	str	r2, [r3, #16]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <USB_FlushRxFifo+0x40>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d901      	bls.n	800a698 <USB_FlushRxFifo+0x24>
 800a694:	2303      	movs	r3, #3
 800a696:	e006      	b.n	800a6a6 <USB_FlushRxFifo+0x32>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	f003 0310 	and.w	r3, r3, #16
 800a6a0:	2b10      	cmp	r3, #16
 800a6a2:	d0f0      	beq.n	800a686 <USB_FlushRxFifo+0x12>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	00030d40 	.word	0x00030d40

0800a6b8 <USB_WritePacket>:
 800a6b8:	b480      	push	{r7}
 800a6ba:	b089      	sub	sp, #36	; 0x24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	71fb      	strb	r3, [r7, #7]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	80bb      	strh	r3, [r7, #4]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	617b      	str	r3, [r7, #20]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	61fb      	str	r3, [r7, #28]
 800a6d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d11a      	bne.n	800a714 <USB_WritePacket+0x5c>
 800a6de:	88bb      	ldrh	r3, [r7, #4]
 800a6e0:	3303      	adds	r3, #3
 800a6e2:	089b      	lsrs	r3, r3, #2
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61bb      	str	r3, [r7, #24]
 800a6ea:	e00f      	b.n	800a70c <USB_WritePacket+0x54>
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	031a      	lsls	r2, r3, #12
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	3304      	adds	r3, #4
 800a704:	61fb      	str	r3, [r7, #28]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	3301      	adds	r3, #1
 800a70a:	61bb      	str	r3, [r7, #24]
 800a70c:	69ba      	ldr	r2, [r7, #24]
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	429a      	cmp	r2, r3
 800a712:	d3eb      	bcc.n	800a6ec <USB_WritePacket+0x34>
 800a714:	2300      	movs	r3, #0
 800a716:	4618      	mov	r0, r3
 800a718:	3724      	adds	r7, #36	; 0x24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr

0800a722 <USB_ReadPacket>:
 800a722:	b480      	push	{r7}
 800a724:	b089      	sub	sp, #36	; 0x24
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	60b9      	str	r1, [r7, #8]
 800a72c:	4613      	mov	r3, r2
 800a72e:	80fb      	strh	r3, [r7, #6]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	61fb      	str	r3, [r7, #28]
 800a738:	88fb      	ldrh	r3, [r7, #6]
 800a73a:	3303      	adds	r3, #3
 800a73c:	089b      	lsrs	r3, r3, #2
 800a73e:	613b      	str	r3, [r7, #16]
 800a740:	2300      	movs	r3, #0
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e00b      	b.n	800a75e <USB_ReadPacket+0x3c>
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	3304      	adds	r3, #4
 800a756:	61fb      	str	r3, [r7, #28]
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	d3ef      	bcc.n	800a746 <USB_ReadPacket+0x24>
 800a766:	69fb      	ldr	r3, [r7, #28]
 800a768:	4618      	mov	r0, r3
 800a76a:	3724      	adds	r7, #36	; 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USB_ReadInterrupts>:
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4013      	ands	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <USB_GetMode>:
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <USB_CoreReset>:
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	60fb      	str	r3, [r7, #12]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4a13      	ldr	r2, [pc, #76]	; (800a81c <USB_CoreReset+0x64>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d901      	bls.n	800a7d6 <USB_CoreReset+0x1e>
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e01b      	b.n	800a80e <USB_CoreReset+0x56>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	daf2      	bge.n	800a7c4 <USB_CoreReset+0xc>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	f043 0201 	orr.w	r2, r3, #1
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	611a      	str	r2, [r3, #16]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4a09      	ldr	r2, [pc, #36]	; (800a81c <USB_CoreReset+0x64>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d901      	bls.n	800a800 <USB_CoreReset+0x48>
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e006      	b.n	800a80e <USB_CoreReset+0x56>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d0f0      	beq.n	800a7ee <USB_CoreReset+0x36>
 800a80c:	2300      	movs	r3, #0
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	00030d40 	.word	0x00030d40

0800a820 <USB_HostInit>:
 800a820:	b084      	sub	sp, #16
 800a822:	b580      	push	{r7, lr}
 800a824:	b084      	sub	sp, #16
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	f107 001c 	add.w	r0, r7, #28
 800a82e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60bb      	str	r3, [r7, #8]
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a83c:	461a      	mov	r2, r3
 800a83e:	2300      	movs	r3, #0
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a846:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	639a      	str	r2, [r3, #56]	; 0x38
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	639a      	str	r2, [r3, #56]	; 0x38
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d018      	beq.n	800a8a4 <USB_HostInit+0x84>
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	2b01      	cmp	r3, #1
 800a876:	d10a      	bne.n	800a88e <USB_HostInit+0x6e>
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a886:	f043 0304 	orr.w	r3, r3, #4
 800a88a:	6013      	str	r3, [r2, #0]
 800a88c:	e014      	b.n	800a8b8 <USB_HostInit+0x98>
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a89c:	f023 0304 	bic.w	r3, r3, #4
 800a8a0:	6013      	str	r3, [r2, #0]
 800a8a2:	e009      	b.n	800a8b8 <USB_HostInit+0x98>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a8b2:	f023 0304 	bic.w	r3, r3, #4
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	2110      	movs	r1, #16
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff feb4 	bl	800a628 <USB_FlushTxFifo>
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff fed7 	bl	800a674 <USB_FlushRxFifo>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	e015      	b.n	800a8f8 <USB_HostInit+0xd8>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8de:	6093      	str	r3, [r2, #8]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	015a      	lsls	r2, r3, #5
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60d3      	str	r3, [r2, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d3e5      	bcc.n	800a8cc <USB_HostInit+0xac>
 800a900:	2101      	movs	r1, #1
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 f8ac 	bl	800aa60 <USB_DriveVbus>
 800a908:	20c8      	movs	r0, #200	; 0xc8
 800a90a:	f7f9 fbe3 	bl	80040d4 <HAL_Delay>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	619a      	str	r2, [r3, #24]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a91a:	615a      	str	r2, [r3, #20]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a924:	2b00      	cmp	r3, #0
 800a926:	d00b      	beq.n	800a940 <USB_HostInit+0x120>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a14      	ldr	r2, [pc, #80]	; (800a984 <USB_HostInit+0x164>)
 800a934:	629a      	str	r2, [r3, #40]	; 0x28
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a13      	ldr	r2, [pc, #76]	; (800a988 <USB_HostInit+0x168>)
 800a93a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a93e:	e009      	b.n	800a954 <USB_HostInit+0x134>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2280      	movs	r2, #128	; 0x80
 800a944:	625a      	str	r2, [r3, #36]	; 0x24
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a10      	ldr	r2, [pc, #64]	; (800a98c <USB_HostInit+0x16c>)
 800a94a:	629a      	str	r2, [r3, #40]	; 0x28
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a10      	ldr	r2, [pc, #64]	; (800a990 <USB_HostInit+0x170>)
 800a950:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <USB_HostInit+0x146>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f043 0210 	orr.w	r2, r3, #16
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	619a      	str	r2, [r3, #24]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <USB_HostInit+0x174>)
 800a96c:	4313      	orrs	r3, r2
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	6193      	str	r3, [r2, #24]
 800a972:	2300      	movs	r3, #0
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a97e:	b004      	add	sp, #16
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	01000200 	.word	0x01000200
 800a988:	00e00300 	.word	0x00e00300
 800a98c:	00600080 	.word	0x00600080
 800a990:	004000e0 	.word	0x004000e0
 800a994:	a3200008 	.word	0xa3200008

0800a998 <USB_InitFSLSPClkSel>:
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	68f9      	ldr	r1, [r7, #12]
 800a9cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	600b      	str	r3, [r1, #0]
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d107      	bne.n	800a9ea <USB_InitFSLSPClkSel+0x52>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a9e6:	6053      	str	r3, [r2, #4]
 800a9e8:	e009      	b.n	800a9fe <USB_InitFSLSPClkSel+0x66>
 800a9ea:	78fb      	ldrb	r3, [r7, #3]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d106      	bne.n	800a9fe <USB_InitFSLSPClkSel+0x66>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f241 7370 	movw	r3, #6000	; 0x1770
 800a9fc:	6053      	str	r3, [r2, #4]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <USB_ResetPort>:
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60bb      	str	r3, [r7, #8]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	60bb      	str	r3, [r7, #8]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aa2c:	60bb      	str	r3, [r7, #8]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa3a:	6013      	str	r3, [r2, #0]
 800aa3c:	2064      	movs	r0, #100	; 0x64
 800aa3e:	f7f9 fb49 	bl	80040d4 <HAL_Delay>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	200a      	movs	r0, #10
 800aa52:	f7f9 fb3f 	bl	80040d4 <HAL_Delay>
 800aa56:	2300      	movs	r3, #0
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <USB_DriveVbus>:
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	70fb      	strb	r3, [r7, #3]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	2300      	movs	r3, #0
 800aa72:	60bb      	str	r3, [r7, #8]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	60bb      	str	r3, [r7, #8]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aa84:	60bb      	str	r3, [r7, #8]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <USB_DriveVbus+0x44>
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d106      	bne.n	800aaa4 <USB_DriveVbus+0x44>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aaaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaae:	d109      	bne.n	800aac4 <USB_DriveVbus+0x64>
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <USB_DriveVbus+0x64>
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	2300      	movs	r3, #0
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <USB_GetHostSpeed>:
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	2300      	movs	r3, #0
 800aae0:	60bb      	str	r3, [r7, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	0c5b      	lsrs	r3, r3, #17
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <USB_GetCurrentFrame>:
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4618      	mov	r0, r3
 800ab18:	3714      	adds	r7, #20
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <USB_HC_Init>:
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	70fb      	strb	r3, [r7, #3]
 800ab36:	460b      	mov	r3, r1
 800ab38:	70bb      	strb	r3, [r7, #2]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	707b      	strb	r3, [r7, #1]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60bb      	str	r3, [r7, #8]
 800ab46:	78fb      	ldrb	r3, [r7, #3]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab52:	461a      	mov	r2, r3
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab58:	6093      	str	r3, [r2, #8]
 800ab5a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d87e      	bhi.n	800ac60 <USB_HC_Init+0x13c>
 800ab62:	a201      	add	r2, pc, #4	; (adr r2, 800ab68 <USB_HC_Init+0x44>)
 800ab64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab68:	0800ab79 	.word	0x0800ab79
 800ab6c:	0800ac23 	.word	0x0800ac23
 800ab70:	0800ab79 	.word	0x0800ab79
 800ab74:	0800abe5 	.word	0x0800abe5
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab84:	461a      	mov	r2, r3
 800ab86:	f240 439d 	movw	r3, #1181	; 0x49d
 800ab8a:	60d3      	str	r3, [r2, #12]
 800ab8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	da10      	bge.n	800abb6 <USB_HC_Init+0x92>
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	015a      	lsls	r2, r3, #5
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	78fa      	ldrb	r2, [r7, #3]
 800aba4:	0151      	lsls	r1, r2, #5
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	440a      	add	r2, r1
 800abaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abb2:	60d3      	str	r3, [r2, #12]
 800abb4:	e057      	b.n	800ac66 <USB_HC_Init+0x142>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d051      	beq.n	800ac66 <USB_HC_Init+0x142>
 800abc2:	78fb      	ldrb	r3, [r7, #3]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	78fa      	ldrb	r2, [r7, #3]
 800abd2:	0151      	lsls	r1, r2, #5
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	440a      	add	r2, r1
 800abd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800abe0:	60d3      	str	r3, [r2, #12]
 800abe2:	e040      	b.n	800ac66 <USB_HC_Init+0x142>
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4413      	add	r3, r2
 800abec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf0:	461a      	mov	r2, r3
 800abf2:	f240 639d 	movw	r3, #1693	; 0x69d
 800abf6:	60d3      	str	r3, [r2, #12]
 800abf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	da34      	bge.n	800ac6a <USB_HC_Init+0x146>
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	78fa      	ldrb	r2, [r7, #3]
 800ac10:	0151      	lsls	r1, r2, #5
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	440a      	add	r2, r1
 800ac16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac1e:	60d3      	str	r3, [r2, #12]
 800ac20:	e023      	b.n	800ac6a <USB_HC_Init+0x146>
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f240 2325 	movw	r3, #549	; 0x225
 800ac34:	60d3      	str	r3, [r2, #12]
 800ac36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	da17      	bge.n	800ac6e <USB_HC_Init+0x14a>
 800ac3e:	78fb      	ldrb	r3, [r7, #3]
 800ac40:	015a      	lsls	r2, r3, #5
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	4413      	add	r3, r2
 800ac46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	0151      	lsls	r1, r2, #5
 800ac50:	68ba      	ldr	r2, [r7, #8]
 800ac52:	440a      	add	r2, r1
 800ac54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ac5c:	60d3      	str	r3, [r2, #12]
 800ac5e:	e006      	b.n	800ac6e <USB_HC_Init+0x14a>
 800ac60:	2301      	movs	r3, #1
 800ac62:	75fb      	strb	r3, [r7, #23]
 800ac64:	e004      	b.n	800ac70 <USB_HC_Init+0x14c>
 800ac66:	bf00      	nop
 800ac68:	e002      	b.n	800ac70 <USB_HC_Init+0x14c>
 800ac6a:	bf00      	nop
 800ac6c:	e000      	b.n	800ac70 <USB_HC_Init+0x14c>
 800ac6e:	bf00      	nop
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac76:	699a      	ldr	r2, [r3, #24]
 800ac78:	78fb      	ldrb	r3, [r7, #3]
 800ac7a:	f003 030f 	and.w	r3, r3, #15
 800ac7e:	2101      	movs	r1, #1
 800ac80:	fa01 f303 	lsl.w	r3, r1, r3
 800ac84:	68b9      	ldr	r1, [r7, #8]
 800ac86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	618b      	str	r3, [r1, #24]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	619a      	str	r2, [r3, #24]
 800ac9a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	da03      	bge.n	800acaa <USB_HC_Init+0x186>
 800aca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aca6:	613b      	str	r3, [r7, #16]
 800aca8:	e001      	b.n	800acae <USB_HC_Init+0x18a>
 800acaa:	2300      	movs	r3, #0
 800acac:	613b      	str	r3, [r7, #16]
 800acae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	d103      	bne.n	800acbe <USB_HC_Init+0x19a>
 800acb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e001      	b.n	800acc2 <USB_HC_Init+0x19e>
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	787b      	ldrb	r3, [r7, #1]
 800acc4:	059b      	lsls	r3, r3, #22
 800acc6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
 800acca:	78bb      	ldrb	r3, [r7, #2]
 800accc:	02db      	lsls	r3, r3, #11
 800acce:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
 800acd2:	431a      	orrs	r2, r3
 800acd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acd8:	049b      	lsls	r3, r3, #18
 800acda:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800acde:	431a      	orrs	r2, r3
 800ace0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ace2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ace6:	431a      	orrs	r2, r3
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	431a      	orrs	r2, r3
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	0159      	lsls	r1, r3, #5
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	440b      	add	r3, r1
 800acf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf8:	4619      	mov	r1, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	600b      	str	r3, [r1, #0]
 800ad00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d10f      	bne.n	800ad28 <USB_HC_Init+0x204>
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	015a      	lsls	r2, r3, #5
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4413      	add	r3, r2
 800ad10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	78fa      	ldrb	r2, [r7, #3]
 800ad18:	0151      	lsls	r1, r2, #5
 800ad1a:	68ba      	ldr	r2, [r7, #8]
 800ad1c:	440a      	add	r2, r1
 800ad1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad26:	6013      	str	r3, [r2, #0]
 800ad28:	7dfb      	ldrb	r3, [r7, #23]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop

0800ad38 <USB_HC_StartXfer>:
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08c      	sub	sp, #48	; 0x30
 800ad3c:	af02      	add	r7, sp, #8
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	60b9      	str	r1, [r7, #8]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	623b      	str	r3, [r7, #32]
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	61fb      	str	r3, [r7, #28]
 800ad50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad54:	837b      	strh	r3, [r7, #26]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d028      	beq.n	800adb4 <USB_HC_StartXfer+0x7c>
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	791b      	ldrb	r3, [r3, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d124      	bne.n	800adb4 <USB_HC_StartXfer+0x7c>
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10b      	bne.n	800ad88 <USB_HC_StartXfer+0x50>
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	795b      	ldrb	r3, [r3, #5]
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d107      	bne.n	800ad88 <USB_HC_StartXfer+0x50>
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	785b      	ldrb	r3, [r3, #1]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f000 fa2e 	bl	800b1e0 <USB_DoPing>
 800ad84:	2300      	movs	r3, #0
 800ad86:	e113      	b.n	800afb0 <USB_HC_StartXfer+0x278>
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d112      	bne.n	800adb4 <USB_HC_StartXfer+0x7c>
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	015a      	lsls	r2, r3, #5
 800ad92:	6a3b      	ldr	r3, [r7, #32]
 800ad94:	4413      	add	r3, r2
 800ad96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	0151      	lsls	r1, r2, #5
 800ada0:	6a3a      	ldr	r2, [r7, #32]
 800ada2:	440a      	add	r2, r1
 800ada4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ada8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800adac:	60d3      	str	r3, [r2, #12]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2200      	movs	r2, #0
 800adb2:	715a      	strb	r2, [r3, #5]
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d018      	beq.n	800adee <USB_HC_StartXfer+0xb6>
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	8912      	ldrh	r2, [r2, #8]
 800adc4:	4413      	add	r3, r2
 800adc6:	3b01      	subs	r3, #1
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	8912      	ldrh	r2, [r2, #8]
 800adcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800add0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800add2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800add4:	8b7b      	ldrh	r3, [r7, #26]
 800add6:	429a      	cmp	r2, r3
 800add8:	d90b      	bls.n	800adf2 <USB_HC_StartXfer+0xba>
 800adda:	8b7b      	ldrh	r3, [r7, #26]
 800addc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800adde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	8912      	ldrh	r2, [r2, #8]
 800ade4:	fb03 f202 	mul.w	r2, r3, r2
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	611a      	str	r2, [r3, #16]
 800adec:	e001      	b.n	800adf2 <USB_HC_StartXfer+0xba>
 800adee:	2301      	movs	r3, #1
 800adf0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	78db      	ldrb	r3, [r3, #3]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d006      	beq.n	800ae08 <USB_HC_StartXfer+0xd0>
 800adfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adfc:	68ba      	ldr	r2, [r7, #8]
 800adfe:	8912      	ldrh	r2, [r2, #8]
 800ae00:	fb03 f202 	mul.w	r2, r3, r2
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	611a      	str	r2, [r3, #16]
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
 800ae10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae12:	04d9      	lsls	r1, r3, #19
 800ae14:	4b68      	ldr	r3, [pc, #416]	; (800afb8 <USB_HC_StartXfer+0x280>)
 800ae16:	400b      	ands	r3, r1
 800ae18:	431a      	orrs	r2, r3
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	7a9b      	ldrb	r3, [r3, #10]
 800ae1e:	075b      	lsls	r3, r3, #29
 800ae20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800ae24:	69f9      	ldr	r1, [r7, #28]
 800ae26:	0148      	lsls	r0, r1, #5
 800ae28:	6a39      	ldr	r1, [r7, #32]
 800ae2a:	4401      	add	r1, r0
 800ae2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ae30:	4313      	orrs	r3, r2
 800ae32:	610b      	str	r3, [r1, #16]
 800ae34:	79fb      	ldrb	r3, [r7, #7]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d009      	beq.n	800ae4e <USB_HC_StartXfer+0x116>
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	68d9      	ldr	r1, [r3, #12]
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae4a:	460a      	mov	r2, r1
 800ae4c:	615a      	str	r2, [r3, #20]
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 0301 	and.w	r3, r3, #1
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	bf0c      	ite	eq
 800ae5e:	2301      	moveq	r3, #1
 800ae60:	2300      	movne	r3, #0
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	767b      	strb	r3, [r7, #25]
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	69fa      	ldr	r2, [r7, #28]
 800ae76:	0151      	lsls	r1, r2, #5
 800ae78:	6a3a      	ldr	r2, [r7, #32]
 800ae7a:	440a      	add	r2, r1
 800ae7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	015a      	lsls	r2, r3, #5
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae92:	681a      	ldr	r2, [r3, #0]
 800ae94:	7e7b      	ldrb	r3, [r7, #25]
 800ae96:	075b      	lsls	r3, r3, #29
 800ae98:	69f9      	ldr	r1, [r7, #28]
 800ae9a:	0148      	lsls	r0, r1, #5
 800ae9c:	6a39      	ldr	r1, [r7, #32]
 800ae9e:	4401      	add	r1, r0
 800aea0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aea4:	4313      	orrs	r3, r2
 800aea6:	600b      	str	r3, [r1, #0]
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a41      	ldr	r2, [pc, #260]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	4b40      	ldr	r3, [pc, #256]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aec2:	4a3e      	ldr	r2, [pc, #248]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aec4:	6013      	str	r3, [r2, #0]
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	78db      	ldrb	r3, [r3, #3]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d006      	beq.n	800aedc <USB_HC_StartXfer+0x1a4>
 800aece:	4b3b      	ldr	r3, [pc, #236]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aed6:	4a39      	ldr	r2, [pc, #228]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	e005      	b.n	800aee8 <USB_HC_StartXfer+0x1b0>
 800aedc:	4b37      	ldr	r3, [pc, #220]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aee4:	4a35      	ldr	r2, [pc, #212]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aee6:	6013      	str	r3, [r2, #0]
 800aee8:	4b34      	ldr	r3, [pc, #208]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aef0:	4a32      	ldr	r2, [pc, #200]	; (800afbc <USB_HC_StartXfer+0x284>)
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	6a3b      	ldr	r3, [r7, #32]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af00:	461a      	mov	r2, r3
 800af02:	4b2e      	ldr	r3, [pc, #184]	; (800afbc <USB_HC_StartXfer+0x284>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	6013      	str	r3, [r2, #0]
 800af08:	79fb      	ldrb	r3, [r7, #7]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <USB_HC_StartXfer+0x1da>
 800af0e:	2300      	movs	r3, #0
 800af10:	e04e      	b.n	800afb0 <USB_HC_StartXfer+0x278>
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	78db      	ldrb	r3, [r3, #3]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d149      	bne.n	800afae <USB_HC_StartXfer+0x276>
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d045      	beq.n	800afae <USB_HC_StartXfer+0x276>
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	79db      	ldrb	r3, [r3, #7]
 800af26:	2b03      	cmp	r3, #3
 800af28:	d830      	bhi.n	800af8c <USB_HC_StartXfer+0x254>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <USB_HC_StartXfer+0x1f8>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800af41 	.word	0x0800af41
 800af34:	0800af65 	.word	0x0800af65
 800af38:	0800af41 	.word	0x0800af41
 800af3c:	0800af65 	.word	0x0800af65
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	3303      	adds	r3, #3
 800af46:	089b      	lsrs	r3, r3, #2
 800af48:	82fb      	strh	r3, [r7, #22]
 800af4a:	8afa      	ldrh	r2, [r7, #22]
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	b29b      	uxth	r3, r3
 800af52:	429a      	cmp	r2, r3
 800af54:	d91c      	bls.n	800af90 <USB_HC_StartXfer+0x258>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	f043 0220 	orr.w	r2, r3, #32
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	619a      	str	r2, [r3, #24]
 800af62:	e015      	b.n	800af90 <USB_HC_StartXfer+0x258>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	3303      	adds	r3, #3
 800af6a:	089b      	lsrs	r3, r3, #2
 800af6c:	82fb      	strh	r3, [r7, #22]
 800af6e:	8afa      	ldrh	r2, [r7, #22]
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d90a      	bls.n	800af94 <USB_HC_StartXfer+0x25c>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	619a      	str	r2, [r3, #24]
 800af8a:	e003      	b.n	800af94 <USB_HC_StartXfer+0x25c>
 800af8c:	bf00      	nop
 800af8e:	e002      	b.n	800af96 <USB_HC_StartXfer+0x25e>
 800af90:	bf00      	nop
 800af92:	e000      	b.n	800af96 <USB_HC_StartXfer+0x25e>
 800af94:	bf00      	nop
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	68d9      	ldr	r1, [r3, #12]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	785a      	ldrb	r2, [r3, #1]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	2000      	movs	r0, #0
 800afa6:	9000      	str	r0, [sp, #0]
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f7ff fb85 	bl	800a6b8 <USB_WritePacket>
 800afae:	2300      	movs	r3, #0
 800afb0:	4618      	mov	r0, r3
 800afb2:	3728      	adds	r7, #40	; 0x28
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	1ff80000 	.word	0x1ff80000
 800afbc:	20000d44 	.word	0x20000d44

0800afc0 <USB_HC_ReadInterrupt>:
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <USB_HC_Halt>:
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	6078      	str	r0, [r7, #4]
 800afea:	460b      	mov	r3, r1
 800afec:	70fb      	strb	r3, [r7, #3]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	613b      	str	r3, [r7, #16]
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	015a      	lsls	r2, r3, #5
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	4413      	add	r3, r2
 800b002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	0c9b      	lsrs	r3, r3, #18
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	60bb      	str	r3, [r7, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d002      	beq.n	800b01c <USB_HC_Halt+0x3a>
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d16c      	bne.n	800b0f6 <USB_HC_Halt+0x114>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	015a      	lsls	r2, r3, #5
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	4413      	add	r3, r2
 800b024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68fa      	ldr	r2, [r7, #12]
 800b02c:	0151      	lsls	r1, r2, #5
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	440a      	add	r2, r1
 800b032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b03a:	6013      	str	r3, [r2, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b040:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d143      	bne.n	800b0d0 <USB_HC_Halt+0xee>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	0151      	lsls	r1, r2, #5
 800b05a:	693a      	ldr	r2, [r7, #16]
 800b05c:	440a      	add	r2, r1
 800b05e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	0151      	lsls	r1, r2, #5
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	440a      	add	r2, r1
 800b07e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	0151      	lsls	r1, r2, #5
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	440a      	add	r2, r1
 800b09e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	617b      	str	r3, [r7, #20]
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0b4:	d81d      	bhi.n	800b0f2 <USB_HC_Halt+0x110>
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0cc:	d0ec      	beq.n	800b0a8 <USB_HC_Halt+0xc6>
 800b0ce:	e080      	b.n	800b1d2 <USB_HC_Halt+0x1f0>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	015a      	lsls	r2, r3, #5
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	0151      	lsls	r1, r2, #5
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	440a      	add	r2, r1
 800b0e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0ee:	6013      	str	r3, [r2, #0]
 800b0f0:	e06f      	b.n	800b1d2 <USB_HC_Halt+0x1f0>
 800b0f2:	bf00      	nop
 800b0f4:	e06d      	b.n	800b1d2 <USB_HC_Halt+0x1f0>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	0151      	lsls	r1, r2, #5
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	440a      	add	r2, r1
 800b10c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b114:	6013      	str	r3, [r2, #0]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b122:	2b00      	cmp	r3, #0
 800b124:	d143      	bne.n	800b1ae <USB_HC_Halt+0x1cc>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	0151      	lsls	r1, r2, #5
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	440a      	add	r2, r1
 800b13c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b164:	6013      	str	r3, [r2, #0]
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	0151      	lsls	r1, r2, #5
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	440a      	add	r2, r1
 800b17c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b180:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	3301      	adds	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b192:	d81d      	bhi.n	800b1d0 <USB_HC_Halt+0x1ee>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1aa:	d0ec      	beq.n	800b186 <USB_HC_Halt+0x1a4>
 800b1ac:	e011      	b.n	800b1d2 <USB_HC_Halt+0x1f0>
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	0151      	lsls	r1, r2, #5
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	440a      	add	r2, r1
 800b1c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1cc:	6013      	str	r3, [r2, #0]
 800b1ce:	e000      	b.n	800b1d2 <USB_HC_Halt+0x1f0>
 800b1d0:	bf00      	nop
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	371c      	adds	r7, #28
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USB_DoPing>:
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70fb      	strb	r3, [r7, #3]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	617b      	str	r3, [r7, #20]
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	613b      	str	r3, [r7, #16]
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	60fb      	str	r3, [r7, #12]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	04da      	lsls	r2, r3, #19
 800b1fc:	4b15      	ldr	r3, [pc, #84]	; (800b254 <USB_DoPing+0x74>)
 800b1fe:	4013      	ands	r3, r2
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	0151      	lsls	r1, r2, #5
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	440a      	add	r2, r1
 800b208:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b20c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b210:	6113      	str	r3, [r2, #16]
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	60bb      	str	r3, [r7, #8]
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b228:	60bb      	str	r3, [r7, #8]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	015a      	lsls	r2, r3, #5
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	4413      	add	r3, r2
 800b23a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b23e:	461a      	mov	r2, r3
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	2300      	movs	r3, #0
 800b246:	4618      	mov	r0, r3
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	1ff80000 	.word	0x1ff80000

0800b258 <USB_StopHost>:
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	2300      	movs	r3, #0
 800b266:	617b      	str	r3, [r7, #20]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff f9a2 	bl	800a5b2 <USB_DisableGlobalInt>
 800b26e:	2110      	movs	r1, #16
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff f9d9 	bl	800a628 <USB_FlushTxFifo>
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff f9fc 	bl	800a674 <USB_FlushRxFifo>
 800b27c:	2300      	movs	r3, #0
 800b27e:	613b      	str	r3, [r7, #16]
 800b280:	e01f      	b.n	800b2c2 <USB_StopHost+0x6a>
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	60bb      	str	r3, [r7, #8]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b298:	60bb      	str	r3, [r7, #8]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b2a0:	60bb      	str	r3, [r7, #8]
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2a8:	60bb      	str	r3, [r7, #8]
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	015a      	lsls	r2, r3, #5
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3301      	adds	r3, #1
 800b2c0:	613b      	str	r3, [r7, #16]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b0f      	cmp	r3, #15
 800b2c6:	d9dc      	bls.n	800b282 <USB_StopHost+0x2a>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	e034      	b.n	800b338 <USB_StopHost+0xe0>
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	015a      	lsls	r2, r3, #5
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	60bb      	str	r3, [r7, #8]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2e4:	60bb      	str	r3, [r7, #8]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2ec:	60bb      	str	r3, [r7, #8]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2f4:	60bb      	str	r3, [r7, #8]
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	015a      	lsls	r2, r3, #5
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b302:	461a      	mov	r2, r3
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	3301      	adds	r3, #1
 800b30c:	617b      	str	r3, [r7, #20]
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b314:	d80c      	bhi.n	800b330 <USB_StopHost+0xd8>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	015a      	lsls	r2, r3, #5
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	4413      	add	r3, r2
 800b31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b32c:	d0ec      	beq.n	800b308 <USB_StopHost+0xb0>
 800b32e:	e000      	b.n	800b332 <USB_StopHost+0xda>
 800b330:	bf00      	nop
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	3301      	adds	r3, #1
 800b336:	613b      	str	r3, [r7, #16]
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	2b0f      	cmp	r3, #15
 800b33c:	d9c7      	bls.n	800b2ce <USB_StopHost+0x76>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b344:	461a      	mov	r2, r3
 800b346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b34a:	6153      	str	r3, [r2, #20]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b352:	615a      	str	r2, [r3, #20]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f7ff f91b 	bl	800a590 <USB_EnableGlobalInt>
 800b35a:	2300      	movs	r3, #0
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b368:	4904      	ldr	r1, [pc, #16]	; (800b37c <MX_FATFS_Init+0x18>)
 800b36a:	4805      	ldr	r0, [pc, #20]	; (800b380 <MX_FATFS_Init+0x1c>)
 800b36c:	f006 f9be 	bl	80116ec <FATFS_LinkDriver>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	4b03      	ldr	r3, [pc, #12]	; (800b384 <MX_FATFS_Init+0x20>)
 800b376:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b378:	bf00      	nop
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20000d4c 	.word	0x20000d4c
 800b380:	0801c03c 	.word	0x0801c03c
 800b384:	20000d48 	.word	0x20000d48

0800b388 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b388:	b480      	push	{r7}
 800b38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b38c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b38e:	4618      	mov	r0, r3
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	4603      	mov	r3, r0
 800b3a0:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4808      	ldr	r0, [pc, #32]	; (800b3e4 <USBH_status+0x34>)
 800b3c4:	f000 fe1a 	bl	800bffc <USBH_MSC_UnitIsReady>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <USBH_status+0x24>
  {
    res = RES_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]
 800b3d2:	e001      	b.n	800b3d8 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3710      	adds	r7, #16
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	200011bc 	.word	0x200011bc

0800b3e8 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b094      	sub	sp, #80	; 0x50
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60b9      	str	r1, [r7, #8]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b3fe:	7bf9      	ldrb	r1, [r7, #15]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	4813      	ldr	r0, [pc, #76]	; (800b458 <USBH_read+0x70>)
 800b40a:	f000 fe41 	bl	800c090 <USBH_MSC_Read>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <USBH_read+0x34>
  {
    res = RES_OK;
 800b414:	2300      	movs	r3, #0
 800b416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b41a:	e017      	b.n	800b44c <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b41c:	f107 0210 	add.w	r2, r7, #16
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4619      	mov	r1, r3
 800b424:	480c      	ldr	r0, [pc, #48]	; (800b458 <USBH_read+0x70>)
 800b426:	f000 fe0f 	bl	800c048 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b42a:	7f7b      	ldrb	r3, [r7, #29]
 800b42c:	2b3a      	cmp	r3, #58	; 0x3a
 800b42e:	d005      	beq.n	800b43c <USBH_read+0x54>
 800b430:	2b3a      	cmp	r3, #58	; 0x3a
 800b432:	dc07      	bgt.n	800b444 <USBH_read+0x5c>
 800b434:	2b04      	cmp	r3, #4
 800b436:	d001      	beq.n	800b43c <USBH_read+0x54>
 800b438:	2b28      	cmp	r3, #40	; 0x28
 800b43a:	d103      	bne.n	800b444 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b43c:	2303      	movs	r3, #3
 800b43e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b442:	e003      	b.n	800b44c <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b44a:	bf00      	nop
    }
  }

  return res;
 800b44c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b450:	4618      	mov	r0, r3
 800b452:	3748      	adds	r7, #72	; 0x48
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	200011bc 	.word	0x200011bc

0800b45c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b094      	sub	sp, #80	; 0x50
 800b460:	af02      	add	r7, sp, #8
 800b462:	60b9      	str	r1, [r7, #8]
 800b464:	607a      	str	r2, [r7, #4]
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b472:	7bf9      	ldrb	r1, [r7, #15]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	4817      	ldr	r0, [pc, #92]	; (800b4dc <USBH_write+0x80>)
 800b47e:	f000 fe70 	bl	800c162 <USBH_MSC_Write>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <USBH_write+0x34>
  {
    res = RES_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b48e:	e01f      	b.n	800b4d0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b490:	f107 0210 	add.w	r2, r7, #16
 800b494:	7bfb      	ldrb	r3, [r7, #15]
 800b496:	4619      	mov	r1, r3
 800b498:	4810      	ldr	r0, [pc, #64]	; (800b4dc <USBH_write+0x80>)
 800b49a:	f000 fdd5 	bl	800c048 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b49e:	7f7b      	ldrb	r3, [r7, #29]
 800b4a0:	2b3a      	cmp	r3, #58	; 0x3a
 800b4a2:	d00d      	beq.n	800b4c0 <USBH_write+0x64>
 800b4a4:	2b3a      	cmp	r3, #58	; 0x3a
 800b4a6:	dc0f      	bgt.n	800b4c8 <USBH_write+0x6c>
 800b4a8:	2b28      	cmp	r3, #40	; 0x28
 800b4aa:	d009      	beq.n	800b4c0 <USBH_write+0x64>
 800b4ac:	2b28      	cmp	r3, #40	; 0x28
 800b4ae:	dc0b      	bgt.n	800b4c8 <USBH_write+0x6c>
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d005      	beq.n	800b4c0 <USBH_write+0x64>
 800b4b4:	2b27      	cmp	r3, #39	; 0x27
 800b4b6:	d107      	bne.n	800b4c8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b4b8:	2302      	movs	r3, #2
 800b4ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4be:	e007      	b.n	800b4d0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4c6:	e003      	b.n	800b4d0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4ce:	bf00      	nop
    }
  }

  return res;
 800b4d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3748      	adds	r7, #72	; 0x48
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200011bc 	.word	0x200011bc

0800b4e0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b090      	sub	sp, #64	; 0x40
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	603a      	str	r2, [r7, #0]
 800b4ea:	71fb      	strb	r3, [r7, #7]
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b4f6:	79bb      	ldrb	r3, [r7, #6]
 800b4f8:	2b03      	cmp	r3, #3
 800b4fa:	d852      	bhi.n	800b5a2 <USBH_ioctl+0xc2>
 800b4fc:	a201      	add	r2, pc, #4	; (adr r2, 800b504 <USBH_ioctl+0x24>)
 800b4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b502:	bf00      	nop
 800b504:	0800b515 	.word	0x0800b515
 800b508:	0800b51d 	.word	0x0800b51d
 800b50c:	0800b547 	.word	0x0800b547
 800b510:	0800b573 	.word	0x0800b573
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b51a:	e045      	b.n	800b5a8 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b51c:	f107 0208 	add.w	r2, r7, #8
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	4619      	mov	r1, r3
 800b524:	4823      	ldr	r0, [pc, #140]	; (800b5b4 <USBH_ioctl+0xd4>)
 800b526:	f000 fd8f 	bl	800c048 <USBH_MSC_GetLUNInfo>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d106      	bne.n	800b53e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b536:	2300      	movs	r3, #0
 800b538:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b53c:	e034      	b.n	800b5a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b544:	e030      	b.n	800b5a8 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b546:	f107 0208 	add.w	r2, r7, #8
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	4619      	mov	r1, r3
 800b54e:	4819      	ldr	r0, [pc, #100]	; (800b5b4 <USBH_ioctl+0xd4>)
 800b550:	f000 fd7a 	bl	800c048 <USBH_MSC_GetLUNInfo>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d107      	bne.n	800b56a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b55a:	8a3b      	ldrh	r3, [r7, #16]
 800b55c:	461a      	mov	r2, r3
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b568:	e01e      	b.n	800b5a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b56a:	2301      	movs	r3, #1
 800b56c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b570:	e01a      	b.n	800b5a8 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b572:	f107 0208 	add.w	r2, r7, #8
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	4619      	mov	r1, r3
 800b57a:	480e      	ldr	r0, [pc, #56]	; (800b5b4 <USBH_ioctl+0xd4>)
 800b57c:	f000 fd64 	bl	800c048 <USBH_MSC_GetLUNInfo>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d109      	bne.n	800b59a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b586:	8a3b      	ldrh	r3, [r7, #16]
 800b588:	0a5b      	lsrs	r3, r3, #9
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b598:	e006      	b.n	800b5a8 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b5a0:	e002      	b.n	800b5a8 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b5a2:	2304      	movs	r3, #4
 800b5a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b5a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3740      	adds	r7, #64	; 0x40
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200011bc 	.word	0x200011bc

0800b5b8 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b5b8:	b590      	push	{r4, r7, lr}
 800b5ba:	b089      	sub	sp, #36	; 0x24
 800b5bc:	af04      	add	r7, sp, #16
 800b5be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c6:	7919      	ldrb	r1, [r3, #4]
 800b5c8:	2350      	movs	r3, #80	; 0x50
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 fc53 	bl	800ce78 <USBH_FindInterface>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	2bff      	cmp	r3, #255	; 0xff
 800b5da:	d002      	beq.n	800b5e2 <USBH_MSC_InterfaceInit+0x2a>
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d901      	bls.n	800b5e6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	e0ef      	b.n	800b7c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b5e6:	7bfb      	ldrb	r3, [r7, #15]
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 fc28 	bl	800ce40 <USBH_SelectInterface>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e0e3      	b.n	800b7c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b604:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b608:	f009 f99e 	bl	8014948 <malloc>
 800b60c:	4603      	mov	r3, r0
 800b60e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b616:	69db      	ldr	r3, [r3, #28]
 800b618:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b620:	2302      	movs	r3, #2
 800b622:	e0d0      	b.n	800b7c6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b624:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b628:	2100      	movs	r1, #0
 800b62a:	68b8      	ldr	r0, [r7, #8]
 800b62c:	f009 f9aa 	bl	8014984 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	211a      	movs	r1, #26
 800b636:	fb01 f303 	mul.w	r3, r1, r3
 800b63a:	4413      	add	r3, r2
 800b63c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	b25b      	sxtb	r3, r3
 800b644:	2b00      	cmp	r3, #0
 800b646:	da16      	bge.n	800b676 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	211a      	movs	r1, #26
 800b64e:	fb01 f303 	mul.w	r3, r1, r3
 800b652:	4413      	add	r3, r2
 800b654:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b658:	781a      	ldrb	r2, [r3, #0]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	211a      	movs	r1, #26
 800b664:	fb01 f303 	mul.w	r3, r1, r3
 800b668:	4413      	add	r3, r2
 800b66a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b66e:	881a      	ldrh	r2, [r3, #0]
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	815a      	strh	r2, [r3, #10]
 800b674:	e015      	b.n	800b6a2 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	211a      	movs	r1, #26
 800b67c:	fb01 f303 	mul.w	r3, r1, r3
 800b680:	4413      	add	r3, r2
 800b682:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b686:	781a      	ldrb	r2, [r3, #0]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	211a      	movs	r1, #26
 800b692:	fb01 f303 	mul.w	r3, r1, r3
 800b696:	4413      	add	r3, r2
 800b698:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b69c:	881a      	ldrh	r2, [r3, #0]
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	211a      	movs	r1, #26
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	b25b      	sxtb	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	da16      	bge.n	800b6e8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	211a      	movs	r1, #26
 800b6c0:	fb01 f303 	mul.w	r3, r1, r3
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b6ca:	781a      	ldrb	r2, [r3, #0]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	211a      	movs	r1, #26
 800b6d6:	fb01 f303 	mul.w	r3, r1, r3
 800b6da:	4413      	add	r3, r2
 800b6dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b6e0:	881a      	ldrh	r2, [r3, #0]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	815a      	strh	r2, [r3, #10]
 800b6e6:	e015      	b.n	800b714 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	211a      	movs	r1, #26
 800b6ee:	fb01 f303 	mul.w	r3, r1, r3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b6f8:	781a      	ldrb	r2, [r3, #0]
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	211a      	movs	r1, #26
 800b704:	fb01 f303 	mul.w	r3, r1, r3
 800b708:	4413      	add	r3, r2
 800b70a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b70e:	881a      	ldrh	r2, [r3, #0]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	2200      	movs	r2, #0
 800b71e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	799b      	ldrb	r3, [r3, #6]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f002 fdc4 	bl	800e2ba <USBH_AllocPipe>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	79db      	ldrb	r3, [r3, #7]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f002 fdba 	bl	800e2ba <USBH_AllocPipe>
 800b746:	4603      	mov	r3, r0
 800b748:	461a      	mov	r2, r3
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fdac 	bl	800c2ac <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	7959      	ldrb	r1, [r3, #5]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	7998      	ldrb	r0, [r3, #6]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	8912      	ldrh	r2, [r2, #8]
 800b76c:	9202      	str	r2, [sp, #8]
 800b76e:	2202      	movs	r2, #2
 800b770:	9201      	str	r2, [sp, #4]
 800b772:	9300      	str	r3, [sp, #0]
 800b774:	4623      	mov	r3, r4
 800b776:	4602      	mov	r2, r0
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f002 fd6f 	bl	800e25c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	7919      	ldrb	r1, [r3, #4]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	79d8      	ldrb	r0, [r3, #7]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b792:	68ba      	ldr	r2, [r7, #8]
 800b794:	8952      	ldrh	r2, [r2, #10]
 800b796:	9202      	str	r2, [sp, #8]
 800b798:	2202      	movs	r2, #2
 800b79a:	9201      	str	r2, [sp, #4]
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	4623      	mov	r3, r4
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f002 fd5a 	bl	800e25c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	791b      	ldrb	r3, [r3, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f006 fb1f 	bl	8011df4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	795b      	ldrb	r3, [r3, #5]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f006 fb18 	bl	8011df4 <USBH_LL_SetToggle>

  return USBH_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd90      	pop	{r4, r7, pc}

0800b7ce <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b084      	sub	sp, #16
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	795b      	ldrb	r3, [r3, #5]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00e      	beq.n	800b806 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	795b      	ldrb	r3, [r3, #5]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f002 fd53 	bl	800e29a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	795b      	ldrb	r3, [r3, #5]
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f002 fd7e 	bl	800e2fc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2200      	movs	r2, #0
 800b804:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	791b      	ldrb	r3, [r3, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00e      	beq.n	800b82c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	791b      	ldrb	r3, [r3, #4]
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f002 fd40 	bl	800e29a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	791b      	ldrb	r3, [r3, #4]
 800b81e:	4619      	mov	r1, r3
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f002 fd6b 	bl	800e2fc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2200      	movs	r2, #0
 800b82a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00b      	beq.n	800b850 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b83e:	69db      	ldr	r3, [r3, #28]
 800b840:	4618      	mov	r0, r3
 800b842:	f009 f889 	bl	8014958 <free>
    phost->pActiveClass->pData = 0U;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84c:	2200      	movs	r2, #0
 800b84e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b86c:	2301      	movs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	7b9b      	ldrb	r3, [r3, #14]
 800b874:	2b03      	cmp	r3, #3
 800b876:	d041      	beq.n	800b8fc <USBH_MSC_ClassRequest+0xa2>
 800b878:	2b03      	cmp	r3, #3
 800b87a:	dc4b      	bgt.n	800b914 <USBH_MSC_ClassRequest+0xba>
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d001      	beq.n	800b884 <USBH_MSC_ClassRequest+0x2a>
 800b880:	2b02      	cmp	r3, #2
 800b882:	d147      	bne.n	800b914 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fcf0 	bl	800c26e <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b88e:	4603      	mov	r3, r0
 800b890:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b892:	7bfb      	ldrb	r3, [r7, #15]
 800b894:	2b03      	cmp	r3, #3
 800b896:	d104      	bne.n	800b8a2 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2200      	movs	r2, #0
 800b89c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b8a2:	7bfb      	ldrb	r3, [r7, #15]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d137      	bne.n	800b918 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	2b02      	cmp	r3, #2
 800b8ae:	d804      	bhi.n	800b8ba <USBH_MSC_ClassRequest+0x60>
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	e000      	b.n	800b8bc <USBH_MSC_ClassRequest+0x62>
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73bb      	strb	r3, [r7, #14]
 800b8c4:	e014      	b.n	800b8f0 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b8c6:	7bbb      	ldrb	r3, [r7, #14]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	2134      	movs	r1, #52	; 0x34
 800b8cc:	fb01 f303 	mul.w	r3, r1, r3
 800b8d0:	4413      	add	r3, r2
 800b8d2:	3392      	adds	r3, #146	; 0x92
 800b8d4:	2202      	movs	r2, #2
 800b8d6:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	2134      	movs	r1, #52	; 0x34
 800b8de:	fb01 f303 	mul.w	r3, r1, r3
 800b8e2:	4413      	add	r3, r2
 800b8e4:	33c1      	adds	r3, #193	; 0xc1
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b8ea:	7bbb      	ldrb	r3, [r7, #14]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	73bb      	strb	r3, [r7, #14]
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	7bba      	ldrb	r2, [r7, #14]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d3e5      	bcc.n	800b8c6 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b8fa:	e00d      	b.n	800b918 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f002 f87b 	bl	800d9fa <USBH_ClrFeature>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d108      	bne.n	800b91c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	7bda      	ldrb	r2, [r3, #15]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b912:	e003      	b.n	800b91c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b914:	bf00      	nop
 800b916:	e002      	b.n	800b91e <USBH_MSC_ClassRequest+0xc4>
      break;
 800b918:	bf00      	nop
 800b91a:	e000      	b.n	800b91e <USBH_MSC_ClassRequest+0xc4>
      break;
 800b91c:	bf00      	nop
  }

  return status;
 800b91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b93a:	2301      	movs	r3, #1
 800b93c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b93e:	2301      	movs	r3, #1
 800b940:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b942:	2301      	movs	r3, #1
 800b944:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	7b1b      	ldrb	r3, [r3, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <USBH_MSC_Process+0x2e>
 800b94e:	2b01      	cmp	r3, #1
 800b950:	f000 8271 	beq.w	800be36 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b954:	e272      	b.n	800be3c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	b29b      	uxth	r3, r3
 800b962:	429a      	cmp	r2, r3
 800b964:	f080 824f 	bcs.w	800be06 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b96e:	4619      	mov	r1, r3
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	2334      	movs	r3, #52	; 0x34
 800b974:	fb01 f303 	mul.w	r3, r1, r3
 800b978:	4413      	add	r3, r2
 800b97a:	3391      	adds	r3, #145	; 0x91
 800b97c:	2201      	movs	r2, #1
 800b97e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b986:	4619      	mov	r1, r3
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	2334      	movs	r3, #52	; 0x34
 800b98c:	fb01 f303 	mul.w	r3, r1, r3
 800b990:	4413      	add	r3, r2
 800b992:	3390      	adds	r3, #144	; 0x90
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b08      	cmp	r3, #8
 800b998:	f200 8243 	bhi.w	800be22 <USBH_MSC_Process+0x4fa>
 800b99c:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <USBH_MSC_Process+0x7c>)
 800b99e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a2:	bf00      	nop
 800b9a4:	0800b9c9 	.word	0x0800b9c9
 800b9a8:	0800be23 	.word	0x0800be23
 800b9ac:	0800ba91 	.word	0x0800ba91
 800b9b0:	0800bc15 	.word	0x0800bc15
 800b9b4:	0800b9ef 	.word	0x0800b9ef
 800b9b8:	0800bce1 	.word	0x0800bce1
 800b9bc:	0800be23 	.word	0x0800be23
 800b9c0:	0800be23 	.word	0x0800be23
 800b9c4:	0800bdf5 	.word	0x0800bdf5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	2334      	movs	r3, #52	; 0x34
 800b9d4:	fb01 f303 	mul.w	r3, r1, r3
 800b9d8:	4413      	add	r3, r2
 800b9da:	3390      	adds	r3, #144	; 0x90
 800b9dc:	2204      	movs	r2, #4
 800b9de:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b9ec:	e222      	b.n	800be34 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9f4:	b2d9      	uxtb	r1, r3
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	2334      	movs	r3, #52	; 0x34
 800ba00:	fb02 f303 	mul.w	r3, r2, r3
 800ba04:	3398      	adds	r3, #152	; 0x98
 800ba06:	693a      	ldr	r2, [r7, #16]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3307      	adds	r3, #7
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 ff6a 	bl	800c8e8 <USBH_MSC_SCSI_Inquiry>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ba18:	7bfb      	ldrb	r3, [r7, #15]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10b      	bne.n	800ba36 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba24:	4619      	mov	r1, r3
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	2334      	movs	r3, #52	; 0x34
 800ba2a:	fb01 f303 	mul.w	r3, r1, r3
 800ba2e:	4413      	add	r3, r2
 800ba30:	3390      	adds	r3, #144	; 0x90
 800ba32:	2202      	movs	r2, #2
 800ba34:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d10c      	bne.n	800ba56 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba42:	4619      	mov	r1, r3
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	2334      	movs	r3, #52	; 0x34
 800ba48:	fb01 f303 	mul.w	r3, r1, r3
 800ba4c:	4413      	add	r3, r2
 800ba4e:	3390      	adds	r3, #144	; 0x90
 800ba50:	2205      	movs	r2, #5
 800ba52:	701a      	strb	r2, [r3, #0]
            break;
 800ba54:	e1e7      	b.n	800be26 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
 800ba58:	2b04      	cmp	r3, #4
 800ba5a:	f040 81e4 	bne.w	800be26 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba64:	4619      	mov	r1, r3
 800ba66:	693a      	ldr	r2, [r7, #16]
 800ba68:	2334      	movs	r3, #52	; 0x34
 800ba6a:	fb01 f303 	mul.w	r3, r1, r3
 800ba6e:	4413      	add	r3, r2
 800ba70:	3390      	adds	r3, #144	; 0x90
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	2334      	movs	r3, #52	; 0x34
 800ba82:	fb01 f303 	mul.w	r3, r1, r3
 800ba86:	4413      	add	r3, r2
 800ba88:	3391      	adds	r3, #145	; 0x91
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	701a      	strb	r2, [r3, #0]
            break;
 800ba8e:	e1ca      	b.n	800be26 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	4619      	mov	r1, r3
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fe66 	bl	800c76c <USBH_MSC_SCSI_TestUnitReady>
 800baa0:	4603      	mov	r3, r0
 800baa2:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d149      	bne.n	800bb3e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bab0:	4619      	mov	r1, r3
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	2334      	movs	r3, #52	; 0x34
 800bab6:	fb01 f303 	mul.w	r3, r1, r3
 800baba:	4413      	add	r3, r2
 800babc:	3392      	adds	r3, #146	; 0x92
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d00c      	beq.n	800bade <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baca:	4619      	mov	r1, r3
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	2334      	movs	r3, #52	; 0x34
 800bad0:	fb01 f303 	mul.w	r3, r1, r3
 800bad4:	4413      	add	r3, r2
 800bad6:	33c1      	adds	r3, #193	; 0xc1
 800bad8:	2201      	movs	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e00b      	b.n	800baf6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bae4:	4619      	mov	r1, r3
 800bae6:	693a      	ldr	r2, [r7, #16]
 800bae8:	2334      	movs	r3, #52	; 0x34
 800baea:	fb01 f303 	mul.w	r3, r1, r3
 800baee:	4413      	add	r3, r2
 800baf0:	33c1      	adds	r3, #193	; 0xc1
 800baf2:	2200      	movs	r2, #0
 800baf4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bafc:	4619      	mov	r1, r3
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	2334      	movs	r3, #52	; 0x34
 800bb02:	fb01 f303 	mul.w	r3, r1, r3
 800bb06:	4413      	add	r3, r2
 800bb08:	3390      	adds	r3, #144	; 0x90
 800bb0a:	2203      	movs	r2, #3
 800bb0c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb14:	4619      	mov	r1, r3
 800bb16:	693a      	ldr	r2, [r7, #16]
 800bb18:	2334      	movs	r3, #52	; 0x34
 800bb1a:	fb01 f303 	mul.w	r3, r1, r3
 800bb1e:	4413      	add	r3, r2
 800bb20:	3391      	adds	r3, #145	; 0x91
 800bb22:	2200      	movs	r2, #0
 800bb24:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	2334      	movs	r3, #52	; 0x34
 800bb32:	fb01 f303 	mul.w	r3, r1, r3
 800bb36:	4413      	add	r3, r2
 800bb38:	3392      	adds	r3, #146	; 0x92
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d14a      	bne.n	800bbda <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	2334      	movs	r3, #52	; 0x34
 800bb50:	fb01 f303 	mul.w	r3, r1, r3
 800bb54:	4413      	add	r3, r2
 800bb56:	3392      	adds	r3, #146	; 0x92
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d00c      	beq.n	800bb78 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb64:	4619      	mov	r1, r3
 800bb66:	693a      	ldr	r2, [r7, #16]
 800bb68:	2334      	movs	r3, #52	; 0x34
 800bb6a:	fb01 f303 	mul.w	r3, r1, r3
 800bb6e:	4413      	add	r3, r2
 800bb70:	33c1      	adds	r3, #193	; 0xc1
 800bb72:	2201      	movs	r2, #1
 800bb74:	701a      	strb	r2, [r3, #0]
 800bb76:	e00b      	b.n	800bb90 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb7e:	4619      	mov	r1, r3
 800bb80:	693a      	ldr	r2, [r7, #16]
 800bb82:	2334      	movs	r3, #52	; 0x34
 800bb84:	fb01 f303 	mul.w	r3, r1, r3
 800bb88:	4413      	add	r3, r2
 800bb8a:	33c1      	adds	r3, #193	; 0xc1
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb96:	4619      	mov	r1, r3
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	2334      	movs	r3, #52	; 0x34
 800bb9c:	fb01 f303 	mul.w	r3, r1, r3
 800bba0:	4413      	add	r3, r2
 800bba2:	3390      	adds	r3, #144	; 0x90
 800bba4:	2205      	movs	r2, #5
 800bba6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbae:	4619      	mov	r1, r3
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	2334      	movs	r3, #52	; 0x34
 800bbb4:	fb01 f303 	mul.w	r3, r1, r3
 800bbb8:	4413      	add	r3, r2
 800bbba:	3391      	adds	r3, #145	; 0x91
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	2334      	movs	r3, #52	; 0x34
 800bbcc:	fb01 f303 	mul.w	r3, r1, r3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	3392      	adds	r3, #146	; 0x92
 800bbd4:	2202      	movs	r2, #2
 800bbd6:	701a      	strb	r2, [r3, #0]
            break;
 800bbd8:	e127      	b.n	800be2a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800bbda:	7bbb      	ldrb	r3, [r7, #14]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	f040 8124 	bne.w	800be2a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbe8:	4619      	mov	r1, r3
 800bbea:	693a      	ldr	r2, [r7, #16]
 800bbec:	2334      	movs	r3, #52	; 0x34
 800bbee:	fb01 f303 	mul.w	r3, r1, r3
 800bbf2:	4413      	add	r3, r2
 800bbf4:	3390      	adds	r3, #144	; 0x90
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc00:	4619      	mov	r1, r3
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	2334      	movs	r3, #52	; 0x34
 800bc06:	fb01 f303 	mul.w	r3, r1, r3
 800bc0a:	4413      	add	r3, r2
 800bc0c:	3391      	adds	r3, #145	; 0x91
 800bc0e:	2202      	movs	r2, #2
 800bc10:	701a      	strb	r2, [r3, #0]
            break;
 800bc12:	e10a      	b.n	800be2a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc1a:	b2d9      	uxtb	r1, r3
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc22:	461a      	mov	r2, r3
 800bc24:	2334      	movs	r3, #52	; 0x34
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	3390      	adds	r3, #144	; 0x90
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	3304      	adds	r3, #4
 800bc32:	461a      	mov	r2, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fddc 	bl	800c7f2 <USBH_MSC_SCSI_ReadCapacity>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d120      	bne.n	800bc86 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	693a      	ldr	r2, [r7, #16]
 800bc4e:	2334      	movs	r3, #52	; 0x34
 800bc50:	fb01 f303 	mul.w	r3, r1, r3
 800bc54:	4413      	add	r3, r2
 800bc56:	3390      	adds	r3, #144	; 0x90
 800bc58:	2201      	movs	r2, #1
 800bc5a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc62:	4619      	mov	r1, r3
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	2334      	movs	r3, #52	; 0x34
 800bc68:	fb01 f303 	mul.w	r3, r1, r3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	3391      	adds	r3, #145	; 0x91
 800bc70:	2200      	movs	r2, #0
 800bc72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bc84:	e0d3      	b.n	800be2e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b02      	cmp	r3, #2
 800bc8a:	d10c      	bne.n	800bca6 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc92:	4619      	mov	r1, r3
 800bc94:	693a      	ldr	r2, [r7, #16]
 800bc96:	2334      	movs	r3, #52	; 0x34
 800bc98:	fb01 f303 	mul.w	r3, r1, r3
 800bc9c:	4413      	add	r3, r2
 800bc9e:	3390      	adds	r3, #144	; 0x90
 800bca0:	2205      	movs	r2, #5
 800bca2:	701a      	strb	r2, [r3, #0]
            break;
 800bca4:	e0c3      	b.n	800be2e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	f040 80c0 	bne.w	800be2e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	2334      	movs	r3, #52	; 0x34
 800bcba:	fb01 f303 	mul.w	r3, r1, r3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3390      	adds	r3, #144	; 0x90
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bccc:	4619      	mov	r1, r3
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	2334      	movs	r3, #52	; 0x34
 800bcd2:	fb01 f303 	mul.w	r3, r1, r3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	3391      	adds	r3, #145	; 0x91
 800bcda:	2202      	movs	r2, #2
 800bcdc:	701a      	strb	r2, [r3, #0]
            break;
 800bcde:	e0a6      	b.n	800be2e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bce6:	b2d9      	uxtb	r1, r3
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2334      	movs	r3, #52	; 0x34
 800bcf2:	fb02 f303 	mul.w	r3, r2, r3
 800bcf6:	3398      	adds	r3, #152	; 0x98
 800bcf8:	693a      	ldr	r2, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fe96 	bl	800ca32 <USBH_MSC_SCSI_RequestSense>
 800bd06:	4603      	mov	r3, r0
 800bd08:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d145      	bne.n	800bd9c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd16:	4619      	mov	r1, r3
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	2334      	movs	r3, #52	; 0x34
 800bd1c:	fb01 f303 	mul.w	r3, r1, r3
 800bd20:	4413      	add	r3, r2
 800bd22:	339c      	adds	r3, #156	; 0x9c
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	2b06      	cmp	r3, #6
 800bd28:	d00c      	beq.n	800bd44 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd30:	4619      	mov	r1, r3
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	2334      	movs	r3, #52	; 0x34
 800bd36:	fb01 f303 	mul.w	r3, r1, r3
 800bd3a:	4413      	add	r3, r2
 800bd3c:	339c      	adds	r3, #156	; 0x9c
 800bd3e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d117      	bne.n	800bd74 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	f242 720f 	movw	r2, #9999	; 0x270f
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d80c      	bhi.n	800bd74 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd60:	4619      	mov	r1, r3
 800bd62:	693a      	ldr	r2, [r7, #16]
 800bd64:	2334      	movs	r3, #52	; 0x34
 800bd66:	fb01 f303 	mul.w	r3, r1, r3
 800bd6a:	4413      	add	r3, r2
 800bd6c:	3390      	adds	r3, #144	; 0x90
 800bd6e:	2202      	movs	r2, #2
 800bd70:	701a      	strb	r2, [r3, #0]
                  break;
 800bd72:	e05f      	b.n	800be34 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd7a:	4619      	mov	r1, r3
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	2334      	movs	r3, #52	; 0x34
 800bd80:	fb01 f303 	mul.w	r3, r1, r3
 800bd84:	4413      	add	r3, r2
 800bd86:	3390      	adds	r3, #144	; 0x90
 800bd88:	2201      	movs	r2, #1
 800bd8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd92:	3301      	adds	r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d10c      	bne.n	800bdbc <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bda8:	4619      	mov	r1, r3
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	2334      	movs	r3, #52	; 0x34
 800bdae:	fb01 f303 	mul.w	r3, r1, r3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	3390      	adds	r3, #144	; 0x90
 800bdb6:	2208      	movs	r2, #8
 800bdb8:	701a      	strb	r2, [r3, #0]
            break;
 800bdba:	e03a      	b.n	800be32 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d137      	bne.n	800be32 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdc8:	4619      	mov	r1, r3
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	2334      	movs	r3, #52	; 0x34
 800bdce:	fb01 f303 	mul.w	r3, r1, r3
 800bdd2:	4413      	add	r3, r2
 800bdd4:	3390      	adds	r3, #144	; 0x90
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bde0:	4619      	mov	r1, r3
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	2334      	movs	r3, #52	; 0x34
 800bde6:	fb01 f303 	mul.w	r3, r1, r3
 800bdea:	4413      	add	r3, r2
 800bdec:	3391      	adds	r3, #145	; 0x91
 800bdee:	2202      	movs	r2, #2
 800bdf0:	701a      	strb	r2, [r3, #0]
            break;
 800bdf2:	e01e      	b.n	800be32 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800be04:	e016      	b.n	800be34 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2200      	movs	r2, #0
 800be0a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	2201      	movs	r2, #1
 800be12:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be1a:	2102      	movs	r1, #2
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	4798      	blx	r3
      break;
 800be20:	e00c      	b.n	800be3c <USBH_MSC_Process+0x514>
            break;
 800be22:	bf00      	nop
 800be24:	e00a      	b.n	800be3c <USBH_MSC_Process+0x514>
            break;
 800be26:	bf00      	nop
 800be28:	e008      	b.n	800be3c <USBH_MSC_Process+0x514>
            break;
 800be2a:	bf00      	nop
 800be2c:	e006      	b.n	800be3c <USBH_MSC_Process+0x514>
            break;
 800be2e:	bf00      	nop
 800be30:	e004      	b.n	800be3c <USBH_MSC_Process+0x514>
            break;
 800be32:	bf00      	nop
      break;
 800be34:	e002      	b.n	800be3c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800be36:	2300      	movs	r3, #0
 800be38:	75fb      	strb	r3, [r7, #23]
      break;
 800be3a:	bf00      	nop
  }
  return error;
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop

0800be48 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b088      	sub	sp, #32
 800be62:	af02      	add	r7, sp, #8
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be70:	69db      	ldr	r3, [r3, #28]
 800be72:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800be74:	2301      	movs	r3, #1
 800be76:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800be78:	2301      	movs	r3, #1
 800be7a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800be7c:	78fb      	ldrb	r3, [r7, #3]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	2134      	movs	r1, #52	; 0x34
 800be82:	fb01 f303 	mul.w	r3, r1, r3
 800be86:	4413      	add	r3, r2
 800be88:	3390      	adds	r3, #144	; 0x90
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b07      	cmp	r3, #7
 800be8e:	d03c      	beq.n	800bf0a <USBH_MSC_RdWrProcess+0xac>
 800be90:	2b07      	cmp	r3, #7
 800be92:	f300 80a7 	bgt.w	800bfe4 <USBH_MSC_RdWrProcess+0x186>
 800be96:	2b05      	cmp	r3, #5
 800be98:	d06c      	beq.n	800bf74 <USBH_MSC_RdWrProcess+0x116>
 800be9a:	2b06      	cmp	r3, #6
 800be9c:	f040 80a2 	bne.w	800bfe4 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bea0:	78f9      	ldrb	r1, [r7, #3]
 800bea2:	2300      	movs	r3, #0
 800bea4:	9300      	str	r3, [sp, #0]
 800bea6:	2300      	movs	r3, #0
 800bea8:	2200      	movs	r2, #0
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fea5 	bl	800cbfa <USBH_MSC_SCSI_Read>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800beba:	78fb      	ldrb	r3, [r7, #3]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	2134      	movs	r1, #52	; 0x34
 800bec0:	fb01 f303 	mul.w	r3, r1, r3
 800bec4:	4413      	add	r3, r2
 800bec6:	3390      	adds	r3, #144	; 0x90
 800bec8:	2201      	movs	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bed0:	e08a      	b.n	800bfe8 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d109      	bne.n	800beec <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bed8:	78fb      	ldrb	r3, [r7, #3]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	2134      	movs	r1, #52	; 0x34
 800bede:	fb01 f303 	mul.w	r3, r1, r3
 800bee2:	4413      	add	r3, r2
 800bee4:	3390      	adds	r3, #144	; 0x90
 800bee6:	2205      	movs	r2, #5
 800bee8:	701a      	strb	r2, [r3, #0]
      break;
 800beea:	e07d      	b.n	800bfe8 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	2b04      	cmp	r3, #4
 800bef0:	d17a      	bne.n	800bfe8 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bef2:	78fb      	ldrb	r3, [r7, #3]
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	2134      	movs	r1, #52	; 0x34
 800bef8:	fb01 f303 	mul.w	r3, r1, r3
 800befc:	4413      	add	r3, r2
 800befe:	3390      	adds	r3, #144	; 0x90
 800bf00:	2208      	movs	r2, #8
 800bf02:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bf04:	2302      	movs	r3, #2
 800bf06:	75fb      	strb	r3, [r7, #23]
      break;
 800bf08:	e06e      	b.n	800bfe8 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800bf0a:	78f9      	ldrb	r1, [r7, #3]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2300      	movs	r3, #0
 800bf12:	2200      	movs	r2, #0
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fe05 	bl	800cb24 <USBH_MSC_SCSI_Write>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10b      	bne.n	800bf3c <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	2134      	movs	r1, #52	; 0x34
 800bf2a:	fb01 f303 	mul.w	r3, r1, r3
 800bf2e:	4413      	add	r3, r2
 800bf30:	3390      	adds	r3, #144	; 0x90
 800bf32:	2201      	movs	r2, #1
 800bf34:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf3a:	e057      	b.n	800bfec <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d109      	bne.n	800bf56 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bf42:	78fb      	ldrb	r3, [r7, #3]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	2134      	movs	r1, #52	; 0x34
 800bf48:	fb01 f303 	mul.w	r3, r1, r3
 800bf4c:	4413      	add	r3, r2
 800bf4e:	3390      	adds	r3, #144	; 0x90
 800bf50:	2205      	movs	r2, #5
 800bf52:	701a      	strb	r2, [r3, #0]
      break;
 800bf54:	e04a      	b.n	800bfec <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	2b04      	cmp	r3, #4
 800bf5a:	d147      	bne.n	800bfec <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bf5c:	78fb      	ldrb	r3, [r7, #3]
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	2134      	movs	r1, #52	; 0x34
 800bf62:	fb01 f303 	mul.w	r3, r1, r3
 800bf66:	4413      	add	r3, r2
 800bf68:	3390      	adds	r3, #144	; 0x90
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bf6e:	2302      	movs	r3, #2
 800bf70:	75fb      	strb	r3, [r7, #23]
      break;
 800bf72:	e03b      	b.n	800bfec <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	2234      	movs	r2, #52	; 0x34
 800bf78:	fb02 f303 	mul.w	r3, r2, r3
 800bf7c:	3398      	adds	r3, #152	; 0x98
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4413      	add	r3, r2
 800bf82:	1d1a      	adds	r2, r3, #4
 800bf84:	78fb      	ldrb	r3, [r7, #3]
 800bf86:	4619      	mov	r1, r3
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fd52 	bl	800ca32 <USBH_MSC_SCSI_RequestSense>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bf92:	7bfb      	ldrb	r3, [r7, #15]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d113      	bne.n	800bfc0 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf98:	78fb      	ldrb	r3, [r7, #3]
 800bf9a:	693a      	ldr	r2, [r7, #16]
 800bf9c:	2134      	movs	r1, #52	; 0x34
 800bf9e:	fb01 f303 	mul.w	r3, r1, r3
 800bfa2:	4413      	add	r3, r2
 800bfa4:	3390      	adds	r3, #144	; 0x90
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bfaa:	78fb      	ldrb	r3, [r7, #3]
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	2134      	movs	r1, #52	; 0x34
 800bfb0:	fb01 f303 	mul.w	r3, r1, r3
 800bfb4:	4413      	add	r3, r2
 800bfb6:	3391      	adds	r3, #145	; 0x91
 800bfb8:	2202      	movs	r2, #2
 800bfba:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bfc0:	7bfb      	ldrb	r3, [r7, #15]
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d014      	beq.n	800bff0 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d111      	bne.n	800bff0 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bfcc:	78fb      	ldrb	r3, [r7, #3]
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	2134      	movs	r1, #52	; 0x34
 800bfd2:	fb01 f303 	mul.w	r3, r1, r3
 800bfd6:	4413      	add	r3, r2
 800bfd8:	3390      	adds	r3, #144	; 0x90
 800bfda:	2208      	movs	r2, #8
 800bfdc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfe2:	e005      	b.n	800bff0 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800bfe4:	bf00      	nop
 800bfe6:	e004      	b.n	800bff2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bfe8:	bf00      	nop
 800bfea:	e002      	b.n	800bff2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bfec:	bf00      	nop
 800bfee:	e000      	b.n	800bff2 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bff0:	bf00      	nop

  }
  return error;
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3718      	adds	r7, #24
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b0b      	cmp	r3, #11
 800c01a:	d10c      	bne.n	800c036 <USBH_MSC_UnitIsReady+0x3a>
 800c01c:	78fb      	ldrb	r3, [r7, #3]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	2134      	movs	r1, #52	; 0x34
 800c022:	fb01 f303 	mul.w	r3, r1, r3
 800c026:	4413      	add	r3, r2
 800c028:	3391      	adds	r3, #145	; 0x91
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d102      	bne.n	800c036 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c030:	2301      	movs	r3, #1
 800c032:	73fb      	strb	r3, [r7, #15]
 800c034:	e001      	b.n	800c03a <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c036:	2300      	movs	r3, #0
 800c038:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	460b      	mov	r3, r1
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b0b      	cmp	r3, #11
 800c068:	d10d      	bne.n	800c086 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c06a:	7afb      	ldrb	r3, [r7, #11]
 800c06c:	2234      	movs	r2, #52	; 0x34
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
 800c072:	3390      	adds	r3, #144	; 0x90
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	4413      	add	r3, r2
 800c078:	2234      	movs	r2, #52	; 0x34
 800c07a:	4619      	mov	r1, r3
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f008 fc73 	bl	8014968 <memcpy>
    return USBH_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	e000      	b.n	800c088 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c086:	2302      	movs	r3, #2
  }
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3718      	adds	r7, #24
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b088      	sub	sp, #32
 800c094:	af02      	add	r7, sp, #8
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	460b      	mov	r3, r1
 800c09e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0a6:	69db      	ldr	r3, [r3, #28]
 800c0a8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00e      	beq.n	800c0d4 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c0bc:	2b0b      	cmp	r3, #11
 800c0be:	d109      	bne.n	800c0d4 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	2134      	movs	r1, #52	; 0x34
 800c0c6:	fb01 f303 	mul.w	r3, r1, r3
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3390      	adds	r3, #144	; 0x90
 800c0ce:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d001      	beq.n	800c0d8 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	e040      	b.n	800c15a <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	2206      	movs	r2, #6
 800c0dc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c0de:	7afb      	ldrb	r3, [r7, #11]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	2134      	movs	r1, #52	; 0x34
 800c0e4:	fb01 f303 	mul.w	r3, r1, r3
 800c0e8:	4413      	add	r3, r2
 800c0ea:	3390      	adds	r3, #144	; 0x90
 800c0ec:	2206      	movs	r2, #6
 800c0ee:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c0f0:	7afb      	ldrb	r3, [r7, #11]
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c0fa:	7af9      	ldrb	r1, [r7, #11]
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 fd78 	bl	800cbfa <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c110:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c112:	e016      	b.n	800c142 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	1ad2      	subs	r2, r2, r3
 800c11e:	6a3b      	ldr	r3, [r7, #32]
 800c120:	f242 7110 	movw	r1, #10000	; 0x2710
 800c124:	fb01 f303 	mul.w	r3, r1, r3
 800c128:	429a      	cmp	r2, r3
 800c12a:	d805      	bhi.n	800c138 <USBH_MSC_Read+0xa8>
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c132:	b2db      	uxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	d104      	bne.n	800c142 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	2201      	movs	r2, #1
 800c13c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c13e:	2302      	movs	r3, #2
 800c140:	e00b      	b.n	800c15a <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c142:	7afb      	ldrb	r3, [r7, #11]
 800c144:	4619      	mov	r1, r3
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fe89 	bl	800be5e <USBH_MSC_RdWrProcess>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d0e0      	beq.n	800c114 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2201      	movs	r2, #1
 800c156:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3718      	adds	r7, #24
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}

0800c162 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c162:	b580      	push	{r7, lr}
 800c164:	b088      	sub	sp, #32
 800c166:	af02      	add	r7, sp, #8
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	607a      	str	r2, [r7, #4]
 800c16c:	603b      	str	r3, [r7, #0]
 800c16e:	460b      	mov	r3, r1
 800c170:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c178:	69db      	ldr	r3, [r3, #28]
 800c17a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00e      	beq.n	800c1a6 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c18e:	2b0b      	cmp	r3, #11
 800c190:	d109      	bne.n	800c1a6 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c192:	7afb      	ldrb	r3, [r7, #11]
 800c194:	697a      	ldr	r2, [r7, #20]
 800c196:	2134      	movs	r1, #52	; 0x34
 800c198:	fb01 f303 	mul.w	r3, r1, r3
 800c19c:	4413      	add	r3, r2
 800c19e:	3390      	adds	r3, #144	; 0x90
 800c1a0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d001      	beq.n	800c1aa <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e040      	b.n	800c22c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2207      	movs	r2, #7
 800c1ae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c1b0:	7afb      	ldrb	r3, [r7, #11]
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	2134      	movs	r1, #52	; 0x34
 800c1b6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ba:	4413      	add	r3, r2
 800c1bc:	3390      	adds	r3, #144	; 0x90
 800c1be:	2207      	movs	r2, #7
 800c1c0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c1c2:	7afb      	ldrb	r3, [r7, #11]
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c1cc:	7af9      	ldrb	r1, [r7, #11]
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f000 fca4 	bl	800cb24 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1e2:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c1e4:	e016      	b.n	800c214 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	1ad2      	subs	r2, r2, r3
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	f242 7110 	movw	r1, #10000	; 0x2710
 800c1f6:	fb01 f303 	mul.w	r3, r1, r3
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d805      	bhi.n	800c20a <USBH_MSC_Write+0xa8>
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d104      	bne.n	800c214 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	2201      	movs	r2, #1
 800c20e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c210:	2302      	movs	r3, #2
 800c212:	e00b      	b.n	800c22c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c214:	7afb      	ldrb	r3, [r7, #11]
 800c216:	4619      	mov	r1, r3
 800c218:	68f8      	ldr	r0, [r7, #12]
 800c21a:	f7ff fe20 	bl	800be5e <USBH_MSC_RdWrProcess>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b01      	cmp	r3, #1
 800c222:	d0e0      	beq.n	800c1e6 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	2201      	movs	r2, #1
 800c228:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2221      	movs	r2, #33	; 0x21
 800c240:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	22ff      	movs	r2, #255	; 0xff
 800c246:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800c25a:	2200      	movs	r2, #0
 800c25c:	2100      	movs	r1, #0
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f001 fdab 	bl	800ddba <USBH_CtlReq>
 800c264:	4603      	mov	r3, r0
}
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}

0800c26e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	22a1      	movs	r2, #161	; 0xa1
 800c27c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	22fe      	movs	r2, #254	; 0xfe
 800c282:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2200      	movs	r2, #0
 800c288:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c296:	2201      	movs	r2, #1
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fd8d 	bl	800ddba <USBH_CtlReq>
 800c2a0:	4603      	mov	r3, r0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
	...

0800c2ac <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2ba:	69db      	ldr	r3, [r3, #28]
 800c2bc:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <USBH_MSC_BOT_Init+0x3c>)
 800c2c2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	4a09      	ldr	r2, [pc, #36]	; (800c2ec <USBH_MSC_BOT_Init+0x40>)
 800c2c8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	43425355 	.word	0x43425355
 800c2ec:	20304050 	.word	0x20304050

0800c2f0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b088      	sub	sp, #32
 800c2f4:	af02      	add	r7, sp, #8
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c300:	2301      	movs	r3, #1
 800c302:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c304:	2301      	movs	r3, #1
 800c306:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c308:	2300      	movs	r3, #0
 800c30a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c312:	69db      	ldr	r3, [r3, #28]
 800c314:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c320:	3b01      	subs	r3, #1
 800c322:	2b0a      	cmp	r3, #10
 800c324:	f200 819e 	bhi.w	800c664 <USBH_MSC_BOT_Process+0x374>
 800c328:	a201      	add	r2, pc, #4	; (adr r2, 800c330 <USBH_MSC_BOT_Process+0x40>)
 800c32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c32e:	bf00      	nop
 800c330:	0800c35d 	.word	0x0800c35d
 800c334:	0800c385 	.word	0x0800c385
 800c338:	0800c3ef 	.word	0x0800c3ef
 800c33c:	0800c40d 	.word	0x0800c40d
 800c340:	0800c491 	.word	0x0800c491
 800c344:	0800c4b3 	.word	0x0800c4b3
 800c348:	0800c54b 	.word	0x0800c54b
 800c34c:	0800c567 	.word	0x0800c567
 800c350:	0800c5b9 	.word	0x0800c5b9
 800c354:	0800c5e9 	.word	0x0800c5e9
 800c358:	0800c64b 	.word	0x0800c64b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	78fa      	ldrb	r2, [r7, #3]
 800c360:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2202      	movs	r2, #2
 800c368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	795b      	ldrb	r3, [r3, #5]
 800c376:	2201      	movs	r2, #1
 800c378:	9200      	str	r2, [sp, #0]
 800c37a:	221f      	movs	r2, #31
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 ff2a 	bl	800e1d6 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c382:	e17e      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	795b      	ldrb	r3, [r3, #5]
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f005 fd08 	bl	8011da0 <USBH_LL_GetURBState>
 800c390:	4603      	mov	r3, r0
 800c392:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c394:	7d3b      	ldrb	r3, [r7, #20]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d118      	bne.n	800c3cc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00f      	beq.n	800c3c2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c3a8:	b25b      	sxtb	r3, r3
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	da04      	bge.n	800c3b8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	2203      	movs	r2, #3
 800c3b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3b6:	e157      	b.n	800c668 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3c0:	e152      	b.n	800c668 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	2207      	movs	r2, #7
 800c3c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3ca:	e14d      	b.n	800c668 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3cc:	7d3b      	ldrb	r3, [r7, #20]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d104      	bne.n	800c3dc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3da:	e145      	b.n	800c668 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c3dc:	7d3b      	ldrb	r3, [r7, #20]
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	f040 8142 	bne.w	800c668 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	220a      	movs	r2, #10
 800c3e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3ec:	e13c      	b.n	800c668 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	895a      	ldrh	r2, [r3, #10]
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	791b      	ldrb	r3, [r3, #4]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f001 ff0f 	bl	800e220 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	2204      	movs	r2, #4
 800c406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c40a:	e13a      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	791b      	ldrb	r3, [r3, #4]
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f005 fcc4 	bl	8011da0 <USBH_LL_GetURBState>
 800c418:	4603      	mov	r3, r0
 800c41a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c41c:	7d3b      	ldrb	r3, [r7, #20]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d12d      	bne.n	800c47e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	8952      	ldrh	r2, [r2, #10]
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d910      	bls.n	800c450 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c434:	693a      	ldr	r2, [r7, #16]
 800c436:	8952      	ldrh	r2, [r2, #10]
 800c438:	441a      	add	r2, r3
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	8952      	ldrh	r2, [r2, #10]
 800c448:	1a9a      	subs	r2, r3, r2
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c44e:	e002      	b.n	800c456 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2200      	movs	r2, #0
 800c454:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00a      	beq.n	800c474 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	895a      	ldrh	r2, [r3, #10]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	791b      	ldrb	r3, [r3, #4]
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 fed7 	bl	800e220 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c472:	e0fb      	b.n	800c66c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	2207      	movs	r2, #7
 800c478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c47c:	e0f6      	b.n	800c66c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c47e:	7d3b      	ldrb	r3, [r7, #20]
 800c480:	2b05      	cmp	r3, #5
 800c482:	f040 80f3 	bne.w	800c66c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2209      	movs	r2, #9
 800c48a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c48e:	e0ed      	b.n	800c66c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	891a      	ldrh	r2, [r3, #8]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	795b      	ldrb	r3, [r3, #5]
 800c49e:	2001      	movs	r0, #1
 800c4a0:	9000      	str	r0, [sp, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f001 fe97 	bl	800e1d6 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	2206      	movs	r2, #6
 800c4ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c4b0:	e0e7      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	795b      	ldrb	r3, [r3, #5]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f005 fc71 	bl	8011da0 <USBH_LL_GetURBState>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c4c2:	7d3b      	ldrb	r3, [r7, #20]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d12f      	bne.n	800c528 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	8912      	ldrh	r2, [r2, #8]
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d910      	bls.n	800c4f6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	8912      	ldrh	r2, [r2, #8]
 800c4de:	441a      	add	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4ea:	693a      	ldr	r2, [r7, #16]
 800c4ec:	8912      	ldrh	r2, [r2, #8]
 800c4ee:	1a9a      	subs	r2, r3, r2
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	65da      	str	r2, [r3, #92]	; 0x5c
 800c4f4:	e002      	b.n	800c4fc <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00c      	beq.n	800c51e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c504:	693b      	ldr	r3, [r7, #16]
 800c506:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	891a      	ldrh	r2, [r3, #8]
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	795b      	ldrb	r3, [r3, #5]
 800c512:	2001      	movs	r0, #1
 800c514:	9000      	str	r0, [sp, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 fe5d 	bl	800e1d6 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c51c:	e0a8      	b.n	800c670 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	2207      	movs	r2, #7
 800c522:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c526:	e0a3      	b.n	800c670 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c528:	7d3b      	ldrb	r3, [r7, #20]
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d104      	bne.n	800c538 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2205      	movs	r2, #5
 800c532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c536:	e09b      	b.n	800c670 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c538:	7d3b      	ldrb	r3, [r7, #20]
 800c53a:	2b05      	cmp	r3, #5
 800c53c:	f040 8098 	bne.w	800c670 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	220a      	movs	r2, #10
 800c544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c548:	e092      	b.n	800c670 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	791b      	ldrb	r3, [r3, #4]
 800c554:	220d      	movs	r2, #13
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f001 fe62 	bl	800e220 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	2208      	movs	r2, #8
 800c560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c564:	e08d      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	791b      	ldrb	r3, [r3, #4]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f005 fc17 	bl	8011da0 <USBH_LL_GetURBState>
 800c572:	4603      	mov	r3, r0
 800c574:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c576:	7d3b      	ldrb	r3, [r7, #20]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d115      	bne.n	800c5a8 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f8a9 	bl	800c6e4 <USBH_MSC_DecodeCSW>
 800c592:	4603      	mov	r3, r0
 800c594:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c596:	7d7b      	ldrb	r3, [r7, #21]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d102      	bne.n	800c5a2 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c5a0:	e068      	b.n	800c674 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	75fb      	strb	r3, [r7, #23]
      break;
 800c5a6:	e065      	b.n	800c674 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c5a8:	7d3b      	ldrb	r3, [r7, #20]
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d162      	bne.n	800c674 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2209      	movs	r2, #9
 800c5b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5b6:	e05d      	b.n	800c674 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c5b8:	78fb      	ldrb	r3, [r7, #3]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f864 	bl	800c68c <USBH_MSC_BOT_Abort>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c5c8:	7dbb      	ldrb	r3, [r7, #22]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2207      	movs	r2, #7
 800c5d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c5d6:	e04f      	b.n	800c678 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c5d8:	7dbb      	ldrb	r3, [r7, #22]
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d14c      	bne.n	800c678 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	220b      	movs	r2, #11
 800c5e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5e6:	e047      	b.n	800c678 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f84c 	bl	800c68c <USBH_MSC_BOT_Abort>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c5f8:	7dbb      	ldrb	r3, [r7, #22]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d11d      	bne.n	800c63a <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	795b      	ldrb	r3, [r3, #5]
 800c602:	4619      	mov	r1, r3
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f005 fc28 	bl	8011e5a <USBH_LL_GetToggle>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	7959      	ldrb	r1, [r3, #5]
 800c612:	7bfb      	ldrb	r3, [r7, #15]
 800c614:	f1c3 0301 	rsb	r3, r3, #1
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	461a      	mov	r2, r3
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f005 fbe9 	bl	8011df4 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	791b      	ldrb	r3, [r3, #4]
 800c626:	2200      	movs	r2, #0
 800c628:	4619      	mov	r1, r3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f005 fbe2 	bl	8011df4 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	2209      	movs	r2, #9
 800c634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c638:	e020      	b.n	800c67c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c63a:	7dbb      	ldrb	r3, [r7, #22]
 800c63c:	2b04      	cmp	r3, #4
 800c63e:	d11d      	bne.n	800c67c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	220b      	movs	r2, #11
 800c644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c648:	e018      	b.n	800c67c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff fdf2 	bl	800c234 <USBH_MSC_BOT_REQ_Reset>
 800c650:	4603      	mov	r3, r0
 800c652:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c654:	7dfb      	ldrb	r3, [r7, #23]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d112      	bne.n	800c680 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c662:	e00d      	b.n	800c680 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c664:	bf00      	nop
 800c666:	e00c      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c668:	bf00      	nop
 800c66a:	e00a      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c66c:	bf00      	nop
 800c66e:	e008      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c670:	bf00      	nop
 800c672:	e006      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c674:	bf00      	nop
 800c676:	e004      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c678:	bf00      	nop
 800c67a:	e002      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <USBH_MSC_BOT_Process+0x392>
      break;
 800c680:	bf00      	nop
  }
  return status;
 800c682:	7dfb      	ldrb	r3, [r7, #23]
}
 800c684:	4618      	mov	r0, r3
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}

0800c68c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
 800c698:	4613      	mov	r3, r2
 800c69a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c69c:	2302      	movs	r3, #2
 800c69e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6a6:	69db      	ldr	r3, [r3, #28]
 800c6a8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c6aa:	78bb      	ldrb	r3, [r7, #2]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <USBH_MSC_BOT_Abort+0x2a>
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d009      	beq.n	800c6c8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c6b4:	e011      	b.n	800c6da <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	79db      	ldrb	r3, [r3, #7]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f001 f99c 	bl	800d9fa <USBH_ClrFeature>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6c6:	e008      	b.n	800c6da <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	799b      	ldrb	r3, [r3, #6]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f001 f993 	bl	800d9fa <USBH_ClrFeature>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c6d8:	bf00      	nop
  }
  return status;
 800c6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	791b      	ldrb	r3, [r3, #4]
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f005 fabb 	bl	8011c7c <USBH_LL_GetLastXferSize>
 800c706:	4603      	mov	r3, r0
 800c708:	2b0d      	cmp	r3, #13
 800c70a:	d002      	beq.n	800c712 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c70c:	2302      	movs	r3, #2
 800c70e:	73fb      	strb	r3, [r7, #15]
 800c710:	e024      	b.n	800c75c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c716:	4a14      	ldr	r2, [pc, #80]	; (800c768 <USBH_MSC_DecodeCSW+0x84>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d11d      	bne.n	800c758 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c724:	429a      	cmp	r2, r3
 800c726:	d119      	bne.n	800c75c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d102      	bne.n	800c738 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c732:	2300      	movs	r3, #0
 800c734:	73fb      	strb	r3, [r7, #15]
 800c736:	e011      	b.n	800c75c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d102      	bne.n	800c748 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c742:	2301      	movs	r3, #1
 800c744:	73fb      	strb	r3, [r7, #15]
 800c746:	e009      	b.n	800c75c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c74e:	2b02      	cmp	r3, #2
 800c750:	d104      	bne.n	800c75c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c752:	2302      	movs	r3, #2
 800c754:	73fb      	strb	r3, [r7, #15]
 800c756:	e001      	b.n	800c75c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c758:	2302      	movs	r3, #2
 800c75a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
 800c766:	bf00      	nop
 800c768:	53425355 	.word	0x53425355

0800c76c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	460b      	mov	r3, r1
 800c776:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c778:	2302      	movs	r3, #2
 800c77a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d002      	beq.n	800c796 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c790:	2b02      	cmp	r3, #2
 800c792:	d021      	beq.n	800c7d8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c794:	e028      	b.n	800c7e8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	2200      	movs	r2, #0
 800c79a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	220a      	movs	r2, #10
 800c7a8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	3363      	adds	r3, #99	; 0x63
 800c7b0:	2210      	movs	r2, #16
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f008 f8e5 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2202      	movs	r2, #2
 800c7ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7d6:	e007      	b.n	800c7e8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c7d8:	78fb      	ldrb	r3, [r7, #3]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff fd87 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e6:	bf00      	nop
  }

  return error;
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b086      	sub	sp, #24
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	607a      	str	r2, [r7, #4]
 800c7fe:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c800:	2301      	movs	r3, #1
 800c802:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c80a:	69db      	ldr	r3, [r3, #28]
 800c80c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c814:	2b01      	cmp	r3, #1
 800c816:	d002      	beq.n	800c81e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d027      	beq.n	800c86c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c81c:	e05f      	b.n	800c8de <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2208      	movs	r2, #8
 800c822:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	2280      	movs	r2, #128	; 0x80
 800c828:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	220a      	movs	r2, #10
 800c830:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	3363      	adds	r3, #99	; 0x63
 800c838:	2210      	movs	r2, #16
 800c83a:	2100      	movs	r1, #0
 800c83c:	4618      	mov	r0, r3
 800c83e:	f008 f8a1 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	2225      	movs	r2, #37	; 0x25
 800c846:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2202      	movs	r2, #2
 800c856:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	f103 0210 	add.w	r2, r3, #16
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c866:	2301      	movs	r3, #1
 800c868:	75fb      	strb	r3, [r7, #23]
      break;
 800c86a:	e038      	b.n	800c8de <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c86c:	7afb      	ldrb	r3, [r7, #11]
 800c86e:	4619      	mov	r1, r3
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fd3d 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800c876:	4603      	mov	r3, r0
 800c878:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d12d      	bne.n	800c8dc <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c886:	3303      	adds	r3, #3
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c892:	3302      	adds	r3, #2
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	021b      	lsls	r3, r3, #8
 800c898:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c8a6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	061b      	lsls	r3, r3, #24
 800c8b2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8be:	3307      	adds	r3, #7
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ca:	3306      	adds	r3, #6
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	021b      	lsls	r3, r3, #8
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	809a      	strh	r2, [r3, #4]
      break;
 800c8dc:	bf00      	nop
  }

  return error;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c8f6:	2302      	movs	r3, #2
 800c8f8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c900:	69db      	ldr	r3, [r3, #28]
 800c902:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d002      	beq.n	800c914 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d03d      	beq.n	800c98e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c912:	e089      	b.n	800ca28 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	2224      	movs	r2, #36	; 0x24
 800c918:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2280      	movs	r2, #128	; 0x80
 800c91e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	220a      	movs	r2, #10
 800c926:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	3363      	adds	r3, #99	; 0x63
 800c92e:	220a      	movs	r2, #10
 800c930:	2100      	movs	r1, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f008 f826 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2212      	movs	r2, #18
 800c93c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	015b      	lsls	r3, r3, #5
 800c944:	b2da      	uxtb	r2, r3
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	2200      	movs	r2, #0
 800c958:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	2224      	movs	r2, #36	; 0x24
 800c960:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f103 0210 	add.w	r2, r3, #16
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c988:	2301      	movs	r3, #1
 800c98a:	75fb      	strb	r3, [r7, #23]
      break;
 800c98c:	e04c      	b.n	800ca28 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	4619      	mov	r1, r3
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f7ff fcac 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800c998:	4603      	mov	r3, r0
 800c99a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c99c:	7dfb      	ldrb	r3, [r7, #23]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d141      	bne.n	800ca26 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c9a2:	2222      	movs	r2, #34	; 0x22
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f007 ffec 	bl	8014984 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	f003 031f 	and.w	r3, r3, #31
 800c9b8:	b2da      	uxtb	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	095b      	lsrs	r3, r3, #5
 800c9c8:	b2da      	uxtb	r2, r3
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	da03      	bge.n	800c9e6 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	709a      	strb	r2, [r3, #2]
 800c9e4:	e002      	b.n	800c9ec <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	1cd8      	adds	r0, r3, #3
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	2208      	movs	r2, #8
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f007 ffb4 	bl	8014968 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f103 000c 	add.w	r0, r3, #12
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca0c:	3310      	adds	r3, #16
 800ca0e:	2210      	movs	r2, #16
 800ca10:	4619      	mov	r1, r3
 800ca12:	f007 ffa9 	bl	8014968 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	331d      	adds	r3, #29
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ca20:	3220      	adds	r2, #32
 800ca22:	6812      	ldr	r2, [r2, #0]
 800ca24:	601a      	str	r2, [r3, #0]
      break;
 800ca26:	bf00      	nop
  }

  return error;
 800ca28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b086      	sub	sp, #24
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60f8      	str	r0, [r7, #12]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	607a      	str	r2, [r7, #4]
 800ca3e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ca40:	2302      	movs	r3, #2
 800ca42:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca4a:	69db      	ldr	r3, [r3, #28]
 800ca4c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d002      	beq.n	800ca5e <USBH_MSC_SCSI_RequestSense+0x2c>
 800ca58:	2b02      	cmp	r3, #2
 800ca5a:	d03d      	beq.n	800cad8 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ca5c:	e05d      	b.n	800cb1a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	220e      	movs	r2, #14
 800ca62:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	2280      	movs	r2, #128	; 0x80
 800ca68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	220a      	movs	r2, #10
 800ca70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	3363      	adds	r3, #99	; 0x63
 800ca78:	2210      	movs	r2, #16
 800ca7a:	2100      	movs	r1, #0
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f007 ff81 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	2203      	movs	r2, #3
 800ca86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	015b      	lsls	r3, r3, #5
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	220e      	movs	r2, #14
 800caaa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	2201      	movs	r2, #1
 800caba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	2202      	movs	r2, #2
 800cac2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	f103 0210 	add.w	r2, r3, #16
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cad2:	2301      	movs	r3, #1
 800cad4:	75fb      	strb	r3, [r7, #23]
      break;
 800cad6:	e020      	b.n	800cb1a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cad8:	7afb      	ldrb	r3, [r7, #11]
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff fc07 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800cae2:	4603      	mov	r3, r0
 800cae4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d115      	bne.n	800cb18 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf2:	3302      	adds	r3, #2
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	f003 030f 	and.w	r3, r3, #15
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb06:	7b1a      	ldrb	r2, [r3, #12]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb12:	7b5a      	ldrb	r2, [r3, #13]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	709a      	strb	r2, [r3, #2]
      break;
 800cb18:	bf00      	nop
  }

  return error;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	607a      	str	r2, [r7, #4]
 800cb2e:	603b      	str	r3, [r7, #0]
 800cb30:	460b      	mov	r3, r1
 800cb32:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cb34:	2302      	movs	r3, #2
 800cb36:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3e:	69db      	ldr	r3, [r3, #28]
 800cb40:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d002      	beq.n	800cb52 <USBH_MSC_SCSI_Write+0x2e>
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d047      	beq.n	800cbe0 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cb50:	e04e      	b.n	800cbf0 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cb58:	461a      	mov	r2, r3
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	fb03 f202 	mul.w	r2, r3, r2
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	220a      	movs	r2, #10
 800cb70:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	3363      	adds	r3, #99	; 0x63
 800cb78:	2210      	movs	r2, #16
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f007 ff01 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	222a      	movs	r2, #42	; 0x2a
 800cb86:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cb92:	79ba      	ldrb	r2, [r7, #6]
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cb9a:	797a      	ldrb	r2, [r7, #5]
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cba2:	1d3b      	adds	r3, r7, #4
 800cba4:	781a      	ldrb	r2, [r3, #0]
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cbac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cbb6:	f107 0320 	add.w	r3, r7, #32
 800cbba:	781a      	ldrb	r2, [r3, #0]
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	2202      	movs	r2, #2
 800cbce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	75fb      	strb	r3, [r7, #23]
      break;
 800cbde:	e007      	b.n	800cbf0 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cbe0:	7afb      	ldrb	r3, [r7, #11]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f7ff fb83 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800cbea:	4603      	mov	r3, r0
 800cbec:	75fb      	strb	r3, [r7, #23]
      break;
 800cbee:	bf00      	nop
  }

  return error;
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3718      	adds	r7, #24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b086      	sub	sp, #24
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	60f8      	str	r0, [r7, #12]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
 800cc06:	460b      	mov	r3, r1
 800cc08:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d002      	beq.n	800cc28 <USBH_MSC_SCSI_Read+0x2e>
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d047      	beq.n	800ccb6 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cc26:	e04e      	b.n	800ccc6 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cc2e:	461a      	mov	r2, r3
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	fb03 f202 	mul.w	r2, r3, r2
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2280      	movs	r2, #128	; 0x80
 800cc3e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	220a      	movs	r2, #10
 800cc46:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	3363      	adds	r3, #99	; 0x63
 800cc4e:	2210      	movs	r2, #16
 800cc50:	2100      	movs	r1, #0
 800cc52:	4618      	mov	r0, r3
 800cc54:	f007 fe96 	bl	8014984 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2228      	movs	r2, #40	; 0x28
 800cc5c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cc60:	79fa      	ldrb	r2, [r7, #7]
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cc68:	79ba      	ldrb	r2, [r7, #6]
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cc70:	797a      	ldrb	r2, [r7, #5]
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cc78:	1d3b      	adds	r3, r7, #4
 800cc7a:	781a      	ldrb	r2, [r3, #0]
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cc82:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cc8c:	f107 0320 	add.w	r3, r7, #32
 800cc90:	781a      	ldrb	r2, [r3, #0]
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	2202      	movs	r2, #2
 800cca4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]
      break;
 800ccb4:	e007      	b.n	800ccc6 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ccb6:	7afb      	ldrb	r3, [r7, #11]
 800ccb8:	4619      	mov	r1, r3
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f7ff fb18 	bl	800c2f0 <USBH_MSC_BOT_Process>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	75fb      	strb	r3, [r7, #23]
      break;
 800ccc4:	bf00      	nop
  }

  return error;
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cce4:	2302      	movs	r3, #2
 800cce6:	e029      	b.n	800cd3c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	79fa      	ldrb	r2, [r7, #7]
 800ccec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f000 f81f 	bl	800cd44 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	68ba      	ldr	r2, [r7, #8]
 800cd30:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f004 fee3 	bl	8011b00 <USBH_LL_Init>

  return USBH_OK;
 800cd3a:	2300      	movs	r3, #0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3710      	adds	r7, #16
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b085      	sub	sp, #20
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd50:	2300      	movs	r3, #0
 800cd52:	60fb      	str	r3, [r7, #12]
 800cd54:	e009      	b.n	800cd6a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	33e0      	adds	r3, #224	; 0xe0
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	2200      	movs	r2, #0
 800cd62:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	3301      	adds	r3, #1
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2b0e      	cmp	r3, #14
 800cd6e:	d9f2      	bls.n	800cd56 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd70:	2300      	movs	r3, #0
 800cd72:	60fb      	str	r3, [r7, #12]
 800cd74:	e009      	b.n	800cd8a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	3301      	adds	r3, #1
 800cd88:	60fb      	str	r3, [r7, #12]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd90:	d3f1      	bcc.n	800cd76 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2240      	movs	r2, #64	; 0x40
 800cdb6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3714      	adds	r7, #20
 800cde4:	46bd      	mov	sp, r7
 800cde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdea:	4770      	bx	lr

0800cdec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b085      	sub	sp, #20
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d016      	beq.n	800ce2e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10e      	bne.n	800ce28 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ce10:	1c59      	adds	r1, r3, #1
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	33de      	adds	r3, #222	; 0xde
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73fb      	strb	r3, [r7, #15]
 800ce26:	e004      	b.n	800ce32 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ce28:	2302      	movs	r3, #2
 800ce2a:	73fb      	strb	r3, [r7, #15]
 800ce2c:	e001      	b.n	800ce32 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ce2e:	2302      	movs	r3, #2
 800ce30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3714      	adds	r7, #20
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3e:	4770      	bx	lr

0800ce40 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b085      	sub	sp, #20
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ce56:	78fa      	ldrb	r2, [r7, #3]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d204      	bcs.n	800ce66 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	78fa      	ldrb	r2, [r7, #3]
 800ce60:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ce64:	e001      	b.n	800ce6a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ce66:	2302      	movs	r3, #2
 800ce68:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3714      	adds	r7, #20
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b087      	sub	sp, #28
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	4608      	mov	r0, r1
 800ce82:	4611      	mov	r1, r2
 800ce84:	461a      	mov	r2, r3
 800ce86:	4603      	mov	r3, r0
 800ce88:	70fb      	strb	r3, [r7, #3]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70bb      	strb	r3, [r7, #2]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ce92:	2300      	movs	r3, #0
 800ce94:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cea0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cea2:	e025      	b.n	800cef0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cea4:	7dfb      	ldrb	r3, [r7, #23]
 800cea6:	221a      	movs	r2, #26
 800cea8:	fb02 f303 	mul.w	r3, r2, r3
 800ceac:	3308      	adds	r3, #8
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	3302      	adds	r3, #2
 800ceb4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	795b      	ldrb	r3, [r3, #5]
 800ceba:	78fa      	ldrb	r2, [r7, #3]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d002      	beq.n	800cec6 <USBH_FindInterface+0x4e>
 800cec0:	78fb      	ldrb	r3, [r7, #3]
 800cec2:	2bff      	cmp	r3, #255	; 0xff
 800cec4:	d111      	bne.n	800ceea <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ceca:	78ba      	ldrb	r2, [r7, #2]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d002      	beq.n	800ced6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ced0:	78bb      	ldrb	r3, [r7, #2]
 800ced2:	2bff      	cmp	r3, #255	; 0xff
 800ced4:	d109      	bne.n	800ceea <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ceda:	787a      	ldrb	r2, [r7, #1]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d002      	beq.n	800cee6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cee0:	787b      	ldrb	r3, [r7, #1]
 800cee2:	2bff      	cmp	r3, #255	; 0xff
 800cee4:	d101      	bne.n	800ceea <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	e006      	b.n	800cef8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	3301      	adds	r3, #1
 800ceee:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d9d6      	bls.n	800cea4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cef6:	23ff      	movs	r3, #255	; 0xff
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f004 fe3d 	bl	8011b8c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cf12:	2101      	movs	r1, #1
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f004 ff56 	bl	8011dc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b088      	sub	sp, #32
 800cf28:	af04      	add	r7, sp, #16
 800cf2a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cf2c:	2302      	movs	r3, #2
 800cf2e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cf30:	2300      	movs	r3, #0
 800cf32:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d102      	bne.n	800cf46 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2203      	movs	r2, #3
 800cf44:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2b0b      	cmp	r3, #11
 800cf4e:	f200 81b3 	bhi.w	800d2b8 <USBH_Process+0x394>
 800cf52:	a201      	add	r2, pc, #4	; (adr r2, 800cf58 <USBH_Process+0x34>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf89 	.word	0x0800cf89
 800cf5c:	0800cfbb 	.word	0x0800cfbb
 800cf60:	0800d023 	.word	0x0800d023
 800cf64:	0800d253 	.word	0x0800d253
 800cf68:	0800d2b9 	.word	0x0800d2b9
 800cf6c:	0800d0c7 	.word	0x0800d0c7
 800cf70:	0800d1f9 	.word	0x0800d1f9
 800cf74:	0800d0fd 	.word	0x0800d0fd
 800cf78:	0800d11d 	.word	0x0800d11d
 800cf7c:	0800d13d 	.word	0x0800d13d
 800cf80:	0800d16b 	.word	0x0800d16b
 800cf84:	0800d23b 	.word	0x0800d23b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f000 8193 	beq.w	800d2bc <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cf9c:	20c8      	movs	r0, #200	; 0xc8
 800cf9e:	f004 ff8f 	bl	8011ec0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f004 fe4f 	bl	8011c46 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cfb8:	e180      	b.n	800d2bc <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d107      	bne.n	800cfd4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2202      	movs	r2, #2
 800cfd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cfd2:	e182      	b.n	800d2da <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cfda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfde:	d914      	bls.n	800d00a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d903      	bls.n	800d002 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	220d      	movs	r2, #13
 800cffe:	701a      	strb	r2, [r3, #0]
      break;
 800d000:	e16b      	b.n	800d2da <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	701a      	strb	r2, [r3, #0]
      break;
 800d008:	e167      	b.n	800d2da <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d010:	f103 020a 	add.w	r2, r3, #10
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d01a:	200a      	movs	r0, #10
 800d01c:	f004 ff50 	bl	8011ec0 <USBH_Delay>
      break;
 800d020:	e15b      	b.n	800d2da <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d005      	beq.n	800d038 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d032:	2104      	movs	r1, #4
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d038:	2064      	movs	r0, #100	; 0x64
 800d03a:	f004 ff41 	bl	8011ec0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f004 fdda 	bl	8011bf8 <USBH_LL_GetSpeed>
 800d044:	4603      	mov	r3, r0
 800d046:	461a      	mov	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2205      	movs	r2, #5
 800d052:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d054:	2100      	movs	r1, #0
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f001 f92f 	bl	800e2ba <USBH_AllocPipe>
 800d05c:	4603      	mov	r3, r0
 800d05e:	461a      	mov	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d064:	2180      	movs	r1, #128	; 0x80
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f001 f927 	bl	800e2ba <USBH_AllocPipe>
 800d06c:	4603      	mov	r3, r0
 800d06e:	461a      	mov	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	7919      	ldrb	r1, [r3, #4]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d088:	b292      	uxth	r2, r2
 800d08a:	9202      	str	r2, [sp, #8]
 800d08c:	2200      	movs	r2, #0
 800d08e:	9201      	str	r2, [sp, #4]
 800d090:	9300      	str	r3, [sp, #0]
 800d092:	4603      	mov	r3, r0
 800d094:	2280      	movs	r2, #128	; 0x80
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f001 f8e0 	bl	800e25c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	7959      	ldrb	r1, [r3, #5]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d0b0:	b292      	uxth	r2, r2
 800d0b2:	9202      	str	r2, [sp, #8]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	9201      	str	r2, [sp, #4]
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2200      	movs	r2, #0
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 f8cc 	bl	800e25c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d0c4:	e109      	b.n	800d2da <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f90c 	bl	800d2e4 <USBH_HandleEnum>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d0d0:	7bbb      	ldrb	r3, [r7, #14]
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	f040 80f3 	bne.w	800d2c0 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d103      	bne.n	800d0f4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2208      	movs	r2, #8
 800d0f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d0f2:	e0e5      	b.n	800d2c0 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2207      	movs	r2, #7
 800d0f8:	701a      	strb	r2, [r3, #0]
      break;
 800d0fa:	e0e1      	b.n	800d2c0 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 80de 	beq.w	800d2c4 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d10e:	2101      	movs	r1, #1
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2208      	movs	r2, #8
 800d118:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d11a:	e0d3      	b.n	800d2c4 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d122:	b29b      	uxth	r3, r3
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fc20 	bl	800d96c <USBH_SetCfg>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f040 80ca 	bne.w	800d2c8 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2209      	movs	r2, #9
 800d138:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d13a:	e0c5      	b.n	800d2c8 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00b      	beq.n	800d162 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d14a:	2101      	movs	r1, #1
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fc30 	bl	800d9b2 <USBH_SetFeature>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	f040 80b9 	bne.w	800d2cc <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	220a      	movs	r2, #10
 800d15e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d160:	e0b4      	b.n	800d2cc <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	220a      	movs	r2, #10
 800d166:	701a      	strb	r2, [r3, #0]
      break;
 800d168:	e0b0      	b.n	800d2cc <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 80ad 	beq.w	800d2d0 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d17e:	2300      	movs	r3, #0
 800d180:	73fb      	strb	r3, [r7, #15]
 800d182:	e016      	b.n	800d1b2 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d184:	7bfa      	ldrb	r2, [r7, #15]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	32de      	adds	r2, #222	; 0xde
 800d18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18e:	791a      	ldrb	r2, [r3, #4]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d196:	429a      	cmp	r2, r3
 800d198:	d108      	bne.n	800d1ac <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	32de      	adds	r2, #222	; 0xde
 800d1a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d1aa:	e005      	b.n	800d1b8 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	73fb      	strb	r3, [r7, #15]
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d0e5      	beq.n	800d184 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d016      	beq.n	800d1f0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	4798      	blx	r3
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d109      	bne.n	800d1e8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2206      	movs	r2, #6
 800d1d8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1e0:	2103      	movs	r1, #3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d1e6:	e073      	b.n	800d2d0 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	220d      	movs	r2, #13
 800d1ec:	701a      	strb	r2, [r3, #0]
      break;
 800d1ee:	e06f      	b.n	800d2d0 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	220d      	movs	r2, #13
 800d1f4:	701a      	strb	r2, [r3, #0]
      break;
 800d1f6:	e06b      	b.n	800d2d0 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d017      	beq.n	800d232 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	4798      	blx	r3
 800d20e:	4603      	mov	r3, r0
 800d210:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d212:	7bbb      	ldrb	r3, [r7, #14]
 800d214:	b2db      	uxtb	r3, r3
 800d216:	2b00      	cmp	r3, #0
 800d218:	d103      	bne.n	800d222 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	220b      	movs	r2, #11
 800d21e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d220:	e058      	b.n	800d2d4 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800d222:	7bbb      	ldrb	r3, [r7, #14]
 800d224:	b2db      	uxtb	r3, r3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d154      	bne.n	800d2d4 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	220d      	movs	r2, #13
 800d22e:	701a      	strb	r2, [r3, #0]
      break;
 800d230:	e050      	b.n	800d2d4 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	220d      	movs	r2, #13
 800d236:	701a      	strb	r2, [r3, #0]
      break;
 800d238:	e04c      	b.n	800d2d4 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d240:	2b00      	cmp	r3, #0
 800d242:	d049      	beq.n	800d2d8 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	4798      	blx	r3
      }
      break;
 800d250:	e042      	b.n	800d2d8 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7ff fd72 	bl	800cd44 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d266:	2b00      	cmp	r3, #0
 800d268:	d009      	beq.n	800d27e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d270:	68db      	ldr	r3, [r3, #12]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d284:	2b00      	cmp	r3, #0
 800d286:	d005      	beq.n	800d294 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d28e:	2105      	movs	r1, #5
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d29a:	b2db      	uxtb	r3, r3
 800d29c:	2b01      	cmp	r3, #1
 800d29e:	d107      	bne.n	800d2b0 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7ff fe2b 	bl	800cf04 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d2ae:	e014      	b.n	800d2da <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f004 fc6b 	bl	8011b8c <USBH_LL_Start>
      break;
 800d2b6:	e010      	b.n	800d2da <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d2b8:	bf00      	nop
 800d2ba:	e00e      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2bc:	bf00      	nop
 800d2be:	e00c      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2c0:	bf00      	nop
 800d2c2:	e00a      	b.n	800d2da <USBH_Process+0x3b6>
    break;
 800d2c4:	bf00      	nop
 800d2c6:	e008      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2c8:	bf00      	nop
 800d2ca:	e006      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2cc:	bf00      	nop
 800d2ce:	e004      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2d0:	bf00      	nop
 800d2d2:	e002      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2d4:	bf00      	nop
 800d2d6:	e000      	b.n	800d2da <USBH_Process+0x3b6>
      break;
 800d2d8:	bf00      	nop
  }
  return USBH_OK;
 800d2da:	2300      	movs	r3, #0
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af04      	add	r7, sp, #16
 800d2ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	785b      	ldrb	r3, [r3, #1]
 800d2f8:	2b07      	cmp	r3, #7
 800d2fa:	f200 81c1 	bhi.w	800d680 <USBH_HandleEnum+0x39c>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <USBH_HandleEnum+0x20>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d325 	.word	0x0800d325
 800d308:	0800d3e3 	.word	0x0800d3e3
 800d30c:	0800d44d 	.word	0x0800d44d
 800d310:	0800d4db 	.word	0x0800d4db
 800d314:	0800d545 	.word	0x0800d545
 800d318:	0800d5b5 	.word	0x0800d5b5
 800d31c:	0800d5fb 	.word	0x0800d5fb
 800d320:	0800d641 	.word	0x0800d641
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d324:	2108      	movs	r1, #8
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 fa50 	bl	800d7cc <USBH_Get_DevDesc>
 800d32c:	4603      	mov	r3, r0
 800d32e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d330:	7bbb      	ldrb	r3, [r7, #14]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d130      	bne.n	800d398 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	7919      	ldrb	r1, [r3, #4]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d35a:	b292      	uxth	r2, r2
 800d35c:	9202      	str	r2, [sp, #8]
 800d35e:	2200      	movs	r2, #0
 800d360:	9201      	str	r2, [sp, #4]
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	4603      	mov	r3, r0
 800d366:	2280      	movs	r2, #128	; 0x80
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 ff77 	bl	800e25c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	7959      	ldrb	r1, [r3, #5]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d382:	b292      	uxth	r2, r2
 800d384:	9202      	str	r2, [sp, #8]
 800d386:	2200      	movs	r2, #0
 800d388:	9201      	str	r2, [sp, #4]
 800d38a:	9300      	str	r3, [sp, #0]
 800d38c:	4603      	mov	r3, r0
 800d38e:	2200      	movs	r2, #0
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 ff63 	bl	800e25c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d396:	e175      	b.n	800d684 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d398:	7bbb      	ldrb	r3, [r7, #14]
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	f040 8172 	bne.w	800d684 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d3b6:	2b03      	cmp	r3, #3
 800d3b8:	d903      	bls.n	800d3c2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	220d      	movs	r2, #13
 800d3be:	701a      	strb	r2, [r3, #0]
      break;
 800d3c0:	e160      	b.n	800d684 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	795b      	ldrb	r3, [r3, #5]
 800d3c6:	4619      	mov	r1, r3
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 ff97 	bl	800e2fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	791b      	ldrb	r3, [r3, #4]
 800d3d2:	4619      	mov	r1, r3
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 ff91 	bl	800e2fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	701a      	strb	r2, [r3, #0]
      break;
 800d3e0:	e150      	b.n	800d684 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d3e2:	2112      	movs	r1, #18
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f9f1 	bl	800d7cc <USBH_Get_DevDesc>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3ee:	7bbb      	ldrb	r3, [r7, #14]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d103      	bne.n	800d3fc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3fa:	e145      	b.n	800d688 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3fc:	7bbb      	ldrb	r3, [r7, #14]
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	f040 8142 	bne.w	800d688 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d40a:	3301      	adds	r3, #1
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d903      	bls.n	800d426 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	220d      	movs	r2, #13
 800d422:	701a      	strb	r2, [r3, #0]
      break;
 800d424:	e130      	b.n	800d688 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	795b      	ldrb	r3, [r3, #5]
 800d42a:	4619      	mov	r1, r3
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 ff65 	bl	800e2fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	791b      	ldrb	r3, [r3, #4]
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 ff5f 	bl	800e2fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	701a      	strb	r2, [r3, #0]
      break;
 800d44a:	e11d      	b.n	800d688 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d44c:	2101      	movs	r1, #1
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f000 fa68 	bl	800d924 <USBH_SetAddress>
 800d454:	4603      	mov	r3, r0
 800d456:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d458:	7bbb      	ldrb	r3, [r7, #14]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d132      	bne.n	800d4c4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d45e:	2002      	movs	r0, #2
 800d460:	f004 fd2e 	bl	8011ec0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2201      	movs	r2, #1
 800d468:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2203      	movs	r2, #3
 800d470:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	7919      	ldrb	r1, [r3, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d486:	b292      	uxth	r2, r2
 800d488:	9202      	str	r2, [sp, #8]
 800d48a:	2200      	movs	r2, #0
 800d48c:	9201      	str	r2, [sp, #4]
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	4603      	mov	r3, r0
 800d492:	2280      	movs	r2, #128	; 0x80
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fee1 	bl	800e25c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	7959      	ldrb	r1, [r3, #5]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d4ae:	b292      	uxth	r2, r2
 800d4b0:	9202      	str	r2, [sp, #8]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	9201      	str	r2, [sp, #4]
 800d4b6:	9300      	str	r3, [sp, #0]
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fecd 	bl	800e25c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d4c2:	e0e3      	b.n	800d68c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4c4:	7bbb      	ldrb	r3, [r7, #14]
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	f040 80e0 	bne.w	800d68c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	220d      	movs	r2, #13
 800d4d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	705a      	strb	r2, [r3, #1]
      break;
 800d4d8:	e0d8      	b.n	800d68c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d4da:	2109      	movs	r1, #9
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f99d 	bl	800d81c <USBH_Get_CfgDesc>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d4e6:	7bbb      	ldrb	r3, [r7, #14]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d103      	bne.n	800d4f4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2204      	movs	r2, #4
 800d4f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d4f2:	e0cd      	b.n	800d690 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	f040 80ca 	bne.w	800d690 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d502:	3301      	adds	r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d512:	2b03      	cmp	r3, #3
 800d514:	d903      	bls.n	800d51e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	220d      	movs	r2, #13
 800d51a:	701a      	strb	r2, [r3, #0]
      break;
 800d51c:	e0b8      	b.n	800d690 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	795b      	ldrb	r3, [r3, #5]
 800d522:	4619      	mov	r1, r3
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fee9 	bl	800e2fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	791b      	ldrb	r3, [r3, #4]
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fee3 	bl	800e2fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2200      	movs	r2, #0
 800d53a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	701a      	strb	r2, [r3, #0]
      break;
 800d542:	e0a5      	b.n	800d690 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d54a:	4619      	mov	r1, r3
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f000 f965 	bl	800d81c <USBH_Get_CfgDesc>
 800d552:	4603      	mov	r3, r0
 800d554:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d556:	7bbb      	ldrb	r3, [r7, #14]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2205      	movs	r2, #5
 800d560:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d562:	e097      	b.n	800d694 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d564:	7bbb      	ldrb	r3, [r7, #14]
 800d566:	2b03      	cmp	r3, #3
 800d568:	f040 8094 	bne.w	800d694 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d572:	3301      	adds	r3, #1
 800d574:	b2da      	uxtb	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d582:	2b03      	cmp	r3, #3
 800d584:	d903      	bls.n	800d58e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	220d      	movs	r2, #13
 800d58a:	701a      	strb	r2, [r3, #0]
      break;
 800d58c:	e082      	b.n	800d694 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	795b      	ldrb	r3, [r3, #5]
 800d592:	4619      	mov	r1, r3
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 feb1 	bl	800e2fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	791b      	ldrb	r3, [r3, #4]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 feab 	bl	800e2fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	701a      	strb	r2, [r3, #0]
      break;
 800d5b2:	e06f      	b.n	800d694 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d019      	beq.n	800d5f2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d5ca:	23ff      	movs	r3, #255	; 0xff
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f949 	bl	800d864 <USBH_Get_StringDesc>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d103      	bne.n	800d5e4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2206      	movs	r2, #6
 800d5e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d5e2:	e059      	b.n	800d698 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	2b03      	cmp	r3, #3
 800d5e8:	d156      	bne.n	800d698 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2206      	movs	r2, #6
 800d5ee:	705a      	strb	r2, [r3, #1]
      break;
 800d5f0:	e052      	b.n	800d698 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2206      	movs	r2, #6
 800d5f6:	705a      	strb	r2, [r3, #1]
      break;
 800d5f8:	e04e      	b.n	800d698 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d600:	2b00      	cmp	r3, #0
 800d602:	d019      	beq.n	800d638 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d610:	23ff      	movs	r3, #255	; 0xff
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f926 	bl	800d864 <USBH_Get_StringDesc>
 800d618:	4603      	mov	r3, r0
 800d61a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d61c:	7bbb      	ldrb	r3, [r7, #14]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d103      	bne.n	800d62a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2207      	movs	r2, #7
 800d626:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d628:	e038      	b.n	800d69c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d62a:	7bbb      	ldrb	r3, [r7, #14]
 800d62c:	2b03      	cmp	r3, #3
 800d62e:	d135      	bne.n	800d69c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2207      	movs	r2, #7
 800d634:	705a      	strb	r2, [r3, #1]
      break;
 800d636:	e031      	b.n	800d69c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2207      	movs	r2, #7
 800d63c:	705a      	strb	r2, [r3, #1]
      break;
 800d63e:	e02d      	b.n	800d69c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d646:	2b00      	cmp	r3, #0
 800d648:	d017      	beq.n	800d67a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d656:	23ff      	movs	r3, #255	; 0xff
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 f903 	bl	800d864 <USBH_Get_StringDesc>
 800d65e:	4603      	mov	r3, r0
 800d660:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d662:	7bbb      	ldrb	r3, [r7, #14]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d102      	bne.n	800d66e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d66c:	e018      	b.n	800d6a0 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	2b03      	cmp	r3, #3
 800d672:	d115      	bne.n	800d6a0 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d674:	2300      	movs	r3, #0
 800d676:	73fb      	strb	r3, [r7, #15]
      break;
 800d678:	e012      	b.n	800d6a0 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]
      break;
 800d67e:	e00f      	b.n	800d6a0 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d680:	bf00      	nop
 800d682:	e00e      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d684:	bf00      	nop
 800d686:	e00c      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d688:	bf00      	nop
 800d68a:	e00a      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d68c:	bf00      	nop
 800d68e:	e008      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d690:	bf00      	nop
 800d692:	e006      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d694:	bf00      	nop
 800d696:	e004      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d698:	bf00      	nop
 800d69a:	e002      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d69c:	bf00      	nop
 800d69e:	e000      	b.n	800d6a2 <USBH_HandleEnum+0x3be>
      break;
 800d6a0:	bf00      	nop
  }
  return Status;
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d6ca:	b580      	push	{r7, lr}
 800d6cc:	b082      	sub	sp, #8
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6d8:	1c5a      	adds	r2, r3, #1
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f804 	bl	800d6ee <USBH_HandleSof>
}
 800d6e6:	bf00      	nop
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b0b      	cmp	r3, #11
 800d6fe:	d10a      	bne.n	800d716 <USBH_HandleSof+0x28>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d706:	2b00      	cmp	r3, #0
 800d708:	d005      	beq.n	800d716 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	4798      	blx	r3
  }
}
 800d716:	bf00      	nop
 800d718:	3708      	adds	r7, #8
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2201      	movs	r2, #1
 800d72a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d72e:	bf00      	nop
}
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b083      	sub	sp, #12
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d74a:	bf00      	nop
}
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d756:	b480      	push	{r7}
 800d758:	b083      	sub	sp, #12
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f004 fa0c 	bl	8011bc2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	791b      	ldrb	r3, [r3, #4]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f000 fda3 	bl	800e2fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	795b      	ldrb	r3, [r3, #5]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fd9d 	bl	800e2fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b086      	sub	sp, #24
 800d7d0:	af02      	add	r7, sp, #8
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d7de:	78fb      	ldrb	r3, [r7, #3]
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	9300      	str	r3, [sp, #0]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f864 	bl	800d8ba <USBH_GetDescriptor>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d10a      	bne.n	800d812 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d808:	78fa      	ldrb	r2, [r7, #3]
 800d80a:	b292      	uxth	r2, r2
 800d80c:	4619      	mov	r1, r3
 800d80e:	f000 f918 	bl	800da42 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
}
 800d814:	4618      	mov	r0, r3
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b086      	sub	sp, #24
 800d820:	af02      	add	r7, sp, #8
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	331c      	adds	r3, #28
 800d82c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d82e:	887b      	ldrh	r3, [r7, #2]
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d838:	2100      	movs	r1, #0
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 f83d 	bl	800d8ba <USBH_GetDescriptor>
 800d840:	4603      	mov	r3, r0
 800d842:	72fb      	strb	r3, [r7, #11]
 800d844:	7afb      	ldrb	r3, [r7, #11]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d107      	bne.n	800d85a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d850:	887a      	ldrh	r2, [r7, #2]
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	4618      	mov	r0, r3
 800d856:	f000 f964 	bl	800db22 <USBH_ParseCfgDesc>
  }

  return status;
 800d85a:	7afb      	ldrb	r3, [r7, #11]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3710      	adds	r7, #16
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b088      	sub	sp, #32
 800d868:	af02      	add	r7, sp, #8
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	607a      	str	r2, [r7, #4]
 800d86e:	461a      	mov	r2, r3
 800d870:	460b      	mov	r3, r1
 800d872:	72fb      	strb	r3, [r7, #11]
 800d874:	4613      	mov	r3, r2
 800d876:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d878:	7afb      	ldrb	r3, [r7, #11]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d880:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d888:	893b      	ldrh	r3, [r7, #8]
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	460b      	mov	r3, r1
 800d88e:	2100      	movs	r1, #0
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 f812 	bl	800d8ba <USBH_GetDescriptor>
 800d896:	4603      	mov	r3, r0
 800d898:	75fb      	strb	r3, [r7, #23]
 800d89a:	7dfb      	ldrb	r3, [r7, #23]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d107      	bne.n	800d8b0 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d8a6:	893a      	ldrh	r2, [r7, #8]
 800d8a8:	6879      	ldr	r1, [r7, #4]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fa37 	bl	800dd1e <USBH_ParseStringDesc>
  }

  return status;
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3718      	adds	r7, #24
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	607b      	str	r3, [r7, #4]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	72fb      	strb	r3, [r7, #11]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	789b      	ldrb	r3, [r3, #2]
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d11c      	bne.n	800d90e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d8d4:	7afb      	ldrb	r3, [r7, #11]
 800d8d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	2206      	movs	r2, #6
 800d8e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	893a      	ldrh	r2, [r7, #8]
 800d8ea:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d8ec:	893b      	ldrh	r3, [r7, #8]
 800d8ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8f6:	d104      	bne.n	800d902 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f240 4209 	movw	r2, #1033	; 0x409
 800d8fe:	829a      	strh	r2, [r3, #20]
 800d900:	e002      	b.n	800d908 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2200      	movs	r2, #0
 800d906:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	8b3a      	ldrh	r2, [r7, #24]
 800d90c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d90e:	8b3b      	ldrh	r3, [r7, #24]
 800d910:	461a      	mov	r2, r3
 800d912:	6879      	ldr	r1, [r7, #4]
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 fa50 	bl	800ddba <USBH_CtlReq>
 800d91a:	4603      	mov	r3, r0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	789b      	ldrb	r3, [r3, #2]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d10f      	bne.n	800d958 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2205      	movs	r2, #5
 800d942:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d944:	78fb      	ldrb	r3, [r7, #3]
 800d946:	b29a      	uxth	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d958:	2200      	movs	r2, #0
 800d95a:	2100      	movs	r1, #0
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fa2c 	bl	800ddba <USBH_CtlReq>
 800d962:	4603      	mov	r3, r0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	460b      	mov	r3, r1
 800d976:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	789b      	ldrb	r3, [r3, #2]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d10e      	bne.n	800d99e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2209      	movs	r2, #9
 800d98a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	887a      	ldrh	r2, [r7, #2]
 800d990:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2100      	movs	r1, #0
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fa09 	bl	800ddba <USBH_CtlReq>
 800d9a8:	4603      	mov	r3, r0
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b082      	sub	sp, #8
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	6078      	str	r0, [r7, #4]
 800d9ba:	460b      	mov	r3, r1
 800d9bc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	789b      	ldrb	r3, [r3, #2]
 800d9c2:	2b01      	cmp	r3, #1
 800d9c4:	d10f      	bne.n	800d9e6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2203      	movs	r2, #3
 800d9d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d9d2:	78fb      	ldrb	r3, [r7, #3]
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f9e5 	bl	800ddba <USBH_CtlReq>
 800d9f0:	4603      	mov	r3, r0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3708      	adds	r7, #8
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b082      	sub	sp, #8
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	460b      	mov	r3, r1
 800da04:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	789b      	ldrb	r3, [r3, #2]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d10f      	bne.n	800da2e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2202      	movs	r2, #2
 800da12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2200      	movs	r2, #0
 800da1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800da20:	78fb      	ldrb	r3, [r7, #3]
 800da22:	b29a      	uxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800da2e:	2200      	movs	r2, #0
 800da30:	2100      	movs	r1, #0
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f9c1 	bl	800ddba <USBH_CtlReq>
 800da38:	4603      	mov	r3, r0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800da42:	b480      	push	{r7}
 800da44:	b085      	sub	sp, #20
 800da46:	af00      	add	r7, sp, #0
 800da48:	60f8      	str	r0, [r7, #12]
 800da4a:	60b9      	str	r1, [r7, #8]
 800da4c:	4613      	mov	r3, r2
 800da4e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	781a      	ldrb	r2, [r3, #0]
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	785a      	ldrb	r2, [r3, #1]
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	3302      	adds	r3, #2
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	b29a      	uxth	r2, r3
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	3303      	adds	r3, #3
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	021b      	lsls	r3, r3, #8
 800da72:	b29b      	uxth	r3, r3
 800da74:	4313      	orrs	r3, r2
 800da76:	b29a      	uxth	r2, r3
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	791a      	ldrb	r2, [r3, #4]
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	795a      	ldrb	r2, [r3, #5]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	799a      	ldrb	r2, [r3, #6]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	79da      	ldrb	r2, [r3, #7]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800da9c:	88fb      	ldrh	r3, [r7, #6]
 800da9e:	2b08      	cmp	r3, #8
 800daa0:	d939      	bls.n	800db16 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	3308      	adds	r3, #8
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	3309      	adds	r3, #9
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b29a      	uxth	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	330a      	adds	r3, #10
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	330b      	adds	r3, #11
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	330c      	adds	r3, #12
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	b29a      	uxth	r2, r3
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	330d      	adds	r3, #13
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	021b      	lsls	r3, r3, #8
 800daec:	b29b      	uxth	r3, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	7b9a      	ldrb	r2, [r3, #14]
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	7bda      	ldrb	r2, [r3, #15]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	7c1a      	ldrb	r2, [r3, #16]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	7c5a      	ldrb	r2, [r3, #17]
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	745a      	strb	r2, [r3, #17]
  }
}
 800db16:	bf00      	nop
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b08a      	sub	sp, #40	; 0x28
 800db26:	af00      	add	r7, sp, #0
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	4613      	mov	r3, r2
 800db2e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800db34:	2300      	movs	r3, #0
 800db36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800db3a:	2300      	movs	r3, #0
 800db3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	781a      	ldrb	r2, [r3, #0]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	785a      	ldrb	r2, [r3, #1]
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	3302      	adds	r3, #2
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	3303      	adds	r3, #3
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	b29b      	uxth	r3, r3
 800db64:	021b      	lsls	r3, r3, #8
 800db66:	b29b      	uxth	r3, r3
 800db68:	4313      	orrs	r3, r2
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	791a      	ldrb	r2, [r3, #4]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	795a      	ldrb	r2, [r3, #5]
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	799a      	ldrb	r2, [r3, #6]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	79da      	ldrb	r2, [r3, #7]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	7a1a      	ldrb	r2, [r3, #8]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	2b09      	cmp	r3, #9
 800db9c:	d95f      	bls.n	800dc5e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800db9e:	2309      	movs	r3, #9
 800dba0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dba6:	e051      	b.n	800dc4c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dba8:	f107 0316 	add.w	r3, r7, #22
 800dbac:	4619      	mov	r1, r3
 800dbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb0:	f000 f8e8 	bl	800dd84 <USBH_GetNextDesc>
 800dbb4:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	785b      	ldrb	r3, [r3, #1]
 800dbba:	2b04      	cmp	r3, #4
 800dbbc:	d146      	bne.n	800dc4c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800dbbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbc2:	221a      	movs	r2, #26
 800dbc4:	fb02 f303 	mul.w	r3, r2, r3
 800dbc8:	3308      	adds	r3, #8
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	3302      	adds	r3, #2
 800dbd0:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dbd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbd4:	69f8      	ldr	r0, [r7, #28]
 800dbd6:	f000 f846 	bl	800dc66 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dbe4:	e022      	b.n	800dc2c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dbe6:	f107 0316 	add.w	r3, r7, #22
 800dbea:	4619      	mov	r1, r3
 800dbec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbee:	f000 f8c9 	bl	800dd84 <USBH_GetNextDesc>
 800dbf2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	785b      	ldrb	r3, [r3, #1]
 800dbf8:	2b05      	cmp	r3, #5
 800dbfa:	d117      	bne.n	800dc2c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dbfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dc04:	3201      	adds	r2, #1
 800dc06:	00d2      	lsls	r2, r2, #3
 800dc08:	211a      	movs	r1, #26
 800dc0a:	fb01 f303 	mul.w	r3, r1, r3
 800dc0e:	4413      	add	r3, r2
 800dc10:	3308      	adds	r3, #8
 800dc12:	68fa      	ldr	r2, [r7, #12]
 800dc14:	4413      	add	r3, r2
 800dc16:	3304      	adds	r3, #4
 800dc18:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800dc1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc1c:	69b8      	ldr	r0, [r7, #24]
 800dc1e:	f000 f851 	bl	800dcc4 <USBH_ParseEPDesc>
            ep_ix++;
 800dc22:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc26:	3301      	adds	r3, #1
 800dc28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	791b      	ldrb	r3, [r3, #4]
 800dc30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d204      	bcs.n	800dc42 <USBH_ParseCfgDesc+0x120>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	885a      	ldrh	r2, [r3, #2]
 800dc3c:	8afb      	ldrh	r3, [r7, #22]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d8d1      	bhi.n	800dbe6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800dc42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc46:	3301      	adds	r3, #1
 800dc48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dc4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d804      	bhi.n	800dc5e <USBH_ParseCfgDesc+0x13c>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	885a      	ldrh	r2, [r3, #2]
 800dc58:	8afb      	ldrh	r3, [r7, #22]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d8a4      	bhi.n	800dba8 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800dc5e:	bf00      	nop
 800dc60:	3728      	adds	r7, #40	; 0x28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dc66:	b480      	push	{r7}
 800dc68:	b083      	sub	sp, #12
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	781a      	ldrb	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	785a      	ldrb	r2, [r3, #1]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	789a      	ldrb	r2, [r3, #2]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	78da      	ldrb	r2, [r3, #3]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	791a      	ldrb	r2, [r3, #4]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	795a      	ldrb	r2, [r3, #5]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	799a      	ldrb	r2, [r3, #6]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	79da      	ldrb	r2, [r3, #7]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	7a1a      	ldrb	r2, [r3, #8]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	721a      	strb	r2, [r3, #8]
}
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b083      	sub	sp, #12
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	781a      	ldrb	r2, [r3, #0]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	785a      	ldrb	r2, [r3, #1]
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	789a      	ldrb	r2, [r3, #2]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	78da      	ldrb	r2, [r3, #3]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	3305      	adds	r3, #5
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	021b      	lsls	r3, r3, #8
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	4313      	orrs	r3, r2
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	799a      	ldrb	r2, [r3, #6]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	719a      	strb	r2, [r3, #6]
}
 800dd12:	bf00      	nop
 800dd14:	370c      	adds	r7, #12
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr

0800dd1e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd1e:	b480      	push	{r7}
 800dd20:	b087      	sub	sp, #28
 800dd22:	af00      	add	r7, sp, #0
 800dd24:	60f8      	str	r0, [r7, #12]
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	4613      	mov	r3, r2
 800dd2a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	2b03      	cmp	r3, #3
 800dd34:	d120      	bne.n	800dd78 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	781b      	ldrb	r3, [r3, #0]
 800dd3a:	1e9a      	subs	r2, r3, #2
 800dd3c:	88fb      	ldrh	r3, [r7, #6]
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	bf28      	it	cs
 800dd42:	4613      	movcs	r3, r2
 800dd44:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3302      	adds	r3, #2
 800dd4a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	82fb      	strh	r3, [r7, #22]
 800dd50:	e00b      	b.n	800dd6a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dd52:	8afb      	ldrh	r3, [r7, #22]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	781a      	ldrb	r2, [r3, #0]
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	3301      	adds	r3, #1
 800dd62:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dd64:	8afb      	ldrh	r3, [r7, #22]
 800dd66:	3302      	adds	r3, #2
 800dd68:	82fb      	strh	r3, [r7, #22]
 800dd6a:	8afa      	ldrh	r2, [r7, #22]
 800dd6c:	8abb      	ldrh	r3, [r7, #20]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d3ef      	bcc.n	800dd52 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2200      	movs	r2, #0
 800dd76:	701a      	strb	r2, [r3, #0]
  }
}
 800dd78:	bf00      	nop
 800dd7a:	371c      	adds	r7, #28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	881a      	ldrh	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	4413      	add	r3, r2
 800dd9a:	b29a      	uxth	r2, r3
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4413      	add	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddac:	68fb      	ldr	r3, [r7, #12]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr

0800ddba <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b086      	sub	sp, #24
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	789b      	ldrb	r3, [r3, #2]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d002      	beq.n	800ddda <USBH_CtlReq+0x20>
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d00f      	beq.n	800ddf8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ddd8:	e027      	b.n	800de2a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	88fa      	ldrh	r2, [r7, #6]
 800dde4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2201      	movs	r2, #1
 800ddea:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2202      	movs	r2, #2
 800ddf0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	75fb      	strb	r3, [r7, #23]
      break;
 800ddf6:	e018      	b.n	800de2a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f000 f81b 	bl	800de34 <USBH_HandleControl>
 800ddfe:	4603      	mov	r3, r0
 800de00:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800de02:	7dfb      	ldrb	r3, [r7, #23]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d002      	beq.n	800de0e <USBH_CtlReq+0x54>
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d106      	bne.n	800de1c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2201      	movs	r2, #1
 800de12:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2200      	movs	r2, #0
 800de18:	761a      	strb	r2, [r3, #24]
      break;
 800de1a:	e005      	b.n	800de28 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800de1c:	7dfb      	ldrb	r3, [r7, #23]
 800de1e:	2b02      	cmp	r3, #2
 800de20:	d102      	bne.n	800de28 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2201      	movs	r2, #1
 800de26:	709a      	strb	r2, [r3, #2]
      break;
 800de28:	bf00      	nop
  }
  return status;
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af02      	add	r7, sp, #8
 800de3a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800de3c:	2301      	movs	r3, #1
 800de3e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de40:	2300      	movs	r3, #0
 800de42:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	7e1b      	ldrb	r3, [r3, #24]
 800de48:	3b01      	subs	r3, #1
 800de4a:	2b0a      	cmp	r3, #10
 800de4c:	f200 8156 	bhi.w	800e0fc <USBH_HandleControl+0x2c8>
 800de50:	a201      	add	r2, pc, #4	; (adr r2, 800de58 <USBH_HandleControl+0x24>)
 800de52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de56:	bf00      	nop
 800de58:	0800de85 	.word	0x0800de85
 800de5c:	0800de9f 	.word	0x0800de9f
 800de60:	0800df09 	.word	0x0800df09
 800de64:	0800df2f 	.word	0x0800df2f
 800de68:	0800df67 	.word	0x0800df67
 800de6c:	0800df91 	.word	0x0800df91
 800de70:	0800dfe3 	.word	0x0800dfe3
 800de74:	0800e005 	.word	0x0800e005
 800de78:	0800e041 	.word	0x0800e041
 800de7c:	0800e067 	.word	0x0800e067
 800de80:	0800e0a5 	.word	0x0800e0a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f103 0110 	add.w	r1, r3, #16
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	795b      	ldrb	r3, [r3, #5]
 800de8e:	461a      	mov	r2, r3
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f943 	bl	800e11c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2202      	movs	r2, #2
 800de9a:	761a      	strb	r2, [r3, #24]
      break;
 800de9c:	e139      	b.n	800e112 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	795b      	ldrb	r3, [r3, #5]
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f003 ff7b 	bl	8011da0 <USBH_LL_GetURBState>
 800deaa:	4603      	mov	r3, r0
 800deac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800deae:	7bbb      	ldrb	r3, [r7, #14]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d11e      	bne.n	800def2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	7c1b      	ldrb	r3, [r3, #16]
 800deb8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800debc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8adb      	ldrh	r3, [r3, #22]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00a      	beq.n	800dedc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dec6:	7b7b      	ldrb	r3, [r7, #13]
 800dec8:	2b80      	cmp	r3, #128	; 0x80
 800deca:	d103      	bne.n	800ded4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2203      	movs	r2, #3
 800ded0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ded2:	e115      	b.n	800e100 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2205      	movs	r2, #5
 800ded8:	761a      	strb	r2, [r3, #24]
      break;
 800deda:	e111      	b.n	800e100 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dedc:	7b7b      	ldrb	r3, [r7, #13]
 800dede:	2b80      	cmp	r3, #128	; 0x80
 800dee0:	d103      	bne.n	800deea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2209      	movs	r2, #9
 800dee6:	761a      	strb	r2, [r3, #24]
      break;
 800dee8:	e10a      	b.n	800e100 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2207      	movs	r2, #7
 800deee:	761a      	strb	r2, [r3, #24]
      break;
 800def0:	e106      	b.n	800e100 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800def2:	7bbb      	ldrb	r3, [r7, #14]
 800def4:	2b04      	cmp	r3, #4
 800def6:	d003      	beq.n	800df00 <USBH_HandleControl+0xcc>
 800def8:	7bbb      	ldrb	r3, [r7, #14]
 800defa:	2b02      	cmp	r3, #2
 800defc:	f040 8100 	bne.w	800e100 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	220b      	movs	r2, #11
 800df04:	761a      	strb	r2, [r3, #24]
      break;
 800df06:	e0fb      	b.n	800e100 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df0e:	b29a      	uxth	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6899      	ldr	r1, [r3, #8]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	899a      	ldrh	r2, [r3, #12]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	791b      	ldrb	r3, [r3, #4]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f93a 	bl	800e19a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2204      	movs	r2, #4
 800df2a:	761a      	strb	r2, [r3, #24]
      break;
 800df2c:	e0f1      	b.n	800e112 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	791b      	ldrb	r3, [r3, #4]
 800df32:	4619      	mov	r1, r3
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f003 ff33 	bl	8011da0 <USBH_LL_GetURBState>
 800df3a:	4603      	mov	r3, r0
 800df3c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d102      	bne.n	800df4a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2209      	movs	r2, #9
 800df48:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	2b05      	cmp	r3, #5
 800df4e:	d102      	bne.n	800df56 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800df50:	2303      	movs	r3, #3
 800df52:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df54:	e0d6      	b.n	800e104 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b04      	cmp	r3, #4
 800df5a:	f040 80d3 	bne.w	800e104 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	220b      	movs	r2, #11
 800df62:	761a      	strb	r2, [r3, #24]
      break;
 800df64:	e0ce      	b.n	800e104 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6899      	ldr	r1, [r3, #8]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	899a      	ldrh	r2, [r3, #12]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	795b      	ldrb	r3, [r3, #5]
 800df72:	2001      	movs	r0, #1
 800df74:	9000      	str	r0, [sp, #0]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f8ea 	bl	800e150 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df82:	b29a      	uxth	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2206      	movs	r2, #6
 800df8c:	761a      	strb	r2, [r3, #24]
      break;
 800df8e:	e0c0      	b.n	800e112 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	795b      	ldrb	r3, [r3, #5]
 800df94:	4619      	mov	r1, r3
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f003 ff02 	bl	8011da0 <USBH_LL_GetURBState>
 800df9c:	4603      	mov	r3, r0
 800df9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dfa0:	7bbb      	ldrb	r3, [r7, #14]
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d103      	bne.n	800dfae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2207      	movs	r2, #7
 800dfaa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800dfac:	e0ac      	b.n	800e108 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
 800dfb0:	2b05      	cmp	r3, #5
 800dfb2:	d105      	bne.n	800dfc0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	220c      	movs	r2, #12
 800dfb8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dfba:	2303      	movs	r3, #3
 800dfbc:	73fb      	strb	r3, [r7, #15]
      break;
 800dfbe:	e0a3      	b.n	800e108 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfc0:	7bbb      	ldrb	r3, [r7, #14]
 800dfc2:	2b02      	cmp	r3, #2
 800dfc4:	d103      	bne.n	800dfce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2205      	movs	r2, #5
 800dfca:	761a      	strb	r2, [r3, #24]
      break;
 800dfcc:	e09c      	b.n	800e108 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dfce:	7bbb      	ldrb	r3, [r7, #14]
 800dfd0:	2b04      	cmp	r3, #4
 800dfd2:	f040 8099 	bne.w	800e108 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	220b      	movs	r2, #11
 800dfda:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dfdc:	2302      	movs	r3, #2
 800dfde:	73fb      	strb	r3, [r7, #15]
      break;
 800dfe0:	e092      	b.n	800e108 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	791b      	ldrb	r3, [r3, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 f8d5 	bl	800e19a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2208      	movs	r2, #8
 800e000:	761a      	strb	r2, [r3, #24]

      break;
 800e002:	e086      	b.n	800e112 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	791b      	ldrb	r3, [r3, #4]
 800e008:	4619      	mov	r1, r3
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f003 fec8 	bl	8011da0 <USBH_LL_GetURBState>
 800e010:	4603      	mov	r3, r0
 800e012:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	2b01      	cmp	r3, #1
 800e018:	d105      	bne.n	800e026 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	220d      	movs	r2, #13
 800e01e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e024:	e072      	b.n	800e10c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e026:	7bbb      	ldrb	r3, [r7, #14]
 800e028:	2b04      	cmp	r3, #4
 800e02a:	d103      	bne.n	800e034 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	220b      	movs	r2, #11
 800e030:	761a      	strb	r2, [r3, #24]
      break;
 800e032:	e06b      	b.n	800e10c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e034:	7bbb      	ldrb	r3, [r7, #14]
 800e036:	2b05      	cmp	r3, #5
 800e038:	d168      	bne.n	800e10c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e03a:	2303      	movs	r3, #3
 800e03c:	73fb      	strb	r3, [r7, #15]
      break;
 800e03e:	e065      	b.n	800e10c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	795b      	ldrb	r3, [r3, #5]
 800e044:	2201      	movs	r2, #1
 800e046:	9200      	str	r2, [sp, #0]
 800e048:	2200      	movs	r2, #0
 800e04a:	2100      	movs	r1, #0
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 f87f 	bl	800e150 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	220a      	movs	r2, #10
 800e062:	761a      	strb	r2, [r3, #24]
      break;
 800e064:	e055      	b.n	800e112 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	795b      	ldrb	r3, [r3, #5]
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f003 fe97 	bl	8011da0 <USBH_LL_GetURBState>
 800e072:	4603      	mov	r3, r0
 800e074:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d105      	bne.n	800e088 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	220d      	movs	r2, #13
 800e084:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e086:	e043      	b.n	800e110 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e088:	7bbb      	ldrb	r3, [r7, #14]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d103      	bne.n	800e096 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2209      	movs	r2, #9
 800e092:	761a      	strb	r2, [r3, #24]
      break;
 800e094:	e03c      	b.n	800e110 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e096:	7bbb      	ldrb	r3, [r7, #14]
 800e098:	2b04      	cmp	r3, #4
 800e09a:	d139      	bne.n	800e110 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	220b      	movs	r2, #11
 800e0a0:	761a      	strb	r2, [r3, #24]
      break;
 800e0a2:	e035      	b.n	800e110 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	7e5b      	ldrb	r3, [r3, #25]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	765a      	strb	r2, [r3, #25]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	7e5b      	ldrb	r3, [r3, #25]
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	d806      	bhi.n	800e0c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e0c4:	e025      	b.n	800e112 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0cc:	2106      	movs	r1, #6
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	795b      	ldrb	r3, [r3, #5]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f000 f90c 	bl	800e2fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	791b      	ldrb	r3, [r3, #4]
 800e0e8:	4619      	mov	r1, r3
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f906 	bl	800e2fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e0fa:	e00a      	b.n	800e112 <USBH_HandleControl+0x2de>

    default:
      break;
 800e0fc:	bf00      	nop
 800e0fe:	e008      	b.n	800e112 <USBH_HandleControl+0x2de>
      break;
 800e100:	bf00      	nop
 800e102:	e006      	b.n	800e112 <USBH_HandleControl+0x2de>
      break;
 800e104:	bf00      	nop
 800e106:	e004      	b.n	800e112 <USBH_HandleControl+0x2de>
      break;
 800e108:	bf00      	nop
 800e10a:	e002      	b.n	800e112 <USBH_HandleControl+0x2de>
      break;
 800e10c:	bf00      	nop
 800e10e:	e000      	b.n	800e112 <USBH_HandleControl+0x2de>
      break;
 800e110:	bf00      	nop
  }

  return status;
 800e112:	7bfb      	ldrb	r3, [r7, #15]
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af04      	add	r7, sp, #16
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	4613      	mov	r3, r2
 800e128:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e12a:	79f9      	ldrb	r1, [r7, #7]
 800e12c:	2300      	movs	r3, #0
 800e12e:	9303      	str	r3, [sp, #12]
 800e130:	2308      	movs	r3, #8
 800e132:	9302      	str	r3, [sp, #8]
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	2300      	movs	r3, #0
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	2300      	movs	r3, #0
 800e13e:	2200      	movs	r2, #0
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f003 fdfc 	bl	8011d3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e146:	2300      	movs	r3, #0
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3710      	adds	r7, #16
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af04      	add	r7, sp, #16
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	4611      	mov	r1, r2
 800e15c:	461a      	mov	r2, r3
 800e15e:	460b      	mov	r3, r1
 800e160:	80fb      	strh	r3, [r7, #6]
 800e162:	4613      	mov	r3, r2
 800e164:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d001      	beq.n	800e174 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e170:	2300      	movs	r3, #0
 800e172:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e174:	7979      	ldrb	r1, [r7, #5]
 800e176:	7e3b      	ldrb	r3, [r7, #24]
 800e178:	9303      	str	r3, [sp, #12]
 800e17a:	88fb      	ldrh	r3, [r7, #6]
 800e17c:	9302      	str	r3, [sp, #8]
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	2301      	movs	r3, #1
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	2300      	movs	r3, #0
 800e188:	2200      	movs	r2, #0
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f003 fdd7 	bl	8011d3e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e190:	2300      	movs	r3, #0
}
 800e192:	4618      	mov	r0, r3
 800e194:	3710      	adds	r7, #16
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}

0800e19a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e19a:	b580      	push	{r7, lr}
 800e19c:	b088      	sub	sp, #32
 800e19e:	af04      	add	r7, sp, #16
 800e1a0:	60f8      	str	r0, [r7, #12]
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	4611      	mov	r1, r2
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	80fb      	strh	r3, [r7, #6]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e1b0:	7979      	ldrb	r1, [r7, #5]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9303      	str	r3, [sp, #12]
 800e1b6:	88fb      	ldrh	r3, [r7, #6]
 800e1b8:	9302      	str	r3, [sp, #8]
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	2301      	movs	r3, #1
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f003 fdb9 	bl	8011d3e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e1cc:	2300      	movs	r3, #0

}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e1d6:	b580      	push	{r7, lr}
 800e1d8:	b088      	sub	sp, #32
 800e1da:	af04      	add	r7, sp, #16
 800e1dc:	60f8      	str	r0, [r7, #12]
 800e1de:	60b9      	str	r1, [r7, #8]
 800e1e0:	4611      	mov	r1, r2
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	80fb      	strh	r3, [r7, #6]
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e1fa:	7979      	ldrb	r1, [r7, #5]
 800e1fc:	7e3b      	ldrb	r3, [r7, #24]
 800e1fe:	9303      	str	r3, [sp, #12]
 800e200:	88fb      	ldrh	r3, [r7, #6]
 800e202:	9302      	str	r3, [sp, #8]
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	9301      	str	r3, [sp, #4]
 800e208:	2301      	movs	r3, #1
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	2302      	movs	r3, #2
 800e20e:	2200      	movs	r2, #0
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f003 fd94 	bl	8011d3e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b088      	sub	sp, #32
 800e224:	af04      	add	r7, sp, #16
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	4611      	mov	r1, r2
 800e22c:	461a      	mov	r2, r3
 800e22e:	460b      	mov	r3, r1
 800e230:	80fb      	strh	r3, [r7, #6]
 800e232:	4613      	mov	r3, r2
 800e234:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e236:	7979      	ldrb	r1, [r7, #5]
 800e238:	2300      	movs	r3, #0
 800e23a:	9303      	str	r3, [sp, #12]
 800e23c:	88fb      	ldrh	r3, [r7, #6]
 800e23e:	9302      	str	r3, [sp, #8]
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	9301      	str	r3, [sp, #4]
 800e244:	2301      	movs	r3, #1
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2302      	movs	r3, #2
 800e24a:	2201      	movs	r2, #1
 800e24c:	68f8      	ldr	r0, [r7, #12]
 800e24e:	f003 fd76 	bl	8011d3e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3710      	adds	r7, #16
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b086      	sub	sp, #24
 800e260:	af04      	add	r7, sp, #16
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	4608      	mov	r0, r1
 800e266:	4611      	mov	r1, r2
 800e268:	461a      	mov	r2, r3
 800e26a:	4603      	mov	r3, r0
 800e26c:	70fb      	strb	r3, [r7, #3]
 800e26e:	460b      	mov	r3, r1
 800e270:	70bb      	strb	r3, [r7, #2]
 800e272:	4613      	mov	r3, r2
 800e274:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e276:	7878      	ldrb	r0, [r7, #1]
 800e278:	78ba      	ldrb	r2, [r7, #2]
 800e27a:	78f9      	ldrb	r1, [r7, #3]
 800e27c:	8b3b      	ldrh	r3, [r7, #24]
 800e27e:	9302      	str	r3, [sp, #8]
 800e280:	7d3b      	ldrb	r3, [r7, #20]
 800e282:	9301      	str	r3, [sp, #4]
 800e284:	7c3b      	ldrb	r3, [r7, #16]
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	4603      	mov	r3, r0
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f003 fd09 	bl	8011ca2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3708      	adds	r7, #8
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b082      	sub	sp, #8
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e2a6:	78fb      	ldrb	r3, [r7, #3]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f003 fd28 	bl	8011d00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e2b0:	2300      	movs	r3, #0
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b084      	sub	sp, #16
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 f836 	bl	800e338 <USBH_GetFreePipe>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e2d0:	89fb      	ldrh	r3, [r7, #14]
 800e2d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d00a      	beq.n	800e2f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e2da:	78fa      	ldrb	r2, [r7, #3]
 800e2dc:	89fb      	ldrh	r3, [r7, #14]
 800e2de:	f003 030f 	and.w	r3, r3, #15
 800e2e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2e6:	6879      	ldr	r1, [r7, #4]
 800e2e8:	33e0      	adds	r3, #224	; 0xe0
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	440b      	add	r3, r1
 800e2ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e2f0:	89fb      	ldrh	r3, [r7, #14]
 800e2f2:	b2db      	uxtb	r3, r3
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	460b      	mov	r3, r1
 800e306:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	2b0a      	cmp	r3, #10
 800e30c:	d80d      	bhi.n	800e32a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	33e0      	adds	r3, #224	; 0xe0
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	4413      	add	r3, r2
 800e318:	685a      	ldr	r2, [r3, #4]
 800e31a:	78fb      	ldrb	r3, [r7, #3]
 800e31c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e320:	6879      	ldr	r1, [r7, #4]
 800e322:	33e0      	adds	r3, #224	; 0xe0
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	440b      	add	r3, r1
 800e328:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e32a:	2300      	movs	r3, #0
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e338:	b480      	push	{r7}
 800e33a:	b085      	sub	sp, #20
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
 800e348:	e00f      	b.n	800e36a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e34a:	7bfb      	ldrb	r3, [r7, #15]
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	33e0      	adds	r3, #224	; 0xe0
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4413      	add	r3, r2
 800e354:	685b      	ldr	r3, [r3, #4]
 800e356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d102      	bne.n	800e364 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	b29b      	uxth	r3, r3
 800e362:	e007      	b.n	800e374 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	3301      	adds	r3, #1
 800e368:	73fb      	strb	r3, [r7, #15]
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	2b0a      	cmp	r3, #10
 800e36e:	d9ec      	bls.n	800e34a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e370:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b084      	sub	sp, #16
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	4a08      	ldr	r2, [pc, #32]	; (800e3b0 <disk_status+0x30>)
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4413      	add	r3, r2
 800e392:	685b      	ldr	r3, [r3, #4]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	79fa      	ldrb	r2, [r7, #7]
 800e398:	4905      	ldr	r1, [pc, #20]	; (800e3b0 <disk_status+0x30>)
 800e39a:	440a      	add	r2, r1
 800e39c:	7a12      	ldrb	r2, [r2, #8]
 800e39e:	4610      	mov	r0, r2
 800e3a0:	4798      	blx	r3
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	200011b0 	.word	0x200011b0

0800e3b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	4a0d      	ldr	r2, [pc, #52]	; (800e3fc <disk_initialize+0x48>)
 800e3c6:	5cd3      	ldrb	r3, [r2, r3]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d111      	bne.n	800e3f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e3cc:	79fb      	ldrb	r3, [r7, #7]
 800e3ce:	4a0b      	ldr	r2, [pc, #44]	; (800e3fc <disk_initialize+0x48>)
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	4a09      	ldr	r2, [pc, #36]	; (800e3fc <disk_initialize+0x48>)
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	79fa      	ldrb	r2, [r7, #7]
 800e3e2:	4906      	ldr	r1, [pc, #24]	; (800e3fc <disk_initialize+0x48>)
 800e3e4:	440a      	add	r2, r1
 800e3e6:	7a12      	ldrb	r2, [r2, #8]
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	4798      	blx	r3
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	200011b0 	.word	0x200011b0

0800e400 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	60b9      	str	r1, [r7, #8]
 800e408:	607a      	str	r2, [r7, #4]
 800e40a:	603b      	str	r3, [r7, #0]
 800e40c:	4603      	mov	r3, r0
 800e40e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e410:	7bfb      	ldrb	r3, [r7, #15]
 800e412:	4a0a      	ldr	r2, [pc, #40]	; (800e43c <disk_read+0x3c>)
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	689c      	ldr	r4, [r3, #8]
 800e41c:	7bfb      	ldrb	r3, [r7, #15]
 800e41e:	4a07      	ldr	r2, [pc, #28]	; (800e43c <disk_read+0x3c>)
 800e420:	4413      	add	r3, r2
 800e422:	7a18      	ldrb	r0, [r3, #8]
 800e424:	683b      	ldr	r3, [r7, #0]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	68b9      	ldr	r1, [r7, #8]
 800e42a:	47a0      	blx	r4
 800e42c:	4603      	mov	r3, r0
 800e42e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e430:	7dfb      	ldrb	r3, [r7, #23]
}
 800e432:	4618      	mov	r0, r3
 800e434:	371c      	adds	r7, #28
 800e436:	46bd      	mov	sp, r7
 800e438:	bd90      	pop	{r4, r7, pc}
 800e43a:	bf00      	nop
 800e43c:	200011b0 	.word	0x200011b0

0800e440 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e440:	b590      	push	{r4, r7, lr}
 800e442:	b087      	sub	sp, #28
 800e444:	af00      	add	r7, sp, #0
 800e446:	60b9      	str	r1, [r7, #8]
 800e448:	607a      	str	r2, [r7, #4]
 800e44a:	603b      	str	r3, [r7, #0]
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e450:	7bfb      	ldrb	r3, [r7, #15]
 800e452:	4a0a      	ldr	r2, [pc, #40]	; (800e47c <disk_write+0x3c>)
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	68dc      	ldr	r4, [r3, #12]
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	4a07      	ldr	r2, [pc, #28]	; (800e47c <disk_write+0x3c>)
 800e460:	4413      	add	r3, r2
 800e462:	7a18      	ldrb	r0, [r3, #8]
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	47a0      	blx	r4
 800e46c:	4603      	mov	r3, r0
 800e46e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e470:	7dfb      	ldrb	r3, [r7, #23]
}
 800e472:	4618      	mov	r0, r3
 800e474:	371c      	adds	r7, #28
 800e476:	46bd      	mov	sp, r7
 800e478:	bd90      	pop	{r4, r7, pc}
 800e47a:	bf00      	nop
 800e47c:	200011b0 	.word	0x200011b0

0800e480 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b084      	sub	sp, #16
 800e484:	af00      	add	r7, sp, #0
 800e486:	4603      	mov	r3, r0
 800e488:	603a      	str	r2, [r7, #0]
 800e48a:	71fb      	strb	r3, [r7, #7]
 800e48c:	460b      	mov	r3, r1
 800e48e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	4a09      	ldr	r2, [pc, #36]	; (800e4b8 <disk_ioctl+0x38>)
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4413      	add	r3, r2
 800e498:	685b      	ldr	r3, [r3, #4]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	79fa      	ldrb	r2, [r7, #7]
 800e49e:	4906      	ldr	r1, [pc, #24]	; (800e4b8 <disk_ioctl+0x38>)
 800e4a0:	440a      	add	r2, r1
 800e4a2:	7a10      	ldrb	r0, [r2, #8]
 800e4a4:	79b9      	ldrb	r1, [r7, #6]
 800e4a6:	683a      	ldr	r2, [r7, #0]
 800e4a8:	4798      	blx	r3
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	200011b0 	.word	0x200011b0

0800e4bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e4cc:	89fb      	ldrh	r3, [r7, #14]
 800e4ce:	021b      	lsls	r3, r3, #8
 800e4d0:	b21a      	sxth	r2, r3
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	b21b      	sxth	r3, r3
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	b21b      	sxth	r3, r3
 800e4dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e4de:	89fb      	ldrh	r3, [r7, #14]
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3714      	adds	r7, #20
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b085      	sub	sp, #20
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3303      	adds	r3, #3
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	3202      	adds	r2, #2
 800e504:	7812      	ldrb	r2, [r2, #0]
 800e506:	4313      	orrs	r3, r2
 800e508:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	021b      	lsls	r3, r3, #8
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	3201      	adds	r2, #1
 800e512:	7812      	ldrb	r2, [r2, #0]
 800e514:	4313      	orrs	r3, r2
 800e516:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	021b      	lsls	r3, r3, #8
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	7812      	ldrb	r2, [r2, #0]
 800e520:	4313      	orrs	r3, r2
 800e522:	60fb      	str	r3, [r7, #12]
	return rv;
 800e524:	68fb      	ldr	r3, [r7, #12]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e532:	b480      	push	{r7}
 800e534:	b083      	sub	sp, #12
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	607a      	str	r2, [r7, #4]
 800e544:	887a      	ldrh	r2, [r7, #2]
 800e546:	b2d2      	uxtb	r2, r2
 800e548:	701a      	strb	r2, [r3, #0]
 800e54a:	887b      	ldrh	r3, [r7, #2]
 800e54c:	0a1b      	lsrs	r3, r3, #8
 800e54e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	607a      	str	r2, [r7, #4]
 800e556:	887a      	ldrh	r2, [r7, #2]
 800e558:	b2d2      	uxtb	r2, r2
 800e55a:	701a      	strb	r2, [r3, #0]
}
 800e55c:	bf00      	nop
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	b2d2      	uxtb	r2, r2
 800e57c:	701a      	strb	r2, [r3, #0]
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	0a1b      	lsrs	r3, r3, #8
 800e582:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	607a      	str	r2, [r7, #4]
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	b2d2      	uxtb	r2, r2
 800e58e:	701a      	strb	r2, [r3, #0]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	0a1b      	lsrs	r3, r3, #8
 800e594:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	1c5a      	adds	r2, r3, #1
 800e59a:	607a      	str	r2, [r7, #4]
 800e59c:	683a      	ldr	r2, [r7, #0]
 800e59e:	b2d2      	uxtb	r2, r2
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	0a1b      	lsrs	r3, r3, #8
 800e5a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	607a      	str	r2, [r7, #4]
 800e5ae:	683a      	ldr	r2, [r7, #0]
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	701a      	strb	r2, [r3, #0]
}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5c0:	b480      	push	{r7}
 800e5c2:	b087      	sub	sp, #28
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00d      	beq.n	800e5f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e5da:	693a      	ldr	r2, [r7, #16]
 800e5dc:	1c53      	adds	r3, r2, #1
 800e5de:	613b      	str	r3, [r7, #16]
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	1c59      	adds	r1, r3, #1
 800e5e4:	6179      	str	r1, [r7, #20]
 800e5e6:	7812      	ldrb	r2, [r2, #0]
 800e5e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	607b      	str	r3, [r7, #4]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d1f1      	bne.n	800e5da <mem_cpy+0x1a>
	}
}
 800e5f6:	bf00      	nop
 800e5f8:	371c      	adds	r7, #28
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e602:	b480      	push	{r7}
 800e604:	b087      	sub	sp, #28
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	1c5a      	adds	r2, r3, #1
 800e616:	617a      	str	r2, [r7, #20]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	b2d2      	uxtb	r2, r2
 800e61c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	3b01      	subs	r3, #1
 800e622:	607b      	str	r3, [r7, #4]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d1f3      	bne.n	800e612 <mem_set+0x10>
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	371c      	adds	r7, #28
 800e630:	46bd      	mov	sp, r7
 800e632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e636:	4770      	bx	lr

0800e638 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e638:	b480      	push	{r7}
 800e63a:	b089      	sub	sp, #36	; 0x24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	61fb      	str	r3, [r7, #28]
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	61fa      	str	r2, [r7, #28]
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	4619      	mov	r1, r3
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	1c5a      	adds	r2, r3, #1
 800e65e:	61ba      	str	r2, [r7, #24]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	1acb      	subs	r3, r1, r3
 800e664:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3b01      	subs	r3, #1
 800e66a:	607b      	str	r3, [r7, #4]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d002      	beq.n	800e678 <mem_cmp+0x40>
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d0eb      	beq.n	800e650 <mem_cmp+0x18>

	return r;
 800e678:	697b      	ldr	r3, [r7, #20]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3724      	adds	r7, #36	; 0x24
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e686:	b480      	push	{r7}
 800e688:	b083      	sub	sp, #12
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e690:	e002      	b.n	800e698 <chk_chr+0x12>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3301      	adds	r3, #1
 800e696:	607b      	str	r3, [r7, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <chk_chr+0x26>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	461a      	mov	r2, r3
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d1f2      	bne.n	800e692 <chk_chr+0xc>
	return *str;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	781b      	ldrb	r3, [r3, #0]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b085      	sub	sp, #20
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	60bb      	str	r3, [r7, #8]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	60fb      	str	r3, [r7, #12]
 800e6ce:	e029      	b.n	800e724 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e6d0:	4a27      	ldr	r2, [pc, #156]	; (800e770 <chk_lock+0xb4>)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	011b      	lsls	r3, r3, #4
 800e6d6:	4413      	add	r3, r2
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d01d      	beq.n	800e71a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6de:	4a24      	ldr	r2, [pc, #144]	; (800e770 <chk_lock+0xb4>)
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	011b      	lsls	r3, r3, #4
 800e6e4:	4413      	add	r3, r2
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d116      	bne.n	800e71e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6f0:	4a1f      	ldr	r2, [pc, #124]	; (800e770 <chk_lock+0xb4>)
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	011b      	lsls	r3, r3, #4
 800e6f6:	4413      	add	r3, r2
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e700:	429a      	cmp	r2, r3
 800e702:	d10c      	bne.n	800e71e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e704:	4a1a      	ldr	r2, [pc, #104]	; (800e770 <chk_lock+0xb4>)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	011b      	lsls	r3, r3, #4
 800e70a:	4413      	add	r3, r2
 800e70c:	3308      	adds	r3, #8
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e714:	429a      	cmp	r2, r3
 800e716:	d102      	bne.n	800e71e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e718:	e007      	b.n	800e72a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e71a:	2301      	movs	r3, #1
 800e71c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3301      	adds	r3, #1
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2b01      	cmp	r3, #1
 800e728:	d9d2      	bls.n	800e6d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2b02      	cmp	r3, #2
 800e72e:	d109      	bne.n	800e744 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <chk_lock+0x80>
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b02      	cmp	r3, #2
 800e73a:	d101      	bne.n	800e740 <chk_lock+0x84>
 800e73c:	2300      	movs	r3, #0
 800e73e:	e010      	b.n	800e762 <chk_lock+0xa6>
 800e740:	2312      	movs	r3, #18
 800e742:	e00e      	b.n	800e762 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d108      	bne.n	800e75c <chk_lock+0xa0>
 800e74a:	4a09      	ldr	r2, [pc, #36]	; (800e770 <chk_lock+0xb4>)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	4413      	add	r3, r2
 800e752:	330c      	adds	r3, #12
 800e754:	881b      	ldrh	r3, [r3, #0]
 800e756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e75a:	d101      	bne.n	800e760 <chk_lock+0xa4>
 800e75c:	2310      	movs	r3, #16
 800e75e:	e000      	b.n	800e762 <chk_lock+0xa6>
 800e760:	2300      	movs	r3, #0
}
 800e762:	4618      	mov	r0, r3
 800e764:	3714      	adds	r7, #20
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	20000f90 	.word	0x20000f90

0800e774 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e77a:	2300      	movs	r3, #0
 800e77c:	607b      	str	r3, [r7, #4]
 800e77e:	e002      	b.n	800e786 <enq_lock+0x12>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	3301      	adds	r3, #1
 800e784:	607b      	str	r3, [r7, #4]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2b01      	cmp	r3, #1
 800e78a:	d806      	bhi.n	800e79a <enq_lock+0x26>
 800e78c:	4a09      	ldr	r2, [pc, #36]	; (800e7b4 <enq_lock+0x40>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	011b      	lsls	r3, r3, #4
 800e792:	4413      	add	r3, r2
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d1f2      	bne.n	800e780 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b02      	cmp	r3, #2
 800e79e:	bf14      	ite	ne
 800e7a0:	2301      	movne	r3, #1
 800e7a2:	2300      	moveq	r3, #0
 800e7a4:	b2db      	uxtb	r3, r3
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	370c      	adds	r7, #12
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b0:	4770      	bx	lr
 800e7b2:	bf00      	nop
 800e7b4:	20000f90 	.word	0x20000f90

0800e7b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e01f      	b.n	800e808 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e7c8:	4a41      	ldr	r2, [pc, #260]	; (800e8d0 <inc_lock+0x118>)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	011b      	lsls	r3, r3, #4
 800e7ce:	4413      	add	r3, r2
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d113      	bne.n	800e802 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e7da:	4a3d      	ldr	r2, [pc, #244]	; (800e8d0 <inc_lock+0x118>)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	011b      	lsls	r3, r3, #4
 800e7e0:	4413      	add	r3, r2
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d109      	bne.n	800e802 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e7ee:	4a38      	ldr	r2, [pc, #224]	; (800e8d0 <inc_lock+0x118>)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	011b      	lsls	r3, r3, #4
 800e7f4:	4413      	add	r3, r2
 800e7f6:	3308      	adds	r3, #8
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d006      	beq.n	800e810 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3301      	adds	r3, #1
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d9dc      	bls.n	800e7c8 <inc_lock+0x10>
 800e80e:	e000      	b.n	800e812 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e810:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	2b02      	cmp	r3, #2
 800e816:	d132      	bne.n	800e87e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e818:	2300      	movs	r3, #0
 800e81a:	60fb      	str	r3, [r7, #12]
 800e81c:	e002      	b.n	800e824 <inc_lock+0x6c>
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3301      	adds	r3, #1
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d806      	bhi.n	800e838 <inc_lock+0x80>
 800e82a:	4a29      	ldr	r2, [pc, #164]	; (800e8d0 <inc_lock+0x118>)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	011b      	lsls	r3, r3, #4
 800e830:	4413      	add	r3, r2
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1f2      	bne.n	800e81e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b02      	cmp	r3, #2
 800e83c:	d101      	bne.n	800e842 <inc_lock+0x8a>
 800e83e:	2300      	movs	r3, #0
 800e840:	e040      	b.n	800e8c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	4922      	ldr	r1, [pc, #136]	; (800e8d0 <inc_lock+0x118>)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	011b      	lsls	r3, r3, #4
 800e84c:	440b      	add	r3, r1
 800e84e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689a      	ldr	r2, [r3, #8]
 800e854:	491e      	ldr	r1, [pc, #120]	; (800e8d0 <inc_lock+0x118>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	011b      	lsls	r3, r3, #4
 800e85a:	440b      	add	r3, r1
 800e85c:	3304      	adds	r3, #4
 800e85e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	695a      	ldr	r2, [r3, #20]
 800e864:	491a      	ldr	r1, [pc, #104]	; (800e8d0 <inc_lock+0x118>)
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	011b      	lsls	r3, r3, #4
 800e86a:	440b      	add	r3, r1
 800e86c:	3308      	adds	r3, #8
 800e86e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e870:	4a17      	ldr	r2, [pc, #92]	; (800e8d0 <inc_lock+0x118>)
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	011b      	lsls	r3, r3, #4
 800e876:	4413      	add	r3, r2
 800e878:	330c      	adds	r3, #12
 800e87a:	2200      	movs	r2, #0
 800e87c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <inc_lock+0xe0>
 800e884:	4a12      	ldr	r2, [pc, #72]	; (800e8d0 <inc_lock+0x118>)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	011b      	lsls	r3, r3, #4
 800e88a:	4413      	add	r3, r2
 800e88c:	330c      	adds	r3, #12
 800e88e:	881b      	ldrh	r3, [r3, #0]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d001      	beq.n	800e898 <inc_lock+0xe0>
 800e894:	2300      	movs	r3, #0
 800e896:	e015      	b.n	800e8c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d108      	bne.n	800e8b0 <inc_lock+0xf8>
 800e89e:	4a0c      	ldr	r2, [pc, #48]	; (800e8d0 <inc_lock+0x118>)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	4413      	add	r3, r2
 800e8a6:	330c      	adds	r3, #12
 800e8a8:	881b      	ldrh	r3, [r3, #0]
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	e001      	b.n	800e8b4 <inc_lock+0xfc>
 800e8b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e8b4:	4906      	ldr	r1, [pc, #24]	; (800e8d0 <inc_lock+0x118>)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	011b      	lsls	r3, r3, #4
 800e8ba:	440b      	add	r3, r1
 800e8bc:	330c      	adds	r3, #12
 800e8be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	3301      	adds	r3, #1
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3714      	adds	r7, #20
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr
 800e8d0:	20000f90 	.word	0x20000f90

0800e8d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	607b      	str	r3, [r7, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d825      	bhi.n	800e934 <dec_lock+0x60>
		n = Files[i].ctr;
 800e8e8:	4a17      	ldr	r2, [pc, #92]	; (800e948 <dec_lock+0x74>)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	4413      	add	r3, r2
 800e8f0:	330c      	adds	r3, #12
 800e8f2:	881b      	ldrh	r3, [r3, #0]
 800e8f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8f6:	89fb      	ldrh	r3, [r7, #14]
 800e8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8fc:	d101      	bne.n	800e902 <dec_lock+0x2e>
 800e8fe:	2300      	movs	r3, #0
 800e900:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e902:	89fb      	ldrh	r3, [r7, #14]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <dec_lock+0x3a>
 800e908:	89fb      	ldrh	r3, [r7, #14]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e90e:	4a0e      	ldr	r2, [pc, #56]	; (800e948 <dec_lock+0x74>)
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	011b      	lsls	r3, r3, #4
 800e914:	4413      	add	r3, r2
 800e916:	330c      	adds	r3, #12
 800e918:	89fa      	ldrh	r2, [r7, #14]
 800e91a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e91c:	89fb      	ldrh	r3, [r7, #14]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d105      	bne.n	800e92e <dec_lock+0x5a>
 800e922:	4a09      	ldr	r2, [pc, #36]	; (800e948 <dec_lock+0x74>)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	4413      	add	r3, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	737b      	strb	r3, [r7, #13]
 800e932:	e001      	b.n	800e938 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e934:	2302      	movs	r3, #2
 800e936:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e938:	7b7b      	ldrb	r3, [r7, #13]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3714      	adds	r7, #20
 800e93e:	46bd      	mov	sp, r7
 800e940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e944:	4770      	bx	lr
 800e946:	bf00      	nop
 800e948:	20000f90 	.word	0x20000f90

0800e94c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b085      	sub	sp, #20
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e954:	2300      	movs	r3, #0
 800e956:	60fb      	str	r3, [r7, #12]
 800e958:	e010      	b.n	800e97c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e95a:	4a0d      	ldr	r2, [pc, #52]	; (800e990 <clear_lock+0x44>)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	011b      	lsls	r3, r3, #4
 800e960:	4413      	add	r3, r2
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	429a      	cmp	r2, r3
 800e968:	d105      	bne.n	800e976 <clear_lock+0x2a>
 800e96a:	4a09      	ldr	r2, [pc, #36]	; (800e990 <clear_lock+0x44>)
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	011b      	lsls	r3, r3, #4
 800e970:	4413      	add	r3, r2
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	3301      	adds	r3, #1
 800e97a:	60fb      	str	r3, [r7, #12]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d9eb      	bls.n	800e95a <clear_lock+0xe>
	}
}
 800e982:	bf00      	nop
 800e984:	bf00      	nop
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	20000f90 	.word	0x20000f90

0800e994 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	78db      	ldrb	r3, [r3, #3]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d034      	beq.n	800ea12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7858      	ldrb	r0, [r3, #1]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	f7ff fd40 	bl	800e440 <disk_write>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	73fb      	strb	r3, [r7, #15]
 800e9ca:	e022      	b.n	800ea12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9d6:	697a      	ldr	r2, [r7, #20]
 800e9d8:	1ad2      	subs	r2, r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a1b      	ldr	r3, [r3, #32]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d217      	bcs.n	800ea12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	789b      	ldrb	r3, [r3, #2]
 800e9e6:	613b      	str	r3, [r7, #16]
 800e9e8:	e010      	b.n	800ea0c <sync_window+0x78>
					wsect += fs->fsize;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	697a      	ldr	r2, [r7, #20]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	7858      	ldrb	r0, [r3, #1]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9fe:	2301      	movs	r3, #1
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	f7ff fd1d 	bl	800e440 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d8eb      	bhi.n	800e9ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3718      	adds	r7, #24
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea26:	2300      	movs	r3, #0
 800ea28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d01b      	beq.n	800ea6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7ff ffad 	bl	800e994 <sync_window>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d113      	bne.n	800ea6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	7858      	ldrb	r0, [r3, #1]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea4e:	2301      	movs	r3, #1
 800ea50:	683a      	ldr	r2, [r7, #0]
 800ea52:	f7ff fcd5 	bl	800e400 <disk_read>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d004      	beq.n	800ea66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea62:	2301      	movs	r3, #1
 800ea64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	683a      	ldr	r2, [r7, #0]
 800ea6a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ea6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
	...

0800ea78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7ff ff87 	bl	800e994 <sync_window>
 800ea86:	4603      	mov	r3, r0
 800ea88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea8a:	7bfb      	ldrb	r3, [r7, #15]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d158      	bne.n	800eb42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d148      	bne.n	800eb2a <sync_fs+0xb2>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	791b      	ldrb	r3, [r3, #4]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d144      	bne.n	800eb2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	3338      	adds	r3, #56	; 0x38
 800eaa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7ff fda9 	bl	800e602 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	3338      	adds	r3, #56	; 0x38
 800eab4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eab8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff fd38 	bl	800e532 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3338      	adds	r3, #56	; 0x38
 800eac6:	4921      	ldr	r1, [pc, #132]	; (800eb4c <sync_fs+0xd4>)
 800eac8:	4618      	mov	r0, r3
 800eaca:	f7ff fd4d 	bl	800e568 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	3338      	adds	r3, #56	; 0x38
 800ead2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ead6:	491e      	ldr	r1, [pc, #120]	; (800eb50 <sync_fs+0xd8>)
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fd45 	bl	800e568 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3338      	adds	r3, #56	; 0x38
 800eae2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	4619      	mov	r1, r3
 800eaec:	4610      	mov	r0, r2
 800eaee:	f7ff fd3b 	bl	800e568 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	3338      	adds	r3, #56	; 0x38
 800eaf6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	4619      	mov	r1, r3
 800eb00:	4610      	mov	r0, r2
 800eb02:	f7ff fd31 	bl	800e568 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0a:	1c5a      	adds	r2, r3, #1
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	7858      	ldrb	r0, [r3, #1]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb1e:	2301      	movs	r3, #1
 800eb20:	f7ff fc8e 	bl	800e440 <disk_write>
			fs->fsi_flag = 0;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2200      	movs	r2, #0
 800eb28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	785b      	ldrb	r3, [r3, #1]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	2100      	movs	r1, #0
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7ff fca4 	bl	800e480 <disk_ioctl>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <sync_fs+0xca>
 800eb3e:	2301      	movs	r3, #1
 800eb40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3710      	adds	r7, #16
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	41615252 	.word	0x41615252
 800eb50:	61417272 	.word	0x61417272

0800eb54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	3b02      	subs	r3, #2
 800eb62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	3b02      	subs	r3, #2
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d301      	bcc.n	800eb74 <clust2sect+0x20>
 800eb70:	2300      	movs	r3, #0
 800eb72:	e008      	b.n	800eb86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	895b      	ldrh	r3, [r3, #10]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	fb03 f202 	mul.w	r2, r3, r2
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb84:	4413      	add	r3, r2
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b086      	sub	sp, #24
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
 800eb9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d904      	bls.n	800ebb2 <get_fat+0x20>
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	69db      	ldr	r3, [r3, #28]
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	429a      	cmp	r2, r3
 800ebb0:	d302      	bcc.n	800ebb8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	617b      	str	r3, [r7, #20]
 800ebb6:	e08f      	b.n	800ecd8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ebb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebbc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	781b      	ldrb	r3, [r3, #0]
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d062      	beq.n	800ec8c <get_fat+0xfa>
 800ebc6:	2b03      	cmp	r3, #3
 800ebc8:	dc7c      	bgt.n	800ecc4 <get_fat+0x132>
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d002      	beq.n	800ebd4 <get_fat+0x42>
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d042      	beq.n	800ec58 <get_fat+0xc6>
 800ebd2:	e077      	b.n	800ecc4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	60fb      	str	r3, [r7, #12]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	085b      	lsrs	r3, r3, #1
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	4413      	add	r3, r2
 800ebe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	0a5b      	lsrs	r3, r3, #9
 800ebea:	4413      	add	r3, r2
 800ebec:	4619      	mov	r1, r3
 800ebee:	6938      	ldr	r0, [r7, #16]
 800ebf0:	f7ff ff14 	bl	800ea1c <move_window>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d167      	bne.n	800ecca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	1c5a      	adds	r2, r3, #1
 800ebfe:	60fa      	str	r2, [r7, #12]
 800ec00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec04:	693a      	ldr	r2, [r7, #16]
 800ec06:	4413      	add	r3, r2
 800ec08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	0a5b      	lsrs	r3, r3, #9
 800ec16:	4413      	add	r3, r2
 800ec18:	4619      	mov	r1, r3
 800ec1a:	6938      	ldr	r0, [r7, #16]
 800ec1c:	f7ff fefe 	bl	800ea1c <move_window>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d153      	bne.n	800ecce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	4413      	add	r3, r2
 800ec30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec34:	021b      	lsls	r3, r3, #8
 800ec36:	461a      	mov	r2, r3
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	f003 0301 	and.w	r3, r3, #1
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <get_fat+0xbc>
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	091b      	lsrs	r3, r3, #4
 800ec4c:	e002      	b.n	800ec54 <get_fat+0xc2>
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec54:	617b      	str	r3, [r7, #20]
			break;
 800ec56:	e03f      	b.n	800ecd8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	4413      	add	r3, r2
 800ec62:	4619      	mov	r1, r3
 800ec64:	6938      	ldr	r0, [r7, #16]
 800ec66:	f7ff fed9 	bl	800ea1c <move_window>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d130      	bne.n	800ecd2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	005b      	lsls	r3, r3, #1
 800ec7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec7e:	4413      	add	r3, r2
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff fc1b 	bl	800e4bc <ld_word>
 800ec86:	4603      	mov	r3, r0
 800ec88:	617b      	str	r3, [r7, #20]
			break;
 800ec8a:	e025      	b.n	800ecd8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	09db      	lsrs	r3, r3, #7
 800ec94:	4413      	add	r3, r2
 800ec96:	4619      	mov	r1, r3
 800ec98:	6938      	ldr	r0, [r7, #16]
 800ec9a:	f7ff febf 	bl	800ea1c <move_window>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d118      	bne.n	800ecd6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ecb2:	4413      	add	r3, r2
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f7ff fc19 	bl	800e4ec <ld_dword>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ecc0:	617b      	str	r3, [r7, #20]
			break;
 800ecc2:	e009      	b.n	800ecd8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	617b      	str	r3, [r7, #20]
 800ecc8:	e006      	b.n	800ecd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecca:	bf00      	nop
 800eccc:	e004      	b.n	800ecd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecce:	bf00      	nop
 800ecd0:	e002      	b.n	800ecd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecd2:	bf00      	nop
 800ecd4:	e000      	b.n	800ecd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ecd6:	bf00      	nop
		}
	}

	return val;
 800ecd8:	697b      	ldr	r3, [r7, #20]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ece2:	b590      	push	{r4, r7, lr}
 800ece4:	b089      	sub	sp, #36	; 0x24
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	60f8      	str	r0, [r7, #12]
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ecee:	2302      	movs	r3, #2
 800ecf0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	f240 80d2 	bls.w	800ee9e <put_fat+0x1bc>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	69db      	ldr	r3, [r3, #28]
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	f080 80cc 	bcs.w	800ee9e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	2b03      	cmp	r3, #3
 800ed0c:	f000 8096 	beq.w	800ee3c <put_fat+0x15a>
 800ed10:	2b03      	cmp	r3, #3
 800ed12:	f300 80cd 	bgt.w	800eeb0 <put_fat+0x1ce>
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d002      	beq.n	800ed20 <put_fat+0x3e>
 800ed1a:	2b02      	cmp	r3, #2
 800ed1c:	d06e      	beq.n	800edfc <put_fat+0x11a>
 800ed1e:	e0c7      	b.n	800eeb0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	61bb      	str	r3, [r7, #24]
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	085b      	lsrs	r3, r3, #1
 800ed28:	69ba      	ldr	r2, [r7, #24]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	0a5b      	lsrs	r3, r3, #9
 800ed36:	4413      	add	r3, r2
 800ed38:	4619      	mov	r1, r3
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f7ff fe6e 	bl	800ea1c <move_window>
 800ed40:	4603      	mov	r3, r0
 800ed42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed44:	7ffb      	ldrb	r3, [r7, #31]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f040 80ab 	bne.w	800eea2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	1c59      	adds	r1, r3, #1
 800ed56:	61b9      	str	r1, [r7, #24]
 800ed58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed5c:	4413      	add	r3, r2
 800ed5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00d      	beq.n	800ed86 <put_fat+0xa4>
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	b25b      	sxtb	r3, r3
 800ed70:	f003 030f 	and.w	r3, r3, #15
 800ed74:	b25a      	sxtb	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	011b      	lsls	r3, r3, #4
 800ed7c:	b25b      	sxtb	r3, r3
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	b25b      	sxtb	r3, r3
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	e001      	b.n	800ed8a <put_fat+0xa8>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	697a      	ldr	r2, [r7, #20]
 800ed8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2201      	movs	r2, #1
 800ed92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	0a5b      	lsrs	r3, r3, #9
 800ed9c:	4413      	add	r3, r2
 800ed9e:	4619      	mov	r1, r3
 800eda0:	68f8      	ldr	r0, [r7, #12]
 800eda2:	f7ff fe3b 	bl	800ea1c <move_window>
 800eda6:	4603      	mov	r3, r0
 800eda8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edaa:	7ffb      	ldrb	r3, [r7, #31]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d17a      	bne.n	800eea6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edbc:	4413      	add	r3, r2
 800edbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d003      	beq.n	800edd2 <put_fat+0xf0>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	091b      	lsrs	r3, r3, #4
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	e00e      	b.n	800edf0 <put_fat+0x10e>
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	b25b      	sxtb	r3, r3
 800edd8:	f023 030f 	bic.w	r3, r3, #15
 800eddc:	b25a      	sxtb	r2, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	0a1b      	lsrs	r3, r3, #8
 800ede2:	b25b      	sxtb	r3, r3
 800ede4:	f003 030f 	and.w	r3, r3, #15
 800ede8:	b25b      	sxtb	r3, r3
 800edea:	4313      	orrs	r3, r2
 800edec:	b25b      	sxtb	r3, r3
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	697a      	ldr	r2, [r7, #20]
 800edf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2201      	movs	r2, #1
 800edf8:	70da      	strb	r2, [r3, #3]
			break;
 800edfa:	e059      	b.n	800eeb0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	0a1b      	lsrs	r3, r3, #8
 800ee04:	4413      	add	r3, r2
 800ee06:	4619      	mov	r1, r3
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7ff fe07 	bl	800ea1c <move_window>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee12:	7ffb      	ldrb	r3, [r7, #31]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d148      	bne.n	800eeaa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	005b      	lsls	r3, r3, #1
 800ee22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ee26:	4413      	add	r3, r2
 800ee28:	687a      	ldr	r2, [r7, #4]
 800ee2a:	b292      	uxth	r2, r2
 800ee2c:	4611      	mov	r1, r2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7ff fb7f 	bl	800e532 <st_word>
			fs->wflag = 1;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2201      	movs	r2, #1
 800ee38:	70da      	strb	r2, [r3, #3]
			break;
 800ee3a:	e039      	b.n	800eeb0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	09db      	lsrs	r3, r3, #7
 800ee44:	4413      	add	r3, r2
 800ee46:	4619      	mov	r1, r3
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7ff fde7 	bl	800ea1c <move_window>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee52:	7ffb      	ldrb	r3, [r7, #31]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d12a      	bne.n	800eeae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	009b      	lsls	r3, r3, #2
 800ee68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee6c:	4413      	add	r3, r2
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff fb3c 	bl	800e4ec <ld_dword>
 800ee74:	4603      	mov	r3, r0
 800ee76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee7a:	4323      	orrs	r3, r4
 800ee7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee8c:	4413      	add	r3, r2
 800ee8e:	6879      	ldr	r1, [r7, #4]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff fb69 	bl	800e568 <st_dword>
			fs->wflag = 1;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	2201      	movs	r2, #1
 800ee9a:	70da      	strb	r2, [r3, #3]
			break;
 800ee9c:	e008      	b.n	800eeb0 <put_fat+0x1ce>
		}
	}
 800ee9e:	bf00      	nop
 800eea0:	e006      	b.n	800eeb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eea2:	bf00      	nop
 800eea4:	e004      	b.n	800eeb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eea6:	bf00      	nop
 800eea8:	e002      	b.n	800eeb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eeaa:	bf00      	nop
 800eeac:	e000      	b.n	800eeb0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800eeae:	bf00      	nop
	return res;
 800eeb0:	7ffb      	ldrb	r3, [r7, #31]
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3724      	adds	r7, #36	; 0x24
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd90      	pop	{r4, r7, pc}

0800eeba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eeba:	b580      	push	{r7, lr}
 800eebc:	b088      	sub	sp, #32
 800eebe:	af00      	add	r7, sp, #0
 800eec0:	60f8      	str	r0, [r7, #12]
 800eec2:	60b9      	str	r1, [r7, #8]
 800eec4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d904      	bls.n	800eee0 <remove_chain+0x26>
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	69db      	ldr	r3, [r3, #28]
 800eeda:	68ba      	ldr	r2, [r7, #8]
 800eedc:	429a      	cmp	r2, r3
 800eede:	d301      	bcc.n	800eee4 <remove_chain+0x2a>
 800eee0:	2302      	movs	r3, #2
 800eee2:	e04b      	b.n	800ef7c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00c      	beq.n	800ef04 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eeea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	69b8      	ldr	r0, [r7, #24]
 800eef2:	f7ff fef6 	bl	800ece2 <put_fat>
 800eef6:	4603      	mov	r3, r0
 800eef8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eefa:	7ffb      	ldrb	r3, [r7, #31]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d001      	beq.n	800ef04 <remove_chain+0x4a>
 800ef00:	7ffb      	ldrb	r3, [r7, #31]
 800ef02:	e03b      	b.n	800ef7c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f7ff fe43 	bl	800eb92 <get_fat>
 800ef0c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d031      	beq.n	800ef78 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d101      	bne.n	800ef1e <remove_chain+0x64>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	e02e      	b.n	800ef7c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef24:	d101      	bne.n	800ef2a <remove_chain+0x70>
 800ef26:	2301      	movs	r3, #1
 800ef28:	e028      	b.n	800ef7c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	68b9      	ldr	r1, [r7, #8]
 800ef2e:	69b8      	ldr	r0, [r7, #24]
 800ef30:	f7ff fed7 	bl	800ece2 <put_fat>
 800ef34:	4603      	mov	r3, r0
 800ef36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef38:	7ffb      	ldrb	r3, [r7, #31]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <remove_chain+0x88>
 800ef3e:	7ffb      	ldrb	r3, [r7, #31]
 800ef40:	e01c      	b.n	800ef7c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	695a      	ldr	r2, [r3, #20]
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	3b02      	subs	r3, #2
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d20b      	bcs.n	800ef68 <remove_chain+0xae>
			fs->free_clst++;
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	695b      	ldr	r3, [r3, #20]
 800ef54:	1c5a      	adds	r2, r3, #1
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	791b      	ldrb	r3, [r3, #4]
 800ef5e:	f043 0301 	orr.w	r3, r3, #1
 800ef62:	b2da      	uxtb	r2, r3
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	69db      	ldr	r3, [r3, #28]
 800ef70:	68ba      	ldr	r2, [r7, #8]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d3c6      	bcc.n	800ef04 <remove_chain+0x4a>
 800ef76:	e000      	b.n	800ef7a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef78:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef7a:	2300      	movs	r3, #0
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3720      	adds	r7, #32
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d10d      	bne.n	800efb6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800efa0:	69bb      	ldr	r3, [r7, #24]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <create_chain+0x2c>
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	69db      	ldr	r3, [r3, #28]
 800efaa:	69ba      	ldr	r2, [r7, #24]
 800efac:	429a      	cmp	r2, r3
 800efae:	d31b      	bcc.n	800efe8 <create_chain+0x64>
 800efb0:	2301      	movs	r3, #1
 800efb2:	61bb      	str	r3, [r7, #24]
 800efb4:	e018      	b.n	800efe8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f7ff fdea 	bl	800eb92 <get_fat>
 800efbe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d801      	bhi.n	800efca <create_chain+0x46>
 800efc6:	2301      	movs	r3, #1
 800efc8:	e070      	b.n	800f0ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efd0:	d101      	bne.n	800efd6 <create_chain+0x52>
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	e06a      	b.n	800f0ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	69db      	ldr	r3, [r3, #28]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d201      	bcs.n	800efe4 <create_chain+0x60>
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	e063      	b.n	800f0ac <create_chain+0x128>
		scl = clst;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	3301      	adds	r3, #1
 800eff0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	69fa      	ldr	r2, [r7, #28]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d307      	bcc.n	800f00c <create_chain+0x88>
				ncl = 2;
 800effc:	2302      	movs	r3, #2
 800effe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f000:	69fa      	ldr	r2, [r7, #28]
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	429a      	cmp	r2, r3
 800f006:	d901      	bls.n	800f00c <create_chain+0x88>
 800f008:	2300      	movs	r3, #0
 800f00a:	e04f      	b.n	800f0ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f00c:	69f9      	ldr	r1, [r7, #28]
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7ff fdbf 	bl	800eb92 <get_fat>
 800f014:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d00e      	beq.n	800f03a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	2b01      	cmp	r3, #1
 800f020:	d003      	beq.n	800f02a <create_chain+0xa6>
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f028:	d101      	bne.n	800f02e <create_chain+0xaa>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	e03e      	b.n	800f0ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f02e:	69fa      	ldr	r2, [r7, #28]
 800f030:	69bb      	ldr	r3, [r7, #24]
 800f032:	429a      	cmp	r2, r3
 800f034:	d1da      	bne.n	800efec <create_chain+0x68>
 800f036:	2300      	movs	r3, #0
 800f038:	e038      	b.n	800f0ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f03a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f03c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f040:	69f9      	ldr	r1, [r7, #28]
 800f042:	6938      	ldr	r0, [r7, #16]
 800f044:	f7ff fe4d 	bl	800ece2 <put_fat>
 800f048:	4603      	mov	r3, r0
 800f04a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d109      	bne.n	800f066 <create_chain+0xe2>
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d006      	beq.n	800f066 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f058:	69fa      	ldr	r2, [r7, #28]
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6938      	ldr	r0, [r7, #16]
 800f05e:	f7ff fe40 	bl	800ece2 <put_fat>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d116      	bne.n	800f09a <create_chain+0x116>
		fs->last_clst = ncl;
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	69fa      	ldr	r2, [r7, #28]
 800f070:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f072:	693b      	ldr	r3, [r7, #16]
 800f074:	695a      	ldr	r2, [r3, #20]
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	69db      	ldr	r3, [r3, #28]
 800f07a:	3b02      	subs	r3, #2
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d804      	bhi.n	800f08a <create_chain+0x106>
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	695b      	ldr	r3, [r3, #20]
 800f084:	1e5a      	subs	r2, r3, #1
 800f086:	693b      	ldr	r3, [r7, #16]
 800f088:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	791b      	ldrb	r3, [r3, #4]
 800f08e:	f043 0301 	orr.w	r3, r3, #1
 800f092:	b2da      	uxtb	r2, r3
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	711a      	strb	r2, [r3, #4]
 800f098:	e007      	b.n	800f0aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f09a:	7dfb      	ldrb	r3, [r7, #23]
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d102      	bne.n	800f0a6 <create_chain+0x122>
 800f0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0a4:	e000      	b.n	800f0a8 <create_chain+0x124>
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f0aa:	69fb      	ldr	r3, [r7, #28]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3720      	adds	r7, #32
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0c8:	3304      	adds	r3, #4
 800f0ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	0a5b      	lsrs	r3, r3, #9
 800f0d0:	68fa      	ldr	r2, [r7, #12]
 800f0d2:	8952      	ldrh	r2, [r2, #10]
 800f0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	1d1a      	adds	r2, r3, #4
 800f0de:	613a      	str	r2, [r7, #16]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d101      	bne.n	800f0ee <clmt_clust+0x3a>
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	e010      	b.n	800f110 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d307      	bcc.n	800f106 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	1ad3      	subs	r3, r2, r3
 800f0fc:	617b      	str	r3, [r7, #20]
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	3304      	adds	r3, #4
 800f102:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f104:	e7e9      	b.n	800f0da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f106:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	4413      	add	r3, r2
}
 800f110:	4618      	mov	r0, r3
 800f112:	371c      	adds	r7, #28
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b086      	sub	sp, #24
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f132:	d204      	bcs.n	800f13e <dir_sdi+0x22>
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	f003 031f 	and.w	r3, r3, #31
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f13e:	2302      	movs	r3, #2
 800f140:	e063      	b.n	800f20a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d106      	bne.n	800f162 <dir_sdi+0x46>
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d902      	bls.n	800f162 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f160:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10c      	bne.n	800f182 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	095b      	lsrs	r3, r3, #5
 800f16c:	693a      	ldr	r2, [r7, #16]
 800f16e:	8912      	ldrh	r2, [r2, #8]
 800f170:	4293      	cmp	r3, r2
 800f172:	d301      	bcc.n	800f178 <dir_sdi+0x5c>
 800f174:	2302      	movs	r3, #2
 800f176:	e048      	b.n	800f20a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	61da      	str	r2, [r3, #28]
 800f180:	e029      	b.n	800f1d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	895b      	ldrh	r3, [r3, #10]
 800f186:	025b      	lsls	r3, r3, #9
 800f188:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f18a:	e019      	b.n	800f1c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6979      	ldr	r1, [r7, #20]
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fcfe 	bl	800eb92 <get_fat>
 800f196:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f19e:	d101      	bne.n	800f1a4 <dir_sdi+0x88>
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e032      	b.n	800f20a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d904      	bls.n	800f1b4 <dir_sdi+0x98>
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	697a      	ldr	r2, [r7, #20]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d301      	bcc.n	800f1b8 <dir_sdi+0x9c>
 800f1b4:	2302      	movs	r3, #2
 800f1b6:	e028      	b.n	800f20a <dir_sdi+0xee>
			ofs -= csz;
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	1ad3      	subs	r3, r2, r3
 800f1be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d2e1      	bcs.n	800f18c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f1c8:	6979      	ldr	r1, [r7, #20]
 800f1ca:	6938      	ldr	r0, [r7, #16]
 800f1cc:	f7ff fcc2 	bl	800eb54 <clust2sect>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	69db      	ldr	r3, [r3, #28]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <dir_sdi+0xcc>
 800f1e4:	2302      	movs	r3, #2
 800f1e6:	e010      	b.n	800f20a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	69da      	ldr	r2, [r3, #28]
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	0a5b      	lsrs	r3, r3, #9
 800f1f0:	441a      	add	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f202:	441a      	add	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f208:	2300      	movs	r3, #0
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3718      	adds	r7, #24
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b086      	sub	sp, #24
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	695b      	ldr	r3, [r3, #20]
 800f226:	3320      	adds	r3, #32
 800f228:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d003      	beq.n	800f23a <dir_next+0x28>
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f238:	d301      	bcc.n	800f23e <dir_next+0x2c>
 800f23a:	2304      	movs	r3, #4
 800f23c:	e0aa      	b.n	800f394 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f244:	2b00      	cmp	r3, #0
 800f246:	f040 8098 	bne.w	800f37a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	69db      	ldr	r3, [r3, #28]
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	699b      	ldr	r3, [r3, #24]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d10b      	bne.n	800f274 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	095b      	lsrs	r3, r3, #5
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	8912      	ldrh	r2, [r2, #8]
 800f264:	4293      	cmp	r3, r2
 800f266:	f0c0 8088 	bcc.w	800f37a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	61da      	str	r2, [r3, #28]
 800f270:	2304      	movs	r3, #4
 800f272:	e08f      	b.n	800f394 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f274:	68bb      	ldr	r3, [r7, #8]
 800f276:	0a5b      	lsrs	r3, r3, #9
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	8952      	ldrh	r2, [r2, #10]
 800f27c:	3a01      	subs	r2, #1
 800f27e:	4013      	ands	r3, r2
 800f280:	2b00      	cmp	r3, #0
 800f282:	d17a      	bne.n	800f37a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	4619      	mov	r1, r3
 800f28c:	4610      	mov	r0, r2
 800f28e:	f7ff fc80 	bl	800eb92 <get_fat>
 800f292:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d801      	bhi.n	800f29e <dir_next+0x8c>
 800f29a:	2302      	movs	r3, #2
 800f29c:	e07a      	b.n	800f394 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2a4:	d101      	bne.n	800f2aa <dir_next+0x98>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	e074      	b.n	800f394 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	697a      	ldr	r2, [r7, #20]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d358      	bcc.n	800f366 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d104      	bne.n	800f2c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	61da      	str	r2, [r3, #28]
 800f2c0:	2304      	movs	r3, #4
 800f2c2:	e067      	b.n	800f394 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f2c4:	687a      	ldr	r2, [r7, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	699b      	ldr	r3, [r3, #24]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f7ff fe59 	bl	800ef84 <create_chain>
 800f2d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d101      	bne.n	800f2de <dir_next+0xcc>
 800f2da:	2307      	movs	r3, #7
 800f2dc:	e05a      	b.n	800f394 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d101      	bne.n	800f2e8 <dir_next+0xd6>
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	e055      	b.n	800f394 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2e8:	697b      	ldr	r3, [r7, #20]
 800f2ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ee:	d101      	bne.n	800f2f4 <dir_next+0xe2>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e04f      	b.n	800f394 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2f4:	68f8      	ldr	r0, [r7, #12]
 800f2f6:	f7ff fb4d 	bl	800e994 <sync_window>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <dir_next+0xf2>
 800f300:	2301      	movs	r3, #1
 800f302:	e047      	b.n	800f394 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	3338      	adds	r3, #56	; 0x38
 800f308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f30c:	2100      	movs	r1, #0
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff f977 	bl	800e602 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
 800f318:	6979      	ldr	r1, [r7, #20]
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7ff fc1a 	bl	800eb54 <clust2sect>
 800f320:	4602      	mov	r2, r0
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	635a      	str	r2, [r3, #52]	; 0x34
 800f326:	e012      	b.n	800f34e <dir_next+0x13c>
						fs->wflag = 1;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2201      	movs	r2, #1
 800f32c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f32e:	68f8      	ldr	r0, [r7, #12]
 800f330:	f7ff fb30 	bl	800e994 <sync_window>
 800f334:	4603      	mov	r3, r0
 800f336:	2b00      	cmp	r3, #0
 800f338:	d001      	beq.n	800f33e <dir_next+0x12c>
 800f33a:	2301      	movs	r3, #1
 800f33c:	e02a      	b.n	800f394 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	3301      	adds	r3, #1
 800f342:	613b      	str	r3, [r7, #16]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	635a      	str	r2, [r3, #52]	; 0x34
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	895b      	ldrh	r3, [r3, #10]
 800f352:	461a      	mov	r2, r3
 800f354:	693b      	ldr	r3, [r7, #16]
 800f356:	4293      	cmp	r3, r2
 800f358:	d3e6      	bcc.n	800f328 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	1ad2      	subs	r2, r2, r3
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	697a      	ldr	r2, [r7, #20]
 800f36a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f36c:	6979      	ldr	r1, [r7, #20]
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	f7ff fbf0 	bl	800eb54 <clust2sect>
 800f374:	4602      	mov	r2, r0
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	68ba      	ldr	r2, [r7, #8]
 800f37e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f38c:	441a      	add	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3718      	adds	r7, #24
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7ff feb4 	bl	800f11c <dir_sdi>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d12b      	bne.n	800f416 <dir_alloc+0x7a>
		n = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	69db      	ldr	r3, [r3, #28]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f7ff fb27 	bl	800ea1c <move_window>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3d2:	7dfb      	ldrb	r3, [r7, #23]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d11d      	bne.n	800f414 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6a1b      	ldr	r3, [r3, #32]
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	2be5      	cmp	r3, #229	; 0xe5
 800f3e0:	d004      	beq.n	800f3ec <dir_alloc+0x50>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d107      	bne.n	800f3fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	613b      	str	r3, [r7, #16]
 800f3f2:	693a      	ldr	r2, [r7, #16]
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d102      	bne.n	800f400 <dir_alloc+0x64>
 800f3fa:	e00c      	b.n	800f416 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f400:	2101      	movs	r1, #1
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f7ff ff05 	bl	800f212 <dir_next>
 800f408:	4603      	mov	r3, r0
 800f40a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f40c:	7dfb      	ldrb	r3, [r7, #23]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d0d7      	beq.n	800f3c2 <dir_alloc+0x26>
 800f412:	e000      	b.n	800f416 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f414:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	2b04      	cmp	r3, #4
 800f41a:	d101      	bne.n	800f420 <dir_alloc+0x84>
 800f41c:	2307      	movs	r3, #7
 800f41e:	75fb      	strb	r3, [r7, #23]
	return res;
 800f420:	7dfb      	ldrb	r3, [r7, #23]
}
 800f422:	4618      	mov	r0, r3
 800f424:	3718      	adds	r7, #24
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}

0800f42a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f42a:	b580      	push	{r7, lr}
 800f42c:	b084      	sub	sp, #16
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
 800f432:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	331a      	adds	r3, #26
 800f438:	4618      	mov	r0, r3
 800f43a:	f7ff f83f 	bl	800e4bc <ld_word>
 800f43e:	4603      	mov	r3, r0
 800f440:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	2b03      	cmp	r3, #3
 800f448:	d109      	bne.n	800f45e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	3314      	adds	r3, #20
 800f44e:	4618      	mov	r0, r3
 800f450:	f7ff f834 	bl	800e4bc <ld_word>
 800f454:	4603      	mov	r3, r0
 800f456:	041b      	lsls	r3, r3, #16
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f45e:	68fb      	ldr	r3, [r7, #12]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b084      	sub	sp, #16
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	331a      	adds	r3, #26
 800f478:	687a      	ldr	r2, [r7, #4]
 800f47a:	b292      	uxth	r2, r2
 800f47c:	4611      	mov	r1, r2
 800f47e:	4618      	mov	r0, r3
 800f480:	f7ff f857 	bl	800e532 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	2b03      	cmp	r3, #3
 800f48a:	d109      	bne.n	800f4a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	f103 0214 	add.w	r2, r3, #20
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	0c1b      	lsrs	r3, r3, #16
 800f496:	b29b      	uxth	r3, r3
 800f498:	4619      	mov	r1, r3
 800f49a:	4610      	mov	r0, r2
 800f49c:	f7ff f849 	bl	800e532 <st_word>
	}
}
 800f4a0:	bf00      	nop
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f4a8:	b590      	push	{r4, r7, lr}
 800f4aa:	b087      	sub	sp, #28
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	331a      	adds	r3, #26
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7ff f800 	bl	800e4bc <ld_word>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <cmp_lfn+0x1e>
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	e059      	b.n	800f57a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4ce:	1e5a      	subs	r2, r3, #1
 800f4d0:	4613      	mov	r3, r2
 800f4d2:	005b      	lsls	r3, r3, #1
 800f4d4:	4413      	add	r3, r2
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f4dc:	2301      	movs	r3, #1
 800f4de:	81fb      	strh	r3, [r7, #14]
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	613b      	str	r3, [r7, #16]
 800f4e4:	e033      	b.n	800f54e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f4e6:	4a27      	ldr	r2, [pc, #156]	; (800f584 <cmp_lfn+0xdc>)
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7fe ffe1 	bl	800e4bc <ld_word>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f4fe:	89fb      	ldrh	r3, [r7, #14]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d01a      	beq.n	800f53a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	2bfe      	cmp	r3, #254	; 0xfe
 800f508:	d812      	bhi.n	800f530 <cmp_lfn+0x88>
 800f50a:	89bb      	ldrh	r3, [r7, #12]
 800f50c:	4618      	mov	r0, r3
 800f50e:	f002 f939 	bl	8011784 <ff_wtoupper>
 800f512:	4603      	mov	r3, r0
 800f514:	461c      	mov	r4, r3
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	1c5a      	adds	r2, r3, #1
 800f51a:	617a      	str	r2, [r7, #20]
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	4413      	add	r3, r2
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	4618      	mov	r0, r3
 800f526:	f002 f92d 	bl	8011784 <ff_wtoupper>
 800f52a:	4603      	mov	r3, r0
 800f52c:	429c      	cmp	r4, r3
 800f52e:	d001      	beq.n	800f534 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f530:	2300      	movs	r3, #0
 800f532:	e022      	b.n	800f57a <cmp_lfn+0xd2>
			}
			wc = uc;
 800f534:	89bb      	ldrh	r3, [r7, #12]
 800f536:	81fb      	strh	r3, [r7, #14]
 800f538:	e006      	b.n	800f548 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f53a:	89bb      	ldrh	r3, [r7, #12]
 800f53c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f540:	4293      	cmp	r3, r2
 800f542:	d001      	beq.n	800f548 <cmp_lfn+0xa0>
 800f544:	2300      	movs	r3, #0
 800f546:	e018      	b.n	800f57a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	3301      	adds	r3, #1
 800f54c:	613b      	str	r3, [r7, #16]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	2b0c      	cmp	r3, #12
 800f552:	d9c8      	bls.n	800f4e6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00b      	beq.n	800f578 <cmp_lfn+0xd0>
 800f560:	89fb      	ldrh	r3, [r7, #14]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d008      	beq.n	800f578 <cmp_lfn+0xd0>
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	4413      	add	r3, r2
 800f56e:	881b      	ldrh	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d001      	beq.n	800f578 <cmp_lfn+0xd0>
 800f574:	2300      	movs	r3, #0
 800f576:	e000      	b.n	800f57a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f578:	2301      	movs	r3, #1
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	371c      	adds	r7, #28
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd90      	pop	{r4, r7, pc}
 800f582:	bf00      	nop
 800f584:	0801c0d0 	.word	0x0801c0d0

0800f588 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	331a      	adds	r3, #26
 800f596:	4618      	mov	r0, r3
 800f598:	f7fe ff90 	bl	800e4bc <ld_word>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d001      	beq.n	800f5a6 <pick_lfn+0x1e>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	e04d      	b.n	800f642 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5ae:	1e5a      	subs	r2, r3, #1
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	005b      	lsls	r3, r3, #1
 800f5b4:	4413      	add	r3, r2
 800f5b6:	009b      	lsls	r3, r3, #2
 800f5b8:	4413      	add	r3, r2
 800f5ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f5bc:	2301      	movs	r3, #1
 800f5be:	81fb      	strh	r3, [r7, #14]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	613b      	str	r3, [r7, #16]
 800f5c4:	e028      	b.n	800f618 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f5c6:	4a21      	ldr	r2, [pc, #132]	; (800f64c <pick_lfn+0xc4>)
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7fe ff71 	bl	800e4bc <ld_word>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f5de:	89fb      	ldrh	r3, [r7, #14]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00f      	beq.n	800f604 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2bfe      	cmp	r3, #254	; 0xfe
 800f5e8:	d901      	bls.n	800f5ee <pick_lfn+0x66>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	e029      	b.n	800f642 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f5ee:	89bb      	ldrh	r3, [r7, #12]
 800f5f0:	81fb      	strh	r3, [r7, #14]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	1c5a      	adds	r2, r3, #1
 800f5f6:	617a      	str	r2, [r7, #20]
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	89fa      	ldrh	r2, [r7, #14]
 800f600:	801a      	strh	r2, [r3, #0]
 800f602:	e006      	b.n	800f612 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f604:	89bb      	ldrh	r3, [r7, #12]
 800f606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d001      	beq.n	800f612 <pick_lfn+0x8a>
 800f60e:	2300      	movs	r3, #0
 800f610:	e017      	b.n	800f642 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	3301      	adds	r3, #1
 800f616:	613b      	str	r3, [r7, #16]
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2b0c      	cmp	r3, #12
 800f61c:	d9d3      	bls.n	800f5c6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00a      	beq.n	800f640 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2bfe      	cmp	r3, #254	; 0xfe
 800f62e:	d901      	bls.n	800f634 <pick_lfn+0xac>
 800f630:	2300      	movs	r3, #0
 800f632:	e006      	b.n	800f642 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	005b      	lsls	r3, r3, #1
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	4413      	add	r3, r2
 800f63c:	2200      	movs	r2, #0
 800f63e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f640:	2301      	movs	r3, #1
}
 800f642:	4618      	mov	r0, r3
 800f644:	3718      	adds	r7, #24
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	0801c0d0 	.word	0x0801c0d0

0800f650 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b088      	sub	sp, #32
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	4611      	mov	r1, r2
 800f65c:	461a      	mov	r2, r3
 800f65e:	460b      	mov	r3, r1
 800f660:	71fb      	strb	r3, [r7, #7]
 800f662:	4613      	mov	r3, r2
 800f664:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	330d      	adds	r3, #13
 800f66a:	79ba      	ldrb	r2, [r7, #6]
 800f66c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	330b      	adds	r3, #11
 800f672:	220f      	movs	r2, #15
 800f674:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	330c      	adds	r3, #12
 800f67a:	2200      	movs	r2, #0
 800f67c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	331a      	adds	r3, #26
 800f682:	2100      	movs	r1, #0
 800f684:	4618      	mov	r0, r3
 800f686:	f7fe ff54 	bl	800e532 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	1e5a      	subs	r2, r3, #1
 800f68e:	4613      	mov	r3, r2
 800f690:	005b      	lsls	r3, r3, #1
 800f692:	4413      	add	r3, r2
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4413      	add	r3, r2
 800f698:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	82fb      	strh	r3, [r7, #22]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f6a2:	8afb      	ldrh	r3, [r7, #22]
 800f6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6a8:	4293      	cmp	r3, r2
 800f6aa:	d007      	beq.n	800f6bc <put_lfn+0x6c>
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	61fa      	str	r2, [r7, #28]
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	881b      	ldrh	r3, [r3, #0]
 800f6ba:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f6bc:	4a17      	ldr	r2, [pc, #92]	; (800f71c <put_lfn+0xcc>)
 800f6be:	69bb      	ldr	r3, [r7, #24]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	8afa      	ldrh	r2, [r7, #22]
 800f6cc:	4611      	mov	r1, r2
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe ff2f 	bl	800e532 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f6d4:	8afb      	ldrh	r3, [r7, #22]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d102      	bne.n	800f6e0 <put_lfn+0x90>
 800f6da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6de:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	61bb      	str	r3, [r7, #24]
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	2b0c      	cmp	r3, #12
 800f6ea:	d9da      	bls.n	800f6a2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f6ec:	8afb      	ldrh	r3, [r7, #22]
 800f6ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d006      	beq.n	800f704 <put_lfn+0xb4>
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d103      	bne.n	800f70c <put_lfn+0xbc>
 800f704:	79fb      	ldrb	r3, [r7, #7]
 800f706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f70a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	79fa      	ldrb	r2, [r7, #7]
 800f710:	701a      	strb	r2, [r3, #0]
}
 800f712:	bf00      	nop
 800f714:	3720      	adds	r7, #32
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	0801c0d0 	.word	0x0801c0d0

0800f720 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b08c      	sub	sp, #48	; 0x30
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
 800f72c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f72e:	220b      	movs	r2, #11
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f7fe ff44 	bl	800e5c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	2b05      	cmp	r3, #5
 800f73c:	d92b      	bls.n	800f796 <gen_numname+0x76>
		sr = seq;
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f742:	e022      	b.n	800f78a <gen_numname+0x6a>
			wc = *lfn++;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	1c9a      	adds	r2, r3, #2
 800f748:	607a      	str	r2, [r7, #4]
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f74e:	2300      	movs	r3, #0
 800f750:	62bb      	str	r3, [r7, #40]	; 0x28
 800f752:	e017      	b.n	800f784 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	005a      	lsls	r2, r3, #1
 800f758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	4413      	add	r3, r2
 800f760:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f764:	085b      	lsrs	r3, r3, #1
 800f766:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d005      	beq.n	800f77e <gen_numname+0x5e>
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f778:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f77c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	3301      	adds	r3, #1
 800f782:	62bb      	str	r3, [r7, #40]	; 0x28
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	2b0f      	cmp	r3, #15
 800f788:	d9e4      	bls.n	800f754 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1d8      	bne.n	800f744 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f796:	2307      	movs	r3, #7
 800f798:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 030f 	and.w	r3, r3, #15
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	3330      	adds	r3, #48	; 0x30
 800f7a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f7aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7ae:	2b39      	cmp	r3, #57	; 0x39
 800f7b0:	d904      	bls.n	800f7bc <gen_numname+0x9c>
 800f7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7b6:	3307      	adds	r3, #7
 800f7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7be:	1e5a      	subs	r2, r3, #1
 800f7c0:	62ba      	str	r2, [r7, #40]	; 0x28
 800f7c2:	3330      	adds	r3, #48	; 0x30
 800f7c4:	443b      	add	r3, r7
 800f7c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f7ca:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	091b      	lsrs	r3, r3, #4
 800f7d2:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1df      	bne.n	800f79a <gen_numname+0x7a>
	ns[i] = '~';
 800f7da:	f107 0214 	add.w	r2, r7, #20
 800f7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e0:	4413      	add	r3, r2
 800f7e2:	227e      	movs	r2, #126	; 0x7e
 800f7e4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ea:	e002      	b.n	800f7f2 <gen_numname+0xd2>
 800f7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f7f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d205      	bcs.n	800f806 <gen_numname+0xe6>
 800f7fa:	68fa      	ldr	r2, [r7, #12]
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	4413      	add	r3, r2
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	2b20      	cmp	r3, #32
 800f804:	d1f2      	bne.n	800f7ec <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	2b07      	cmp	r3, #7
 800f80a:	d807      	bhi.n	800f81c <gen_numname+0xfc>
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	1c5a      	adds	r2, r3, #1
 800f810:	62ba      	str	r2, [r7, #40]	; 0x28
 800f812:	3330      	adds	r3, #48	; 0x30
 800f814:	443b      	add	r3, r7
 800f816:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f81a:	e000      	b.n	800f81e <gen_numname+0xfe>
 800f81c:	2120      	movs	r1, #32
 800f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	627a      	str	r2, [r7, #36]	; 0x24
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	460a      	mov	r2, r1
 800f82a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82e:	2b07      	cmp	r3, #7
 800f830:	d9e9      	bls.n	800f806 <gen_numname+0xe6>
}
 800f832:	bf00      	nop
 800f834:	bf00      	nop
 800f836:	3730      	adds	r7, #48	; 0x30
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b085      	sub	sp, #20
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f848:	230b      	movs	r3, #11
 800f84a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	b2da      	uxtb	r2, r3
 800f850:	0852      	lsrs	r2, r2, #1
 800f852:	01db      	lsls	r3, r3, #7
 800f854:	4313      	orrs	r3, r2
 800f856:	b2da      	uxtb	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	1c59      	adds	r1, r3, #1
 800f85c:	6079      	str	r1, [r7, #4]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	4413      	add	r3, r2
 800f862:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	3b01      	subs	r3, #1
 800f868:	60bb      	str	r3, [r7, #8]
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1ed      	bne.n	800f84c <sum_sfn+0x10>
	return sum;
 800f870:	7bfb      	ldrb	r3, [r7, #15]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b086      	sub	sp, #24
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
 800f886:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f888:	2304      	movs	r3, #4
 800f88a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f892:	23ff      	movs	r3, #255	; 0xff
 800f894:	757b      	strb	r3, [r7, #21]
 800f896:	23ff      	movs	r3, #255	; 0xff
 800f898:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f89a:	e081      	b.n	800f9a0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	69db      	ldr	r3, [r3, #28]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	6938      	ldr	r0, [r7, #16]
 800f8a4:	f7ff f8ba 	bl	800ea1c <move_window>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8ac:	7dfb      	ldrb	r3, [r7, #23]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d17c      	bne.n	800f9ac <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f8ba:	7dbb      	ldrb	r3, [r7, #22]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d102      	bne.n	800f8c6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f8c0:	2304      	movs	r3, #4
 800f8c2:	75fb      	strb	r3, [r7, #23]
 800f8c4:	e077      	b.n	800f9b6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a1b      	ldr	r3, [r3, #32]
 800f8ca:	330b      	adds	r3, #11
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8d2:	73fb      	strb	r3, [r7, #15]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	7bfa      	ldrb	r2, [r7, #15]
 800f8d8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f8da:	7dbb      	ldrb	r3, [r7, #22]
 800f8dc:	2be5      	cmp	r3, #229	; 0xe5
 800f8de:	d00e      	beq.n	800f8fe <dir_read+0x80>
 800f8e0:	7dbb      	ldrb	r3, [r7, #22]
 800f8e2:	2b2e      	cmp	r3, #46	; 0x2e
 800f8e4:	d00b      	beq.n	800f8fe <dir_read+0x80>
 800f8e6:	7bfb      	ldrb	r3, [r7, #15]
 800f8e8:	f023 0320 	bic.w	r3, r3, #32
 800f8ec:	2b08      	cmp	r3, #8
 800f8ee:	bf0c      	ite	eq
 800f8f0:	2301      	moveq	r3, #1
 800f8f2:	2300      	movne	r3, #0
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d002      	beq.n	800f904 <dir_read+0x86>
				ord = 0xFF;
 800f8fe:	23ff      	movs	r3, #255	; 0xff
 800f900:	757b      	strb	r3, [r7, #21]
 800f902:	e044      	b.n	800f98e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f904:	7bfb      	ldrb	r3, [r7, #15]
 800f906:	2b0f      	cmp	r3, #15
 800f908:	d12f      	bne.n	800f96a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f90a:	7dbb      	ldrb	r3, [r7, #22]
 800f90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f910:	2b00      	cmp	r3, #0
 800f912:	d00d      	beq.n	800f930 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6a1b      	ldr	r3, [r3, #32]
 800f918:	7b5b      	ldrb	r3, [r3, #13]
 800f91a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f91c:	7dbb      	ldrb	r3, [r7, #22]
 800f91e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f922:	75bb      	strb	r3, [r7, #22]
 800f924:	7dbb      	ldrb	r3, [r7, #22]
 800f926:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	695a      	ldr	r2, [r3, #20]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f930:	7dba      	ldrb	r2, [r7, #22]
 800f932:	7d7b      	ldrb	r3, [r7, #21]
 800f934:	429a      	cmp	r2, r3
 800f936:	d115      	bne.n	800f964 <dir_read+0xe6>
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a1b      	ldr	r3, [r3, #32]
 800f93c:	330d      	adds	r3, #13
 800f93e:	781b      	ldrb	r3, [r3, #0]
 800f940:	7d3a      	ldrb	r2, [r7, #20]
 800f942:	429a      	cmp	r2, r3
 800f944:	d10e      	bne.n	800f964 <dir_read+0xe6>
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6a1b      	ldr	r3, [r3, #32]
 800f94e:	4619      	mov	r1, r3
 800f950:	4610      	mov	r0, r2
 800f952:	f7ff fe19 	bl	800f588 <pick_lfn>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d003      	beq.n	800f964 <dir_read+0xe6>
 800f95c:	7d7b      	ldrb	r3, [r7, #21]
 800f95e:	3b01      	subs	r3, #1
 800f960:	b2db      	uxtb	r3, r3
 800f962:	e000      	b.n	800f966 <dir_read+0xe8>
 800f964:	23ff      	movs	r3, #255	; 0xff
 800f966:	757b      	strb	r3, [r7, #21]
 800f968:	e011      	b.n	800f98e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f96a:	7d7b      	ldrb	r3, [r7, #21]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d109      	bne.n	800f984 <dir_read+0x106>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a1b      	ldr	r3, [r3, #32]
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff ff61 	bl	800f83c <sum_sfn>
 800f97a:	4603      	mov	r3, r0
 800f97c:	461a      	mov	r2, r3
 800f97e:	7d3b      	ldrb	r3, [r7, #20]
 800f980:	4293      	cmp	r3, r2
 800f982:	d015      	beq.n	800f9b0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f98a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f98c:	e010      	b.n	800f9b0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f98e:	2100      	movs	r1, #0
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff fc3e 	bl	800f212 <dir_next>
 800f996:	4603      	mov	r3, r0
 800f998:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d109      	bne.n	800f9b4 <dir_read+0x136>
	while (dp->sect) {
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f47f af79 	bne.w	800f89c <dir_read+0x1e>
 800f9aa:	e004      	b.n	800f9b6 <dir_read+0x138>
		if (res != FR_OK) break;
 800f9ac:	bf00      	nop
 800f9ae:	e002      	b.n	800f9b6 <dir_read+0x138>
					break;
 800f9b0:	bf00      	nop
 800f9b2:	e000      	b.n	800f9b6 <dir_read+0x138>
		if (res != FR_OK) break;
 800f9b4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f9b6:	7dfb      	ldrb	r3, [r7, #23]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <dir_read+0x144>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	61da      	str	r2, [r3, #28]
	return res;
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3718      	adds	r7, #24
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}

0800f9cc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f9da:	2100      	movs	r1, #0
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff fb9d 	bl	800f11c <dir_sdi>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <dir_find+0x24>
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	e0a9      	b.n	800fb44 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f9f0:	23ff      	movs	r3, #255	; 0xff
 800f9f2:	753b      	strb	r3, [r7, #20]
 800f9f4:	7d3b      	ldrb	r3, [r7, #20]
 800f9f6:	757b      	strb	r3, [r7, #21]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	69db      	ldr	r3, [r3, #28]
 800fa04:	4619      	mov	r1, r3
 800fa06:	6938      	ldr	r0, [r7, #16]
 800fa08:	f7ff f808 	bl	800ea1c <move_window>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa10:	7dfb      	ldrb	r3, [r7, #23]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f040 8090 	bne.w	800fb38 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6a1b      	ldr	r3, [r3, #32]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa20:	7dbb      	ldrb	r3, [r7, #22]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d102      	bne.n	800fa2c <dir_find+0x60>
 800fa26:	2304      	movs	r3, #4
 800fa28:	75fb      	strb	r3, [r7, #23]
 800fa2a:	e08a      	b.n	800fb42 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6a1b      	ldr	r3, [r3, #32]
 800fa30:	330b      	adds	r3, #11
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa38:	73fb      	strb	r3, [r7, #15]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	7bfa      	ldrb	r2, [r7, #15]
 800fa3e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fa40:	7dbb      	ldrb	r3, [r7, #22]
 800fa42:	2be5      	cmp	r3, #229	; 0xe5
 800fa44:	d007      	beq.n	800fa56 <dir_find+0x8a>
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
 800fa48:	f003 0308 	and.w	r3, r3, #8
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d009      	beq.n	800fa64 <dir_find+0x98>
 800fa50:	7bfb      	ldrb	r3, [r7, #15]
 800fa52:	2b0f      	cmp	r3, #15
 800fa54:	d006      	beq.n	800fa64 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa56:	23ff      	movs	r3, #255	; 0xff
 800fa58:	757b      	strb	r3, [r7, #21]
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa60:	631a      	str	r2, [r3, #48]	; 0x30
 800fa62:	e05e      	b.n	800fb22 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fa64:	7bfb      	ldrb	r3, [r7, #15]
 800fa66:	2b0f      	cmp	r3, #15
 800fa68:	d136      	bne.n	800fad8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d154      	bne.n	800fb22 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fa78:	7dbb      	ldrb	r3, [r7, #22]
 800fa7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00d      	beq.n	800fa9e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a1b      	ldr	r3, [r3, #32]
 800fa86:	7b5b      	ldrb	r3, [r3, #13]
 800fa88:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fa8a:	7dbb      	ldrb	r3, [r7, #22]
 800fa8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa90:	75bb      	strb	r3, [r7, #22]
 800fa92:	7dbb      	ldrb	r3, [r7, #22]
 800fa94:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	695a      	ldr	r2, [r3, #20]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa9e:	7dba      	ldrb	r2, [r7, #22]
 800faa0:	7d7b      	ldrb	r3, [r7, #21]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d115      	bne.n	800fad2 <dir_find+0x106>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a1b      	ldr	r3, [r3, #32]
 800faaa:	330d      	adds	r3, #13
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	7d3a      	ldrb	r2, [r7, #20]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d10e      	bne.n	800fad2 <dir_find+0x106>
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	68da      	ldr	r2, [r3, #12]
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6a1b      	ldr	r3, [r3, #32]
 800fabc:	4619      	mov	r1, r3
 800fabe:	4610      	mov	r0, r2
 800fac0:	f7ff fcf2 	bl	800f4a8 <cmp_lfn>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d003      	beq.n	800fad2 <dir_find+0x106>
 800faca:	7d7b      	ldrb	r3, [r7, #21]
 800facc:	3b01      	subs	r3, #1
 800face:	b2db      	uxtb	r3, r3
 800fad0:	e000      	b.n	800fad4 <dir_find+0x108>
 800fad2:	23ff      	movs	r3, #255	; 0xff
 800fad4:	757b      	strb	r3, [r7, #21]
 800fad6:	e024      	b.n	800fb22 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fad8:	7d7b      	ldrb	r3, [r7, #21]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d109      	bne.n	800faf2 <dir_find+0x126>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff feaa 	bl	800f83c <sum_sfn>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	7d3b      	ldrb	r3, [r7, #20]
 800faee:	4293      	cmp	r3, r2
 800faf0:	d024      	beq.n	800fb3c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800faf8:	f003 0301 	and.w	r3, r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10a      	bne.n	800fb16 <dir_find+0x14a>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6a18      	ldr	r0, [r3, #32]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	3324      	adds	r3, #36	; 0x24
 800fb08:	220b      	movs	r2, #11
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	f7fe fd94 	bl	800e638 <mem_cmp>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d014      	beq.n	800fb40 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fb16:	23ff      	movs	r3, #255	; 0xff
 800fb18:	757b      	strb	r3, [r7, #21]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb20:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb22:	2100      	movs	r1, #0
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff fb74 	bl	800f212 <dir_next>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f43f af65 	beq.w	800fa00 <dir_find+0x34>
 800fb36:	e004      	b.n	800fb42 <dir_find+0x176>
		if (res != FR_OK) break;
 800fb38:	bf00      	nop
 800fb3a:	e002      	b.n	800fb42 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb3c:	bf00      	nop
 800fb3e:	e000      	b.n	800fb42 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb40:	bf00      	nop

	return res;
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3718      	adds	r7, #24
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08c      	sub	sp, #48	; 0x30
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d001      	beq.n	800fb6c <dir_register+0x20>
 800fb68:	2306      	movs	r3, #6
 800fb6a:	e0e0      	b.n	800fd2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb70:	e002      	b.n	800fb78 <dir_register+0x2c>
 800fb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb74:	3301      	adds	r3, #1
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	68da      	ldr	r2, [r3, #12]
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	005b      	lsls	r3, r3, #1
 800fb80:	4413      	add	r3, r2
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1f4      	bne.n	800fb72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	220c      	movs	r2, #12
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe fd13 	bl	800e5c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fb9a:	7dfb      	ldrb	r3, [r7, #23]
 800fb9c:	f003 0301 	and.w	r3, r3, #1
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d032      	beq.n	800fc0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2240      	movs	r2, #64	; 0x40
 800fba8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800fbac:	2301      	movs	r3, #1
 800fbae:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbb0:	e016      	b.n	800fbe0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	68da      	ldr	r2, [r3, #12]
 800fbbc:	f107 010c 	add.w	r1, r7, #12
 800fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc2:	f7ff fdad 	bl	800f720 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff ff00 	bl	800f9cc <dir_find>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800fbd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	3301      	adds	r3, #1
 800fbde:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe2:	2b63      	cmp	r3, #99	; 0x63
 800fbe4:	d9e5      	bls.n	800fbb2 <dir_register+0x66>
 800fbe6:	e000      	b.n	800fbea <dir_register+0x9e>
			if (res != FR_OK) break;
 800fbe8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	2b64      	cmp	r3, #100	; 0x64
 800fbee:	d101      	bne.n	800fbf4 <dir_register+0xa8>
 800fbf0:	2307      	movs	r3, #7
 800fbf2:	e09c      	b.n	800fd2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fbf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbf8:	2b04      	cmp	r3, #4
 800fbfa:	d002      	beq.n	800fc02 <dir_register+0xb6>
 800fbfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc00:	e095      	b.n	800fd2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fc02:	7dfa      	ldrb	r2, [r7, #23]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	f003 0302 	and.w	r3, r3, #2
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <dir_register+0xd8>
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	330c      	adds	r3, #12
 800fc18:	4a47      	ldr	r2, [pc, #284]	; (800fd38 <dir_register+0x1ec>)
 800fc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc1e:	089b      	lsrs	r3, r3, #2
 800fc20:	3301      	adds	r3, #1
 800fc22:	e000      	b.n	800fc26 <dir_register+0xda>
 800fc24:	2301      	movs	r3, #1
 800fc26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fc28:	6a39      	ldr	r1, [r7, #32]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7ff fbb6 	bl	800f39c <dir_alloc>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d148      	bne.n	800fcd0 <dir_register+0x184>
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	623b      	str	r3, [r7, #32]
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d042      	beq.n	800fcd0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	695a      	ldr	r2, [r3, #20]
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	015b      	lsls	r3, r3, #5
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	4619      	mov	r1, r3
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7ff fa60 	bl	800f11c <dir_sdi>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fc62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d132      	bne.n	800fcd0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	3324      	adds	r3, #36	; 0x24
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff fde4 	bl	800f83c <sum_sfn>
 800fc74:	4603      	mov	r3, r0
 800fc76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	69f8      	ldr	r0, [r7, #28]
 800fc80:	f7fe fecc 	bl	800ea1c <move_window>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800fc8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d11d      	bne.n	800fcce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	68d8      	ldr	r0, [r3, #12]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a19      	ldr	r1, [r3, #32]
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	7efb      	ldrb	r3, [r7, #27]
 800fca0:	f7ff fcd6 	bl	800f650 <put_lfn>
				fs->wflag = 1;
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	2201      	movs	r2, #1
 800fca8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fcaa:	2100      	movs	r1, #0
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff fab0 	bl	800f212 <dir_next>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fcb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d107      	bne.n	800fcd0 <dir_register+0x184>
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	623b      	str	r3, [r7, #32]
 800fcc6:	6a3b      	ldr	r3, [r7, #32]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1d5      	bne.n	800fc78 <dir_register+0x12c>
 800fccc:	e000      	b.n	800fcd0 <dir_register+0x184>
				if (res != FR_OK) break;
 800fcce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fcd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d128      	bne.n	800fd2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	69db      	ldr	r3, [r3, #28]
 800fcdc:	4619      	mov	r1, r3
 800fcde:	69f8      	ldr	r0, [r7, #28]
 800fce0:	f7fe fe9c 	bl	800ea1c <move_window>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fcea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d11b      	bne.n	800fd2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	2220      	movs	r2, #32
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe fc81 	bl	800e602 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a18      	ldr	r0, [r3, #32]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3324      	adds	r3, #36	; 0x24
 800fd08:	220b      	movs	r2, #11
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f7fe fc58 	bl	800e5c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a1b      	ldr	r3, [r3, #32]
 800fd1a:	330c      	adds	r3, #12
 800fd1c:	f002 0218 	and.w	r2, r2, #24
 800fd20:	b2d2      	uxtb	r2, r2
 800fd22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	2201      	movs	r2, #1
 800fd28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fd2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3730      	adds	r7, #48	; 0x30
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	4ec4ec4f 	.word	0x4ec4ec4f

0800fd3c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f000 80c9 	beq.w	800feee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd64:	d032      	beq.n	800fdcc <get_fileinfo+0x90>
			i = j = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61bb      	str	r3, [r7, #24]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fd6e:	e01b      	b.n	800fda8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fd70:	89fb      	ldrh	r3, [r7, #14]
 800fd72:	2100      	movs	r1, #0
 800fd74:	4618      	mov	r0, r3
 800fd76:	f001 fcc9 	bl	801170c <ff_convert>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fd7e:	89fb      	ldrh	r3, [r7, #14]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <get_fileinfo+0x4e>
 800fd84:	2300      	movs	r3, #0
 800fd86:	61fb      	str	r3, [r7, #28]
 800fd88:	e01a      	b.n	800fdc0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	2bfe      	cmp	r3, #254	; 0xfe
 800fd8e:	d902      	bls.n	800fd96 <get_fileinfo+0x5a>
 800fd90:	2300      	movs	r3, #0
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	e014      	b.n	800fdc0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	1c5a      	adds	r2, r3, #1
 800fd9a:	61fa      	str	r2, [r7, #28]
 800fd9c:	89fa      	ldrh	r2, [r7, #14]
 800fd9e:	b2d1      	uxtb	r1, r2
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	4413      	add	r3, r2
 800fda4:	460a      	mov	r2, r1
 800fda6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	68da      	ldr	r2, [r3, #12]
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	1c59      	adds	r1, r3, #1
 800fdb0:	61b9      	str	r1, [r7, #24]
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	4413      	add	r3, r2
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	81fb      	strh	r3, [r7, #14]
 800fdba:	89fb      	ldrh	r3, [r7, #14]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1d7      	bne.n	800fd70 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fdc0:	683a      	ldr	r2, [r7, #0]
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	3316      	adds	r3, #22
 800fdc8:	2200      	movs	r2, #0
 800fdca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61bb      	str	r3, [r7, #24]
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	4413      	add	r3, r2
 800fdda:	3316      	adds	r3, #22
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800fde0:	e04c      	b.n	800fe7c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a1a      	ldr	r2, [r3, #32]
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	1c59      	adds	r1, r3, #1
 800fdea:	61f9      	str	r1, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	2b20      	cmp	r3, #32
 800fdf6:	d100      	bne.n	800fdfa <get_fileinfo+0xbe>
 800fdf8:	e040      	b.n	800fe7c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
 800fdfc:	2b05      	cmp	r3, #5
 800fdfe:	d101      	bne.n	800fe04 <get_fileinfo+0xc8>
 800fe00:	23e5      	movs	r3, #229	; 0xe5
 800fe02:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	2b09      	cmp	r3, #9
 800fe08:	d10f      	bne.n	800fe2a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800fe0a:	89bb      	ldrh	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d105      	bne.n	800fe1c <get_fileinfo+0xe0>
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	4413      	add	r3, r2
 800fe16:	3316      	adds	r3, #22
 800fe18:	222e      	movs	r2, #46	; 0x2e
 800fe1a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	61ba      	str	r2, [r7, #24]
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	4413      	add	r3, r2
 800fe26:	222e      	movs	r2, #46	; 0x2e
 800fe28:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	4413      	add	r3, r2
 800fe30:	3309      	adds	r3, #9
 800fe32:	7dfa      	ldrb	r2, [r7, #23]
 800fe34:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800fe36:	89bb      	ldrh	r3, [r7, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d11c      	bne.n	800fe76 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	2b40      	cmp	r3, #64	; 0x40
 800fe40:	d913      	bls.n	800fe6a <get_fileinfo+0x12e>
 800fe42:	7dfb      	ldrb	r3, [r7, #23]
 800fe44:	2b5a      	cmp	r3, #90	; 0x5a
 800fe46:	d810      	bhi.n	800fe6a <get_fileinfo+0x12e>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	461a      	mov	r2, r3
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	2b08      	cmp	r3, #8
 800fe56:	d901      	bls.n	800fe5c <get_fileinfo+0x120>
 800fe58:	2310      	movs	r3, #16
 800fe5a:	e000      	b.n	800fe5e <get_fileinfo+0x122>
 800fe5c:	2308      	movs	r3, #8
 800fe5e:	4013      	ands	r3, r2
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800fe64:	7dfb      	ldrb	r3, [r7, #23]
 800fe66:	3320      	adds	r3, #32
 800fe68:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	4413      	add	r3, r2
 800fe70:	3316      	adds	r3, #22
 800fe72:	7dfa      	ldrb	r2, [r7, #23]
 800fe74:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	2b0a      	cmp	r3, #10
 800fe80:	d9af      	bls.n	800fde2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fe82:	89bb      	ldrh	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10d      	bne.n	800fea4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3316      	adds	r3, #22
 800fe90:	2200      	movs	r2, #0
 800fe92:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a1b      	ldr	r3, [r3, #32]
 800fe98:	330c      	adds	r3, #12
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d101      	bne.n	800fea4 <get_fileinfo+0x168>
 800fea0:	2300      	movs	r3, #0
 800fea2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	4413      	add	r3, r2
 800feaa:	3309      	adds	r3, #9
 800feac:	2200      	movs	r2, #0
 800feae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	7ada      	ldrb	r2, [r3, #11]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	331c      	adds	r3, #28
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fb13 	bl	800e4ec <ld_dword>
 800fec6:	4602      	mov	r2, r0
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	3316      	adds	r3, #22
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fb0a 	bl	800e4ec <ld_dword>
 800fed8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	b29a      	uxth	r2, r3
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	80da      	strh	r2, [r3, #6]
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	0c1b      	lsrs	r3, r3, #16
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	809a      	strh	r2, [r3, #4]
 800feec:	e000      	b.n	800fef0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800feee:	bf00      	nop
}
 800fef0:	3720      	adds	r7, #32
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
	...

0800fef8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	1c59      	adds	r1, r3, #1
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6011      	str	r1, [r2, #0]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ff0e:	89fb      	ldrh	r3, [r7, #14]
 800ff10:	2b60      	cmp	r3, #96	; 0x60
 800ff12:	d905      	bls.n	800ff20 <get_achar+0x28>
 800ff14:	89fb      	ldrh	r3, [r7, #14]
 800ff16:	2b7a      	cmp	r3, #122	; 0x7a
 800ff18:	d802      	bhi.n	800ff20 <get_achar+0x28>
 800ff1a:	89fb      	ldrh	r3, [r7, #14]
 800ff1c:	3b20      	subs	r3, #32
 800ff1e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ff20:	89fb      	ldrh	r3, [r7, #14]
 800ff22:	2b7f      	cmp	r3, #127	; 0x7f
 800ff24:	d904      	bls.n	800ff30 <get_achar+0x38>
 800ff26:	89fb      	ldrh	r3, [r7, #14]
 800ff28:	3b80      	subs	r3, #128	; 0x80
 800ff2a:	4a05      	ldr	r2, [pc, #20]	; (800ff40 <get_achar+0x48>)
 800ff2c:	5cd3      	ldrb	r3, [r2, r3]
 800ff2e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800ff30:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	0801c050 	.word	0x0801c050

0800ff44 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08a      	sub	sp, #40	; 0x28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
 800ff50:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800ff52:	e009      	b.n	800ff68 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800ff54:	f107 0308 	add.w	r3, r7, #8
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7ff ffcd 	bl	800fef8 <get_achar>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d101      	bne.n	800ff68 <pattern_matching+0x24>
 800ff64:	2300      	movs	r3, #0
 800ff66:	e064      	b.n	8010032 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	1e5a      	subs	r2, r3, #1
 800ff6c:	607a      	str	r2, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d1f0      	bne.n	800ff54 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d104      	bne.n	800ff84 <pattern_matching+0x40>
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <pattern_matching+0x40>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e056      	b.n	8010032 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	617b      	str	r3, [r7, #20]
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	2b3f      	cmp	r3, #63	; 0x3f
 800ff92:	d003      	beq.n	800ff9c <pattern_matching+0x58>
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b2a      	cmp	r3, #42	; 0x2a
 800ff9a:	d126      	bne.n	800ffea <pattern_matching+0xa6>
				nm = nx = 0;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	61fb      	str	r3, [r7, #28]
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	617a      	str	r2, [r7, #20]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	2b3f      	cmp	r3, #63	; 0x3f
 800ffae:	d103      	bne.n	800ffb8 <pattern_matching+0x74>
 800ffb0:	6a3b      	ldr	r3, [r7, #32]
 800ffb2:	3301      	adds	r3, #1
 800ffb4:	623b      	str	r3, [r7, #32]
 800ffb6:	e001      	b.n	800ffbc <pattern_matching+0x78>
 800ffb8:	2301      	movs	r3, #1
 800ffba:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	2b3f      	cmp	r3, #63	; 0x3f
 800ffc2:	d0ef      	beq.n	800ffa4 <pattern_matching+0x60>
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffca:	d0eb      	beq.n	800ffa4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ffcc:	6978      	ldr	r0, [r7, #20]
 800ffce:	6939      	ldr	r1, [r7, #16]
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	6a3a      	ldr	r2, [r7, #32]
 800ffd4:	f7ff ffb6 	bl	800ff44 <pattern_matching>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d001      	beq.n	800ffe2 <pattern_matching+0x9e>
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e027      	b.n	8010032 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800ffe2:	693b      	ldr	r3, [r7, #16]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffe8:	e017      	b.n	801001a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800ffea:	f107 0314 	add.w	r3, r7, #20
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff ff82 	bl	800fef8 <get_achar>
 800fff4:	4603      	mov	r3, r0
 800fff6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800fff8:	f107 0310 	add.w	r3, r7, #16
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff ff7b 	bl	800fef8 <get_achar>
 8010002:	4603      	mov	r3, r0
 8010004:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8010006:	8b7a      	ldrh	r2, [r7, #26]
 8010008:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801000a:	429a      	cmp	r2, r3
 801000c:	d104      	bne.n	8010018 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801000e:	8b7b      	ldrh	r3, [r7, #26]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1bb      	bne.n	800ff8c <pattern_matching+0x48>
 8010014:	2301      	movs	r3, #1
 8010016:	e00c      	b.n	8010032 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8010018:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801001a:	f107 0308 	add.w	r3, r7, #8
 801001e:	4618      	mov	r0, r3
 8010020:	f7ff ff6a 	bl	800fef8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010024:	683b      	ldr	r3, [r7, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d002      	beq.n	8010030 <pattern_matching+0xec>
 801002a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1a9      	bne.n	800ff84 <pattern_matching+0x40>

	return 0;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3728      	adds	r7, #40	; 0x28
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
	...

0801003c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b08a      	sub	sp, #40	; 0x28
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
 8010044:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010046:	683b      	ldr	r3, [r7, #0]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	613b      	str	r3, [r7, #16]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	60fb      	str	r3, [r7, #12]
 8010054:	2300      	movs	r3, #0
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	61ba      	str	r2, [r7, #24]
 8010062:	693a      	ldr	r2, [r7, #16]
 8010064:	4413      	add	r3, r2
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801006a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801006c:	2b1f      	cmp	r3, #31
 801006e:	d940      	bls.n	80100f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010072:	2b2f      	cmp	r3, #47	; 0x2f
 8010074:	d006      	beq.n	8010084 <create_name+0x48>
 8010076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010078:	2b5c      	cmp	r3, #92	; 0x5c
 801007a:	d110      	bne.n	801009e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801007c:	e002      	b.n	8010084 <create_name+0x48>
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	3301      	adds	r3, #1
 8010082:	61bb      	str	r3, [r7, #24]
 8010084:	693a      	ldr	r2, [r7, #16]
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	4413      	add	r3, r2
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	2b2f      	cmp	r3, #47	; 0x2f
 801008e:	d0f6      	beq.n	801007e <create_name+0x42>
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	69bb      	ldr	r3, [r7, #24]
 8010094:	4413      	add	r3, r2
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	2b5c      	cmp	r3, #92	; 0x5c
 801009a:	d0f0      	beq.n	801007e <create_name+0x42>
			break;
 801009c:	e02a      	b.n	80100f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	2bfe      	cmp	r3, #254	; 0xfe
 80100a2:	d901      	bls.n	80100a8 <create_name+0x6c>
 80100a4:	2306      	movs	r3, #6
 80100a6:	e1ca      	b.n	801043e <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 80100a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80100ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100b0:	2101      	movs	r1, #1
 80100b2:	4618      	mov	r0, r3
 80100b4:	f001 fb2a 	bl	801170c <ff_convert>
 80100b8:	4603      	mov	r3, r0
 80100ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80100bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <create_name+0x8a>
 80100c2:	2306      	movs	r3, #6
 80100c4:	e1bb      	b.n	801043e <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80100c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100c8:	2b7f      	cmp	r3, #127	; 0x7f
 80100ca:	d809      	bhi.n	80100e0 <create_name+0xa4>
 80100cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100ce:	4619      	mov	r1, r3
 80100d0:	489f      	ldr	r0, [pc, #636]	; (8010350 <create_name+0x314>)
 80100d2:	f7fe fad8 	bl	800e686 <chk_chr>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <create_name+0xa4>
 80100dc:	2306      	movs	r3, #6
 80100de:	e1ae      	b.n	801043e <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	617a      	str	r2, [r7, #20]
 80100e6:	005b      	lsls	r3, r3, #1
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	4413      	add	r3, r2
 80100ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80100ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80100f0:	e7b4      	b.n	801005c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80100f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80100f4:	693a      	ldr	r2, [r7, #16]
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	441a      	add	r2, r3
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80100fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010100:	2b1f      	cmp	r3, #31
 8010102:	d801      	bhi.n	8010108 <create_name+0xcc>
 8010104:	2304      	movs	r3, #4
 8010106:	e000      	b.n	801010a <create_name+0xce>
 8010108:	2300      	movs	r3, #0
 801010a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	2b01      	cmp	r3, #1
 8010112:	d109      	bne.n	8010128 <create_name+0xec>
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801011a:	3b01      	subs	r3, #1
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	4413      	add	r3, r2
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	2b2e      	cmp	r3, #46	; 0x2e
 8010126:	d016      	beq.n	8010156 <create_name+0x11a>
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	2b02      	cmp	r3, #2
 801012c:	d14e      	bne.n	80101cc <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010134:	3b01      	subs	r3, #1
 8010136:	005b      	lsls	r3, r3, #1
 8010138:	68fa      	ldr	r2, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	2b2e      	cmp	r3, #46	; 0x2e
 8010140:	d144      	bne.n	80101cc <create_name+0x190>
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010148:	3b02      	subs	r3, #2
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	68fa      	ldr	r2, [r7, #12]
 801014e:	4413      	add	r3, r2
 8010150:	881b      	ldrh	r3, [r3, #0]
 8010152:	2b2e      	cmp	r3, #46	; 0x2e
 8010154:	d13a      	bne.n	80101cc <create_name+0x190>
		lfn[di] = 0;
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	4413      	add	r3, r2
 801015e:	2200      	movs	r2, #0
 8010160:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010162:	2300      	movs	r3, #0
 8010164:	623b      	str	r3, [r7, #32]
 8010166:	e00f      	b.n	8010188 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8010168:	6a3a      	ldr	r2, [r7, #32]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	429a      	cmp	r2, r3
 801016e:	d201      	bcs.n	8010174 <create_name+0x138>
 8010170:	212e      	movs	r1, #46	; 0x2e
 8010172:	e000      	b.n	8010176 <create_name+0x13a>
 8010174:	2120      	movs	r1, #32
 8010176:	687a      	ldr	r2, [r7, #4]
 8010178:	6a3b      	ldr	r3, [r7, #32]
 801017a:	4413      	add	r3, r2
 801017c:	3324      	adds	r3, #36	; 0x24
 801017e:	460a      	mov	r2, r1
 8010180:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010182:	6a3b      	ldr	r3, [r7, #32]
 8010184:	3301      	adds	r3, #1
 8010186:	623b      	str	r3, [r7, #32]
 8010188:	6a3b      	ldr	r3, [r7, #32]
 801018a:	2b0a      	cmp	r3, #10
 801018c:	d9ec      	bls.n	8010168 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 801018e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010192:	f043 0320 	orr.w	r3, r3, #32
 8010196:	b2d9      	uxtb	r1, r3
 8010198:	687a      	ldr	r2, [r7, #4]
 801019a:	6a3b      	ldr	r3, [r7, #32]
 801019c:	4413      	add	r3, r2
 801019e:	3324      	adds	r3, #36	; 0x24
 80101a0:	460a      	mov	r2, r1
 80101a2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80101a4:	2300      	movs	r3, #0
 80101a6:	e14a      	b.n	801043e <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80101ae:	3b01      	subs	r3, #1
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	68fa      	ldr	r2, [r7, #12]
 80101b4:	4413      	add	r3, r2
 80101b6:	881b      	ldrh	r3, [r3, #0]
 80101b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80101ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101bc:	2b20      	cmp	r3, #32
 80101be:	d002      	beq.n	80101c6 <create_name+0x18a>
 80101c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101c2:	2b2e      	cmp	r3, #46	; 0x2e
 80101c4:	d106      	bne.n	80101d4 <create_name+0x198>
		di--;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	3b01      	subs	r3, #1
 80101ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1ea      	bne.n	80101a8 <create_name+0x16c>
 80101d2:	e000      	b.n	80101d6 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 80101d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	005b      	lsls	r3, r3, #1
 80101da:	68fa      	ldr	r2, [r7, #12]
 80101dc:	4413      	add	r3, r2
 80101de:	2200      	movs	r2, #0
 80101e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d101      	bne.n	80101ec <create_name+0x1b0>
 80101e8:	2306      	movs	r3, #6
 80101ea:	e128      	b.n	801043e <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3324      	adds	r3, #36	; 0x24
 80101f0:	220b      	movs	r2, #11
 80101f2:	2120      	movs	r1, #32
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fe fa04 	bl	800e602 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80101fa:	2300      	movs	r3, #0
 80101fc:	61bb      	str	r3, [r7, #24]
 80101fe:	e002      	b.n	8010206 <create_name+0x1ca>
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	3301      	adds	r3, #1
 8010204:	61bb      	str	r3, [r7, #24]
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	005b      	lsls	r3, r3, #1
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	4413      	add	r3, r2
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	2b20      	cmp	r3, #32
 8010212:	d0f5      	beq.n	8010200 <create_name+0x1c4>
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4413      	add	r3, r2
 801021c:	881b      	ldrh	r3, [r3, #0]
 801021e:	2b2e      	cmp	r3, #46	; 0x2e
 8010220:	d0ee      	beq.n	8010200 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d009      	beq.n	801023c <create_name+0x200>
 8010228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801022c:	f043 0303 	orr.w	r3, r3, #3
 8010230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010234:	e002      	b.n	801023c <create_name+0x200>
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	3b01      	subs	r3, #1
 801023a:	617b      	str	r3, [r7, #20]
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d009      	beq.n	8010256 <create_name+0x21a>
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010248:	3b01      	subs	r3, #1
 801024a:	005b      	lsls	r3, r3, #1
 801024c:	68fa      	ldr	r2, [r7, #12]
 801024e:	4413      	add	r3, r2
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	2b2e      	cmp	r3, #46	; 0x2e
 8010254:	d1ef      	bne.n	8010236 <create_name+0x1fa>

	i = b = 0; ni = 8;
 8010256:	2300      	movs	r3, #0
 8010258:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801025c:	2300      	movs	r3, #0
 801025e:	623b      	str	r3, [r7, #32]
 8010260:	2308      	movs	r3, #8
 8010262:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010264:	69bb      	ldr	r3, [r7, #24]
 8010266:	1c5a      	adds	r2, r3, #1
 8010268:	61ba      	str	r2, [r7, #24]
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	4413      	add	r3, r2
 8010270:	881b      	ldrh	r3, [r3, #0]
 8010272:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 8097 	beq.w	80103aa <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 801027c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801027e:	2b20      	cmp	r3, #32
 8010280:	d006      	beq.n	8010290 <create_name+0x254>
 8010282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010284:	2b2e      	cmp	r3, #46	; 0x2e
 8010286:	d10a      	bne.n	801029e <create_name+0x262>
 8010288:	69ba      	ldr	r2, [r7, #24]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	429a      	cmp	r2, r3
 801028e:	d006      	beq.n	801029e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 8010290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010294:	f043 0303 	orr.w	r3, r3, #3
 8010298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801029c:	e084      	b.n	80103a8 <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801029e:	6a3a      	ldr	r2, [r7, #32]
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d203      	bcs.n	80102ae <create_name+0x272>
 80102a6:	69ba      	ldr	r2, [r7, #24]
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d123      	bne.n	80102f6 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	2b0b      	cmp	r3, #11
 80102b2:	d106      	bne.n	80102c2 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 80102b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b8:	f043 0303 	orr.w	r3, r3, #3
 80102bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102c0:	e076      	b.n	80103b0 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80102c2:	69ba      	ldr	r2, [r7, #24]
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d005      	beq.n	80102d6 <create_name+0x29a>
 80102ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102ce:	f043 0303 	orr.w	r3, r3, #3
 80102d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80102d6:	69ba      	ldr	r2, [r7, #24]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d867      	bhi.n	80103ae <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	61bb      	str	r3, [r7, #24]
 80102e2:	2308      	movs	r3, #8
 80102e4:	623b      	str	r3, [r7, #32]
 80102e6:	230b      	movs	r3, #11
 80102e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80102ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80102f4:	e058      	b.n	80103a8 <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80102f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f8:	2b7f      	cmp	r3, #127	; 0x7f
 80102fa:	d914      	bls.n	8010326 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80102fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102fe:	2100      	movs	r1, #0
 8010300:	4618      	mov	r0, r3
 8010302:	f001 fa03 	bl	801170c <ff_convert>
 8010306:	4603      	mov	r3, r0
 8010308:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801030c:	2b00      	cmp	r3, #0
 801030e:	d004      	beq.n	801031a <create_name+0x2de>
 8010310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010312:	3b80      	subs	r3, #128	; 0x80
 8010314:	4a0f      	ldr	r2, [pc, #60]	; (8010354 <create_name+0x318>)
 8010316:	5cd3      	ldrb	r3, [r2, r3]
 8010318:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801031a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801031e:	f043 0302 	orr.w	r3, r3, #2
 8010322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010328:	2b00      	cmp	r3, #0
 801032a:	d007      	beq.n	801033c <create_name+0x300>
 801032c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801032e:	4619      	mov	r1, r3
 8010330:	4809      	ldr	r0, [pc, #36]	; (8010358 <create_name+0x31c>)
 8010332:	f7fe f9a8 	bl	800e686 <chk_chr>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d00f      	beq.n	801035c <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 801033c:	235f      	movs	r3, #95	; 0x5f
 801033e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010344:	f043 0303 	orr.w	r3, r3, #3
 8010348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801034c:	e022      	b.n	8010394 <create_name+0x358>
 801034e:	bf00      	nop
 8010350:	080198e4 	.word	0x080198e4
 8010354:	0801c050 	.word	0x0801c050
 8010358:	080198f0 	.word	0x080198f0
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801035c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801035e:	2b40      	cmp	r3, #64	; 0x40
 8010360:	d909      	bls.n	8010376 <create_name+0x33a>
 8010362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010364:	2b5a      	cmp	r3, #90	; 0x5a
 8010366:	d806      	bhi.n	8010376 <create_name+0x33a>
					b |= 2;
 8010368:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801036c:	f043 0302 	orr.w	r3, r3, #2
 8010370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010374:	e00e      	b.n	8010394 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010378:	2b60      	cmp	r3, #96	; 0x60
 801037a:	d90b      	bls.n	8010394 <create_name+0x358>
 801037c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801037e:	2b7a      	cmp	r3, #122	; 0x7a
 8010380:	d808      	bhi.n	8010394 <create_name+0x358>
						b |= 1; w -= 0x20;
 8010382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010386:	f043 0301 	orr.w	r3, r3, #1
 801038a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801038e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010390:	3b20      	subs	r3, #32
 8010392:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	1c5a      	adds	r2, r3, #1
 8010398:	623a      	str	r2, [r7, #32]
 801039a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801039c:	b2d1      	uxtb	r1, r2
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	4413      	add	r3, r2
 80103a2:	460a      	mov	r2, r1
 80103a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80103a8:	e75c      	b.n	8010264 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 80103aa:	bf00      	nop
 80103ac:	e000      	b.n	80103b0 <create_name+0x374>
			if (si > di) break;			/* No extension */
 80103ae:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80103b6:	2be5      	cmp	r3, #229	; 0xe5
 80103b8:	d103      	bne.n	80103c2 <create_name+0x386>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2205      	movs	r2, #5
 80103be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	2b08      	cmp	r3, #8
 80103c6:	d104      	bne.n	80103d2 <create_name+0x396>
 80103c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80103d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103d6:	f003 030c 	and.w	r3, r3, #12
 80103da:	2b0c      	cmp	r3, #12
 80103dc:	d005      	beq.n	80103ea <create_name+0x3ae>
 80103de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103e2:	f003 0303 	and.w	r3, r3, #3
 80103e6:	2b03      	cmp	r3, #3
 80103e8:	d105      	bne.n	80103f6 <create_name+0x3ba>
 80103ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103ee:	f043 0302 	orr.w	r3, r3, #2
 80103f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80103f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fa:	f003 0302 	and.w	r3, r3, #2
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d117      	bne.n	8010432 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010406:	f003 0303 	and.w	r3, r3, #3
 801040a:	2b01      	cmp	r3, #1
 801040c:	d105      	bne.n	801041a <create_name+0x3de>
 801040e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010412:	f043 0310 	orr.w	r3, r3, #16
 8010416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801041a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801041e:	f003 030c 	and.w	r3, r3, #12
 8010422:	2b04      	cmp	r3, #4
 8010424:	d105      	bne.n	8010432 <create_name+0x3f6>
 8010426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801042a:	f043 0308 	orr.w	r3, r3, #8
 801042e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010438:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801043c:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801043e:	4618      	mov	r0, r3
 8010440:	3728      	adds	r7, #40	; 0x28
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
 8010446:	bf00      	nop

08010448 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b2f      	cmp	r3, #47	; 0x2f
 8010462:	d00b      	beq.n	801047c <follow_path+0x34>
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	2b5c      	cmp	r3, #92	; 0x5c
 801046a:	d007      	beq.n	801047c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	699a      	ldr	r2, [r3, #24]
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	609a      	str	r2, [r3, #8]
 8010474:	e00d      	b.n	8010492 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	3301      	adds	r3, #1
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	2b2f      	cmp	r3, #47	; 0x2f
 8010482:	d0f8      	beq.n	8010476 <follow_path+0x2e>
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	2b5c      	cmp	r3, #92	; 0x5c
 801048a:	d0f4      	beq.n	8010476 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	2200      	movs	r2, #0
 8010490:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	2b1f      	cmp	r3, #31
 8010498:	d80a      	bhi.n	80104b0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2280      	movs	r2, #128	; 0x80
 801049e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80104a2:	2100      	movs	r1, #0
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7fe fe39 	bl	800f11c <dir_sdi>
 80104aa:	4603      	mov	r3, r0
 80104ac:	75fb      	strb	r3, [r7, #23]
 80104ae:	e056      	b.n	801055e <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80104b0:	463b      	mov	r3, r7
 80104b2:	4619      	mov	r1, r3
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff fdc1 	bl	801003c <create_name>
 80104ba:	4603      	mov	r3, r0
 80104bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80104be:	7dfb      	ldrb	r3, [r7, #23]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d147      	bne.n	8010554 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7ff fa81 	bl	800f9cc <dir_find>
 80104ca:	4603      	mov	r3, r0
 80104cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d01b      	beq.n	8010514 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80104dc:	7dfb      	ldrb	r3, [r7, #23]
 80104de:	2b04      	cmp	r3, #4
 80104e0:	d13a      	bne.n	8010558 <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80104e2:	7afb      	ldrb	r3, [r7, #11]
 80104e4:	f003 0320 	and.w	r3, r3, #32
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00b      	beq.n	8010504 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80104ec:	7afb      	ldrb	r3, [r7, #11]
 80104ee:	f003 0304 	and.w	r3, r3, #4
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d02c      	beq.n	8010550 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2280      	movs	r2, #128	; 0x80
 80104fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80104fe:	2300      	movs	r3, #0
 8010500:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010502:	e029      	b.n	8010558 <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010504:	7afb      	ldrb	r3, [r7, #11]
 8010506:	f003 0304 	and.w	r3, r3, #4
 801050a:	2b00      	cmp	r3, #0
 801050c:	d124      	bne.n	8010558 <follow_path+0x110>
 801050e:	2305      	movs	r3, #5
 8010510:	75fb      	strb	r3, [r7, #23]
				break;
 8010512:	e021      	b.n	8010558 <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010514:	7afb      	ldrb	r3, [r7, #11]
 8010516:	f003 0304 	and.w	r3, r3, #4
 801051a:	2b00      	cmp	r3, #0
 801051c:	d11e      	bne.n	801055c <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801051e:	693b      	ldr	r3, [r7, #16]
 8010520:	799b      	ldrb	r3, [r3, #6]
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b00      	cmp	r3, #0
 8010528:	d102      	bne.n	8010530 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801052a:	2305      	movs	r3, #5
 801052c:	75fb      	strb	r3, [r7, #23]
 801052e:	e016      	b.n	801055e <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	695b      	ldr	r3, [r3, #20]
 801053a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801053e:	4413      	add	r3, r2
 8010540:	4619      	mov	r1, r3
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f7fe ff71 	bl	800f42a <ld_clust>
 8010548:	4602      	mov	r2, r0
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	609a      	str	r2, [r3, #8]
 801054e:	e7af      	b.n	80104b0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010550:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010552:	e7ad      	b.n	80104b0 <follow_path+0x68>
			if (res != FR_OK) break;
 8010554:	bf00      	nop
 8010556:	e002      	b.n	801055e <follow_path+0x116>
				break;
 8010558:	bf00      	nop
 801055a:	e000      	b.n	801055e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801055c:	bf00      	nop
			}
		}
	}

	return res;
 801055e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010560:	4618      	mov	r0, r3
 8010562:	3718      	adds	r7, #24
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010568:	b480      	push	{r7}
 801056a:	b087      	sub	sp, #28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010574:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d031      	beq.n	80105e2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	617b      	str	r3, [r7, #20]
 8010584:	e002      	b.n	801058c <get_ldnumber+0x24>
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	3301      	adds	r3, #1
 801058a:	617b      	str	r3, [r7, #20]
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2b1f      	cmp	r3, #31
 8010592:	d903      	bls.n	801059c <get_ldnumber+0x34>
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	2b3a      	cmp	r3, #58	; 0x3a
 801059a:	d1f4      	bne.n	8010586 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801059c:	697b      	ldr	r3, [r7, #20]
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b3a      	cmp	r3, #58	; 0x3a
 80105a2:	d11c      	bne.n	80105de <get_ldnumber+0x76>
			tp = *path;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	60fa      	str	r2, [r7, #12]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	3b30      	subs	r3, #48	; 0x30
 80105b4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	2b09      	cmp	r3, #9
 80105ba:	d80e      	bhi.n	80105da <get_ldnumber+0x72>
 80105bc:	68fa      	ldr	r2, [r7, #12]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d10a      	bne.n	80105da <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d107      	bne.n	80105da <get_ldnumber+0x72>
					vol = (int)i;
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80105ce:	697b      	ldr	r3, [r7, #20]
 80105d0:	3301      	adds	r3, #1
 80105d2:	617b      	str	r3, [r7, #20]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	e002      	b.n	80105e4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80105de:	2300      	movs	r3, #0
 80105e0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80105e2:	693b      	ldr	r3, [r7, #16]
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	371c      	adds	r7, #28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr

080105f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	70da      	strb	r2, [r3, #3]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010606:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7fe fa06 	bl	800ea1c <move_window>
 8010610:	4603      	mov	r3, r0
 8010612:	2b00      	cmp	r3, #0
 8010614:	d001      	beq.n	801061a <check_fs+0x2a>
 8010616:	2304      	movs	r3, #4
 8010618:	e038      	b.n	801068c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3338      	adds	r3, #56	; 0x38
 801061e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010622:	4618      	mov	r0, r3
 8010624:	f7fd ff4a 	bl	800e4bc <ld_word>
 8010628:	4603      	mov	r3, r0
 801062a:	461a      	mov	r2, r3
 801062c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010630:	429a      	cmp	r2, r3
 8010632:	d001      	beq.n	8010638 <check_fs+0x48>
 8010634:	2303      	movs	r3, #3
 8010636:	e029      	b.n	801068c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801063e:	2be9      	cmp	r3, #233	; 0xe9
 8010640:	d009      	beq.n	8010656 <check_fs+0x66>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010648:	2beb      	cmp	r3, #235	; 0xeb
 801064a:	d11e      	bne.n	801068a <check_fs+0x9a>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010652:	2b90      	cmp	r3, #144	; 0x90
 8010654:	d119      	bne.n	801068a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3338      	adds	r3, #56	; 0x38
 801065a:	3336      	adds	r3, #54	; 0x36
 801065c:	4618      	mov	r0, r3
 801065e:	f7fd ff45 	bl	800e4ec <ld_dword>
 8010662:	4603      	mov	r3, r0
 8010664:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010668:	4a0a      	ldr	r2, [pc, #40]	; (8010694 <check_fs+0xa4>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d101      	bne.n	8010672 <check_fs+0x82>
 801066e:	2300      	movs	r3, #0
 8010670:	e00c      	b.n	801068c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3338      	adds	r3, #56	; 0x38
 8010676:	3352      	adds	r3, #82	; 0x52
 8010678:	4618      	mov	r0, r3
 801067a:	f7fd ff37 	bl	800e4ec <ld_dword>
 801067e:	4603      	mov	r3, r0
 8010680:	4a05      	ldr	r2, [pc, #20]	; (8010698 <check_fs+0xa8>)
 8010682:	4293      	cmp	r3, r2
 8010684:	d101      	bne.n	801068a <check_fs+0x9a>
 8010686:	2300      	movs	r3, #0
 8010688:	e000      	b.n	801068c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801068a:	2302      	movs	r3, #2
}
 801068c:	4618      	mov	r0, r3
 801068e:	3708      	adds	r7, #8
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}
 8010694:	00544146 	.word	0x00544146
 8010698:	33544146 	.word	0x33544146

0801069c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b096      	sub	sp, #88	; 0x58
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	4613      	mov	r3, r2
 80106a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	2200      	movs	r2, #0
 80106ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f7ff ff59 	bl	8010568 <get_ldnumber>
 80106b6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80106b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	da01      	bge.n	80106c2 <find_volume+0x26>
 80106be:	230b      	movs	r3, #11
 80106c0:	e233      	b.n	8010b2a <find_volume+0x48e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80106c2:	4aa1      	ldr	r2, [pc, #644]	; (8010948 <find_volume+0x2ac>)
 80106c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80106cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <find_volume+0x3a>
 80106d2:	230c      	movs	r3, #12
 80106d4:	e229      	b.n	8010b2a <find_volume+0x48e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80106dc:	79fb      	ldrb	r3, [r7, #7]
 80106de:	f023 0301 	bic.w	r3, r3, #1
 80106e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d01a      	beq.n	8010722 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	785b      	ldrb	r3, [r3, #1]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fd fe45 	bl	800e380 <disk_status>
 80106f6:	4603      	mov	r3, r0
 80106f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80106fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010700:	f003 0301 	and.w	r3, r3, #1
 8010704:	2b00      	cmp	r3, #0
 8010706:	d10c      	bne.n	8010722 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010708:	79fb      	ldrb	r3, [r7, #7]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d007      	beq.n	801071e <find_volume+0x82>
 801070e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010712:	f003 0304 	and.w	r3, r3, #4
 8010716:	2b00      	cmp	r3, #0
 8010718:	d001      	beq.n	801071e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801071a:	230a      	movs	r3, #10
 801071c:	e205      	b.n	8010b2a <find_volume+0x48e>
			}
			return FR_OK;				/* The file system object is valid */
 801071e:	2300      	movs	r3, #0
 8010720:	e203      	b.n	8010b2a <find_volume+0x48e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010724:	2200      	movs	r2, #0
 8010726:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801072a:	b2da      	uxtb	r2, r3
 801072c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010732:	785b      	ldrb	r3, [r3, #1]
 8010734:	4618      	mov	r0, r3
 8010736:	f7fd fe3d 	bl	800e3b4 <disk_initialize>
 801073a:	4603      	mov	r3, r0
 801073c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	d001      	beq.n	8010750 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801074c:	2303      	movs	r3, #3
 801074e:	e1ec      	b.n	8010b2a <find_volume+0x48e>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010750:	79fb      	ldrb	r3, [r7, #7]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d007      	beq.n	8010766 <find_volume+0xca>
 8010756:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801075a:	f003 0304 	and.w	r3, r3, #4
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010762:	230a      	movs	r3, #10
 8010764:	e1e1      	b.n	8010b2a <find_volume+0x48e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010766:	2300      	movs	r3, #0
 8010768:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801076a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801076c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801076e:	f7ff ff3f 	bl	80105f0 <check_fs>
 8010772:	4603      	mov	r3, r0
 8010774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801077c:	2b02      	cmp	r3, #2
 801077e:	d149      	bne.n	8010814 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010780:	2300      	movs	r3, #0
 8010782:	643b      	str	r3, [r7, #64]	; 0x40
 8010784:	e01e      	b.n	80107c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801078c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801078e:	011b      	lsls	r3, r3, #4
 8010790:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010794:	4413      	add	r3, r2
 8010796:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079a:	3304      	adds	r3, #4
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d006      	beq.n	80107b0 <find_volume+0x114>
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	3308      	adds	r3, #8
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fd fea0 	bl	800e4ec <ld_dword>
 80107ac:	4602      	mov	r2, r0
 80107ae:	e000      	b.n	80107b2 <find_volume+0x116>
 80107b0:	2200      	movs	r2, #0
 80107b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b4:	009b      	lsls	r3, r3, #2
 80107b6:	3358      	adds	r3, #88	; 0x58
 80107b8:	443b      	add	r3, r7
 80107ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107c0:	3301      	adds	r3, #1
 80107c2:	643b      	str	r3, [r7, #64]	; 0x40
 80107c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107c6:	2b03      	cmp	r3, #3
 80107c8:	d9dd      	bls.n	8010786 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80107ca:	2300      	movs	r3, #0
 80107cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80107ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d002      	beq.n	80107da <find_volume+0x13e>
 80107d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107d6:	3b01      	subs	r3, #1
 80107d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80107da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	3358      	adds	r3, #88	; 0x58
 80107e0:	443b      	add	r3, r7
 80107e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80107e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80107e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d005      	beq.n	80107fa <find_volume+0x15e>
 80107ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107f2:	f7ff fefd 	bl	80105f0 <check_fs>
 80107f6:	4603      	mov	r3, r0
 80107f8:	e000      	b.n	80107fc <find_volume+0x160>
 80107fa:	2303      	movs	r3, #3
 80107fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010804:	2b01      	cmp	r3, #1
 8010806:	d905      	bls.n	8010814 <find_volume+0x178>
 8010808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801080a:	3301      	adds	r3, #1
 801080c:	643b      	str	r3, [r7, #64]	; 0x40
 801080e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010810:	2b03      	cmp	r3, #3
 8010812:	d9e2      	bls.n	80107da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010818:	2b04      	cmp	r3, #4
 801081a:	d101      	bne.n	8010820 <find_volume+0x184>
 801081c:	2301      	movs	r3, #1
 801081e:	e184      	b.n	8010b2a <find_volume+0x48e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010824:	2b01      	cmp	r3, #1
 8010826:	d901      	bls.n	801082c <find_volume+0x190>
 8010828:	230d      	movs	r3, #13
 801082a:	e17e      	b.n	8010b2a <find_volume+0x48e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801082c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082e:	3338      	adds	r3, #56	; 0x38
 8010830:	330b      	adds	r3, #11
 8010832:	4618      	mov	r0, r3
 8010834:	f7fd fe42 	bl	800e4bc <ld_word>
 8010838:	4603      	mov	r3, r0
 801083a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801083e:	d001      	beq.n	8010844 <find_volume+0x1a8>
 8010840:	230d      	movs	r3, #13
 8010842:	e172      	b.n	8010b2a <find_volume+0x48e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	3338      	adds	r3, #56	; 0x38
 8010848:	3316      	adds	r3, #22
 801084a:	4618      	mov	r0, r3
 801084c:	f7fd fe36 	bl	800e4bc <ld_word>
 8010850:	4603      	mov	r3, r0
 8010852:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <find_volume+0x1cc>
 801085a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085c:	3338      	adds	r3, #56	; 0x38
 801085e:	3324      	adds	r3, #36	; 0x24
 8010860:	4618      	mov	r0, r3
 8010862:	f7fd fe43 	bl	800e4ec <ld_dword>
 8010866:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801086c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010876:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087a:	789b      	ldrb	r3, [r3, #2]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d005      	beq.n	801088c <find_volume+0x1f0>
 8010880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010882:	789b      	ldrb	r3, [r3, #2]
 8010884:	2b02      	cmp	r3, #2
 8010886:	d001      	beq.n	801088c <find_volume+0x1f0>
 8010888:	230d      	movs	r3, #13
 801088a:	e14e      	b.n	8010b2a <find_volume+0x48e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	789b      	ldrb	r3, [r3, #2]
 8010890:	461a      	mov	r2, r3
 8010892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010894:	fb02 f303 	mul.w	r3, r2, r3
 8010898:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801089a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80108a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a8:	895b      	ldrh	r3, [r3, #10]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d008      	beq.n	80108c0 <find_volume+0x224>
 80108ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b0:	895b      	ldrh	r3, [r3, #10]
 80108b2:	461a      	mov	r2, r3
 80108b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b6:	895b      	ldrh	r3, [r3, #10]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	4013      	ands	r3, r2
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d001      	beq.n	80108c4 <find_volume+0x228>
 80108c0:	230d      	movs	r3, #13
 80108c2:	e132      	b.n	8010b2a <find_volume+0x48e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80108c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c6:	3338      	adds	r3, #56	; 0x38
 80108c8:	3311      	adds	r3, #17
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fd fdf6 	bl	800e4bc <ld_word>
 80108d0:	4603      	mov	r3, r0
 80108d2:	461a      	mov	r2, r3
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80108d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108da:	891b      	ldrh	r3, [r3, #8]
 80108dc:	f003 030f 	and.w	r3, r3, #15
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <find_volume+0x24e>
 80108e6:	230d      	movs	r3, #13
 80108e8:	e11f      	b.n	8010b2a <find_volume+0x48e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80108ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ec:	3338      	adds	r3, #56	; 0x38
 80108ee:	3313      	adds	r3, #19
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fd fde3 	bl	800e4bc <ld_word>
 80108f6:	4603      	mov	r3, r0
 80108f8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80108fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d106      	bne.n	801090e <find_volume+0x272>
 8010900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010902:	3338      	adds	r3, #56	; 0x38
 8010904:	3320      	adds	r3, #32
 8010906:	4618      	mov	r0, r3
 8010908:	f7fd fdf0 	bl	800e4ec <ld_dword>
 801090c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	3338      	adds	r3, #56	; 0x38
 8010912:	330e      	adds	r3, #14
 8010914:	4618      	mov	r0, r3
 8010916:	f7fd fdd1 	bl	800e4bc <ld_word>
 801091a:	4603      	mov	r3, r0
 801091c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801091e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010920:	2b00      	cmp	r3, #0
 8010922:	d101      	bne.n	8010928 <find_volume+0x28c>
 8010924:	230d      	movs	r3, #13
 8010926:	e100      	b.n	8010b2a <find_volume+0x48e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010928:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801092a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801092c:	4413      	add	r3, r2
 801092e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010930:	8912      	ldrh	r2, [r2, #8]
 8010932:	0912      	lsrs	r2, r2, #4
 8010934:	b292      	uxth	r2, r2
 8010936:	4413      	add	r3, r2
 8010938:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801093a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093e:	429a      	cmp	r2, r3
 8010940:	d204      	bcs.n	801094c <find_volume+0x2b0>
 8010942:	230d      	movs	r3, #13
 8010944:	e0f1      	b.n	8010b2a <find_volume+0x48e>
 8010946:	bf00      	nop
 8010948:	20000f88 	.word	0x20000f88
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801094c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801094e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010954:	8952      	ldrh	r2, [r2, #10]
 8010956:	fbb3 f3f2 	udiv	r3, r3, r2
 801095a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	2b00      	cmp	r3, #0
 8010960:	d101      	bne.n	8010966 <find_volume+0x2ca>
 8010962:	230d      	movs	r3, #13
 8010964:	e0e1      	b.n	8010b2a <find_volume+0x48e>
		fmt = FS_FAT32;
 8010966:	2303      	movs	r3, #3
 8010968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801096e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010972:	4293      	cmp	r3, r2
 8010974:	d802      	bhi.n	801097c <find_volume+0x2e0>
 8010976:	2302      	movs	r3, #2
 8010978:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010982:	4293      	cmp	r3, r2
 8010984:	d802      	bhi.n	801098c <find_volume+0x2f0>
 8010986:	2301      	movs	r3, #1
 8010988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098e:	1c9a      	adds	r2, r3, #2
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010998:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801099a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801099e:	441a      	add	r2, r3
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80109a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a8:	441a      	add	r2, r3
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80109ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d11e      	bne.n	80109f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80109b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b8:	3338      	adds	r3, #56	; 0x38
 80109ba:	332a      	adds	r3, #42	; 0x2a
 80109bc:	4618      	mov	r0, r3
 80109be:	f7fd fd7d 	bl	800e4bc <ld_word>
 80109c2:	4603      	mov	r3, r0
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d001      	beq.n	80109cc <find_volume+0x330>
 80109c8:	230d      	movs	r3, #13
 80109ca:	e0ae      	b.n	8010b2a <find_volume+0x48e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80109cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ce:	891b      	ldrh	r3, [r3, #8]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <find_volume+0x33c>
 80109d4:	230d      	movs	r3, #13
 80109d6:	e0a8      	b.n	8010b2a <find_volume+0x48e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	3338      	adds	r3, #56	; 0x38
 80109dc:	332c      	adds	r3, #44	; 0x2c
 80109de:	4618      	mov	r0, r3
 80109e0:	f7fd fd84 	bl	800e4ec <ld_dword>
 80109e4:	4602      	mov	r2, r0
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80109ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ec:	69db      	ldr	r3, [r3, #28]
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	647b      	str	r3, [r7, #68]	; 0x44
 80109f2:	e01f      	b.n	8010a34 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80109f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f6:	891b      	ldrh	r3, [r3, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d101      	bne.n	8010a00 <find_volume+0x364>
 80109fc:	230d      	movs	r3, #13
 80109fe:	e094      	b.n	8010b2a <find_volume+0x48e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a06:	441a      	add	r2, r3
 8010a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a10:	2b02      	cmp	r3, #2
 8010a12:	d103      	bne.n	8010a1c <find_volume+0x380>
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	69db      	ldr	r3, [r3, #28]
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	e00a      	b.n	8010a32 <find_volume+0x396>
 8010a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1e:	69da      	ldr	r2, [r3, #28]
 8010a20:	4613      	mov	r3, r2
 8010a22:	005b      	lsls	r3, r3, #1
 8010a24:	4413      	add	r3, r2
 8010a26:	085a      	lsrs	r2, r3, #1
 8010a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2a:	69db      	ldr	r3, [r3, #28]
 8010a2c:	f003 0301 	and.w	r3, r3, #1
 8010a30:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a32:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a36:	6a1a      	ldr	r2, [r3, #32]
 8010a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a3a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010a3e:	0a5b      	lsrs	r3, r3, #9
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d201      	bcs.n	8010a48 <find_volume+0x3ac>
 8010a44:	230d      	movs	r3, #13
 8010a46:	e070      	b.n	8010b2a <find_volume+0x48e>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a4e:	615a      	str	r2, [r3, #20]
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	695a      	ldr	r2, [r3, #20]
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5a:	2280      	movs	r2, #128	; 0x80
 8010a5c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010a5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d149      	bne.n	8010afa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a68:	3338      	adds	r3, #56	; 0x38
 8010a6a:	3330      	adds	r3, #48	; 0x30
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fd fd25 	bl	800e4bc <ld_word>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d140      	bne.n	8010afa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a80:	f7fd ffcc 	bl	800ea1c <move_window>
 8010a84:	4603      	mov	r3, r0
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d137      	bne.n	8010afa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	3338      	adds	r3, #56	; 0x38
 8010a94:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fd fd0f 	bl	800e4bc <ld_word>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d127      	bne.n	8010afa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aac:	3338      	adds	r3, #56	; 0x38
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fd fd1c 	bl	800e4ec <ld_dword>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	4a1f      	ldr	r2, [pc, #124]	; (8010b34 <find_volume+0x498>)
 8010ab8:	4293      	cmp	r3, r2
 8010aba:	d11e      	bne.n	8010afa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010abe:	3338      	adds	r3, #56	; 0x38
 8010ac0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7fd fd11 	bl	800e4ec <ld_dword>
 8010aca:	4603      	mov	r3, r0
 8010acc:	4a1a      	ldr	r2, [pc, #104]	; (8010b38 <find_volume+0x49c>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d113      	bne.n	8010afa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad4:	3338      	adds	r3, #56	; 0x38
 8010ad6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fd fd06 	bl	800e4ec <ld_dword>
 8010ae0:	4602      	mov	r2, r0
 8010ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae8:	3338      	adds	r3, #56	; 0x38
 8010aea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7fd fcfc 	bl	800e4ec <ld_dword>
 8010af4:	4602      	mov	r2, r0
 8010af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010b00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010b02:	4b0e      	ldr	r3, [pc, #56]	; (8010b3c <find_volume+0x4a0>)
 8010b04:	881b      	ldrh	r3, [r3, #0]
 8010b06:	3301      	adds	r3, #1
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	4b0c      	ldr	r3, [pc, #48]	; (8010b3c <find_volume+0x4a0>)
 8010b0c:	801a      	strh	r2, [r3, #0]
 8010b0e:	4b0b      	ldr	r3, [pc, #44]	; (8010b3c <find_volume+0x4a0>)
 8010b10:	881a      	ldrh	r2, [r3, #0]
 8010b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b14:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b18:	4a09      	ldr	r2, [pc, #36]	; (8010b40 <find_volume+0x4a4>)
 8010b1a:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	2200      	movs	r2, #0
 8010b20:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b24:	f7fd ff12 	bl	800e94c <clear_lock>
#endif
	return FR_OK;
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3758      	adds	r7, #88	; 0x58
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	41615252 	.word	0x41615252
 8010b38:	61417272 	.word	0x61417272
 8010b3c:	20000f8c 	.word	0x20000f8c
 8010b40:	20000fb0 	.word	0x20000fb0

08010b44 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010b4e:	2309      	movs	r3, #9
 8010b50:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d01c      	beq.n	8010b92 <validate+0x4e>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d018      	beq.n	8010b92 <validate+0x4e>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d013      	beq.n	8010b92 <validate+0x4e>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	889a      	ldrh	r2, [r3, #4]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	88db      	ldrh	r3, [r3, #6]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d10c      	bne.n	8010b92 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	785b      	ldrb	r3, [r3, #1]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f7fd fbfe 	bl	800e380 <disk_status>
 8010b84:	4603      	mov	r3, r0
 8010b86:	f003 0301 	and.w	r3, r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <validate+0x4e>
			res = FR_OK;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <validate+0x5a>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	e000      	b.n	8010ba0 <validate+0x5c>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	683a      	ldr	r2, [r7, #0]
 8010ba2:	6013      	str	r3, [r2, #0]
	return res;
 8010ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
	...

08010bb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b088      	sub	sp, #32
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010bc2:	f107 0310 	add.w	r3, r7, #16
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7ff fcce 	bl	8010568 <get_ldnumber>
 8010bcc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	da01      	bge.n	8010bd8 <f_mount+0x28>
 8010bd4:	230b      	movs	r3, #11
 8010bd6:	e02b      	b.n	8010c30 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010bd8:	4a17      	ldr	r2, [pc, #92]	; (8010c38 <f_mount+0x88>)
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010be0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010be2:	69bb      	ldr	r3, [r7, #24]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d005      	beq.n	8010bf4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010be8:	69b8      	ldr	r0, [r7, #24]
 8010bea:	f7fd feaf 	bl	800e94c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d002      	beq.n	8010c00 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010c00:	68fa      	ldr	r2, [r7, #12]
 8010c02:	490d      	ldr	r1, [pc, #52]	; (8010c38 <f_mount+0x88>)
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <f_mount+0x66>
 8010c10:	79fb      	ldrb	r3, [r7, #7]
 8010c12:	2b01      	cmp	r3, #1
 8010c14:	d001      	beq.n	8010c1a <f_mount+0x6a>
 8010c16:	2300      	movs	r3, #0
 8010c18:	e00a      	b.n	8010c30 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010c1a:	f107 010c 	add.w	r1, r7, #12
 8010c1e:	f107 0308 	add.w	r3, r7, #8
 8010c22:	2200      	movs	r2, #0
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7ff fd39 	bl	801069c <find_volume>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3720      	adds	r7, #32
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	20000f88 	.word	0x20000f88

08010c3c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b09a      	sub	sp, #104	; 0x68
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	60b9      	str	r1, [r7, #8]
 8010c46:	4613      	mov	r3, r2
 8010c48:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d101      	bne.n	8010c54 <f_open+0x18>
 8010c50:	2309      	movs	r3, #9
 8010c52:	e1ad      	b.n	8010fb0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c54:	79fb      	ldrb	r3, [r7, #7]
 8010c56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c5a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010c5c:	79fa      	ldrb	r2, [r7, #7]
 8010c5e:	f107 0110 	add.w	r1, r7, #16
 8010c62:	f107 0308 	add.w	r3, r7, #8
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7ff fd18 	bl	801069c <find_volume>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010c72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	f040 8191 	bne.w	8010f9e <f_open+0x362>
		dj.obj.fs = fs;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c80:	68ba      	ldr	r2, [r7, #8]
 8010c82:	f107 0314 	add.w	r3, r7, #20
 8010c86:	4611      	mov	r1, r2
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fbdd 	bl	8010448 <follow_path>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d11a      	bne.n	8010cd2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ca0:	b25b      	sxtb	r3, r3
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	da03      	bge.n	8010cae <f_open+0x72>
				res = FR_INVALID_NAME;
 8010ca6:	2306      	movs	r3, #6
 8010ca8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010cac:	e011      	b.n	8010cd2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cae:	79fb      	ldrb	r3, [r7, #7]
 8010cb0:	f023 0301 	bic.w	r3, r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	bf14      	ite	ne
 8010cb8:	2301      	movne	r3, #1
 8010cba:	2300      	moveq	r3, #0
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	f107 0314 	add.w	r3, r7, #20
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fd fcf8 	bl	800e6bc <chk_lock>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010cd2:	79fb      	ldrb	r3, [r7, #7]
 8010cd4:	f003 031c 	and.w	r3, r3, #28
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d07f      	beq.n	8010ddc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d017      	beq.n	8010d14 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010ce4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ce8:	2b04      	cmp	r3, #4
 8010cea:	d10e      	bne.n	8010d0a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010cec:	f7fd fd42 	bl	800e774 <enq_lock>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <f_open+0xc8>
 8010cf6:	f107 0314 	add.w	r3, r7, #20
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe ff26 	bl	800fb4c <dir_register>
 8010d00:	4603      	mov	r3, r0
 8010d02:	e000      	b.n	8010d06 <f_open+0xca>
 8010d04:	2312      	movs	r3, #18
 8010d06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010d0a:	79fb      	ldrb	r3, [r7, #7]
 8010d0c:	f043 0308 	orr.w	r3, r3, #8
 8010d10:	71fb      	strb	r3, [r7, #7]
 8010d12:	e010      	b.n	8010d36 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010d14:	7ebb      	ldrb	r3, [r7, #26]
 8010d16:	f003 0311 	and.w	r3, r3, #17
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d003      	beq.n	8010d26 <f_open+0xea>
					res = FR_DENIED;
 8010d1e:	2307      	movs	r3, #7
 8010d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010d24:	e007      	b.n	8010d36 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d26:	79fb      	ldrb	r3, [r7, #7]
 8010d28:	f003 0304 	and.w	r3, r3, #4
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <f_open+0xfa>
 8010d30:	2308      	movs	r3, #8
 8010d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d168      	bne.n	8010e10 <f_open+0x1d4>
 8010d3e:	79fb      	ldrb	r3, [r7, #7]
 8010d40:	f003 0308 	and.w	r3, r3, #8
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d063      	beq.n	8010e10 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010d48:	f7fa fb1e 	bl	800b388 <get_fattime>
 8010d4c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d50:	330e      	adds	r3, #14
 8010d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fd fc07 	bl	800e568 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d5c:	3316      	adds	r3, #22
 8010d5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d60:	4618      	mov	r0, r3
 8010d62:	f7fd fc01 	bl	800e568 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d68:	330b      	adds	r3, #11
 8010d6a:	2220      	movs	r2, #32
 8010d6c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d72:	4611      	mov	r1, r2
 8010d74:	4618      	mov	r0, r3
 8010d76:	f7fe fb58 	bl	800f42a <ld_clust>
 8010d7a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d80:	2200      	movs	r2, #0
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fe fb70 	bl	800f468 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d8a:	331c      	adds	r3, #28
 8010d8c:	2100      	movs	r1, #0
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7fd fbea 	bl	800e568 <st_dword>
					fs->wflag = 1;
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2201      	movs	r2, #1
 8010d98:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d037      	beq.n	8010e10 <f_open+0x1d4>
						dw = fs->winsect;
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010da6:	f107 0314 	add.w	r3, r7, #20
 8010daa:	2200      	movs	r2, #0
 8010dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7fe f883 	bl	800eeba <remove_chain>
 8010db4:	4603      	mov	r3, r0
 8010db6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010dba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d126      	bne.n	8010e10 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fd fe28 	bl	800ea1c <move_window>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dd6:	3a01      	subs	r2, #1
 8010dd8:	611a      	str	r2, [r3, #16]
 8010dda:	e019      	b.n	8010e10 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d115      	bne.n	8010e10 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010de4:	7ebb      	ldrb	r3, [r7, #26]
 8010de6:	f003 0310 	and.w	r3, r3, #16
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d003      	beq.n	8010df6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8010dee:	2304      	movs	r3, #4
 8010df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010df4:	e00c      	b.n	8010e10 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010df6:	79fb      	ldrb	r3, [r7, #7]
 8010df8:	f003 0302 	and.w	r3, r3, #2
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d007      	beq.n	8010e10 <f_open+0x1d4>
 8010e00:	7ebb      	ldrb	r3, [r7, #26]
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <f_open+0x1d4>
						res = FR_DENIED;
 8010e0a:	2307      	movs	r3, #7
 8010e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d128      	bne.n	8010e6a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010e18:	79fb      	ldrb	r3, [r7, #7]
 8010e1a:	f003 0308 	and.w	r3, r3, #8
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d003      	beq.n	8010e2a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010e22:	79fb      	ldrb	r3, [r7, #7]
 8010e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e28:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010e32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e38:	79fb      	ldrb	r3, [r7, #7]
 8010e3a:	f023 0301 	bic.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	bf14      	ite	ne
 8010e42:	2301      	movne	r3, #1
 8010e44:	2300      	moveq	r3, #0
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	461a      	mov	r2, r3
 8010e4a:	f107 0314 	add.w	r3, r7, #20
 8010e4e:	4611      	mov	r1, r2
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7fd fcb1 	bl	800e7b8 <inc_lock>
 8010e56:	4602      	mov	r2, r0
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	691b      	ldr	r3, [r3, #16]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d102      	bne.n	8010e6a <f_open+0x22e>
 8010e64:	2302      	movs	r3, #2
 8010e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f040 8095 	bne.w	8010f9e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe fad5 	bl	800f42a <ld_clust>
 8010e80:	4602      	mov	r2, r0
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e88:	331c      	adds	r3, #28
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fd fb2e 	bl	800e4ec <ld_dword>
 8010e90:	4602      	mov	r2, r0
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e9c:	693a      	ldr	r2, [r7, #16]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	88da      	ldrh	r2, [r3, #6]
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	79fa      	ldrb	r2, [r7, #7]
 8010eae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3330      	adds	r3, #48	; 0x30
 8010ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010eca:	2100      	movs	r1, #0
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fd fb98 	bl	800e602 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010ed2:	79fb      	ldrb	r3, [r7, #7]
 8010ed4:	f003 0320 	and.w	r3, r3, #32
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d060      	beq.n	8010f9e <f_open+0x362>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d05c      	beq.n	8010f9e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	68da      	ldr	r2, [r3, #12]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	895b      	ldrh	r3, [r3, #10]
 8010ef0:	025b      	lsls	r3, r3, #9
 8010ef2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f00:	e016      	b.n	8010f30 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fd fe43 	bl	800eb92 <get_fat>
 8010f0c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f10:	2b01      	cmp	r3, #1
 8010f12:	d802      	bhi.n	8010f1a <f_open+0x2de>
 8010f14:	2302      	movs	r3, #2
 8010f16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f20:	d102      	bne.n	8010f28 <f_open+0x2ec>
 8010f22:	2301      	movs	r3, #1
 8010f24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d103      	bne.n	8010f40 <f_open+0x304>
 8010f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d8e0      	bhi.n	8010f02 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f44:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d127      	bne.n	8010f9e <f_open+0x362>
 8010f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d022      	beq.n	8010f9e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fd fdf9 	bl	800eb54 <clust2sect>
 8010f62:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d103      	bne.n	8010f72 <f_open+0x336>
						res = FR_INT_ERR;
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010f70:	e015      	b.n	8010f9e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f74:	0a5a      	lsrs	r2, r3, #9
 8010f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f78:	441a      	add	r2, r3
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	7858      	ldrb	r0, [r3, #1]
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	6a1a      	ldr	r2, [r3, #32]
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	f7fd fa37 	bl	800e400 <disk_read>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <f_open+0x362>
 8010f98:	2301      	movs	r3, #1
 8010f9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d002      	beq.n	8010fac <f_open+0x370>
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010fac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3768      	adds	r7, #104	; 0x68
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b08e      	sub	sp, #56	; 0x38
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
 8010fc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f107 0214 	add.w	r2, r7, #20
 8010fd6:	4611      	mov	r1, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7ff fdb3 	bl	8010b44 <validate>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010fe4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d107      	bne.n	8010ffc <f_read+0x44>
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	7d5b      	ldrb	r3, [r3, #21]
 8010ff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d002      	beq.n	8011002 <f_read+0x4a>
 8010ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011000:	e115      	b.n	801122e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	7d1b      	ldrb	r3, [r3, #20]
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	2b00      	cmp	r3, #0
 801100c:	d101      	bne.n	8011012 <f_read+0x5a>
 801100e:	2307      	movs	r3, #7
 8011010:	e10d      	b.n	801122e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	699b      	ldr	r3, [r3, #24]
 801101a:	1ad3      	subs	r3, r2, r3
 801101c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	6a3b      	ldr	r3, [r7, #32]
 8011022:	429a      	cmp	r2, r3
 8011024:	f240 80fe 	bls.w	8011224 <f_read+0x26c>
 8011028:	6a3b      	ldr	r3, [r7, #32]
 801102a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801102c:	e0fa      	b.n	8011224 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	699b      	ldr	r3, [r3, #24]
 8011032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011036:	2b00      	cmp	r3, #0
 8011038:	f040 80c6 	bne.w	80111c8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	699b      	ldr	r3, [r3, #24]
 8011040:	0a5b      	lsrs	r3, r3, #9
 8011042:	697a      	ldr	r2, [r7, #20]
 8011044:	8952      	ldrh	r2, [r2, #10]
 8011046:	3a01      	subs	r2, #1
 8011048:	4013      	ands	r3, r2
 801104a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d12f      	bne.n	80110b2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	699b      	ldr	r3, [r3, #24]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d103      	bne.n	8011062 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	633b      	str	r3, [r7, #48]	; 0x30
 8011060:	e013      	b.n	801108a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011066:	2b00      	cmp	r3, #0
 8011068:	d007      	beq.n	801107a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	699b      	ldr	r3, [r3, #24]
 801106e:	4619      	mov	r1, r3
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f7fe f81f 	bl	800f0b4 <clmt_clust>
 8011076:	6338      	str	r0, [r7, #48]	; 0x30
 8011078:	e007      	b.n	801108a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801107a:	68fa      	ldr	r2, [r7, #12]
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	69db      	ldr	r3, [r3, #28]
 8011080:	4619      	mov	r1, r3
 8011082:	4610      	mov	r0, r2
 8011084:	f7fd fd85 	bl	800eb92 <get_fat>
 8011088:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801108c:	2b01      	cmp	r3, #1
 801108e:	d804      	bhi.n	801109a <f_read+0xe2>
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2202      	movs	r2, #2
 8011094:	755a      	strb	r2, [r3, #21]
 8011096:	2302      	movs	r3, #2
 8011098:	e0c9      	b.n	801122e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801109a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110a0:	d104      	bne.n	80110ac <f_read+0xf4>
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2201      	movs	r2, #1
 80110a6:	755a      	strb	r2, [r3, #21]
 80110a8:	2301      	movs	r3, #1
 80110aa:	e0c0      	b.n	801122e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110b0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	69db      	ldr	r3, [r3, #28]
 80110b8:	4619      	mov	r1, r3
 80110ba:	4610      	mov	r0, r2
 80110bc:	f7fd fd4a 	bl	800eb54 <clust2sect>
 80110c0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d104      	bne.n	80110d2 <f_read+0x11a>
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2202      	movs	r2, #2
 80110cc:	755a      	strb	r2, [r3, #21]
 80110ce:	2302      	movs	r3, #2
 80110d0:	e0ad      	b.n	801122e <f_read+0x276>
			sect += csect;
 80110d2:	69ba      	ldr	r2, [r7, #24]
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	4413      	add	r3, r2
 80110d8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	0a5b      	lsrs	r3, r3, #9
 80110de:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80110e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d039      	beq.n	801115a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80110e6:	69fa      	ldr	r2, [r7, #28]
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	4413      	add	r3, r2
 80110ec:	697a      	ldr	r2, [r7, #20]
 80110ee:	8952      	ldrh	r2, [r2, #10]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d905      	bls.n	8011100 <f_read+0x148>
					cc = fs->csize - csect;
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	895b      	ldrh	r3, [r3, #10]
 80110f8:	461a      	mov	r2, r3
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	7858      	ldrb	r0, [r3, #1]
 8011104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011106:	69ba      	ldr	r2, [r7, #24]
 8011108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801110a:	f7fd f979 	bl	800e400 <disk_read>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d004      	beq.n	801111e <f_read+0x166>
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2201      	movs	r2, #1
 8011118:	755a      	strb	r2, [r3, #21]
 801111a:	2301      	movs	r3, #1
 801111c:	e087      	b.n	801122e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	b25b      	sxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	da14      	bge.n	8011152 <f_read+0x19a>
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	6a1a      	ldr	r2, [r3, #32]
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	1ad3      	subs	r3, r2, r3
 8011130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011132:	429a      	cmp	r2, r3
 8011134:	d90d      	bls.n	8011152 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6a1a      	ldr	r2, [r3, #32]
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	025b      	lsls	r3, r3, #9
 8011140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011142:	18d0      	adds	r0, r2, r3
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	3330      	adds	r3, #48	; 0x30
 8011148:	f44f 7200 	mov.w	r2, #512	; 0x200
 801114c:	4619      	mov	r1, r3
 801114e:	f7fd fa37 	bl	800e5c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011154:	025b      	lsls	r3, r3, #9
 8011156:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011158:	e050      	b.n	80111fc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	69ba      	ldr	r2, [r7, #24]
 8011160:	429a      	cmp	r2, r3
 8011162:	d02e      	beq.n	80111c2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	7d1b      	ldrb	r3, [r3, #20]
 8011168:	b25b      	sxtb	r3, r3
 801116a:	2b00      	cmp	r3, #0
 801116c:	da18      	bge.n	80111a0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	7858      	ldrb	r0, [r3, #1]
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6a1a      	ldr	r2, [r3, #32]
 801117c:	2301      	movs	r3, #1
 801117e:	f7fd f95f 	bl	800e440 <disk_write>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d004      	beq.n	8011192 <f_read+0x1da>
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2201      	movs	r2, #1
 801118c:	755a      	strb	r2, [r3, #21]
 801118e:	2301      	movs	r3, #1
 8011190:	e04d      	b.n	801122e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	7d1b      	ldrb	r3, [r3, #20]
 8011196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801119a:	b2da      	uxtb	r2, r3
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	7858      	ldrb	r0, [r3, #1]
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111aa:	2301      	movs	r3, #1
 80111ac:	69ba      	ldr	r2, [r7, #24]
 80111ae:	f7fd f927 	bl	800e400 <disk_read>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d004      	beq.n	80111c2 <f_read+0x20a>
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	2201      	movs	r2, #1
 80111bc:	755a      	strb	r2, [r3, #21]
 80111be:	2301      	movs	r3, #1
 80111c0:	e035      	b.n	801122e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	69ba      	ldr	r2, [r7, #24]
 80111c6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	699b      	ldr	r3, [r3, #24]
 80111cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80111d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80111d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d901      	bls.n	80111e2 <f_read+0x22a>
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111f0:	4413      	add	r3, r2
 80111f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111f4:	4619      	mov	r1, r3
 80111f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111f8:	f7fd f9e2 	bl	800e5c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80111fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011200:	4413      	add	r3, r2
 8011202:	627b      	str	r3, [r7, #36]	; 0x24
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	699a      	ldr	r2, [r3, #24]
 8011208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120a:	441a      	add	r2, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	619a      	str	r2, [r3, #24]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	441a      	add	r2, r3
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	601a      	str	r2, [r3, #0]
 801121c:	687a      	ldr	r2, [r7, #4]
 801121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011220:	1ad3      	subs	r3, r2, r3
 8011222:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	f47f af01 	bne.w	801102e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801122c:	2300      	movs	r3, #0
}
 801122e:	4618      	mov	r0, r3
 8011230:	3738      	adds	r7, #56	; 0x38
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b086      	sub	sp, #24
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f107 0208 	add.w	r2, r7, #8
 8011244:	4611      	mov	r1, r2
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff fc7c 	bl	8010b44 <validate>
 801124c:	4603      	mov	r3, r0
 801124e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011250:	7dfb      	ldrb	r3, [r7, #23]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d168      	bne.n	8011328 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	7d1b      	ldrb	r3, [r3, #20]
 801125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801125e:	2b00      	cmp	r3, #0
 8011260:	d062      	beq.n	8011328 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	7d1b      	ldrb	r3, [r3, #20]
 8011266:	b25b      	sxtb	r3, r3
 8011268:	2b00      	cmp	r3, #0
 801126a:	da15      	bge.n	8011298 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	7858      	ldrb	r0, [r3, #1]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	6a1a      	ldr	r2, [r3, #32]
 801127a:	2301      	movs	r3, #1
 801127c:	f7fd f8e0 	bl	800e440 <disk_write>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <f_sync+0x54>
 8011286:	2301      	movs	r3, #1
 8011288:	e04f      	b.n	801132a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	7d1b      	ldrb	r3, [r3, #20]
 801128e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011292:	b2da      	uxtb	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011298:	f7fa f876 	bl	800b388 <get_fattime>
 801129c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a4:	4619      	mov	r1, r3
 80112a6:	4610      	mov	r0, r2
 80112a8:	f7fd fbb8 	bl	800ea1c <move_window>
 80112ac:	4603      	mov	r3, r0
 80112ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80112b0:	7dfb      	ldrb	r3, [r7, #23]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d138      	bne.n	8011328 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	330b      	adds	r3, #11
 80112c0:	781a      	ldrb	r2, [r3, #0]
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	330b      	adds	r3, #11
 80112c6:	f042 0220 	orr.w	r2, r2, #32
 80112ca:	b2d2      	uxtb	r2, r2
 80112cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6818      	ldr	r0, [r3, #0]
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	461a      	mov	r2, r3
 80112d8:	68f9      	ldr	r1, [r7, #12]
 80112da:	f7fe f8c5 	bl	800f468 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f103 021c 	add.w	r2, r3, #28
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	4619      	mov	r1, r3
 80112ea:	4610      	mov	r0, r2
 80112ec:	f7fd f93c 	bl	800e568 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	3316      	adds	r3, #22
 80112f4:	6939      	ldr	r1, [r7, #16]
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fd f936 	bl	800e568 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	3312      	adds	r3, #18
 8011300:	2100      	movs	r1, #0
 8011302:	4618      	mov	r0, r3
 8011304:	f7fd f915 	bl	800e532 <st_word>
					fs->wflag = 1;
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2201      	movs	r2, #1
 801130c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	4618      	mov	r0, r3
 8011312:	f7fd fbb1 	bl	800ea78 <sync_fs>
 8011316:	4603      	mov	r3, r0
 8011318:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	7d1b      	ldrb	r3, [r3, #20]
 801131e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011322:	b2da      	uxtb	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011328:	7dfb      	ldrb	r3, [r7, #23]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3718      	adds	r7, #24
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b084      	sub	sp, #16
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7ff ff7b 	bl	8011236 <f_sync>
 8011340:	4603      	mov	r3, r0
 8011342:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d118      	bne.n	801137c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f107 0208 	add.w	r2, r7, #8
 8011350:	4611      	mov	r1, r2
 8011352:	4618      	mov	r0, r3
 8011354:	f7ff fbf6 	bl	8010b44 <validate>
 8011358:	4603      	mov	r3, r0
 801135a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801135c:	7bfb      	ldrb	r3, [r7, #15]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10c      	bne.n	801137c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	691b      	ldr	r3, [r3, #16]
 8011366:	4618      	mov	r0, r3
 8011368:	f7fd fab4 	bl	800e8d4 <dec_lock>
 801136c:	4603      	mov	r3, r0
 801136e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011370:	7bfb      	ldrb	r3, [r7, #15]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d102      	bne.n	801137c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801137c:	7bfb      	ldrb	r3, [r7, #15]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}

08011386 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011386:	b590      	push	{r4, r7, lr}
 8011388:	b093      	sub	sp, #76	; 0x4c
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801138e:	f107 0108 	add.w	r1, r7, #8
 8011392:	1d3b      	adds	r3, r7, #4
 8011394:	2200      	movs	r2, #0
 8011396:	4618      	mov	r0, r3
 8011398:	f7ff f980 	bl	801069c <find_volume>
 801139c:	4603      	mov	r3, r0
 801139e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80113a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d131      	bne.n	801140e <f_chdir+0x88>
		dj.obj.fs = fs;
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	f107 030c 	add.w	r3, r7, #12
 80113b4:	4611      	mov	r1, r2
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7ff f846 	bl	8010448 <follow_path>
 80113bc:	4603      	mov	r3, r0
 80113be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80113c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d11a      	bne.n	8011400 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80113ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80113ce:	b25b      	sxtb	r3, r3
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	da03      	bge.n	80113dc <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	697a      	ldr	r2, [r7, #20]
 80113d8:	619a      	str	r2, [r3, #24]
 80113da:	e011      	b.n	8011400 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80113dc:	7cbb      	ldrb	r3, [r7, #18]
 80113de:	f003 0310 	and.w	r3, r3, #16
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d009      	beq.n	80113fa <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ea:	68bc      	ldr	r4, [r7, #8]
 80113ec:	4611      	mov	r1, r2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe f81b 	bl	800f42a <ld_clust>
 80113f4:	4603      	mov	r3, r0
 80113f6:	61a3      	str	r3, [r4, #24]
 80113f8:	e002      	b.n	8011400 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80113fa:	2305      	movs	r3, #5
 80113fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011404:	2b04      	cmp	r3, #4
 8011406:	d102      	bne.n	801140e <f_chdir+0x88>
 8011408:	2305      	movs	r3, #5
 801140a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 801140e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011412:	4618      	mov	r0, r3
 8011414:	374c      	adds	r7, #76	; 0x4c
 8011416:	46bd      	mov	sp, r7
 8011418:	bd90      	pop	{r4, r7, pc}

0801141a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801141a:	b580      	push	{r7, lr}
 801141c:	b086      	sub	sp, #24
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d101      	bne.n	801142e <f_opendir+0x14>
 801142a:	2309      	movs	r3, #9
 801142c:	e064      	b.n	80114f8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011432:	f107 010c 	add.w	r1, r7, #12
 8011436:	463b      	mov	r3, r7
 8011438:	2200      	movs	r2, #0
 801143a:	4618      	mov	r0, r3
 801143c:	f7ff f92e 	bl	801069c <find_volume>
 8011440:	4603      	mov	r3, r0
 8011442:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011444:	7dfb      	ldrb	r3, [r7, #23]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d14f      	bne.n	80114ea <f_opendir+0xd0>
		obj->fs = fs;
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	4619      	mov	r1, r3
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7fe fff7 	bl	8010448 <follow_path>
 801145a:	4603      	mov	r3, r0
 801145c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d13d      	bne.n	80114e0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801146a:	b25b      	sxtb	r3, r3
 801146c:	2b00      	cmp	r3, #0
 801146e:	db12      	blt.n	8011496 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	799b      	ldrb	r3, [r3, #6]
 8011474:	f003 0310 	and.w	r3, r3, #16
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00a      	beq.n	8011492 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 801147c:	68fa      	ldr	r2, [r7, #12]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	4619      	mov	r1, r3
 8011484:	4610      	mov	r0, r2
 8011486:	f7fd ffd0 	bl	800f42a <ld_clust>
 801148a:	4602      	mov	r2, r0
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	609a      	str	r2, [r3, #8]
 8011490:	e001      	b.n	8011496 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011492:	2305      	movs	r3, #5
 8011494:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8011496:	7dfb      	ldrb	r3, [r7, #23]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d121      	bne.n	80114e0 <f_opendir+0xc6>
				obj->id = fs->id;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	88da      	ldrh	r2, [r3, #6]
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80114a4:	2100      	movs	r1, #0
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7fd fe38 	bl	800f11c <dir_sdi>
 80114ac:	4603      	mov	r3, r0
 80114ae:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80114b0:	7dfb      	ldrb	r3, [r7, #23]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d114      	bne.n	80114e0 <f_opendir+0xc6>
					if (obj->sclust) {
 80114b6:	693b      	ldr	r3, [r7, #16]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00d      	beq.n	80114da <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80114be:	2100      	movs	r1, #0
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f7fd f979 	bl	800e7b8 <inc_lock>
 80114c6:	4602      	mov	r2, r0
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d105      	bne.n	80114e0 <f_opendir+0xc6>
 80114d4:	2312      	movs	r3, #18
 80114d6:	75fb      	strb	r3, [r7, #23]
 80114d8:	e002      	b.n	80114e0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	2200      	movs	r2, #0
 80114de:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80114e0:	7dfb      	ldrb	r3, [r7, #23]
 80114e2:	2b04      	cmp	r3, #4
 80114e4:	d101      	bne.n	80114ea <f_opendir+0xd0>
 80114e6:	2305      	movs	r3, #5
 80114e8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d002      	beq.n	80114f6 <f_opendir+0xdc>
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2200      	movs	r2, #0
 80114f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80114f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3718      	adds	r7, #24
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd80      	pop	{r7, pc}

08011500 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b084      	sub	sp, #16
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f107 0208 	add.w	r2, r7, #8
 801150e:	4611      	mov	r1, r2
 8011510:	4618      	mov	r0, r3
 8011512:	f7ff fb17 	bl	8010b44 <validate>
 8011516:	4603      	mov	r3, r0
 8011518:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801151a:	7bfb      	ldrb	r3, [r7, #15]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d110      	bne.n	8011542 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	691b      	ldr	r3, [r3, #16]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d006      	beq.n	8011536 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	691b      	ldr	r3, [r3, #16]
 801152c:	4618      	mov	r0, r3
 801152e:	f7fd f9d1 	bl	800e8d4 <dec_lock>
 8011532:	4603      	mov	r3, r0
 8011534:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011536:	7bfb      	ldrb	r3, [r7, #15]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d102      	bne.n	8011542 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011542:	7bfb      	ldrb	r3, [r7, #15]
}
 8011544:	4618      	mov	r0, r3
 8011546:	3710      	adds	r7, #16
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	f107 0208 	add.w	r2, r7, #8
 801155c:	4611      	mov	r1, r2
 801155e:	4618      	mov	r0, r3
 8011560:	f7ff faf0 	bl	8010b44 <validate>
 8011564:	4603      	mov	r3, r0
 8011566:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011568:	7bfb      	ldrb	r3, [r7, #15]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d126      	bne.n	80115bc <f_readdir+0x70>
		if (!fno) {
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d106      	bne.n	8011582 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011574:	2100      	movs	r1, #0
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7fd fdd0 	bl	800f11c <dir_sdi>
 801157c:	4603      	mov	r3, r0
 801157e:	73fb      	strb	r3, [r7, #15]
 8011580:	e01c      	b.n	80115bc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011582:	2100      	movs	r1, #0
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7fe f97a 	bl	800f87e <dir_read>
 801158a:	4603      	mov	r3, r0
 801158c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801158e:	7bfb      	ldrb	r3, [r7, #15]
 8011590:	2b04      	cmp	r3, #4
 8011592:	d101      	bne.n	8011598 <f_readdir+0x4c>
 8011594:	2300      	movs	r3, #0
 8011596:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8011598:	7bfb      	ldrb	r3, [r7, #15]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10e      	bne.n	80115bc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801159e:	6839      	ldr	r1, [r7, #0]
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f7fe fbcb 	bl	800fd3c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80115a6:	2100      	movs	r1, #0
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7fd fe32 	bl	800f212 <dir_next>
 80115ae:	4603      	mov	r3, r0
 80115b0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	2b04      	cmp	r3, #4
 80115b6:	d101      	bne.n	80115bc <f_readdir+0x70>
 80115b8:	2300      	movs	r3, #0
 80115ba:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b084      	sub	sp, #16
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80115d0:	6839      	ldr	r1, [r7, #0]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f7ff ffba 	bl	801154c <f_readdir>
 80115d8:	4603      	mov	r3, r0
 80115da:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d114      	bne.n	801160c <f_findnext+0x46>
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d011      	beq.n	801160c <f_findnext+0x46>
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	7d9b      	ldrb	r3, [r3, #22]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d00d      	beq.n	801160c <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	f103 0116 	add.w	r1, r3, #22
 80115fa:	2300      	movs	r3, #0
 80115fc:	2200      	movs	r2, #0
 80115fe:	f7fe fca1 	bl	800ff44 <pattern_matching>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d100      	bne.n	801160a <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8011608:	e7e2      	b.n	80115d0 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801160a:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801160c:	7bfb      	ldrb	r3, [r7, #15]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}

08011616 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8011616:	b580      	push	{r7, lr}
 8011618:	b086      	sub	sp, #24
 801161a:	af00      	add	r7, sp, #0
 801161c:	60f8      	str	r0, [r7, #12]
 801161e:	60b9      	str	r1, [r7, #8]
 8011620:	607a      	str	r2, [r7, #4]
 8011622:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	683a      	ldr	r2, [r7, #0]
 8011628:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 801162a:	6879      	ldr	r1, [r7, #4]
 801162c:	68f8      	ldr	r0, [r7, #12]
 801162e:	f7ff fef4 	bl	801141a <f_opendir>
 8011632:	4603      	mov	r3, r0
 8011634:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d105      	bne.n	8011648 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801163c:	68b9      	ldr	r1, [r7, #8]
 801163e:	68f8      	ldr	r0, [r7, #12]
 8011640:	f7ff ffc1 	bl	80115c6 <f_findnext>
 8011644:	4603      	mov	r3, r0
 8011646:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8011648:	7dfb      	ldrb	r3, [r7, #23]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3718      	adds	r7, #24
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
	...

08011654 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011654:	b480      	push	{r7}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	4613      	mov	r3, r2
 8011660:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011662:	2301      	movs	r3, #1
 8011664:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801166a:	4b1f      	ldr	r3, [pc, #124]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 801166c:	7a5b      	ldrb	r3, [r3, #9]
 801166e:	b2db      	uxtb	r3, r3
 8011670:	2b00      	cmp	r3, #0
 8011672:	d131      	bne.n	80116d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011674:	4b1c      	ldr	r3, [pc, #112]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 8011676:	7a5b      	ldrb	r3, [r3, #9]
 8011678:	b2db      	uxtb	r3, r3
 801167a:	461a      	mov	r2, r3
 801167c:	4b1a      	ldr	r3, [pc, #104]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 801167e:	2100      	movs	r1, #0
 8011680:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011682:	4b19      	ldr	r3, [pc, #100]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 8011684:	7a5b      	ldrb	r3, [r3, #9]
 8011686:	b2db      	uxtb	r3, r3
 8011688:	4a17      	ldr	r2, [pc, #92]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 801168a:	009b      	lsls	r3, r3, #2
 801168c:	4413      	add	r3, r2
 801168e:	68fa      	ldr	r2, [r7, #12]
 8011690:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011692:	4b15      	ldr	r3, [pc, #84]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 8011694:	7a5b      	ldrb	r3, [r3, #9]
 8011696:	b2db      	uxtb	r3, r3
 8011698:	461a      	mov	r2, r3
 801169a:	4b13      	ldr	r3, [pc, #76]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 801169c:	4413      	add	r3, r2
 801169e:	79fa      	ldrb	r2, [r7, #7]
 80116a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80116a2:	4b11      	ldr	r3, [pc, #68]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 80116a4:	7a5b      	ldrb	r3, [r3, #9]
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	1c5a      	adds	r2, r3, #1
 80116aa:	b2d1      	uxtb	r1, r2
 80116ac:	4a0e      	ldr	r2, [pc, #56]	; (80116e8 <FATFS_LinkDriverEx+0x94>)
 80116ae:	7251      	strb	r1, [r2, #9]
 80116b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80116b2:	7dbb      	ldrb	r3, [r7, #22]
 80116b4:	3330      	adds	r3, #48	; 0x30
 80116b6:	b2da      	uxtb	r2, r3
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	3301      	adds	r3, #1
 80116c0:	223a      	movs	r2, #58	; 0x3a
 80116c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116c4:	68bb      	ldr	r3, [r7, #8]
 80116c6:	3302      	adds	r3, #2
 80116c8:	222f      	movs	r2, #47	; 0x2f
 80116ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	3303      	adds	r3, #3
 80116d0:	2200      	movs	r2, #0
 80116d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116d4:	2300      	movs	r3, #0
 80116d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80116da:	4618      	mov	r0, r3
 80116dc:	371c      	adds	r7, #28
 80116de:	46bd      	mov	sp, r7
 80116e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e4:	4770      	bx	lr
 80116e6:	bf00      	nop
 80116e8:	200011b0 	.word	0x200011b0

080116ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116f6:	2200      	movs	r2, #0
 80116f8:	6839      	ldr	r1, [r7, #0]
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f7ff ffaa 	bl	8011654 <FATFS_LinkDriverEx>
 8011700:	4603      	mov	r3, r0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3708      	adds	r7, #8
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
	...

0801170c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
 8011712:	4603      	mov	r3, r0
 8011714:	6039      	str	r1, [r7, #0]
 8011716:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011718:	88fb      	ldrh	r3, [r7, #6]
 801171a:	2b7f      	cmp	r3, #127	; 0x7f
 801171c:	d802      	bhi.n	8011724 <ff_convert+0x18>
		c = chr;
 801171e:	88fb      	ldrh	r3, [r7, #6]
 8011720:	81fb      	strh	r3, [r7, #14]
 8011722:	e025      	b.n	8011770 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d00b      	beq.n	8011742 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801172a:	88fb      	ldrh	r3, [r7, #6]
 801172c:	2bff      	cmp	r3, #255	; 0xff
 801172e:	d805      	bhi.n	801173c <ff_convert+0x30>
 8011730:	88fb      	ldrh	r3, [r7, #6]
 8011732:	3b80      	subs	r3, #128	; 0x80
 8011734:	4a12      	ldr	r2, [pc, #72]	; (8011780 <ff_convert+0x74>)
 8011736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801173a:	e000      	b.n	801173e <ff_convert+0x32>
 801173c:	2300      	movs	r3, #0
 801173e:	81fb      	strh	r3, [r7, #14]
 8011740:	e016      	b.n	8011770 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011742:	2300      	movs	r3, #0
 8011744:	81fb      	strh	r3, [r7, #14]
 8011746:	e009      	b.n	801175c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011748:	89fb      	ldrh	r3, [r7, #14]
 801174a:	4a0d      	ldr	r2, [pc, #52]	; (8011780 <ff_convert+0x74>)
 801174c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011750:	88fa      	ldrh	r2, [r7, #6]
 8011752:	429a      	cmp	r2, r3
 8011754:	d006      	beq.n	8011764 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011756:	89fb      	ldrh	r3, [r7, #14]
 8011758:	3301      	adds	r3, #1
 801175a:	81fb      	strh	r3, [r7, #14]
 801175c:	89fb      	ldrh	r3, [r7, #14]
 801175e:	2b7f      	cmp	r3, #127	; 0x7f
 8011760:	d9f2      	bls.n	8011748 <ff_convert+0x3c>
 8011762:	e000      	b.n	8011766 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011764:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011766:	89fb      	ldrh	r3, [r7, #14]
 8011768:	3380      	adds	r3, #128	; 0x80
 801176a:	b29b      	uxth	r3, r3
 801176c:	b2db      	uxtb	r3, r3
 801176e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011770:	89fb      	ldrh	r3, [r7, #14]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3714      	adds	r7, #20
 8011776:	46bd      	mov	sp, r7
 8011778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177c:	4770      	bx	lr
 801177e:	bf00      	nop
 8011780:	0801c0e0 	.word	0x0801c0e0

08011784 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011784:	b480      	push	{r7}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	4603      	mov	r3, r0
 801178c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801178e:	88fb      	ldrh	r3, [r7, #6]
 8011790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011794:	d201      	bcs.n	801179a <ff_wtoupper+0x16>
 8011796:	4b3e      	ldr	r3, [pc, #248]	; (8011890 <ff_wtoupper+0x10c>)
 8011798:	e000      	b.n	801179c <ff_wtoupper+0x18>
 801179a:	4b3e      	ldr	r3, [pc, #248]	; (8011894 <ff_wtoupper+0x110>)
 801179c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	1c9a      	adds	r2, r3, #2
 80117a2:	617a      	str	r2, [r7, #20]
 80117a4:	881b      	ldrh	r3, [r3, #0]
 80117a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80117a8:	8a7b      	ldrh	r3, [r7, #18]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d068      	beq.n	8011880 <ff_wtoupper+0xfc>
 80117ae:	88fa      	ldrh	r2, [r7, #6]
 80117b0:	8a7b      	ldrh	r3, [r7, #18]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d364      	bcc.n	8011880 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	1c9a      	adds	r2, r3, #2
 80117ba:	617a      	str	r2, [r7, #20]
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	823b      	strh	r3, [r7, #16]
 80117c0:	8a3b      	ldrh	r3, [r7, #16]
 80117c2:	0a1b      	lsrs	r3, r3, #8
 80117c4:	81fb      	strh	r3, [r7, #14]
 80117c6:	8a3b      	ldrh	r3, [r7, #16]
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80117cc:	88fa      	ldrh	r2, [r7, #6]
 80117ce:	8a79      	ldrh	r1, [r7, #18]
 80117d0:	8a3b      	ldrh	r3, [r7, #16]
 80117d2:	440b      	add	r3, r1
 80117d4:	429a      	cmp	r2, r3
 80117d6:	da49      	bge.n	801186c <ff_wtoupper+0xe8>
			switch (cmd) {
 80117d8:	89fb      	ldrh	r3, [r7, #14]
 80117da:	2b08      	cmp	r3, #8
 80117dc:	d84f      	bhi.n	801187e <ff_wtoupper+0xfa>
 80117de:	a201      	add	r2, pc, #4	; (adr r2, 80117e4 <ff_wtoupper+0x60>)
 80117e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117e4:	08011809 	.word	0x08011809
 80117e8:	0801181b 	.word	0x0801181b
 80117ec:	08011831 	.word	0x08011831
 80117f0:	08011839 	.word	0x08011839
 80117f4:	08011841 	.word	0x08011841
 80117f8:	08011849 	.word	0x08011849
 80117fc:	08011851 	.word	0x08011851
 8011800:	08011859 	.word	0x08011859
 8011804:	08011861 	.word	0x08011861
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011808:	88fa      	ldrh	r2, [r7, #6]
 801180a:	8a7b      	ldrh	r3, [r7, #18]
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	697a      	ldr	r2, [r7, #20]
 8011812:	4413      	add	r3, r2
 8011814:	881b      	ldrh	r3, [r3, #0]
 8011816:	80fb      	strh	r3, [r7, #6]
 8011818:	e027      	b.n	801186a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801181a:	88fa      	ldrh	r2, [r7, #6]
 801181c:	8a7b      	ldrh	r3, [r7, #18]
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	b29b      	uxth	r3, r3
 8011822:	f003 0301 	and.w	r3, r3, #1
 8011826:	b29b      	uxth	r3, r3
 8011828:	88fa      	ldrh	r2, [r7, #6]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	80fb      	strh	r3, [r7, #6]
 801182e:	e01c      	b.n	801186a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011830:	88fb      	ldrh	r3, [r7, #6]
 8011832:	3b10      	subs	r3, #16
 8011834:	80fb      	strh	r3, [r7, #6]
 8011836:	e018      	b.n	801186a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011838:	88fb      	ldrh	r3, [r7, #6]
 801183a:	3b20      	subs	r3, #32
 801183c:	80fb      	strh	r3, [r7, #6]
 801183e:	e014      	b.n	801186a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011840:	88fb      	ldrh	r3, [r7, #6]
 8011842:	3b30      	subs	r3, #48	; 0x30
 8011844:	80fb      	strh	r3, [r7, #6]
 8011846:	e010      	b.n	801186a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011848:	88fb      	ldrh	r3, [r7, #6]
 801184a:	3b1a      	subs	r3, #26
 801184c:	80fb      	strh	r3, [r7, #6]
 801184e:	e00c      	b.n	801186a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011850:	88fb      	ldrh	r3, [r7, #6]
 8011852:	3308      	adds	r3, #8
 8011854:	80fb      	strh	r3, [r7, #6]
 8011856:	e008      	b.n	801186a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011858:	88fb      	ldrh	r3, [r7, #6]
 801185a:	3b50      	subs	r3, #80	; 0x50
 801185c:	80fb      	strh	r3, [r7, #6]
 801185e:	e004      	b.n	801186a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011860:	88fb      	ldrh	r3, [r7, #6]
 8011862:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011866:	80fb      	strh	r3, [r7, #6]
 8011868:	bf00      	nop
			}
			break;
 801186a:	e008      	b.n	801187e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801186c:	89fb      	ldrh	r3, [r7, #14]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d195      	bne.n	801179e <ff_wtoupper+0x1a>
 8011872:	8a3b      	ldrh	r3, [r7, #16]
 8011874:	005b      	lsls	r3, r3, #1
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	4413      	add	r3, r2
 801187a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801187c:	e78f      	b.n	801179e <ff_wtoupper+0x1a>
			break;
 801187e:	bf00      	nop
	}

	return chr;
 8011880:	88fb      	ldrh	r3, [r7, #6]
}
 8011882:	4618      	mov	r0, r3
 8011884:	371c      	adds	r7, #28
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
 801188e:	bf00      	nop
 8011890:	0801c1e0 	.word	0x0801c1e0
 8011894:	0801c3d4 	.word	0x0801c3d4

08011898 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 801189c:	2200      	movs	r2, #0
 801189e:	490e      	ldr	r1, [pc, #56]	; (80118d8 <MX_USB_HOST_Init+0x40>)
 80118a0:	480e      	ldr	r0, [pc, #56]	; (80118dc <MX_USB_HOST_Init+0x44>)
 80118a2:	f7fb fa15 	bl	800ccd0 <USBH_Init>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d001      	beq.n	80118b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80118ac:	f7f0 fe42 	bl	8002534 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 80118b0:	490b      	ldr	r1, [pc, #44]	; (80118e0 <MX_USB_HOST_Init+0x48>)
 80118b2:	480a      	ldr	r0, [pc, #40]	; (80118dc <MX_USB_HOST_Init+0x44>)
 80118b4:	f7fb fa9a 	bl	800cdec <USBH_RegisterClass>
 80118b8:	4603      	mov	r3, r0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d001      	beq.n	80118c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80118be:	f7f0 fe39 	bl	8002534 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80118c2:	4806      	ldr	r0, [pc, #24]	; (80118dc <MX_USB_HOST_Init+0x44>)
 80118c4:	f7fb fb1e 	bl	800cf04 <USBH_Start>
 80118c8:	4603      	mov	r3, r0
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d001      	beq.n	80118d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80118ce:	f7f0 fe31 	bl	8002534 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80118d2:	bf00      	nop
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	080118f9 	.word	0x080118f9
 80118dc:	200011bc 	.word	0x200011bc
 80118e0:	2000005c 	.word	0x2000005c

080118e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80118e8:	4802      	ldr	r0, [pc, #8]	; (80118f4 <MX_USB_HOST_Process+0x10>)
 80118ea:	f7fb fb1b 	bl	800cf24 <USBH_Process>
}
 80118ee:	bf00      	nop
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	200011bc 	.word	0x200011bc

080118f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b082      	sub	sp, #8
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
 8011900:	460b      	mov	r3, r1
 8011902:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	  switch(id)
 8011904:	78fb      	ldrb	r3, [r7, #3]
 8011906:	3b01      	subs	r3, #1
 8011908:	2b04      	cmp	r3, #4
 801190a:	d833      	bhi.n	8011974 <USBH_UserProcess+0x7c>
 801190c:	a201      	add	r2, pc, #4	; (adr r2, 8011914 <USBH_UserProcess+0x1c>)
 801190e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011912:	bf00      	nop
 8011914:	08011975 	.word	0x08011975
 8011918:	0801193b 	.word	0x0801193b
 801191c:	08011975 	.word	0x08011975
 8011920:	08011949 	.word	0x08011949
 8011924:	08011929 	.word	0x08011929
	  {
	  case HOST_USER_SELECT_CONFIGURATION:
	  break;

	  case HOST_USER_DISCONNECTION:
	  Appli_state = APPLICATION_DISCONNECT;
 8011928:	4b15      	ldr	r3, [pc, #84]	; (8011980 <USBH_UserProcess+0x88>)
 801192a:	2203      	movs	r2, #3
 801192c:	701a      	strb	r2, [r3, #0]
	  if (f_mount(0, "", 0) != FR_OK)
 801192e:	2200      	movs	r2, #0
 8011930:	4914      	ldr	r1, [pc, #80]	; (8011984 <USBH_UserProcess+0x8c>)
 8011932:	2000      	movs	r0, #0
 8011934:	f7ff f93c 	bl	8010bb0 <f_mount>
	  {
	    /* FatFs Initialization Error */
	  }

	  break;
 8011938:	e01d      	b.n	8011976 <USBH_UserProcess+0x7e>

	  case HOST_USER_CLASS_ACTIVE:
		  printf("User Class active\r\n");
 801193a:	4813      	ldr	r0, [pc, #76]	; (8011988 <USBH_UserProcess+0x90>)
 801193c:	f003 fff2 	bl	8015924 <puts>
	  Appli_state = APPLICATION_READY;
 8011940:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <USBH_UserProcess+0x88>)
 8011942:	2202      	movs	r2, #2
 8011944:	701a      	strb	r2, [r3, #0]
	  break;
 8011946:	e016      	b.n	8011976 <USBH_UserProcess+0x7e>

	  case HOST_USER_CONNECTION:
		  printf("HOST USER CONNECTION\r\n");
 8011948:	4810      	ldr	r0, [pc, #64]	; (801198c <USBH_UserProcess+0x94>)
 801194a:	f003 ffeb 	bl	8015924 <puts>
	  Appli_state = APPLICATION_START;
 801194e:	4b0c      	ldr	r3, [pc, #48]	; (8011980 <USBH_UserProcess+0x88>)
 8011950:	2201      	movs	r2, #1
 8011952:	701a      	strb	r2, [r3, #0]
	  if (f_mount(&USBHFatFS, "", 0) != FR_OK)
 8011954:	2200      	movs	r2, #0
 8011956:	490b      	ldr	r1, [pc, #44]	; (8011984 <USBH_UserProcess+0x8c>)
 8011958:	480d      	ldr	r0, [pc, #52]	; (8011990 <USBH_UserProcess+0x98>)
 801195a:	f7ff f929 	bl	8010bb0 <f_mount>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d003      	beq.n	801196c <USBH_UserProcess+0x74>
	  {
	    /* FatFs Initialization Error */
		  printf("USB Mount Error\r\n");
 8011964:	480b      	ldr	r0, [pc, #44]	; (8011994 <USBH_UserProcess+0x9c>)
 8011966:	f003 ffdd 	bl	8015924 <puts>
	  }
	  else{
		  printf("USB Mount OK\r\n");
	  }

	  break;
 801196a:	e004      	b.n	8011976 <USBH_UserProcess+0x7e>
		  printf("USB Mount OK\r\n");
 801196c:	480a      	ldr	r0, [pc, #40]	; (8011998 <USBH_UserProcess+0xa0>)
 801196e:	f003 ffd9 	bl	8015924 <puts>
	  break;
 8011972:	e000      	b.n	8011976 <USBH_UserProcess+0x7e>

	  default:
	  break;
 8011974:	bf00      	nop
	  }
  /* USER CODE END CALL_BACK_1 */
}
 8011976:	bf00      	nop
 8011978:	3708      	adds	r7, #8
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}
 801197e:	bf00      	nop
 8011980:	20001594 	.word	0x20001594
 8011984:	0801992c 	.word	0x0801992c
 8011988:	08019930 	.word	0x08019930
 801198c:	08019944 	.word	0x08019944
 8011990:	20000d50 	.word	0x20000d50
 8011994:	0801995c 	.word	0x0801995c
 8011998:	08019970 	.word	0x08019970

0801199c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b08a      	sub	sp, #40	; 0x28
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119a4:	f107 0314 	add.w	r3, r7, #20
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]
 80119ac:	605a      	str	r2, [r3, #4]
 80119ae:	609a      	str	r2, [r3, #8]
 80119b0:	60da      	str	r2, [r3, #12]
 80119b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a24      	ldr	r2, [pc, #144]	; (8011a4c <HAL_HCD_MspInit+0xb0>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d141      	bne.n	8011a42 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80119be:	2300      	movs	r3, #0
 80119c0:	613b      	str	r3, [r7, #16]
 80119c2:	4b23      	ldr	r3, [pc, #140]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 80119c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119c6:	4a22      	ldr	r2, [pc, #136]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 80119c8:	f043 0302 	orr.w	r3, r3, #2
 80119cc:	6313      	str	r3, [r2, #48]	; 0x30
 80119ce:	4b20      	ldr	r3, [pc, #128]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 80119d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119d2:	f003 0302 	and.w	r3, r3, #2
 80119d6:	613b      	str	r3, [r7, #16]
 80119d8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80119da:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80119de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119e0:	2302      	movs	r3, #2
 80119e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119e4:	2300      	movs	r3, #0
 80119e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119e8:	2300      	movs	r3, #0
 80119ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80119ec:	230c      	movs	r3, #12
 80119ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80119f0:	f107 0314 	add.w	r3, r7, #20
 80119f4:	4619      	mov	r1, r3
 80119f6:	4817      	ldr	r0, [pc, #92]	; (8011a54 <HAL_HCD_MspInit+0xb8>)
 80119f8:	f7f3 f9e8 	bl	8004dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80119fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011a02:	2300      	movs	r3, #0
 8011a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a06:	2300      	movs	r3, #0
 8011a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8011a0a:	f107 0314 	add.w	r3, r7, #20
 8011a0e:	4619      	mov	r1, r3
 8011a10:	4810      	ldr	r0, [pc, #64]	; (8011a54 <HAL_HCD_MspInit+0xb8>)
 8011a12:	f7f3 f9db 	bl	8004dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011a16:	2300      	movs	r3, #0
 8011a18:	60fb      	str	r3, [r7, #12]
 8011a1a:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 8011a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a1e:	4a0c      	ldr	r2, [pc, #48]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 8011a20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011a24:	6313      	str	r3, [r2, #48]	; 0x30
 8011a26:	4b0a      	ldr	r3, [pc, #40]	; (8011a50 <HAL_HCD_MspInit+0xb4>)
 8011a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a2e:	60fb      	str	r3, [r7, #12]
 8011a30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011a32:	2200      	movs	r2, #0
 8011a34:	2100      	movs	r1, #0
 8011a36:	204d      	movs	r0, #77	; 0x4d
 8011a38:	f7f2 fc28 	bl	800428c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011a3c:	204d      	movs	r0, #77	; 0x4d
 8011a3e:	f7f2 fc41 	bl	80042c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011a42:	bf00      	nop
 8011a44:	3728      	adds	r7, #40	; 0x28
 8011a46:	46bd      	mov	sp, r7
 8011a48:	bd80      	pop	{r7, pc}
 8011a4a:	bf00      	nop
 8011a4c:	40040000 	.word	0x40040000
 8011a50:	40023800 	.word	0x40023800
 8011a54:	40020400 	.word	0x40020400

08011a58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fb fe2f 	bl	800d6ca <USBH_LL_IncTimer>
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fb fe67 	bl	800d756 <USBH_LL_Connect>
}
 8011a88:	bf00      	nop
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b082      	sub	sp, #8
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fb fe70 	bl	800d784 <USBH_LL_Disconnect>
}
 8011aa4:	bf00      	nop
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	70fb      	strb	r3, [r7, #3]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011abc:	bf00      	nop
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr

08011ac8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fb fe21 	bl	800d71e <USBH_LL_PortEnabled>
}
 8011adc:	bf00      	nop
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7fb fe21 	bl	800d73a <USBH_LL_PortDisabled>
}
 8011af8:	bf00      	nop
 8011afa:	3708      	adds	r7, #8
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b082      	sub	sp, #8
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d132      	bne.n	8011b78 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8011b12:	4a1c      	ldr	r2, [pc, #112]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4a19      	ldr	r2, [pc, #100]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b1e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011b22:	4b18      	ldr	r3, [pc, #96]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b24:	4a18      	ldr	r2, [pc, #96]	; (8011b88 <USBH_LL_Init+0x88>)
 8011b26:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8011b28:	4b16      	ldr	r3, [pc, #88]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b2a:	220c      	movs	r2, #12
 8011b2c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8011b2e:	4b15      	ldr	r3, [pc, #84]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b30:	2201      	movs	r2, #1
 8011b32:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011b34:	4b13      	ldr	r3, [pc, #76]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011b3a:	4b12      	ldr	r3, [pc, #72]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011b40:	4b10      	ldr	r3, [pc, #64]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b42:	2200      	movs	r2, #0
 8011b44:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011b46:	4b0f      	ldr	r3, [pc, #60]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b48:	2200      	movs	r2, #0
 8011b4a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011b4c:	4b0d      	ldr	r3, [pc, #52]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b4e:	2200      	movs	r2, #0
 8011b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011b52:	4b0c      	ldr	r3, [pc, #48]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b54:	2200      	movs	r2, #0
 8011b56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8011b58:	480a      	ldr	r0, [pc, #40]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b5a:	f7f3 fc2c 	bl	80053b6 <HAL_HCD_Init>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d001      	beq.n	8011b68 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8011b64:	f7f0 fce6 	bl	8002534 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011b68:	4806      	ldr	r0, [pc, #24]	; (8011b84 <USBH_LL_Init+0x84>)
 8011b6a:	f7f4 f82f 	bl	8005bcc <HAL_HCD_GetCurrentFrame>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	4619      	mov	r1, r3
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7fb fd9a 	bl	800d6ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011b78:	2300      	movs	r3, #0
}
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	20001598 	.word	0x20001598
 8011b88:	40040000 	.word	0x40040000

08011b8c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b94:	2300      	movs	r3, #0
 8011b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f7f3 ff9a 	bl	8005adc <HAL_HCD_Start>
 8011ba8:	4603      	mov	r3, r0
 8011baa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011bac:	7bfb      	ldrb	r3, [r7, #15]
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f000 f992 	bl	8011ed8 <USBH_Get_USB_Status>
 8011bb4:	4603      	mov	r3, r0
 8011bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3710      	adds	r7, #16
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}

08011bc2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b084      	sub	sp, #16
 8011bc6:	af00      	add	r7, sp, #0
 8011bc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f3 ffa2 	bl	8005b22 <HAL_HCD_Stop>
 8011bde:	4603      	mov	r3, r0
 8011be0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011be2:	7bfb      	ldrb	r3, [r7, #15]
 8011be4:	4618      	mov	r0, r3
 8011be6:	f000 f977 	bl	8011ed8 <USBH_Get_USB_Status>
 8011bea:	4603      	mov	r3, r0
 8011bec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bee:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	3710      	adds	r7, #16
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b084      	sub	sp, #16
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011c00:	2301      	movs	r3, #1
 8011c02:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7f3 ffec 	bl	8005be8 <HAL_HCD_GetCurrentSpeed>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b02      	cmp	r3, #2
 8011c14:	d00c      	beq.n	8011c30 <USBH_LL_GetSpeed+0x38>
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d80d      	bhi.n	8011c36 <USBH_LL_GetSpeed+0x3e>
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d002      	beq.n	8011c24 <USBH_LL_GetSpeed+0x2c>
 8011c1e:	2b01      	cmp	r3, #1
 8011c20:	d003      	beq.n	8011c2a <USBH_LL_GetSpeed+0x32>
 8011c22:	e008      	b.n	8011c36 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011c24:	2300      	movs	r3, #0
 8011c26:	73fb      	strb	r3, [r7, #15]
    break;
 8011c28:	e008      	b.n	8011c3c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c2e:	e005      	b.n	8011c3c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011c30:	2302      	movs	r3, #2
 8011c32:	73fb      	strb	r3, [r7, #15]
    break;
 8011c34:	e002      	b.n	8011c3c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011c36:	2301      	movs	r3, #1
 8011c38:	73fb      	strb	r3, [r7, #15]
    break;
 8011c3a:	bf00      	nop
  }
  return  speed;
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}

08011c46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011c46:	b580      	push	{r7, lr}
 8011c48:	b084      	sub	sp, #16
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c52:	2300      	movs	r3, #0
 8011c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7f3 ff7d 	bl	8005b5c <HAL_HCD_ResetPort>
 8011c62:	4603      	mov	r3, r0
 8011c64:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f935 	bl	8011ed8 <USBH_Get_USB_Status>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	460b      	mov	r3, r1
 8011c86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c8e:	78fa      	ldrb	r2, [r7, #3]
 8011c90:	4611      	mov	r1, r2
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7f3 ff85 	bl	8005ba2 <HAL_HCD_HC_GetXferCount>
 8011c98:	4603      	mov	r3, r0
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3708      	adds	r7, #8
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}

08011ca2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011ca2:	b590      	push	{r4, r7, lr}
 8011ca4:	b089      	sub	sp, #36	; 0x24
 8011ca6:	af04      	add	r7, sp, #16
 8011ca8:	6078      	str	r0, [r7, #4]
 8011caa:	4608      	mov	r0, r1
 8011cac:	4611      	mov	r1, r2
 8011cae:	461a      	mov	r2, r3
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	70fb      	strb	r3, [r7, #3]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	70bb      	strb	r3, [r7, #2]
 8011cb8:	4613      	mov	r3, r2
 8011cba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011cca:	787c      	ldrb	r4, [r7, #1]
 8011ccc:	78ba      	ldrb	r2, [r7, #2]
 8011cce:	78f9      	ldrb	r1, [r7, #3]
 8011cd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011cd2:	9302      	str	r3, [sp, #8]
 8011cd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cd8:	9301      	str	r3, [sp, #4]
 8011cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011cde:	9300      	str	r3, [sp, #0]
 8011ce0:	4623      	mov	r3, r4
 8011ce2:	f7f3 fbca 	bl	800547a <HAL_HCD_HC_Init>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011cea:	7bfb      	ldrb	r3, [r7, #15]
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 f8f3 	bl	8011ed8 <USBH_Get_USB_Status>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3714      	adds	r7, #20
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd90      	pop	{r4, r7, pc}

08011d00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
 8011d08:	460b      	mov	r3, r1
 8011d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d10:	2300      	movs	r3, #0
 8011d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011d1a:	78fa      	ldrb	r2, [r7, #3]
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7f3 fc43 	bl	80055aa <HAL_HCD_HC_Halt>
 8011d24:	4603      	mov	r3, r0
 8011d26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f000 f8d4 	bl	8011ed8 <USBH_Get_USB_Status>
 8011d30:	4603      	mov	r3, r0
 8011d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}

08011d3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011d3e:	b590      	push	{r4, r7, lr}
 8011d40:	b089      	sub	sp, #36	; 0x24
 8011d42:	af04      	add	r7, sp, #16
 8011d44:	6078      	str	r0, [r7, #4]
 8011d46:	4608      	mov	r0, r1
 8011d48:	4611      	mov	r1, r2
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	70fb      	strb	r3, [r7, #3]
 8011d50:	460b      	mov	r3, r1
 8011d52:	70bb      	strb	r3, [r7, #2]
 8011d54:	4613      	mov	r3, r2
 8011d56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011d66:	787c      	ldrb	r4, [r7, #1]
 8011d68:	78ba      	ldrb	r2, [r7, #2]
 8011d6a:	78f9      	ldrb	r1, [r7, #3]
 8011d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d70:	9303      	str	r3, [sp, #12]
 8011d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d74:	9302      	str	r3, [sp, #8]
 8011d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d78:	9301      	str	r3, [sp, #4]
 8011d7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	4623      	mov	r3, r4
 8011d82:	f7f3 fc35 	bl	80055f0 <HAL_HCD_HC_SubmitRequest>
 8011d86:	4603      	mov	r3, r0
 8011d88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011d8a:	7bfb      	ldrb	r3, [r7, #15]
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f000 f8a3 	bl	8011ed8 <USBH_Get_USB_Status>
 8011d92:	4603      	mov	r3, r0
 8011d94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3714      	adds	r7, #20
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd90      	pop	{r4, r7, pc}

08011da0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011da0:	b580      	push	{r7, lr}
 8011da2:	b082      	sub	sp, #8
 8011da4:	af00      	add	r7, sp, #0
 8011da6:	6078      	str	r0, [r7, #4]
 8011da8:	460b      	mov	r3, r1
 8011daa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011db2:	78fa      	ldrb	r2, [r7, #3]
 8011db4:	4611      	mov	r1, r2
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7f3 fede 	bl	8005b78 <HAL_HCD_HC_GetURBState>
 8011dbc:	4603      	mov	r3, r0
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}

08011dc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011dc6:	b580      	push	{r7, lr}
 8011dc8:	b082      	sub	sp, #8
 8011dca:	af00      	add	r7, sp, #0
 8011dcc:	6078      	str	r0, [r7, #4]
 8011dce:	460b      	mov	r3, r1
 8011dd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d103      	bne.n	8011de4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011ddc:	78fb      	ldrb	r3, [r7, #3]
 8011dde:	4618      	mov	r0, r3
 8011de0:	f000 f8a6 	bl	8011f30 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011de4:	20c8      	movs	r0, #200	; 0xc8
 8011de6:	f7f2 f975 	bl	80040d4 <HAL_Delay>
  return USBH_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b085      	sub	sp, #20
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	70fb      	strb	r3, [r7, #3]
 8011e00:	4613      	mov	r3, r2
 8011e02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011e0c:	78fa      	ldrb	r2, [r7, #3]
 8011e0e:	68f9      	ldr	r1, [r7, #12]
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	440b      	add	r3, r1
 8011e1a:	333b      	adds	r3, #59	; 0x3b
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d00a      	beq.n	8011e38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011e22:	78fa      	ldrb	r2, [r7, #3]
 8011e24:	68f9      	ldr	r1, [r7, #12]
 8011e26:	4613      	mov	r3, r2
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4413      	add	r3, r2
 8011e2c:	00db      	lsls	r3, r3, #3
 8011e2e:	440b      	add	r3, r1
 8011e30:	3350      	adds	r3, #80	; 0x50
 8011e32:	78ba      	ldrb	r2, [r7, #2]
 8011e34:	701a      	strb	r2, [r3, #0]
 8011e36:	e009      	b.n	8011e4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011e38:	78fa      	ldrb	r2, [r7, #3]
 8011e3a:	68f9      	ldr	r1, [r7, #12]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	4413      	add	r3, r2
 8011e42:	00db      	lsls	r3, r3, #3
 8011e44:	440b      	add	r3, r1
 8011e46:	3351      	adds	r3, #81	; 0x51
 8011e48:	78ba      	ldrb	r2, [r7, #2]
 8011e4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3714      	adds	r7, #20
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011e5a:	b480      	push	{r7}
 8011e5c:	b085      	sub	sp, #20
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
 8011e62:	460b      	mov	r3, r1
 8011e64:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e70:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011e72:	78fa      	ldrb	r2, [r7, #3]
 8011e74:	68b9      	ldr	r1, [r7, #8]
 8011e76:	4613      	mov	r3, r2
 8011e78:	009b      	lsls	r3, r3, #2
 8011e7a:	4413      	add	r3, r2
 8011e7c:	00db      	lsls	r3, r3, #3
 8011e7e:	440b      	add	r3, r1
 8011e80:	333b      	adds	r3, #59	; 0x3b
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00a      	beq.n	8011e9e <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011e88:	78fa      	ldrb	r2, [r7, #3]
 8011e8a:	68b9      	ldr	r1, [r7, #8]
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	4413      	add	r3, r2
 8011e92:	00db      	lsls	r3, r3, #3
 8011e94:	440b      	add	r3, r1
 8011e96:	3350      	adds	r3, #80	; 0x50
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	73fb      	strb	r3, [r7, #15]
 8011e9c:	e009      	b.n	8011eb2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011e9e:	78fa      	ldrb	r2, [r7, #3]
 8011ea0:	68b9      	ldr	r1, [r7, #8]
 8011ea2:	4613      	mov	r3, r2
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	4413      	add	r3, r2
 8011ea8:	00db      	lsls	r3, r3, #3
 8011eaa:	440b      	add	r3, r1
 8011eac:	3351      	adds	r3, #81	; 0x51
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3714      	adds	r7, #20
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f7f2 f903 	bl	80040d4 <HAL_Delay>
}
 8011ece:	bf00      	nop
 8011ed0:	3708      	adds	r7, #8
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	bd80      	pop	{r7, pc}
	...

08011ed8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	4603      	mov	r3, r0
 8011ee0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011ee6:	79fb      	ldrb	r3, [r7, #7]
 8011ee8:	2b03      	cmp	r3, #3
 8011eea:	d817      	bhi.n	8011f1c <USBH_Get_USB_Status+0x44>
 8011eec:	a201      	add	r2, pc, #4	; (adr r2, 8011ef4 <USBH_Get_USB_Status+0x1c>)
 8011eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef2:	bf00      	nop
 8011ef4:	08011f05 	.word	0x08011f05
 8011ef8:	08011f0b 	.word	0x08011f0b
 8011efc:	08011f11 	.word	0x08011f11
 8011f00:	08011f17 	.word	0x08011f17
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	73fb      	strb	r3, [r7, #15]
    break;
 8011f08:	e00b      	b.n	8011f22 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011f0a:	2302      	movs	r3, #2
 8011f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011f0e:	e008      	b.n	8011f22 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011f10:	2301      	movs	r3, #1
 8011f12:	73fb      	strb	r3, [r7, #15]
    break;
 8011f14:	e005      	b.n	8011f22 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011f16:	2302      	movs	r3, #2
 8011f18:	73fb      	strb	r3, [r7, #15]
    break;
 8011f1a:	e002      	b.n	8011f22 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011f1c:	2302      	movs	r3, #2
 8011f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f20:	bf00      	nop
  }
  return usb_status;
 8011f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3714      	adds	r7, #20
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr

08011f30 <MX_DriverVbusHS>:
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	4603      	mov	r3, r0
 8011f38:	71fb      	strb	r3, [r7, #7]
 8011f3a:	79fb      	ldrb	r3, [r7, #7]
 8011f3c:	73fb      	strb	r3, [r7, #15]
 8011f3e:	79fb      	ldrb	r3, [r7, #7]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d102      	bne.n	8011f4a <MX_DriverVbusHS+0x1a>
 8011f44:	2301      	movs	r3, #1
 8011f46:	73fb      	strb	r3, [r7, #15]
 8011f48:	e001      	b.n	8011f4e <MX_DriverVbusHS+0x1e>
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	73fb      	strb	r3, [r7, #15]
 8011f4e:	7bfb      	ldrb	r3, [r7, #15]
 8011f50:	461a      	mov	r2, r3
 8011f52:	2110      	movs	r1, #16
 8011f54:	4803      	ldr	r0, [pc, #12]	; (8011f64 <MX_DriverVbusHS+0x34>)
 8011f56:	f7f3 f9f1 	bl	800533c <HAL_GPIO_WritePin>
 8011f5a:	bf00      	nop
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}
 8011f62:	bf00      	nop
 8011f64:	40020800 	.word	0x40020800

08011f68 <network_configure_activations>:
 8011f68:	b480      	push	{r7}
 8011f6a:	b085      	sub	sp, #20
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	691b      	ldr	r3, [r3, #16]
 8011f76:	3303      	adds	r3, #3
 8011f78:	f023 0303 	bic.w	r3, r3, #3
 8011f7c:	60fb      	str	r3, [r7, #12]
 8011f7e:	4a1f      	ldr	r2, [pc, #124]	; (8011ffc <network_configure_activations+0x94>)
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	6093      	str	r3, [r2, #8]
 8011f84:	4a1d      	ldr	r2, [pc, #116]	; (8011ffc <network_configure_activations+0x94>)
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	60d3      	str	r3, [r2, #12]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8011f90:	4a1b      	ldr	r2, [pc, #108]	; (8012000 <network_configure_activations+0x98>)
 8011f92:	6093      	str	r3, [r2, #8]
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	f503 4391 	add.w	r3, r3, #18560	; 0x4880
 8011f9a:	4a19      	ldr	r2, [pc, #100]	; (8012000 <network_configure_activations+0x98>)
 8011f9c:	60d3      	str	r3, [r2, #12]
 8011f9e:	4b19      	ldr	r3, [pc, #100]	; (8012004 <network_configure_activations+0x9c>)
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	609a      	str	r2, [r3, #8]
 8011fa4:	4b17      	ldr	r3, [pc, #92]	; (8012004 <network_configure_activations+0x9c>)
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	60da      	str	r2, [r3, #12]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8011fb0:	4a15      	ldr	r2, [pc, #84]	; (8012008 <network_configure_activations+0xa0>)
 8011fb2:	6093      	str	r3, [r2, #8]
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
 8011fba:	4a13      	ldr	r2, [pc, #76]	; (8012008 <network_configure_activations+0xa0>)
 8011fbc:	60d3      	str	r3, [r2, #12]
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8011fc4:	3378      	adds	r3, #120	; 0x78
 8011fc6:	4a11      	ldr	r2, [pc, #68]	; (801200c <network_configure_activations+0xa4>)
 8011fc8:	6093      	str	r3, [r2, #8]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8011fd0:	3378      	adds	r3, #120	; 0x78
 8011fd2:	4a0e      	ldr	r2, [pc, #56]	; (801200c <network_configure_activations+0xa4>)
 8011fd4:	60d3      	str	r3, [r2, #12]
 8011fd6:	4a0e      	ldr	r2, [pc, #56]	; (8012010 <network_configure_activations+0xa8>)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	6093      	str	r3, [r2, #8]
 8011fdc:	4a0c      	ldr	r2, [pc, #48]	; (8012010 <network_configure_activations+0xa8>)
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	60d3      	str	r3, [r2, #12]
 8011fe2:	4b0c      	ldr	r3, [pc, #48]	; (8012014 <network_configure_activations+0xac>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	609a      	str	r2, [r3, #8]
 8011fe8:	4b0a      	ldr	r3, [pc, #40]	; (8012014 <network_configure_activations+0xac>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	60da      	str	r2, [r3, #12]
 8011fee:	2301      	movs	r3, #1
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	3714      	adds	r7, #20
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffa:	4770      	bx	lr
 8011ffc:	200000dc 	.word	0x200000dc
 8012000:	200000ec 	.word	0x200000ec
 8012004:	2000015c 	.word	0x2000015c
 8012008:	2000016c 	.word	0x2000016c
 801200c:	2000017c 	.word	0x2000017c
 8012010:	2000018c 	.word	0x2000018c
 8012014:	2000019c 	.word	0x2000019c

08012018 <network_configure_weights>:
 8012018:	b480      	push	{r7}
 801201a:	b085      	sub	sp, #20
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	6039      	str	r1, [r7, #0]
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
 8012026:	60fb      	str	r3, [r7, #12]
 8012028:	4b39      	ldr	r3, [pc, #228]	; (8012110 <network_configure_weights+0xf8>)
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012030:	4a37      	ldr	r2, [pc, #220]	; (8012110 <network_configure_weights+0xf8>)
 8012032:	6013      	str	r3, [r2, #0]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 801203a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801203e:	4a34      	ldr	r2, [pc, #208]	; (8012110 <network_configure_weights+0xf8>)
 8012040:	6093      	str	r3, [r2, #8]
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 8012048:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801204c:	4a30      	ldr	r2, [pc, #192]	; (8012110 <network_configure_weights+0xf8>)
 801204e:	60d3      	str	r3, [r2, #12]
 8012050:	4b30      	ldr	r3, [pc, #192]	; (8012114 <network_configure_weights+0xfc>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012058:	4a2e      	ldr	r2, [pc, #184]	; (8012114 <network_configure_weights+0xfc>)
 801205a:	6013      	str	r3, [r2, #0]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	f503 23df 	add.w	r3, r3, #456704	; 0x6f800
 8012062:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8012066:	4a2b      	ldr	r2, [pc, #172]	; (8012114 <network_configure_weights+0xfc>)
 8012068:	6093      	str	r3, [r2, #8]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	f503 23df 	add.w	r3, r3, #456704	; 0x6f800
 8012070:	f503 63d9 	add.w	r3, r3, #1736	; 0x6c8
 8012074:	4a27      	ldr	r2, [pc, #156]	; (8012114 <network_configure_weights+0xfc>)
 8012076:	60d3      	str	r3, [r2, #12]
 8012078:	4b27      	ldr	r3, [pc, #156]	; (8012118 <network_configure_weights+0x100>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012080:	4a25      	ldr	r2, [pc, #148]	; (8012118 <network_configure_weights+0x100>)
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f503 23df 	add.w	r3, r3, #456704	; 0x6f800
 801208a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801208e:	4a22      	ldr	r2, [pc, #136]	; (8012118 <network_configure_weights+0x100>)
 8012090:	6093      	str	r3, [r2, #8]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	f503 23df 	add.w	r3, r3, #456704	; 0x6f800
 8012098:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801209c:	4a1e      	ldr	r2, [pc, #120]	; (8012118 <network_configure_weights+0x100>)
 801209e:	60d3      	str	r3, [r2, #12]
 80120a0:	4b1e      	ldr	r3, [pc, #120]	; (801211c <network_configure_weights+0x104>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120a8:	4a1c      	ldr	r2, [pc, #112]	; (801211c <network_configure_weights+0x104>)
 80120aa:	6013      	str	r3, [r2, #0]
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80120b2:	3378      	adds	r3, #120	; 0x78
 80120b4:	4a19      	ldr	r2, [pc, #100]	; (801211c <network_configure_weights+0x104>)
 80120b6:	6093      	str	r3, [r2, #8]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80120be:	3378      	adds	r3, #120	; 0x78
 80120c0:	4a16      	ldr	r2, [pc, #88]	; (801211c <network_configure_weights+0x104>)
 80120c2:	60d3      	str	r3, [r2, #12]
 80120c4:	4b16      	ldr	r3, [pc, #88]	; (8012120 <network_configure_weights+0x108>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120cc:	4a14      	ldr	r2, [pc, #80]	; (8012120 <network_configure_weights+0x108>)
 80120ce:	6013      	str	r3, [r2, #0]
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 80120d6:	3340      	adds	r3, #64	; 0x40
 80120d8:	4a11      	ldr	r2, [pc, #68]	; (8012120 <network_configure_weights+0x108>)
 80120da:	6093      	str	r3, [r2, #8]
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f503 4389 	add.w	r3, r3, #17536	; 0x4480
 80120e2:	3340      	adds	r3, #64	; 0x40
 80120e4:	4a0e      	ldr	r2, [pc, #56]	; (8012120 <network_configure_weights+0x108>)
 80120e6:	60d3      	str	r3, [r2, #12]
 80120e8:	4b0e      	ldr	r3, [pc, #56]	; (8012124 <network_configure_weights+0x10c>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120f0:	4a0c      	ldr	r2, [pc, #48]	; (8012124 <network_configure_weights+0x10c>)
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	4a0b      	ldr	r2, [pc, #44]	; (8012124 <network_configure_weights+0x10c>)
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	6093      	str	r3, [r2, #8]
 80120fa:	4a0a      	ldr	r2, [pc, #40]	; (8012124 <network_configure_weights+0x10c>)
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	60d3      	str	r3, [r2, #12]
 8012100:	2301      	movs	r3, #1
 8012102:	4618      	mov	r0, r3
 8012104:	3714      	adds	r7, #20
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
 801210e:	bf00      	nop
 8012110:	200000fc 	.word	0x200000fc
 8012114:	2000010c 	.word	0x2000010c
 8012118:	2000011c 	.word	0x2000011c
 801211c:	2000012c 	.word	0x2000012c
 8012120:	2000013c 	.word	0x2000013c
 8012124:	2000014c 	.word	0x2000014c

08012128 <ai_network_create>:
 8012128:	b580      	push	{r7, lr}
 801212a:	b084      	sub	sp, #16
 801212c:	af02      	add	r7, sp, #8
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
 8012132:	2300      	movs	r3, #0
 8012134:	9301      	str	r3, [sp, #4]
 8012136:	2303      	movs	r3, #3
 8012138:	9300      	str	r3, [sp, #0]
 801213a:	2301      	movs	r3, #1
 801213c:	4a04      	ldr	r2, [pc, #16]	; (8012150 <ai_network_create+0x28>)
 801213e:	6839      	ldr	r1, [r7, #0]
 8012140:	6878      	ldr	r0, [r7, #4]
 8012142:	f000 f881 	bl	8012248 <ai_platform_network_create>
 8012146:	4603      	mov	r3, r0
 8012148:	4618      	mov	r0, r3
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	2000007c 	.word	0x2000007c

08012154 <ai_network_init>:
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
 801215e:	6839      	ldr	r1, [r7, #0]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 f8c9 	bl	80122f8 <ai_platform_network_init>
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d101      	bne.n	8012172 <ai_network_init+0x1e>
 801216e:	2300      	movs	r3, #0
 8012170:	e02b      	b.n	80121ca <ai_network_init+0x76>
 8012172:	2301      	movs	r3, #1
 8012174:	72fb      	strb	r3, [r7, #11]
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	4619      	mov	r1, r3
 801217a:	68f8      	ldr	r0, [r7, #12]
 801217c:	f7ff ff4c 	bl	8012018 <network_configure_weights>
 8012180:	4603      	mov	r3, r0
 8012182:	461a      	mov	r2, r3
 8012184:	7afb      	ldrb	r3, [r7, #11]
 8012186:	4013      	ands	r3, r2
 8012188:	2b00      	cmp	r3, #0
 801218a:	bf14      	ite	ne
 801218c:	2301      	movne	r3, #1
 801218e:	2300      	moveq	r3, #0
 8012190:	72fb      	strb	r3, [r7, #11]
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	3318      	adds	r3, #24
 8012196:	4619      	mov	r1, r3
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f7ff fee5 	bl	8011f68 <network_configure_activations>
 801219e:	4603      	mov	r3, r0
 80121a0:	461a      	mov	r2, r3
 80121a2:	7afb      	ldrb	r3, [r7, #11]
 80121a4:	4013      	ands	r3, r2
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	bf14      	ite	ne
 80121aa:	2301      	movne	r3, #1
 80121ac:	2300      	moveq	r3, #0
 80121ae:	72fb      	strb	r3, [r7, #11]
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f000 f91f 	bl	80123f4 <ai_platform_network_post_init>
 80121b6:	4603      	mov	r3, r0
 80121b8:	461a      	mov	r2, r3
 80121ba:	7afb      	ldrb	r3, [r7, #11]
 80121bc:	4013      	ands	r3, r2
 80121be:	2b00      	cmp	r3, #0
 80121c0:	bf14      	ite	ne
 80121c2:	2301      	movne	r3, #1
 80121c4:	2300      	moveq	r3, #0
 80121c6:	72fb      	strb	r3, [r7, #11]
 80121c8:	7afb      	ldrb	r3, [r7, #11]
 80121ca:	4618      	mov	r0, r3
 80121cc:	3710      	adds	r7, #16
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <ai_network_run>:
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b084      	sub	sp, #16
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	60f8      	str	r0, [r7, #12]
 80121da:	60b9      	str	r1, [r7, #8]
 80121dc:	607a      	str	r2, [r7, #4]
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	68b9      	ldr	r1, [r7, #8]
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f000 f94e 	bl	8012484 <ai_platform_network_process>
 80121e8:	4603      	mov	r3, r0
 80121ea:	4618      	mov	r0, r3
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
	...

080121f4 <ai_network_data_weights_get>:
 80121f4:	b480      	push	{r7}
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	4b02      	ldr	r3, [pc, #8]	; (8012204 <ai_network_data_weights_get+0x10>)
 80121fa:	4618      	mov	r0, r3
 80121fc:	46bd      	mov	sp, r7
 80121fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012202:	4770      	bx	lr
 8012204:	0801c4b0 	.word	0x0801c4b0

08012208 <_platform_network_state_setup.isra.1>:
 8012208:	b430      	push	{r4, r5}
 801220a:	68dd      	ldr	r5, [r3, #12]
 801220c:	695c      	ldr	r4, [r3, #20]
 801220e:	68ed      	ldr	r5, [r5, #12]
 8012210:	68e4      	ldr	r4, [r4, #12]
 8012212:	fb04 f405 	mul.w	r4, r4, r5
 8012216:	6084      	str	r4, [r0, #8]
 8012218:	8809      	ldrh	r1, [r1, #0]
 801221a:	fb04 f401 	mul.w	r4, r4, r1
 801221e:	60c4      	str	r4, [r0, #12]
 8012220:	6811      	ldr	r1, [r2, #0]
 8012222:	6041      	str	r1, [r0, #4]
 8012224:	6812      	ldr	r2, [r2, #0]
 8012226:	4414      	add	r4, r2
 8012228:	6004      	str	r4, [r0, #0]
 801222a:	699a      	ldr	r2, [r3, #24]
 801222c:	6814      	ldr	r4, [r2, #0]
 801222e:	00a4      	lsls	r4, r4, #2
 8012230:	d407      	bmi.n	8012242 <_platform_network_state_setup.isra.1+0x3a>
 8012232:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8012236:	1b64      	subs	r4, r4, r5
 8012238:	4421      	add	r1, r4
 801223a:	6091      	str	r1, [r2, #8]
 801223c:	699b      	ldr	r3, [r3, #24]
 801223e:	6842      	ldr	r2, [r0, #4]
 8012240:	60da      	str	r2, [r3, #12]
 8012242:	bc30      	pop	{r4, r5}
 8012244:	4770      	bx	lr
	...

08012248 <ai_platform_network_create>:
 8012248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801224c:	4e23      	ldr	r6, [pc, #140]	; (80122dc <ai_platform_network_create+0x94>)
 801224e:	4924      	ldr	r1, [pc, #144]	; (80122e0 <ai_platform_network_create+0x98>)
 8012250:	6835      	ldr	r5, [r6, #0]
 8012252:	b082      	sub	sp, #8
 8012254:	f025 0501 	bic.w	r5, r5, #1
 8012258:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801225c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8012260:	6035      	str	r5, [r6, #0]
 8012262:	2501      	movs	r5, #1
 8012264:	600d      	str	r5, [r1, #0]
 8012266:	680d      	ldr	r5, [r1, #0]
 8012268:	2d00      	cmp	r5, #0
 801226a:	d1fc      	bne.n	8012266 <ai_platform_network_create+0x1e>
 801226c:	491d      	ldr	r1, [pc, #116]	; (80122e4 <ai_platform_network_create+0x9c>)
 801226e:	4e1e      	ldr	r6, [pc, #120]	; (80122e8 <ai_platform_network_create+0xa0>)
 8012270:	600e      	str	r6, [r1, #0]
 8012272:	680e      	ldr	r6, [r1, #0]
 8012274:	491d      	ldr	r1, [pc, #116]	; (80122ec <ai_platform_network_create+0xa4>)
 8012276:	428e      	cmp	r6, r1
 8012278:	d000      	beq.n	801227c <ai_platform_network_create+0x34>
 801227a:	e7fe      	b.n	801227a <ai_platform_network_create+0x32>
 801227c:	b1d0      	cbz	r0, 80122b4 <ai_platform_network_create+0x6c>
 801227e:	4698      	mov	r8, r3
 8012280:	4613      	mov	r3, r2
 8012282:	4a1b      	ldr	r2, [pc, #108]	; (80122f0 <ai_platform_network_create+0xa8>)
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	6003      	str	r3, [r0, #0]
 8012288:	4606      	mov	r6, r0
 801228a:	f000 fb05 	bl	8012898 <core_init>
 801228e:	b1b0      	cbz	r0, 80122be <ai_platform_network_create+0x76>
 8012290:	0223      	lsls	r3, r4, #8
 8012292:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012296:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 801229a:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 801229e:	d910      	bls.n	80122c2 <ai_platform_network_create+0x7a>
 80122a0:	2201      	movs	r2, #1
 80122a2:	2300      	movs	r3, #0
 80122a4:	6033      	str	r3, [r6, #0]
 80122a6:	2310      	movs	r3, #16
 80122a8:	2000      	movs	r0, #0
 80122aa:	f362 0007 	bfi	r0, r2, #0, #8
 80122ae:	f363 201f 	bfi	r0, r3, #8, #24
 80122b2:	e001      	b.n	80122b8 <ai_platform_network_create+0x70>
 80122b4:	f241 0010 	movw	r0, #4112	; 0x1010
 80122b8:	b002      	add	sp, #8
 80122ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122be:	2230      	movs	r2, #48	; 0x30
 80122c0:	e7ef      	b.n	80122a2 <ai_platform_network_create+0x5a>
 80122c2:	a802      	add	r0, sp, #8
 80122c4:	4b0b      	ldr	r3, [pc, #44]	; (80122f4 <ai_platform_network_create+0xac>)
 80122c6:	f840 3d04 	str.w	r3, [r0, #-4]!
 80122ca:	f002 fa41 	bl	8014750 <ai_check_custom_types>
 80122ce:	b110      	cbz	r0, 80122d6 <ai_platform_network_create+0x8e>
 80122d0:	462b      	mov	r3, r5
 80122d2:	462a      	mov	r2, r5
 80122d4:	e7e8      	b.n	80122a8 <ai_platform_network_create+0x60>
 80122d6:	2202      	movs	r2, #2
 80122d8:	e7e3      	b.n	80122a2 <ai_platform_network_create+0x5a>
 80122da:	bf00      	nop
 80122dc:	e0002000 	.word	0xe0002000
 80122e0:	40023008 	.word	0x40023008
 80122e4:	40023000 	.word	0x40023000
 80122e8:	f407a5c2 	.word	0xf407a5c2
 80122ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80122f0:	a1c00100 	.word	0xa1c00100
 80122f4:	84048403 	.word	0x84048403

080122f8 <ai_platform_network_init>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	460c      	mov	r4, r1
 80122fc:	4605      	mov	r5, r0
 80122fe:	b120      	cbz	r0, 801230a <ai_platform_network_init+0x12>
 8012300:	4b36      	ldr	r3, [pc, #216]	; (80123dc <ai_platform_network_init+0xe4>)
 8012302:	6802      	ldr	r2, [r0, #0]
 8012304:	429a      	cmp	r2, r3
 8012306:	bf18      	it	ne
 8012308:	2500      	movne	r5, #0
 801230a:	4935      	ldr	r1, [pc, #212]	; (80123e0 <ai_platform_network_init+0xe8>)
 801230c:	4a35      	ldr	r2, [pc, #212]	; (80123e4 <ai_platform_network_init+0xec>)
 801230e:	680b      	ldr	r3, [r1, #0]
 8012310:	2001      	movs	r0, #1
 8012312:	f023 0301 	bic.w	r3, r3, #1
 8012316:	600b      	str	r3, [r1, #0]
 8012318:	4613      	mov	r3, r2
 801231a:	6010      	str	r0, [r2, #0]
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	2a00      	cmp	r2, #0
 8012320:	d1fc      	bne.n	801231c <ai_platform_network_init+0x24>
 8012322:	4b31      	ldr	r3, [pc, #196]	; (80123e8 <ai_platform_network_init+0xf0>)
 8012324:	4a31      	ldr	r2, [pc, #196]	; (80123ec <ai_platform_network_init+0xf4>)
 8012326:	601a      	str	r2, [r3, #0]
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	4b31      	ldr	r3, [pc, #196]	; (80123f0 <ai_platform_network_init+0xf8>)
 801232c:	429a      	cmp	r2, r3
 801232e:	d000      	beq.n	8012332 <ai_platform_network_init+0x3a>
 8012330:	e7fe      	b.n	8012330 <ai_platform_network_init+0x38>
 8012332:	b33d      	cbz	r5, 8012384 <ai_platform_network_init+0x8c>
 8012334:	b344      	cbz	r4, 8012388 <ai_platform_network_init+0x90>
 8012336:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8012338:	6926      	ldr	r6, [r4, #16]
 801233a:	2f00      	cmp	r7, #0
 801233c:	d03d      	beq.n	80123ba <ai_platform_network_init+0xc2>
 801233e:	b35e      	cbz	r6, 8012398 <ai_platform_network_init+0xa0>
 8012340:	4627      	mov	r7, r4
 8012342:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012344:	f105 0618 	add.w	r6, r5, #24
 8012348:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801234a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801234e:	e886 0003 	stmia.w	r6, {r0, r1}
 8012352:	3418      	adds	r4, #24
 8012354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012356:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801235a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801235c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8012360:	e886 0003 	stmia.w	r6, {r0, r1}
 8012364:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8012366:	2303      	movs	r3, #3
 8012368:	60eb      	str	r3, [r5, #12]
 801236a:	b15a      	cbz	r2, 8012384 <ai_platform_network_init+0x8c>
 801236c:	68d3      	ldr	r3, [r2, #12]
 801236e:	6095      	str	r5, [r2, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d007      	beq.n	8012384 <ai_platform_network_init+0x8c>
 8012374:	b133      	cbz	r3, 8012384 <ai_platform_network_init+0x8c>
 8012376:	68da      	ldr	r2, [r3, #12]
 8012378:	609d      	str	r5, [r3, #8]
 801237a:	429a      	cmp	r2, r3
 801237c:	d002      	beq.n	8012384 <ai_platform_network_init+0x8c>
 801237e:	4613      	mov	r3, r2
 8012380:	2b00      	cmp	r3, #0
 8012382:	d1f8      	bne.n	8012376 <ai_platform_network_init+0x7e>
 8012384:	4628      	mov	r0, r5
 8012386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012388:	f105 0010 	add.w	r0, r5, #16
 801238c:	2211      	movs	r2, #17
 801238e:	2110      	movs	r1, #16
 8012390:	f000 fa84 	bl	801289c <core_set_error>
 8012394:	4625      	mov	r5, r4
 8012396:	e7f5      	b.n	8012384 <ai_platform_network_init+0x8c>
 8012398:	8921      	ldrh	r1, [r4, #8]
 801239a:	88e2      	ldrh	r2, [r4, #6]
 801239c:	68e3      	ldr	r3, [r4, #12]
 801239e:	fb02 f201 	mul.w	r2, r2, r1
 80123a2:	fb03 f302 	mul.w	r3, r3, r2
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d0ca      	beq.n	8012340 <ai_platform_network_init+0x48>
 80123aa:	f105 0010 	add.w	r0, r5, #16
 80123ae:	2212      	movs	r2, #18
 80123b0:	2110      	movs	r1, #16
 80123b2:	f000 fa73 	bl	801289c <core_set_error>
 80123b6:	4635      	mov	r5, r6
 80123b8:	e7e4      	b.n	8012384 <ai_platform_network_init+0x8c>
 80123ba:	8c21      	ldrh	r1, [r4, #32]
 80123bc:	8be2      	ldrh	r2, [r4, #30]
 80123be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123c0:	fb02 f201 	mul.w	r2, r2, r1
 80123c4:	fb03 f302 	mul.w	r3, r3, r2
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d0b8      	beq.n	801233e <ai_platform_network_init+0x46>
 80123cc:	f105 0010 	add.w	r0, r5, #16
 80123d0:	2213      	movs	r2, #19
 80123d2:	2110      	movs	r1, #16
 80123d4:	f000 fa62 	bl	801289c <core_set_error>
 80123d8:	463d      	mov	r5, r7
 80123da:	e7d3      	b.n	8012384 <ai_platform_network_init+0x8c>
 80123dc:	a1c00100 	.word	0xa1c00100
 80123e0:	e0002000 	.word	0xe0002000
 80123e4:	40023008 	.word	0x40023008
 80123e8:	40023000 	.word	0x40023000
 80123ec:	f407a5c2 	.word	0xf407a5c2
 80123f0:	b5e8b5cd 	.word	0xb5e8b5cd

080123f4 <ai_platform_network_post_init>:
 80123f4:	b538      	push	{r3, r4, r5, lr}
 80123f6:	4604      	mov	r4, r0
 80123f8:	b120      	cbz	r0, 8012404 <ai_platform_network_post_init+0x10>
 80123fa:	4b1c      	ldr	r3, [pc, #112]	; (801246c <ai_platform_network_post_init+0x78>)
 80123fc:	6802      	ldr	r2, [r0, #0]
 80123fe:	429a      	cmp	r2, r3
 8012400:	bf18      	it	ne
 8012402:	2400      	movne	r4, #0
 8012404:	491a      	ldr	r1, [pc, #104]	; (8012470 <ai_platform_network_post_init+0x7c>)
 8012406:	4a1b      	ldr	r2, [pc, #108]	; (8012474 <ai_platform_network_post_init+0x80>)
 8012408:	680b      	ldr	r3, [r1, #0]
 801240a:	2001      	movs	r0, #1
 801240c:	f023 0301 	bic.w	r3, r3, #1
 8012410:	600b      	str	r3, [r1, #0]
 8012412:	4613      	mov	r3, r2
 8012414:	6010      	str	r0, [r2, #0]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	2a00      	cmp	r2, #0
 801241a:	d1fc      	bne.n	8012416 <ai_platform_network_post_init+0x22>
 801241c:	4b16      	ldr	r3, [pc, #88]	; (8012478 <ai_platform_network_post_init+0x84>)
 801241e:	4a17      	ldr	r2, [pc, #92]	; (801247c <ai_platform_network_post_init+0x88>)
 8012420:	601a      	str	r2, [r3, #0]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	4b16      	ldr	r3, [pc, #88]	; (8012480 <ai_platform_network_post_init+0x8c>)
 8012426:	429a      	cmp	r2, r3
 8012428:	d000      	beq.n	801242c <ai_platform_network_post_init+0x38>
 801242a:	e7fe      	b.n	801242a <ai_platform_network_post_init+0x36>
 801242c:	b1a4      	cbz	r4, 8012458 <ai_platform_network_post_init+0x64>
 801242e:	68e3      	ldr	r3, [r4, #12]
 8012430:	f013 0502 	ands.w	r5, r3, #2
 8012434:	d012      	beq.n	801245c <ai_platform_network_post_init+0x68>
 8012436:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012438:	b163      	cbz	r3, 8012454 <ai_platform_network_post_init+0x60>
 801243a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801243c:	b91d      	cbnz	r5, 8012446 <ai_platform_network_post_init+0x52>
 801243e:	e009      	b.n	8012454 <ai_platform_network_post_init+0x60>
 8012440:	461d      	mov	r5, r3
 8012442:	b13b      	cbz	r3, 8012454 <ai_platform_network_post_init+0x60>
 8012444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012446:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012448:	4629      	mov	r1, r5
 801244a:	2000      	movs	r0, #0
 801244c:	4798      	blx	r3
 801244e:	68eb      	ldr	r3, [r5, #12]
 8012450:	42ab      	cmp	r3, r5
 8012452:	d1f5      	bne.n	8012440 <ai_platform_network_post_init+0x4c>
 8012454:	2001      	movs	r0, #1
 8012456:	bd38      	pop	{r3, r4, r5, pc}
 8012458:	4620      	mov	r0, r4
 801245a:	bd38      	pop	{r3, r4, r5, pc}
 801245c:	f104 0010 	add.w	r0, r4, #16
 8012460:	2210      	movs	r2, #16
 8012462:	2111      	movs	r1, #17
 8012464:	f000 fa1a 	bl	801289c <core_set_error>
 8012468:	4628      	mov	r0, r5
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	a1c00100 	.word	0xa1c00100
 8012470:	e0002000 	.word	0xe0002000
 8012474:	40023008 	.word	0x40023008
 8012478:	40023000 	.word	0x40023000
 801247c:	f407a5c2 	.word	0xf407a5c2
 8012480:	b5e8b5cd 	.word	0xb5e8b5cd

08012484 <ai_platform_network_process>:
 8012484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012488:	b083      	sub	sp, #12
 801248a:	4604      	mov	r4, r0
 801248c:	9201      	str	r2, [sp, #4]
 801248e:	b120      	cbz	r0, 801249a <ai_platform_network_process+0x16>
 8012490:	4ba5      	ldr	r3, [pc, #660]	; (8012728 <ai_platform_network_process+0x2a4>)
 8012492:	6802      	ldr	r2, [r0, #0]
 8012494:	429a      	cmp	r2, r3
 8012496:	bf18      	it	ne
 8012498:	2400      	movne	r4, #0
 801249a:	48a4      	ldr	r0, [pc, #656]	; (801272c <ai_platform_network_process+0x2a8>)
 801249c:	4ba4      	ldr	r3, [pc, #656]	; (8012730 <ai_platform_network_process+0x2ac>)
 801249e:	6802      	ldr	r2, [r0, #0]
 80124a0:	f022 0201 	bic.w	r2, r2, #1
 80124a4:	6002      	str	r2, [r0, #0]
 80124a6:	2201      	movs	r2, #1
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	681a      	ldr	r2, [r3, #0]
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	d1fc      	bne.n	80124aa <ai_platform_network_process+0x26>
 80124b0:	4ba0      	ldr	r3, [pc, #640]	; (8012734 <ai_platform_network_process+0x2b0>)
 80124b2:	4aa1      	ldr	r2, [pc, #644]	; (8012738 <ai_platform_network_process+0x2b4>)
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	4ba0      	ldr	r3, [pc, #640]	; (801273c <ai_platform_network_process+0x2b8>)
 80124ba:	429a      	cmp	r2, r3
 80124bc:	d000      	beq.n	80124c0 <ai_platform_network_process+0x3c>
 80124be:	e7fe      	b.n	80124be <ai_platform_network_process+0x3a>
 80124c0:	2c00      	cmp	r4, #0
 80124c2:	d066      	beq.n	8012592 <ai_platform_network_process+0x10e>
 80124c4:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80124c8:	b107      	cbz	r7, 80124cc <ai_platform_network_process+0x48>
 80124ca:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80124cc:	68e3      	ldr	r3, [r4, #12]
 80124ce:	f003 0303 	and.w	r3, r3, #3
 80124d2:	2600      	movs	r6, #0
 80124d4:	2b03      	cmp	r3, #3
 80124d6:	6166      	str	r6, [r4, #20]
 80124d8:	f040 80fe 	bne.w	80126d8 <ai_platform_network_process+0x254>
 80124dc:	2900      	cmp	r1, #0
 80124de:	d07f      	beq.n	80125e0 <ai_platform_network_process+0x15c>
 80124e0:	2f00      	cmp	r7, #0
 80124e2:	d07d      	beq.n	80125e0 <ai_platform_network_process+0x15c>
 80124e4:	883b      	ldrh	r3, [r7, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d07a      	beq.n	80125e0 <ai_platform_network_process+0x15c>
 80124ea:	460d      	mov	r5, r1
 80124ec:	46a0      	mov	r8, r4
 80124ee:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80124f2:	429e      	cmp	r6, r3
 80124f4:	d27d      	bcs.n	80125f2 <ai_platform_network_process+0x16e>
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d07a      	beq.n	80125f2 <ai_platform_network_process+0x16e>
 80124fc:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8012500:	2c00      	cmp	r4, #0
 8012502:	d076      	beq.n	80125f2 <ai_platform_network_process+0x16e>
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 801250c:	d067      	beq.n	80125de <ai_platform_network_process+0x15a>
 801250e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8012512:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8012516:	69a0      	ldr	r0, [r4, #24]
 8012518:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801251c:	6841      	ldr	r1, [r0, #4]
 801251e:	fb0b f30e 	mul.w	r3, fp, lr
 8012522:	fb0c f303 	mul.w	r3, ip, r3
 8012526:	4299      	cmp	r1, r3
 8012528:	d350      	bcc.n	80125cc <ai_platform_network_process+0x148>
 801252a:	68e3      	ldr	r3, [r4, #12]
 801252c:	68da      	ldr	r2, [r3, #12]
 801252e:	455a      	cmp	r2, fp
 8012530:	d14c      	bne.n	80125cc <ai_platform_network_process+0x148>
 8012532:	689a      	ldr	r2, [r3, #8]
 8012534:	4572      	cmp	r2, lr
 8012536:	d149      	bne.n	80125cc <ai_platform_network_process+0x148>
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	459c      	cmp	ip, r3
 801253c:	d146      	bne.n	80125cc <ai_platform_network_process+0x148>
 801253e:	6800      	ldr	r0, [r0, #0]
 8012540:	f002 f9b6 	bl	80148b0 <ai_array_get_byte_size>
 8012544:	68e2      	ldr	r2, [r4, #12]
 8012546:	6963      	ldr	r3, [r4, #20]
 8012548:	68d2      	ldr	r2, [r2, #12]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	fb03 f302 	mul.w	r3, r3, r2
 8012550:	4298      	cmp	r0, r3
 8012552:	d33b      	bcc.n	80125cc <ai_platform_network_process+0x148>
 8012554:	69a3      	ldr	r3, [r4, #24]
 8012556:	6818      	ldr	r0, [r3, #0]
 8012558:	f002 f95e 	bl	8014818 <ai_array_to_buffer_fmt>
 801255c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8012560:	4043      	eors	r3, r0
 8012562:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8012566:	d128      	bne.n	80125ba <ai_platform_network_process+0x136>
 8012568:	68eb      	ldr	r3, [r5, #12]
 801256a:	b1f3      	cbz	r3, 80125aa <ai_platform_network_process+0x126>
 801256c:	f8b5 b000 	ldrh.w	fp, [r5]
 8012570:	f1bb 0f00 	cmp.w	fp, #0
 8012574:	d012      	beq.n	801259c <ai_platform_network_process+0x118>
 8012576:	4623      	mov	r3, r4
 8012578:	f105 020c 	add.w	r2, r5, #12
 801257c:	4629      	mov	r1, r5
 801257e:	4650      	mov	r0, sl
 8012580:	f7ff fe42 	bl	8012208 <_platform_network_state_setup.isra.1>
 8012584:	45d9      	cmp	r9, fp
 8012586:	883b      	ldrh	r3, [r7, #0]
 8012588:	bf38      	it	cc
 801258a:	46d9      	movcc	r9, fp
 801258c:	3601      	adds	r6, #1
 801258e:	3518      	adds	r5, #24
 8012590:	e7af      	b.n	80124f2 <ai_platform_network_process+0x6e>
 8012592:	46a3      	mov	fp, r4
 8012594:	4658      	mov	r0, fp
 8012596:	b003      	add	sp, #12
 8012598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801259c:	f108 0010 	add.w	r0, r8, #16
 80125a0:	2221      	movs	r2, #33	; 0x21
 80125a2:	2112      	movs	r1, #18
 80125a4:	f000 f97a 	bl	801289c <core_set_error>
 80125a8:	e7f4      	b.n	8012594 <ai_platform_network_process+0x110>
 80125aa:	f108 0010 	add.w	r0, r8, #16
 80125ae:	2217      	movs	r2, #23
 80125b0:	2112      	movs	r1, #18
 80125b2:	469b      	mov	fp, r3
 80125b4:	f000 f972 	bl	801289c <core_set_error>
 80125b8:	e7ec      	b.n	8012594 <ai_platform_network_process+0x110>
 80125ba:	f108 0010 	add.w	r0, r8, #16
 80125be:	2219      	movs	r2, #25
 80125c0:	2112      	movs	r1, #18
 80125c2:	f000 f96b 	bl	801289c <core_set_error>
 80125c6:	f04f 0b00 	mov.w	fp, #0
 80125ca:	e7e3      	b.n	8012594 <ai_platform_network_process+0x110>
 80125cc:	f108 0010 	add.w	r0, r8, #16
 80125d0:	2218      	movs	r2, #24
 80125d2:	2112      	movs	r1, #18
 80125d4:	f000 f962 	bl	801289c <core_set_error>
 80125d8:	f04f 0b00 	mov.w	fp, #0
 80125dc:	e7da      	b.n	8012594 <ai_platform_network_process+0x110>
 80125de:	4644      	mov	r4, r8
 80125e0:	f104 0010 	add.w	r0, r4, #16
 80125e4:	2217      	movs	r2, #23
 80125e6:	2112      	movs	r1, #18
 80125e8:	f000 f958 	bl	801289c <core_set_error>
 80125ec:	f04f 0b00 	mov.w	fp, #0
 80125f0:	e7d0      	b.n	8012594 <ai_platform_network_process+0x110>
 80125f2:	9a01      	ldr	r2, [sp, #4]
 80125f4:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80125f8:	4644      	mov	r4, r8
 80125fa:	2a00      	cmp	r2, #0
 80125fc:	f000 80a4 	beq.w	8012748 <ai_platform_network_process+0x2c4>
 8012600:	2b01      	cmp	r3, #1
 8012602:	f240 8140 	bls.w	8012886 <ai_platform_network_process+0x402>
 8012606:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 801260a:	f118 0f0c 	cmn.w	r8, #12
 801260e:	f000 813a 	beq.w	8012886 <ai_platform_network_process+0x402>
 8012612:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8012616:	2b00      	cmp	r3, #0
 8012618:	f000 8135 	beq.w	8012886 <ai_platform_network_process+0x402>
 801261c:	3204      	adds	r2, #4
 801261e:	4615      	mov	r5, r2
 8012620:	2700      	movs	r7, #0
 8012622:	429f      	cmp	r7, r3
 8012624:	f080 808c 	bcs.w	8012740 <ai_platform_network_process+0x2bc>
 8012628:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	f000 8087 	beq.w	8012740 <ai_platform_network_process+0x2bc>
 8012632:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8012636:	2e00      	cmp	r6, #0
 8012638:	f000 8082 	beq.w	8012740 <ai_platform_network_process+0x2bc>
 801263c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8012646:	d067      	beq.n	8012718 <ai_platform_network_process+0x294>
 8012648:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801264c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8012650:	69b0      	ldr	r0, [r6, #24]
 8012652:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8012656:	6841      	ldr	r1, [r0, #4]
 8012658:	fb0b f30e 	mul.w	r3, fp, lr
 801265c:	fb0c f303 	mul.w	r3, ip, r3
 8012660:	4299      	cmp	r1, r3
 8012662:	f0c0 8110 	bcc.w	8012886 <ai_platform_network_process+0x402>
 8012666:	68f3      	ldr	r3, [r6, #12]
 8012668:	68da      	ldr	r2, [r3, #12]
 801266a:	455a      	cmp	r2, fp
 801266c:	f040 810b 	bne.w	8012886 <ai_platform_network_process+0x402>
 8012670:	689a      	ldr	r2, [r3, #8]
 8012672:	4572      	cmp	r2, lr
 8012674:	f040 8107 	bne.w	8012886 <ai_platform_network_process+0x402>
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	459c      	cmp	ip, r3
 801267c:	f040 8103 	bne.w	8012886 <ai_platform_network_process+0x402>
 8012680:	6800      	ldr	r0, [r0, #0]
 8012682:	f002 f915 	bl	80148b0 <ai_array_get_byte_size>
 8012686:	68f2      	ldr	r2, [r6, #12]
 8012688:	6973      	ldr	r3, [r6, #20]
 801268a:	68d2      	ldr	r2, [r2, #12]
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	fb03 f302 	mul.w	r3, r3, r2
 8012692:	4298      	cmp	r0, r3
 8012694:	f0c0 80f7 	bcc.w	8012886 <ai_platform_network_process+0x402>
 8012698:	69b3      	ldr	r3, [r6, #24]
 801269a:	6818      	ldr	r0, [r3, #0]
 801269c:	f002 f8bc 	bl	8014818 <ai_array_to_buffer_fmt>
 80126a0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80126a4:	4043      	eors	r3, r0
 80126a6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80126aa:	d12c      	bne.n	8012706 <ai_platform_network_process+0x282>
 80126ac:	68eb      	ldr	r3, [r5, #12]
 80126ae:	b313      	cbz	r3, 80126f6 <ai_platform_network_process+0x272>
 80126b0:	f8b5 b000 	ldrh.w	fp, [r5]
 80126b4:	f1bb 0f00 	cmp.w	fp, #0
 80126b8:	d016      	beq.n	80126e8 <ai_platform_network_process+0x264>
 80126ba:	4633      	mov	r3, r6
 80126bc:	f105 020c 	add.w	r2, r5, #12
 80126c0:	4629      	mov	r1, r5
 80126c2:	4650      	mov	r0, sl
 80126c4:	f7ff fda0 	bl	8012208 <_platform_network_state_setup.isra.1>
 80126c8:	45d9      	cmp	r9, fp
 80126ca:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80126ce:	bf38      	it	cc
 80126d0:	46d9      	movcc	r9, fp
 80126d2:	3701      	adds	r7, #1
 80126d4:	3518      	adds	r5, #24
 80126d6:	e7a4      	b.n	8012622 <ai_platform_network_process+0x19e>
 80126d8:	f104 0010 	add.w	r0, r4, #16
 80126dc:	2230      	movs	r2, #48	; 0x30
 80126de:	2111      	movs	r1, #17
 80126e0:	f000 f8dc 	bl	801289c <core_set_error>
 80126e4:	46b3      	mov	fp, r6
 80126e6:	e755      	b.n	8012594 <ai_platform_network_process+0x110>
 80126e8:	f104 0010 	add.w	r0, r4, #16
 80126ec:	2221      	movs	r2, #33	; 0x21
 80126ee:	2113      	movs	r1, #19
 80126f0:	f000 f8d4 	bl	801289c <core_set_error>
 80126f4:	e74e      	b.n	8012594 <ai_platform_network_process+0x110>
 80126f6:	f104 0010 	add.w	r0, r4, #16
 80126fa:	2217      	movs	r2, #23
 80126fc:	2113      	movs	r1, #19
 80126fe:	469b      	mov	fp, r3
 8012700:	f000 f8cc 	bl	801289c <core_set_error>
 8012704:	e746      	b.n	8012594 <ai_platform_network_process+0x110>
 8012706:	f104 0010 	add.w	r0, r4, #16
 801270a:	2219      	movs	r2, #25
 801270c:	2113      	movs	r1, #19
 801270e:	f000 f8c5 	bl	801289c <core_set_error>
 8012712:	f04f 0b00 	mov.w	fp, #0
 8012716:	e73d      	b.n	8012594 <ai_platform_network_process+0x110>
 8012718:	f104 0010 	add.w	r0, r4, #16
 801271c:	2217      	movs	r2, #23
 801271e:	2113      	movs	r1, #19
 8012720:	f000 f8bc 	bl	801289c <core_set_error>
 8012724:	46d3      	mov	fp, sl
 8012726:	e735      	b.n	8012594 <ai_platform_network_process+0x110>
 8012728:	a1c00100 	.word	0xa1c00100
 801272c:	e0002000 	.word	0xe0002000
 8012730:	40023008 	.word	0x40023008
 8012734:	40023000 	.word	0x40023000
 8012738:	f407a5c2 	.word	0xf407a5c2
 801273c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012740:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8012744:	f8a4 9014 	strh.w	r9, [r4, #20]
 8012748:	2b00      	cmp	r3, #0
 801274a:	f000 8099 	beq.w	8012880 <ai_platform_network_process+0x3fc>
 801274e:	2b01      	cmp	r3, #1
 8012750:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012752:	f240 8093 	bls.w	801287c <ai_platform_network_process+0x3f8>
 8012756:	f105 070c 	add.w	r7, r5, #12
 801275a:	8ae0      	ldrh	r0, [r4, #22]
 801275c:	8aa3      	ldrh	r3, [r4, #20]
 801275e:	4283      	cmp	r3, r0
 8012760:	d977      	bls.n	8012852 <ai_platform_network_process+0x3ce>
 8012762:	46a3      	mov	fp, r4
 8012764:	2d00      	cmp	r5, #0
 8012766:	d032      	beq.n	80127ce <ai_platform_network_process+0x34a>
 8012768:	882b      	ldrh	r3, [r5, #0]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d02f      	beq.n	80127ce <ai_platform_network_process+0x34a>
 801276e:	686b      	ldr	r3, [r5, #4]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d02c      	beq.n	80127ce <ai_platform_network_process+0x34a>
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	f04f 0800 	mov.w	r8, #0
 801277a:	b343      	cbz	r3, 80127ce <ai_platform_network_process+0x34a>
 801277c:	68a9      	ldr	r1, [r5, #8]
 801277e:	699a      	ldr	r2, [r3, #24]
 8012780:	f8d1 a000 	ldr.w	sl, [r1]
 8012784:	6814      	ldr	r4, [r2, #0]
 8012786:	6890      	ldr	r0, [r2, #8]
 8012788:	ea4f 1908 	mov.w	r9, r8, lsl #4
 801278c:	eb0a 0609 	add.w	r6, sl, r9
 8012790:	00a4      	lsls	r4, r4, #2
 8012792:	6871      	ldr	r1, [r6, #4]
 8012794:	d45f      	bmi.n	8012856 <ai_platform_network_process+0x3d2>
 8012796:	68d4      	ldr	r4, [r2, #12]
 8012798:	1b00      	subs	r0, r0, r4
 801279a:	4401      	add	r1, r0
 801279c:	6091      	str	r1, [r2, #8]
 801279e:	699b      	ldr	r3, [r3, #24]
 80127a0:	6872      	ldr	r2, [r6, #4]
 80127a2:	60da      	str	r2, [r3, #12]
 80127a4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80127a8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80127ac:	440b      	add	r3, r1
 80127ae:	4293      	cmp	r3, r2
 80127b0:	bf24      	itt	cs
 80127b2:	68f3      	ldrcs	r3, [r6, #12]
 80127b4:	1ad3      	subcs	r3, r2, r3
 80127b6:	6073      	str	r3, [r6, #4]
 80127b8:	882b      	ldrh	r3, [r5, #0]
 80127ba:	f108 0801 	add.w	r8, r8, #1
 80127be:	4598      	cmp	r8, r3
 80127c0:	d205      	bcs.n	80127ce <ai_platform_network_process+0x34a>
 80127c2:	686b      	ldr	r3, [r5, #4]
 80127c4:	b11b      	cbz	r3, 80127ce <ai_platform_network_process+0x34a>
 80127c6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1d6      	bne.n	801277c <ai_platform_network_process+0x2f8>
 80127ce:	4658      	mov	r0, fp
 80127d0:	f001 ffe8 	bl	80147a4 <ai_layers_forward_all>
 80127d4:	2f00      	cmp	r7, #0
 80127d6:	d032      	beq.n	801283e <ai_platform_network_process+0x3ba>
 80127d8:	883b      	ldrh	r3, [r7, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d02f      	beq.n	801283e <ai_platform_network_process+0x3ba>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	b36b      	cbz	r3, 801283e <ai_platform_network_process+0x3ba>
 80127e2:	6818      	ldr	r0, [r3, #0]
 80127e4:	b358      	cbz	r0, 801283e <ai_platform_network_process+0x3ba>
 80127e6:	f04f 0800 	mov.w	r8, #0
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	6981      	ldr	r1, [r0, #24]
 80127ee:	f8d3 a000 	ldr.w	sl, [r3]
 80127f2:	680c      	ldr	r4, [r1, #0]
 80127f4:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80127f8:	eb0a 0609 	add.w	r6, sl, r9
 80127fc:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8012800:	00a4      	lsls	r4, r4, #2
 8012802:	eb0c 0302 	add.w	r3, ip, r2
 8012806:	d42a      	bmi.n	801285e <ai_platform_network_process+0x3da>
 8012808:	f85a 2009 	ldr.w	r2, [sl, r9]
 801280c:	4293      	cmp	r3, r2
 801280e:	bf24      	itt	cs
 8012810:	68f3      	ldrcs	r3, [r6, #12]
 8012812:	1ad3      	subcs	r3, r2, r3
 8012814:	6073      	str	r3, [r6, #4]
 8012816:	6981      	ldr	r1, [r0, #24]
 8012818:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 801281c:	1b12      	subs	r2, r2, r4
 801281e:	4413      	add	r3, r2
 8012820:	608b      	str	r3, [r1, #8]
 8012822:	6983      	ldr	r3, [r0, #24]
 8012824:	6872      	ldr	r2, [r6, #4]
 8012826:	60da      	str	r2, [r3, #12]
 8012828:	883b      	ldrh	r3, [r7, #0]
 801282a:	f108 0801 	add.w	r8, r8, #1
 801282e:	4598      	cmp	r8, r3
 8012830:	d205      	bcs.n	801283e <ai_platform_network_process+0x3ba>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	b11b      	cbz	r3, 801283e <ai_platform_network_process+0x3ba>
 8012836:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801283a:	2800      	cmp	r0, #0
 801283c:	d1d5      	bne.n	80127ea <ai_platform_network_process+0x366>
 801283e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8012842:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8012846:	3001      	adds	r0, #1
 8012848:	b280      	uxth	r0, r0
 801284a:	4283      	cmp	r3, r0
 801284c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8012850:	d888      	bhi.n	8012764 <ai_platform_network_process+0x2e0>
 8012852:	4683      	mov	fp, r0
 8012854:	e69e      	b.n	8012594 <ai_platform_network_process+0x110>
 8012856:	68b2      	ldr	r2, [r6, #8]
 8012858:	f002 f886 	bl	8014968 <memcpy>
 801285c:	e7a2      	b.n	80127a4 <ai_platform_network_process+0x320>
 801285e:	6889      	ldr	r1, [r1, #8]
 8012860:	4660      	mov	r0, ip
 8012862:	f002 f881 	bl	8014968 <memcpy>
 8012866:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 801286a:	f85a 2009 	ldr.w	r2, [sl, r9]
 801286e:	440b      	add	r3, r1
 8012870:	4293      	cmp	r3, r2
 8012872:	bf24      	itt	cs
 8012874:	68f3      	ldrcs	r3, [r6, #12]
 8012876:	1ad3      	subcs	r3, r2, r3
 8012878:	6073      	str	r3, [r6, #4]
 801287a:	e7d5      	b.n	8012828 <ai_platform_network_process+0x3a4>
 801287c:	2700      	movs	r7, #0
 801287e:	e76c      	b.n	801275a <ai_platform_network_process+0x2d6>
 8012880:	461d      	mov	r5, r3
 8012882:	461f      	mov	r7, r3
 8012884:	e769      	b.n	801275a <ai_platform_network_process+0x2d6>
 8012886:	f104 0010 	add.w	r0, r4, #16
 801288a:	2218      	movs	r2, #24
 801288c:	2113      	movs	r1, #19
 801288e:	f000 f805 	bl	801289c <core_set_error>
 8012892:	f04f 0b00 	mov.w	fp, #0
 8012896:	e67d      	b.n	8012594 <ai_platform_network_process+0x110>

08012898 <core_init>:
 8012898:	2001      	movs	r0, #1
 801289a:	4770      	bx	lr

0801289c <core_set_error>:
 801289c:	7803      	ldrb	r3, [r0, #0]
 801289e:	b933      	cbnz	r3, 80128ae <core_set_error+0x12>
 80128a0:	7001      	strb	r1, [r0, #0]
 80128a2:	6803      	ldr	r3, [r0, #0]
 80128a4:	f362 231f 	bfi	r3, r2, #8, #24
 80128a8:	6003      	str	r3, [r0, #0]
 80128aa:	2001      	movs	r0, #1
 80128ac:	4770      	bx	lr
 80128ae:	2000      	movs	r0, #0
 80128b0:	4770      	bx	lr
 80128b2:	bf00      	nop

080128b4 <func_dummy>:
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop

080128b8 <ai_dict8_dot_array_f32>:
 80128b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128bc:	f8dd c020 	ldr.w	ip, [sp, #32]
 80128c0:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80128c4:	f000 80c0 	beq.w	8012a48 <ai_dict8_dot_array_f32+0x190>
 80128c8:	f101 0408 	add.w	r4, r1, #8
 80128cc:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80128d0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012a50 <ai_dict8_dot_array_f32+0x198>
 80128d4:	eb04 0e09 	add.w	lr, r4, r9
 80128d8:	f103 0520 	add.w	r5, r3, #32
 80128dc:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 80128e0:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 80128e4:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 80128e8:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 80128ec:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 80128f0:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 80128f4:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 80128f8:	ed55 3a04 	vldr	s7, [r5, #-16]
 80128fc:	ed55 4a03 	vldr	s9, [r5, #-12]
 8012900:	ed55 5a02 	vldr	s11, [r5, #-8]
 8012904:	ed55 6a01 	vldr	s13, [r5, #-4]
 8012908:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801290c:	edd6 7a00 	vldr	s15, [r6]
 8012910:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8012914:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012918:	ee67 7a83 	vmul.f32	s15, s15, s6
 801291c:	ed9a 3a00 	vldr	s6, [sl]
 8012920:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8012924:	eee3 7a05 	vfma.f32	s15, s6, s10
 8012928:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801292c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012930:	ed97 3a00 	vldr	s6, [r7]
 8012934:	ed96 5a00 	vldr	s10, [r6]
 8012938:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 801293c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8012940:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012944:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012948:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801294c:	ed9a 3a00 	vldr	s6, [sl]
 8012950:	ed96 4a00 	vldr	s8, [r6]
 8012954:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8012958:	eee5 7a06 	vfma.f32	s15, s10, s12
 801295c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8012960:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012964:	ed97 5a00 	vldr	s10, [r7]
 8012968:	ed96 6a00 	vldr	s12, [r6]
 801296c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012970:	3408      	adds	r4, #8
 8012972:	45a6      	cmp	lr, r4
 8012974:	f105 0520 	add.w	r5, r5, #32
 8012978:	eee4 7a24 	vfma.f32	s15, s8, s9
 801297c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012980:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012984:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012988:	d1a8      	bne.n	80128dc <ai_dict8_dot_array_f32+0x24>
 801298a:	4449      	add	r1, r9
 801298c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8012990:	f01c 0c07 	ands.w	ip, ip, #7
 8012994:	d050      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 8012996:	780c      	ldrb	r4, [r1, #0]
 8012998:	edd3 6a00 	vldr	s13, [r3]
 801299c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129a0:	edd4 7a00 	vldr	s15, [r4]
 80129a4:	f1bc 0f01 	cmp.w	ip, #1
 80129a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129ac:	d044      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 80129ae:	784c      	ldrb	r4, [r1, #1]
 80129b0:	edd3 6a01 	vldr	s13, [r3, #4]
 80129b4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129b8:	edd4 7a00 	vldr	s15, [r4]
 80129bc:	f1bc 0f02 	cmp.w	ip, #2
 80129c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129c4:	d038      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 80129c6:	788c      	ldrb	r4, [r1, #2]
 80129c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80129cc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129d0:	edd4 7a00 	vldr	s15, [r4]
 80129d4:	f1bc 0f03 	cmp.w	ip, #3
 80129d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129dc:	d02c      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 80129de:	78cc      	ldrb	r4, [r1, #3]
 80129e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80129e4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129e8:	edd4 7a00 	vldr	s15, [r4]
 80129ec:	f1bc 0f04 	cmp.w	ip, #4
 80129f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129f4:	d020      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 80129f6:	790c      	ldrb	r4, [r1, #4]
 80129f8:	edd3 6a04 	vldr	s13, [r3, #16]
 80129fc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a00:	edd4 7a00 	vldr	s15, [r4]
 8012a04:	f1bc 0f05 	cmp.w	ip, #5
 8012a08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a0c:	d014      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 8012a0e:	794c      	ldrb	r4, [r1, #5]
 8012a10:	edd3 6a05 	vldr	s13, [r3, #20]
 8012a14:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a18:	edd4 7a00 	vldr	s15, [r4]
 8012a1c:	f1bc 0f06 	cmp.w	ip, #6
 8012a20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a24:	d008      	beq.n	8012a38 <ai_dict8_dot_array_f32+0x180>
 8012a26:	7989      	ldrb	r1, [r1, #6]
 8012a28:	edd3 7a06 	vldr	s15, [r3, #24]
 8012a2c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012a30:	edd2 6a00 	vldr	s13, [r2]
 8012a34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a38:	edd0 7a00 	vldr	s15, [r0]
 8012a3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a40:	ed80 7a00 	vstr	s14, [r0]
 8012a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a48:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8012a50 <ai_dict8_dot_array_f32+0x198>
 8012a4c:	e7a0      	b.n	8012990 <ai_dict8_dot_array_f32+0xd8>
 8012a4e:	bf00      	nop
 8012a50:	00000000 	.word	0x00000000

08012a54 <ai_dict4_dot_array_f32>:
 8012a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012a5a:	f027 0c01 	bic.w	ip, r7, #1
 8012a5e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8012a62:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012a66:	f000 80ae 	beq.w	8012bc6 <ai_dict4_dot_array_f32+0x172>
 8012a6a:	1d0d      	adds	r5, r1, #4
 8012a6c:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8012a70:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8012bcc <ai_dict4_dot_array_f32+0x178>
 8012a74:	eb05 0e09 	add.w	lr, r5, r9
 8012a78:	f103 0420 	add.w	r4, r3, #32
 8012a7c:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8012a80:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8012a84:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8012a88:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8012a8c:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8012a90:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8012a94:	ed14 5a04 	vldr	s10, [r4, #-16]
 8012a98:	ed54 5a03 	vldr	s11, [r4, #-12]
 8012a9c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8012aa0:	ed54 6a01 	vldr	s13, [r4, #-4]
 8012aa4:	f006 0a0f 	and.w	sl, r6, #15
 8012aa8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012aac:	edda 7a00 	vldr	s15, [sl]
 8012ab0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8012ab4:	0936      	lsrs	r6, r6, #4
 8012ab6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012aba:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012abe:	ed96 3a00 	vldr	s6, [r6]
 8012ac2:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8012ac6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012aca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012ace:	f00b 0b0f 	and.w	fp, fp, #15
 8012ad2:	edd6 3a00 	vldr	s7, [r6]
 8012ad6:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8012ada:	eee3 7a84 	vfma.f32	s15, s7, s8
 8012ade:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8012ae2:	3504      	adds	r5, #4
 8012ae4:	ed9b 4a00 	vldr	s8, [fp]
 8012ae8:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8012aec:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012af0:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8012af4:	f00a 0a0f 	and.w	sl, sl, #15
 8012af8:	eddb 4a00 	vldr	s9, [fp]
 8012afc:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012b00:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012b04:	45ae      	cmp	lr, r5
 8012b06:	ed9a 5a00 	vldr	s10, [sl]
 8012b0a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8012b0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012b12:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012b16:	f006 060f 	and.w	r6, r6, #15
 8012b1a:	edda 5a00 	vldr	s11, [sl]
 8012b1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012b22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b26:	f104 0420 	add.w	r4, r4, #32
 8012b2a:	ed96 6a00 	vldr	s12, [r6]
 8012b2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b36:	d1a1      	bne.n	8012a7c <ai_dict4_dot_array_f32+0x28>
 8012b38:	4449      	add	r1, r9
 8012b3a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8012b3e:	459c      	cmp	ip, r3
 8012b40:	d92d      	bls.n	8012b9e <ai_dict4_dot_array_f32+0x14a>
 8012b42:	f10c 0c07 	add.w	ip, ip, #7
 8012b46:	f103 0508 	add.w	r5, r3, #8
 8012b4a:	ebac 0c05 	sub.w	ip, ip, r5
 8012b4e:	f02c 0407 	bic.w	r4, ip, #7
 8012b52:	f103 0810 	add.w	r8, r3, #16
 8012b56:	44a0      	add	r8, r4
 8012b58:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8012b5c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012b60:	ed15 6a01 	vldr	s12, [r5, #-4]
 8012b64:	ed55 6a02 	vldr	s13, [r5, #-8]
 8012b68:	f004 060f 	and.w	r6, r4, #15
 8012b6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b70:	0924      	lsrs	r4, r4, #4
 8012b72:	edd6 7a00 	vldr	s15, [r6]
 8012b76:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012b7a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012b7e:	ed94 6a00 	vldr	s12, [r4]
 8012b82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012b86:	3508      	adds	r5, #8
 8012b88:	45a8      	cmp	r8, r5
 8012b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b8e:	d1e5      	bne.n	8012b5c <ai_dict4_dot_array_f32+0x108>
 8012b90:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8012b94:	f10c 0c01 	add.w	ip, ip, #1
 8012b98:	4461      	add	r1, ip
 8012b9a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8012b9e:	07fc      	lsls	r4, r7, #31
 8012ba0:	d509      	bpl.n	8012bb6 <ai_dict4_dot_array_f32+0x162>
 8012ba2:	7809      	ldrb	r1, [r1, #0]
 8012ba4:	edd3 7a00 	vldr	s15, [r3]
 8012ba8:	090b      	lsrs	r3, r1, #4
 8012baa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012bae:	edd2 6a00 	vldr	s13, [r2]
 8012bb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012bb6:	edd0 7a00 	vldr	s15, [r0]
 8012bba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012bbe:	ed80 7a00 	vstr	s14, [r0]
 8012bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bc6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8012bcc <ai_dict4_dot_array_f32+0x178>
 8012bca:	e7b8      	b.n	8012b3e <ai_dict4_dot_array_f32+0xea>
 8012bcc:	00000000 	.word	0x00000000

08012bd0 <ai_dict_decompress_f32>:
 8012bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012bd4:	9f08      	ldr	r7, [sp, #32]
 8012bd6:	2b04      	cmp	r3, #4
 8012bd8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8012bdc:	d00e      	beq.n	8012bfc <ai_dict_decompress_f32+0x2c>
 8012bde:	2b08      	cmp	r3, #8
 8012be0:	d10a      	bne.n	8012bf8 <ai_dict_decompress_f32+0x28>
 8012be2:	42b8      	cmp	r0, r7
 8012be4:	d208      	bcs.n	8012bf8 <ai_dict_decompress_f32+0x28>
 8012be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f840 3b04 	str.w	r3, [r0], #4
 8012bf4:	4287      	cmp	r7, r0
 8012bf6:	d8f6      	bhi.n	8012be6 <ai_dict_decompress_f32+0x16>
 8012bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bfc:	9b07      	ldr	r3, [sp, #28]
 8012bfe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8012c02:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8012c06:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8012c0a:	f003 0e01 	and.w	lr, r3, #1
 8012c0e:	42b8      	cmp	r0, r7
 8012c10:	d2f2      	bcs.n	8012bf8 <ai_dict_decompress_f32+0x28>
 8012c12:	f1bc 0f00 	cmp.w	ip, #0
 8012c16:	d01a      	beq.n	8012c4e <ai_dict_decompress_f32+0x7e>
 8012c18:	f100 0508 	add.w	r5, r0, #8
 8012c1c:	1e4c      	subs	r4, r1, #1
 8012c1e:	eb01 0608 	add.w	r6, r1, r8
 8012c22:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012c26:	091b      	lsrs	r3, r3, #4
 8012c28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c2c:	42a6      	cmp	r6, r4
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f845 3c08 	str.w	r3, [r5, #-8]
 8012c34:	7823      	ldrb	r3, [r4, #0]
 8012c36:	f003 030f 	and.w	r3, r3, #15
 8012c3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c3e:	f105 0508 	add.w	r5, r5, #8
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f845 3c0c 	str.w	r3, [r5, #-12]
 8012c48:	d1eb      	bne.n	8012c22 <ai_dict_decompress_f32+0x52>
 8012c4a:	4461      	add	r1, ip
 8012c4c:	4448      	add	r0, r9
 8012c4e:	f1be 0f00 	cmp.w	lr, #0
 8012c52:	d103      	bne.n	8012c5c <ai_dict_decompress_f32+0x8c>
 8012c54:	4287      	cmp	r7, r0
 8012c56:	d8dc      	bhi.n	8012c12 <ai_dict_decompress_f32+0x42>
 8012c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c5c:	780b      	ldrb	r3, [r1, #0]
 8012c5e:	091b      	lsrs	r3, r3, #4
 8012c60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c64:	3101      	adds	r1, #1
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	6003      	str	r3, [r0, #0]
 8012c6a:	3004      	adds	r0, #4
 8012c6c:	e7cf      	b.n	8012c0e <ai_dict_decompress_f32+0x3e>
 8012c6e:	bf00      	nop

08012c70 <forward_conv2d_nl_pool>:
 8012c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c74:	ed2d 8b10 	vpush	{d8-d15}
 8012c78:	b0df      	sub	sp, #380	; 0x17c
 8012c7a:	6943      	ldr	r3, [r0, #20]
 8012c7c:	af0a      	add	r7, sp, #40	; 0x28
 8012c7e:	881a      	ldrh	r2, [r3, #0]
 8012c80:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012c84:	2a00      	cmp	r2, #0
 8012c86:	f000 879f 	beq.w	8013bc8 <forward_conv2d_nl_pool+0xf58>
 8012c8a:	685c      	ldr	r4, [r3, #4]
 8012c8c:	6862      	ldr	r2, [r4, #4]
 8012c8e:	2a00      	cmp	r2, #0
 8012c90:	f000 8797 	beq.w	8013bc2 <forward_conv2d_nl_pool+0xf52>
 8012c94:	f8d2 c000 	ldr.w	ip, [r2]
 8012c98:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012c9c:	2a01      	cmp	r2, #1
 8012c9e:	f240 878d 	bls.w	8013bbc <forward_conv2d_nl_pool+0xf4c>
 8012ca2:	6922      	ldr	r2, [r4, #16]
 8012ca4:	2a00      	cmp	r2, #0
 8012ca6:	f000 8784 	beq.w	8013bb2 <forward_conv2d_nl_pool+0xf42>
 8012caa:	f8d2 9000 	ldr.w	r9, [r2]
 8012cae:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012cb2:	2a02      	cmp	r2, #2
 8012cb4:	f000 8782 	beq.w	8013bbc <forward_conv2d_nl_pool+0xf4c>
 8012cb8:	69e6      	ldr	r6, [r4, #28]
 8012cba:	2e00      	cmp	r6, #0
 8012cbc:	f000 8772 	beq.w	8013ba4 <forward_conv2d_nl_pool+0xf34>
 8012cc0:	f114 0218 	adds.w	r2, r4, #24
 8012cc4:	6835      	ldr	r5, [r6, #0]
 8012cc6:	d004      	beq.n	8012cd2 <forward_conv2d_nl_pool+0x62>
 8012cc8:	8b22      	ldrh	r2, [r4, #24]
 8012cca:	2a01      	cmp	r2, #1
 8012ccc:	f240 877f 	bls.w	8013bce <forward_conv2d_nl_pool+0xf5e>
 8012cd0:	6872      	ldr	r2, [r6, #4]
 8012cd2:	68b4      	ldr	r4, [r6, #8]
 8012cd4:	f8dc b018 	ldr.w	fp, [ip, #24]
 8012cd8:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8012cdc:	f8db 1008 	ldr.w	r1, [fp, #8]
 8012ce0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8012ce4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012ce8:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8012cec:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8012cf0:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8012cf4:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8012cf8:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012cfc:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8012d00:	f8de 1004 	ldr.w	r1, [lr, #4]
 8012d04:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8012d06:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8012d0a:	f8de 100c 	ldr.w	r1, [lr, #12]
 8012d0e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8012d12:	f8de 1008 	ldr.w	r1, [lr, #8]
 8012d16:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012d1a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8012d1e:	6831      	ldr	r1, [r6, #0]
 8012d20:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8012d24:	6871      	ldr	r1, [r6, #4]
 8012d26:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8012d2a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012d2e:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8012d32:	f8da 1008 	ldr.w	r1, [sl, #8]
 8012d36:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8012d3a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012d3c:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8012d40:	6809      	ldr	r1, [r1, #0]
 8012d42:	68b6      	ldr	r6, [r6, #8]
 8012d44:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8012d48:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012d4a:	6849      	ldr	r1, [r1, #4]
 8012d4c:	64b9      	str	r1, [r7, #72]	; 0x48
 8012d4e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8012d52:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8012d56:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012d58:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8012d5c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012d5e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8012d62:	6981      	ldr	r1, [r0, #24]
 8012d64:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8012d68:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012d6a:	6539      	str	r1, [r7, #80]	; 0x50
 8012d6c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012d6e:	64f9      	str	r1, [r7, #76]	; 0x4c
 8012d70:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012d72:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8012d76:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 8012d7a:	2a00      	cmp	r2, #0
 8012d7c:	f000 8705 	beq.w	8013b8a <forward_conv2d_nl_pool+0xf1a>
 8012d80:	6992      	ldr	r2, [r2, #24]
 8012d82:	6892      	ldr	r2, [r2, #8]
 8012d84:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8012d88:	4680      	mov	r8, r0
 8012d8a:	69c2      	ldr	r2, [r0, #28]
 8012d8c:	2c00      	cmp	r4, #0
 8012d8e:	f000 86f1 	beq.w	8013b74 <forward_conv2d_nl_pool+0xf04>
 8012d92:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8012d96:	6892      	ldr	r2, [r2, #8]
 8012d98:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8012d9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012da6:	f001 fd83 	bl	80148b0 <ai_array_get_byte_size>
 8012daa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012dae:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8012db2:	881a      	ldrh	r2, [r3, #0]
 8012db4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8012db8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012dbc:	f8b7 0140 	ldrh.w	r0, [r7, #320]	; 0x140
 8012dc0:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 8012dc4:	6479      	str	r1, [r7, #68]	; 0x44
 8012dc6:	fa10 f586 	uxtah	r5, r0, r6
 8012dca:	f8dc 1000 	ldr.w	r1, [ip]
 8012dce:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8012dd2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8012dd6:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8012dda:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8012dde:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 8012de2:	1e44      	subs	r4, r0, #1
 8012de4:	f3c1 5041 	ubfx	r0, r1, #21, #2
 8012de8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012dec:	fa1f f28b 	uxth.w	r2, fp
 8012df0:	eb05 0e01 	add.w	lr, r5, r1
 8012df4:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8012df8:	f8dc 1000 	ldr.w	r1, [ip]
 8012dfc:	3a01      	subs	r2, #1
 8012dfe:	fb04 5402 	mla	r4, r4, r2, r5
 8012e02:	fa1f f28a 	uxth.w	r2, sl
 8012e06:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8012e0a:	1e54      	subs	r4, r2, #1
 8012e0c:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 8012e10:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012e14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e18:	f8d7 5148 	ldr.w	r5, [r7, #328]	; 0x148
 8012e1c:	fa46 f000 	asr.w	r0, r6, r0
 8012e20:	f3c1 4643 	ubfx	r6, r1, #17, #4
 8012e24:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8012e28:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8012e2c:	ebae 0202 	sub.w	r2, lr, r2
 8012e30:	fbb2 f2f1 	udiv	r2, r2, r1
 8012e34:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8012e38:	3d01      	subs	r5, #1
 8012e3a:	fb05 1104 	mla	r1, r5, r4, r1
 8012e3e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8012e42:	1c51      	adds	r1, r2, #1
 8012e44:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012e48:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8012e4c:	4977      	ldr	r1, [pc, #476]	; (801302c <forward_conv2d_nl_pool+0x3bc>)
 8012e4e:	4614      	mov	r4, r2
 8012e50:	2a00      	cmp	r2, #0
 8012e52:	bf08      	it	eq
 8012e54:	460c      	moveq	r4, r1
 8012e56:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8012e5a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8012e5e:	2e04      	cmp	r6, #4
 8012e60:	b280      	uxth	r0, r0
 8012e62:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8012e66:	f000 8373 	beq.w	8013550 <forward_conv2d_nl_pool+0x8e0>
 8012e6a:	2e08      	cmp	r6, #8
 8012e6c:	f000 8370 	beq.w	8013550 <forward_conv2d_nl_pool+0x8e0>
 8012e70:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8012e74:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8012e78:	f9b7 2138 	ldrsh.w	r2, [r7, #312]	; 0x138
 8012e7c:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8012e80:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012e84:	2a03      	cmp	r2, #3
 8012e86:	f240 8699 	bls.w	8013bbc <forward_conv2d_nl_pool+0xf4c>
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	f000 835c 	beq.w	801354c <forward_conv2d_nl_pool+0x8dc>
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8012e9a:	68da      	ldr	r2, [r3, #12]
 8012e9c:	699b      	ldr	r3, [r3, #24]
 8012e9e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8012ea2:	6899      	ldr	r1, [r3, #8]
 8012ea4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8012ea8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8012eac:	6896      	ldr	r6, [r2, #8]
 8012eae:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 8012eb2:	4249      	negs	r1, r1
 8012eb4:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	f000 82d2 	beq.w	8013462 <forward_conv2d_nl_pool+0x7f2>
 8012ebe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012ec2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012ec6:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8013030 <forward_conv2d_nl_pool+0x3c0>
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012ed0:	fb00 f203 	mul.w	r2, r0, r3
 8012ed4:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012ed8:	0083      	lsls	r3, r0, #2
 8012eda:	fa0f f08b 	sxth.w	r0, fp
 8012ede:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8012ee2:	f8b7 012c 	ldrh.w	r0, [r7, #300]	; 0x12c
 8012ee6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8012eea:	fa0f f58a 	sxth.w	r5, sl
 8012eee:	fb01 f002 	mul.w	r0, r1, r2
 8012ef2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012ef6:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 8012efa:	008d      	lsls	r5, r1, #2
 8012efc:	fb02 f303 	mul.w	r3, r2, r3
 8012f00:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
 8012f04:	4615      	mov	r5, r2
 8012f06:	0092      	lsls	r2, r2, #2
 8012f08:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8012f0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012f10:	67f8      	str	r0, [r7, #124]	; 0x7c
 8012f12:	4694      	mov	ip, r2
 8012f14:	fb0c f205 	mul.w	r2, ip, r5
 8012f18:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 8012f1a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8012f1e:	f04f 0c00 	mov.w	ip, #0
 8012f22:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 8012f26:	00ad      	lsls	r5, r5, #2
 8012f28:	fb06 fc03 	mul.w	ip, r6, r3
 8012f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f30:	f8c7 50a8 	str.w	r5, [r7, #168]	; 0xa8
 8012f34:	4240      	negs	r0, r0
 8012f36:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 8012f3a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8012f3e:	f8c7 c058 	str.w	ip, [r7, #88]	; 0x58
 8012f42:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8012f46:	469c      	mov	ip, r3
 8012f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f4c:	fb0c fc05 	mul.w	ip, ip, r5
 8012f50:	460c      	mov	r4, r1
 8012f52:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 8012f56:	fb00 fc03 	mul.w	ip, r0, r3
 8012f5a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8012f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012f62:	fb05 fc04 	mul.w	ip, r5, r4
 8012f66:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8012f6a:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
 8012f6e:	fb03 f404 	mul.w	r4, r3, r4
 8012f72:	46ae      	mov	lr, r5
 8012f74:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8012f78:	61bc      	str	r4, [r7, #24]
 8012f7a:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 8012f7e:	46ac      	mov	ip, r5
 8012f80:	fb04 f403 	mul.w	r4, r4, r3
 8012f84:	fb0c fc03 	mul.w	ip, ip, r3
 8012f88:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 8012f8c:	617c      	str	r4, [r7, #20]
 8012f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f92:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8012f96:	fb00 f101 	mul.w	r1, r0, r1
 8012f9a:	fb03 f306 	mul.w	r3, r3, r6
 8012f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8012fa0:	008b      	lsls	r3, r1, #2
 8012fa2:	61fb      	str	r3, [r7, #28]
 8012fa4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8012fa8:	0093      	lsls	r3, r2, #2
 8012faa:	657b      	str	r3, [r7, #84]	; 0x54
 8012fac:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	0080      	lsls	r0, r0, #2
 8012fb4:	6438      	str	r0, [r7, #64]	; 0x40
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	fb03 f301 	mul.w	r3, r3, r1
 8012fbc:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8012fc0:	00d1      	lsls	r1, r2, #3
 8012fc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012fc6:	0113      	lsls	r3, r2, #4
 8012fc8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8012fcc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012fd0:	2500      	movs	r5, #0
 8012fd2:	fb00 f004 	mul.w	r0, r0, r4
 8012fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012fda:	f8c7 50cc 	str.w	r5, [r7, #204]	; 0xcc
 8012fde:	66b8      	str	r0, [r7, #104]	; 0x68
 8012fe0:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8012fe4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8012fe8:	469a      	mov	sl, r3
 8012fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	f340 81d1 	ble.w	8013396 <forward_conv2d_nl_pool+0x726>
 8012ff4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8012ff8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8012ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013000:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013004:	2a00      	cmp	r2, #0
 8013006:	440b      	add	r3, r1
 8013008:	bfb4      	ite	lt
 801300a:	2200      	movlt	r2, #0
 801300c:	2100      	movge	r1, #0
 801300e:	4283      	cmp	r3, r0
 8013010:	bf28      	it	cs
 8013012:	4603      	movcs	r3, r0
 8013014:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013018:	2801      	cmp	r0, #1
 801301a:	f000 8406 	beq.w	801382a <forward_conv2d_nl_pool+0xbba>
 801301e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013022:	4282      	cmp	r2, r0
 8013024:	f000 82c0 	beq.w	80135a8 <forward_conv2d_nl_pool+0x938>
 8013028:	e004      	b.n	8013034 <forward_conv2d_nl_pool+0x3c4>
 801302a:	bf00      	nop
 801302c:	080128b5 	.word	0x080128b5
 8013030:	00000000 	.word	0x00000000
 8013034:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013038:	2a00      	cmp	r2, #0
 801303a:	f000 819f 	beq.w	801337c <forward_conv2d_nl_pool+0x70c>
 801303e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8013042:	fb91 f2f0 	sdiv	r2, r1, r0
 8013046:	fb00 1212 	mls	r2, r0, r2, r1
 801304a:	1a82      	subs	r2, r0, r2
 801304c:	1a5b      	subs	r3, r3, r1
 801304e:	fb92 f5f0 	sdiv	r5, r2, r0
 8013052:	fb00 2515 	mls	r5, r0, r5, r2
 8013056:	1b5b      	subs	r3, r3, r5
 8013058:	4602      	mov	r2, r0
 801305a:	4403      	add	r3, r0
 801305c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013060:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 8013064:	f8c7 a010 	str.w	sl, [r7, #16]
 8013068:	4604      	mov	r4, r0
 801306a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801306e:	fbb4 f4f0 	udiv	r4, r4, r0
 8013072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013074:	f8c7 b020 	str.w	fp, [r7, #32]
 8013078:	3b01      	subs	r3, #1
 801307a:	fb93 f8f2 	sdiv	r8, r3, r2
 801307e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013082:	eba0 0c04 	sub.w	ip, r0, r4
 8013086:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 801308a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 801308e:	461c      	mov	r4, r3
 8013090:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013094:	fbb4 f3f3 	udiv	r3, r4, r3
 8013098:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 801309c:	667b      	str	r3, [r7, #100]	; 0x64
 801309e:	440d      	add	r5, r1
 80130a0:	fb0e f000 	mul.w	r0, lr, r0
 80130a4:	4411      	add	r1, r2
 80130a6:	eba6 0608 	sub.w	r6, r6, r8
 80130aa:	009a      	lsls	r2, r3, #2
 80130ac:	fb04 f505 	mul.w	r5, r4, r5
 80130b0:	3901      	subs	r1, #1
 80130b2:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80130b6:	fb91 f1f4 	sdiv	r1, r1, r4
 80130ba:	fb00 f406 	mul.w	r4, r0, r6
 80130be:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80130c2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80130c6:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 80130ca:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 80130ce:	fb00 f001 	mul.w	r0, r0, r1
 80130d2:	00db      	lsls	r3, r3, #3
 80130d4:	6638      	str	r0, [r7, #96]	; 0x60
 80130d6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80130da:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80130de:	637b      	str	r3, [r7, #52]	; 0x34
 80130e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80130e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80130e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80130ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80130f0:	1a41      	subs	r1, r0, r1
 80130f2:	0092      	lsls	r2, r2, #2
 80130f4:	2300      	movs	r3, #0
 80130f6:	673d      	str	r5, [r7, #112]	; 0x70
 80130f8:	ea4f 098c 	mov.w	r9, ip, lsl #2
 80130fc:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8013100:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8013104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013106:	677b      	str	r3, [r7, #116]	; 0x74
 8013108:	46c2      	mov	sl, r8
 801310a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801310e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013112:	eb03 0c02 	add.w	ip, r3, r2
 8013116:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801311a:	2b00      	cmp	r3, #0
 801311c:	f2c0 811a 	blt.w	8013354 <forward_conv2d_nl_pool+0x6e4>
 8013120:	2000      	movs	r0, #0
 8013122:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8013124:	f8d7 80f8 	ldr.w	r8, [r7, #248]	; 0xf8
 8013128:	4605      	mov	r5, r0
 801312a:	4606      	mov	r6, r0
 801312c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013134:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013138:	4413      	add	r3, r2
 801313a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801313e:	440a      	add	r2, r1
 8013140:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013144:	428b      	cmp	r3, r1
 8013146:	bf94      	ite	ls
 8013148:	ebc6 0303 	rsbls	r3, r6, r3
 801314c:	ebc6 0301 	rsbhi	r3, r6, r1
 8013150:	4415      	add	r5, r2
 8013152:	1a1b      	subs	r3, r3, r0
 8013154:	00a4      	lsls	r4, r4, #2
 8013156:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801315a:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 801315e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8013162:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8013164:	4602      	mov	r2, r0
 8013166:	2800      	cmp	r0, #0
 8013168:	bf08      	it	eq
 801316a:	4662      	moveq	r2, ip
 801316c:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8013170:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8013174:	fb91 f1f0 	sdiv	r1, r1, r0
 8013178:	4429      	add	r1, r5
 801317a:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 801317e:	fb0e 5501 	mla	r5, lr, r1, r5
 8013182:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8013186:	4403      	add	r3, r0
 8013188:	fb01 6104 	mla	r1, r1, r4, r6
 801318c:	3b01      	subs	r3, #1
 801318e:	fb93 f6f0 	sdiv	r6, r3, r0
 8013192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013194:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8013198:	fb06 3110 	mls	r1, r6, r0, r3
 801319c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80131a0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80131a4:	4562      	cmp	r2, ip
 80131a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80131aa:	bf08      	it	eq
 80131ac:	eeb0 6a48 	vmoveq.f32	s12, s16
 80131b0:	1b9b      	subs	r3, r3, r6
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d070      	beq.n	8013298 <forward_conv2d_nl_pool+0x628>
 80131b6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80131ba:	fb0e f803 	mul.w	r8, lr, r3
 80131be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80131c0:	fb00 fb01 	mul.w	fp, r0, r1
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d067      	beq.n	8013298 <forward_conv2d_nl_pool+0x628>
 80131c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80131cc:	18d3      	adds	r3, r2, r3
 80131ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80131d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80131d6:	1a9b      	subs	r3, r3, r2
 80131d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80131da:	2300      	movs	r3, #0
 80131dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80131de:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80131e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131e4:	4413      	add	r3, r2
 80131e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80131e8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80131ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ee:	4413      	add	r3, r2
 80131f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80131f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80131f8:	ecf3 7a01 	vldmia	r3!, {s15}
 80131fc:	f1ba 0f00 	cmp.w	sl, #0
 8013200:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013204:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013208:	f340 80a2 	ble.w	8013350 <forward_conv2d_nl_pool+0x6e0>
 801320c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8013210:	f04f 0c00 	mov.w	ip, #0
 8013214:	2e00      	cmp	r6, #0
 8013216:	dd19      	ble.n	801324c <forward_conv2d_nl_pool+0x5dc>
 8013218:	2100      	movs	r1, #0
 801321a:	eb00 040e 	add.w	r4, r0, lr
 801321e:	4284      	cmp	r4, r0
 8013220:	d910      	bls.n	8013244 <forward_conv2d_nl_pool+0x5d4>
 8013222:	4603      	mov	r3, r0
 8013224:	462a      	mov	r2, r5
 8013226:	ecb3 7a01 	vldmia	r3!, {s14}
 801322a:	ecf2 6a01 	vldmia	r2!, {s13}
 801322e:	429c      	cmp	r4, r3
 8013230:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013234:	d8f7      	bhi.n	8013226 <forward_conv2d_nl_pool+0x5b6>
 8013236:	43c3      	mvns	r3, r0
 8013238:	441c      	add	r4, r3
 801323a:	f024 0403 	bic.w	r4, r4, #3
 801323e:	3404      	adds	r4, #4
 8013240:	4425      	add	r5, r4
 8013242:	4420      	add	r0, r4
 8013244:	3101      	adds	r1, #1
 8013246:	428e      	cmp	r6, r1
 8013248:	4448      	add	r0, r9
 801324a:	d1e6      	bne.n	801321a <forward_conv2d_nl_pool+0x5aa>
 801324c:	f10c 0c01 	add.w	ip, ip, #1
 8013250:	45e2      	cmp	sl, ip
 8013252:	4458      	add	r0, fp
 8013254:	4445      	add	r5, r8
 8013256:	d1dd      	bne.n	8013214 <forward_conv2d_nl_pool+0x5a4>
 8013258:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801325c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013260:	441d      	add	r5, r3
 8013262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013266:	ece3 7a01 	vstmia	r3!, {s15}
 801326a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801326e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013272:	4293      	cmp	r3, r2
 8013274:	d1be      	bne.n	80131f4 <forward_conv2d_nl_pool+0x584>
 8013276:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801327a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801327e:	4472      	add	r2, lr
 8013280:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8013284:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013286:	1a52      	subs	r2, r2, r1
 8013288:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 801328c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8013290:	3301      	adds	r3, #1
 8013292:	429a      	cmp	r2, r3
 8013294:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013296:	d1a2      	bne.n	80131de <forward_conv2d_nl_pool+0x56e>
 8013298:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801329c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80132a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132a2:	4608      	mov	r0, r1
 80132a4:	4410      	add	r0, r2
 80132a6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80132aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80132ae:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80132b2:	4401      	add	r1, r0
 80132b4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80132b8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80132bc:	1a8a      	subs	r2, r1, r2
 80132be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80132c2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80132c6:	3301      	adds	r3, #1
 80132c8:	429a      	cmp	r2, r3
 80132ca:	677b      	str	r3, [r7, #116]	; 0x74
 80132cc:	f47f af1d 	bne.w	801310a <forward_conv2d_nl_pool+0x49a>
 80132d0:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80132d4:	f8d7 a010 	ldr.w	sl, [r7, #16]
 80132d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80132dc:	699b      	ldr	r3, [r3, #24]
 80132de:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 80132e2:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 80132e6:	f8d7 813c 	ldr.w	r8, [r7, #316]	; 0x13c
 80132ea:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 80132ee:	2400      	movs	r4, #0
 80132f0:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80132f4:	609e      	str	r6, [r3, #8]
 80132f6:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80132fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80132fe:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8013302:	462b      	mov	r3, r5
 8013304:	4608      	mov	r0, r1
 8013306:	47a0      	blx	r4
 8013308:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801330c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8013310:	6859      	ldr	r1, [r3, #4]
 8013312:	68da      	ldr	r2, [r3, #12]
 8013314:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8013318:	4405      	add	r5, r0
 801331a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801331e:	0089      	lsls	r1, r1, #2
 8013320:	4406      	add	r6, r0
 8013322:	eba5 0c09 	sub.w	ip, r5, r9
 8013326:	1850      	adds	r0, r2, r1
 8013328:	45a4      	cmp	ip, r4
 801332a:	bfa8      	it	ge
 801332c:	464d      	movge	r5, r9
 801332e:	4286      	cmp	r6, r0
 8013330:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013334:	bf28      	it	cs
 8013336:	1a76      	subcs	r6, r6, r1
 8013338:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801333c:	3001      	adds	r0, #1
 801333e:	4281      	cmp	r1, r0
 8013340:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8013344:	d1d6      	bne.n	80132f4 <forward_conv2d_nl_pool+0x684>
 8013346:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
 801334a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 801334e:	e019      	b.n	8013384 <forward_conv2d_nl_pool+0x714>
 8013350:	461a      	mov	r2, r3
 8013352:	e783      	b.n	801325c <forward_conv2d_nl_pool+0x5ec>
 8013354:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8013358:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801335c:	fb90 f3f2 	sdiv	r3, r0, r2
 8013360:	fb02 0313 	mls	r3, r2, r3, r0
 8013364:	1ad3      	subs	r3, r2, r3
 8013366:	4605      	mov	r5, r0
 8013368:	fb93 f0f2 	sdiv	r0, r3, r2
 801336c:	fb02 3010 	mls	r0, r2, r0, r3
 8013370:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013372:	462e      	mov	r6, r5
 8013374:	18c4      	adds	r4, r0, r3
 8013376:	eb02 0805 	add.w	r8, r2, r5
 801337a:	e6d7      	b.n	801312c <forward_conv2d_nl_pool+0x4bc>
 801337c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013380:	699b      	ldr	r3, [r3, #24]
 8013382:	68da      	ldr	r2, [r3, #12]
 8013384:	609a      	str	r2, [r3, #8]
 8013386:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801338a:	3301      	adds	r3, #1
 801338c:	b21b      	sxth	r3, r3
 801338e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8013392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013396:	3b01      	subs	r3, #1
 8013398:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801339c:	f100 8089 	bmi.w	80134b2 <forward_conv2d_nl_pool+0x842>
 80133a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80133a4:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80133a8:	42a3      	cmp	r3, r4
 80133aa:	d867      	bhi.n	801347c <forward_conv2d_nl_pool+0x80c>
 80133ac:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80133b0:	b29b      	uxth	r3, r3
 80133b2:	6990      	ldr	r0, [r2, #24]
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80133ba:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
 80133be:	f8b7 5090 	ldrh.w	r5, [r7, #144]	; 0x90
 80133c2:	1a9b      	subs	r3, r3, r2
 80133c4:	fa1f f188 	uxth.w	r1, r8
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80133ce:	9308      	str	r3, [sp, #32]
 80133d0:	9105      	str	r1, [sp, #20]
 80133d2:	2601      	movs	r6, #1
 80133d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80133d8:	9607      	str	r6, [sp, #28]
 80133da:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 80133de:	9506      	str	r5, [sp, #24]
 80133e0:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 80133e4:	9304      	str	r3, [sp, #16]
 80133e6:	1a64      	subs	r4, r4, r1
 80133e8:	b2b1      	uxth	r1, r6
 80133ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80133ee:	9300      	str	r3, [sp, #0]
 80133f0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 80133f4:	b224      	sxth	r4, r4
 80133f6:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 80133fa:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 80133fe:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8013402:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8013404:	47a0      	blx	r4
 8013406:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801340a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 801340e:	688a      	ldr	r2, [r1, #8]
 8013410:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8013412:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8013416:	fa0f f388 	sxth.w	r3, r8
 801341a:	1af3      	subs	r3, r6, r3
 801341c:	4422      	add	r2, r4
 801341e:	462e      	mov	r6, r5
 8013420:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8013424:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8013428:	608a      	str	r2, [r1, #8]
 801342a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801342e:	4426      	add	r6, r4
 8013430:	b21b      	sxth	r3, r3
 8013432:	1b2c      	subs	r4, r5, r4
 8013434:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8013438:	6ebd      	ldr	r5, [r7, #104]	; 0x68
 801343a:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 801343e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013442:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013446:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
 801344a:	3001      	adds	r0, #1
 801344c:	442c      	add	r4, r5
 801344e:	4283      	cmp	r3, r0
 8013450:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8013454:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8013458:	f63f adc7 	bhi.w	8012fea <forward_conv2d_nl_pool+0x37a>
 801345c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013460:	699b      	ldr	r3, [r3, #24]
 8013462:	68da      	ldr	r2, [r3, #12]
 8013464:	609a      	str	r2, [r3, #8]
 8013466:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801346a:	68d3      	ldr	r3, [r2, #12]
 801346c:	6093      	str	r3, [r2, #8]
 801346e:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8013472:	46bd      	mov	sp, r7
 8013474:	ecbd 8b10 	vpop	{d8-d15}
 8013478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8013480:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013484:	4611      	mov	r1, r2
 8013486:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801348a:	4419      	add	r1, r3
 801348c:	1ad3      	subs	r3, r2, r3
 801348e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8013492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013494:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013498:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 801349c:	4413      	add	r3, r2
 801349e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80134a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80134a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80134aa:	4293      	cmp	r3, r2
 80134ac:	f63f ad9d 	bhi.w	8012fea <forward_conv2d_nl_pool+0x37a>
 80134b0:	e7d4      	b.n	801345c <forward_conv2d_nl_pool+0x7ec>
 80134b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80134b6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80134ba:	699a      	ldr	r2, [r3, #24]
 80134bc:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 80134c0:	68d1      	ldr	r1, [r2, #12]
 80134c2:	6853      	ldr	r3, [r2, #4]
 80134c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134c6:	fb00 4012 	mls	r0, r0, r2, r4
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4281      	cmp	r1, r0
 80134ce:	bf88      	it	hi
 80134d0:	18c0      	addhi	r0, r0, r3
 80134d2:	4281      	cmp	r1, r0
 80134d4:	eb01 0203 	add.w	r2, r1, r3
 80134d8:	d216      	bcs.n	8013508 <forward_conv2d_nl_pool+0x898>
 80134da:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80134de:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80134e2:	42a1      	cmp	r1, r4
 80134e4:	d010      	beq.n	8013508 <forward_conv2d_nl_pool+0x898>
 80134e6:	4290      	cmp	r0, r2
 80134e8:	d20e      	bcs.n	8013508 <forward_conv2d_nl_pool+0x898>
 80134ea:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80134ee:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 80134f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80134f6:	f841 3b04 	str.w	r3, [r1], #4
 80134fa:	69a2      	ldr	r2, [r4, #24]
 80134fc:	6853      	ldr	r3, [r2, #4]
 80134fe:	68d2      	ldr	r2, [r2, #12]
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	441a      	add	r2, r3
 8013504:	4282      	cmp	r2, r0
 8013506:	d8f4      	bhi.n	80134f2 <forward_conv2d_nl_pool+0x882>
 8013508:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801350c:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8013510:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8013514:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8013516:	4420      	add	r0, r4
 8013518:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 801351c:	1a40      	subs	r0, r0, r1
 801351e:	4421      	add	r1, r4
 8013520:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 8013524:	442c      	add	r4, r5
 8013526:	b209      	sxth	r1, r1
 8013528:	b200      	sxth	r0, r0
 801352a:	4294      	cmp	r4, r2
 801352c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8013530:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8013534:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8013538:	4621      	mov	r1, r4
 801353a:	f4ff af31 	bcc.w	80133a0 <forward_conv2d_nl_pool+0x730>
 801353e:	425b      	negs	r3, r3
 8013540:	4419      	add	r1, r3
 8013542:	4291      	cmp	r1, r2
 8013544:	d2fc      	bcs.n	8013540 <forward_conv2d_nl_pool+0x8d0>
 8013546:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 801354a:	e729      	b.n	80133a0 <forward_conv2d_nl_pool+0x730>
 801354c:	68db      	ldr	r3, [r3, #12]
 801354e:	deff      	udf	#255	; 0xff
 8013550:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013554:	2a00      	cmp	r2, #0
 8013556:	f43f ac8b 	beq.w	8012e70 <forward_conv2d_nl_pool+0x200>
 801355a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 801355e:	2903      	cmp	r1, #3
 8013560:	f240 832c 	bls.w	8013bbc <forward_conv2d_nl_pool+0xf4c>
 8013564:	685b      	ldr	r3, [r3, #4]
 8013566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013568:	b1db      	cbz	r3, 80135a2 <forward_conv2d_nl_pool+0x932>
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	b1cb      	cbz	r3, 80135a2 <forward_conv2d_nl_pool+0x932>
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8013574:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	4603      	mov	r3, r0
 801357c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013580:	9000      	str	r0, [sp, #0]
 8013582:	4620      	mov	r0, r4
 8013584:	f7ff fb24 	bl	8012bd0 <ai_dict_decompress_f32>
 8013588:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801358c:	b12c      	cbz	r4, 801359a <forward_conv2d_nl_pool+0x92a>
 801358e:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 8013592:	881a      	ldrh	r2, [r3, #0]
 8013594:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8013598:	e46a      	b.n	8012e70 <forward_conv2d_nl_pool+0x200>
 801359a:	881a      	ldrh	r2, [r3, #0]
 801359c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80135a0:	e466      	b.n	8012e70 <forward_conv2d_nl_pool+0x200>
 80135a2:	2300      	movs	r3, #0
 80135a4:	699b      	ldr	r3, [r3, #24]
 80135a6:	deff      	udf	#255	; 0xff
 80135a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80135aa:	2a01      	cmp	r2, #1
 80135ac:	f47f ad42 	bne.w	8013034 <forward_conv2d_nl_pool+0x3c4>
 80135b0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80135b4:	2a00      	cmp	r2, #0
 80135b6:	f43f aee1 	beq.w	801337c <forward_conv2d_nl_pool+0x70c>
 80135ba:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80135be:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 80135c2:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80135c6:	1a5b      	subs	r3, r3, r1
 80135c8:	1ad4      	subs	r4, r2, r3
 80135ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80135ce:	00b3      	lsls	r3, r6, #2
 80135d0:	fb03 f304 	mul.w	r3, r3, r4
 80135d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80135d8:	fbb2 f2f0 	udiv	r2, r2, r0
 80135dc:	ebc2 7082 	rsb	r0, r2, r2, lsl #30
 80135e0:	4615      	mov	r5, r2
 80135e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80135e4:	637b      	str	r3, [r7, #52]	; 0x34
 80135e6:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 80135ea:	0083      	lsls	r3, r0, #2
 80135ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80135ee:	00d3      	lsls	r3, r2, #3
 80135f0:	607b      	str	r3, [r7, #4]
 80135f2:	00ab      	lsls	r3, r5, #2
 80135f4:	60bb      	str	r3, [r7, #8]
 80135f6:	fb01 f306 	mul.w	r3, r1, r6
 80135fa:	677b      	str	r3, [r7, #116]	; 0x74
 80135fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135fe:	fb01 f303 	mul.w	r3, r1, r3
 8013602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013608:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801360c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013610:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013614:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013618:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801361c:	2300      	movs	r3, #0
 801361e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013626:	2b00      	cmp	r3, #0
 8013628:	f2c0 828e 	blt.w	8013b48 <forward_conv2d_nl_pool+0xed8>
 801362c:	2100      	movs	r1, #0
 801362e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013630:	460a      	mov	r2, r1
 8013632:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8013636:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 801363a:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 801363e:	4420      	add	r0, r4
 8013640:	4408      	add	r0, r1
 8013642:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8013646:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801364a:	190c      	adds	r4, r1, r4
 801364c:	42ac      	cmp	r4, r5
 801364e:	bf28      	it	cs
 8013650:	462c      	movcs	r4, r5
 8013652:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8013656:	0080      	lsls	r0, r0, #2
 8013658:	1aa4      	subs	r4, r4, r2
 801365a:	2d00      	cmp	r5, #0
 801365c:	f000 8265 	beq.w	8013b2a <forward_conv2d_nl_pool+0xeba>
 8013660:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8013664:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8013668:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 801366c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013670:	42b5      	cmp	r5, r6
 8013672:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8013676:	eba3 0204 	sub.w	r2, r3, r4
 801367a:	eba1 0104 	sub.w	r1, r1, r4
 801367e:	bf08      	it	eq
 8013680:	eef0 3a48 	vmoveq.f32	s7, s16
 8013684:	462b      	mov	r3, r5
 8013686:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8013688:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 801368c:	4428      	add	r0, r5
 801368e:	f8d7 5134 	ldr.w	r5, [r7, #308]	; 0x134
 8013692:	fb05 6e00 	mla	lr, r5, r0, r6
 8013696:	eb0e 000b 	add.w	r0, lr, fp
 801369a:	4586      	cmp	lr, r0
 801369c:	6238      	str	r0, [r7, #32]
 801369e:	f080 80a5 	bcs.w	80137ec <forward_conv2d_nl_pool+0xb7c>
 80136a2:	0092      	lsls	r2, r2, #2
 80136a4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80136a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136aa:	fb01 f10b 	mul.w	r1, r1, fp
 80136ae:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80136b2:	f024 0803 	bic.w	r8, r4, #3
 80136b6:	2a00      	cmp	r2, #0
 80136b8:	f000 8098 	beq.w	80137ec <forward_conv2d_nl_pool+0xb7c>
 80136bc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80136c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80136c2:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80136c6:	0892      	lsrs	r2, r2, #2
 80136c8:	3201      	adds	r2, #1
 80136ca:	4401      	add	r1, r0
 80136cc:	fb02 f00a 	mul.w	r0, r2, sl
 80136d0:	6678      	str	r0, [r7, #100]	; 0x64
 80136d2:	0110      	lsls	r0, r2, #4
 80136d4:	0092      	lsls	r2, r2, #2
 80136d6:	663a      	str	r2, [r7, #96]	; 0x60
 80136d8:	1aca      	subs	r2, r1, r3
 80136da:	613a      	str	r2, [r7, #16]
 80136dc:	68ba      	ldr	r2, [r7, #8]
 80136de:	66f8      	str	r0, [r7, #108]	; 0x6c
 80136e0:	4413      	add	r3, r2
 80136e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80136e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80136ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80136ec:	4413      	add	r3, r2
 80136ee:	60fb      	str	r3, [r7, #12]
 80136f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80136f4:	693b      	ldr	r3, [r7, #16]
 80136f6:	4413      	add	r3, r2
 80136f8:	673b      	str	r3, [r7, #112]	; 0x70
 80136fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80136fe:	ecf3 6a01 	vldmia	r3!, {s13}
 8013702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013706:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801370a:	2b00      	cmp	r3, #0
 801370c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8013710:	dd57      	ble.n	80137c2 <forward_conv2d_nl_pool+0xb52>
 8013712:	4676      	mov	r6, lr
 8013714:	f04f 0c00 	mov.w	ip, #0
 8013718:	f1b8 0f00 	cmp.w	r8, #0
 801371c:	f340 8203 	ble.w	8013b26 <forward_conv2d_nl_pool+0xeb6>
 8013720:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013724:	f109 0310 	add.w	r3, r9, #16
 8013728:	18b1      	adds	r1, r6, r2
 801372a:	2000      	movs	r0, #0
 801372c:	4632      	mov	r2, r6
 801372e:	eb02 050b 	add.w	r5, r2, fp
 8013732:	ed95 7a00 	vldr	s14, [r5]
 8013736:	ed53 7a03 	vldr	s15, [r3, #-12]
 801373a:	ed13 4a04 	vldr	s8, [r3, #-16]
 801373e:	edd2 4a00 	vldr	s9, [r2]
 8013742:	ed13 5a02 	vldr	s10, [r3, #-8]
 8013746:	edd1 5a00 	vldr	s11, [r1]
 801374a:	ed13 6a01 	vldr	s12, [r3, #-4]
 801374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013752:	eb01 050b 	add.w	r5, r1, fp
 8013756:	eee4 7a24 	vfma.f32	s15, s8, s9
 801375a:	3004      	adds	r0, #4
 801375c:	4540      	cmp	r0, r8
 801375e:	ed95 7a00 	vldr	s14, [r5]
 8013762:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013766:	4452      	add	r2, sl
 8013768:	4451      	add	r1, sl
 801376a:	f103 0310 	add.w	r3, r3, #16
 801376e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013772:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013776:	dbda      	blt.n	801372e <forward_conv2d_nl_pool+0xabe>
 8013778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801377a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801377c:	441e      	add	r6, r3
 801377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013780:	4499      	add	r9, r3
 8013782:	42a0      	cmp	r0, r4
 8013784:	da11      	bge.n	80137aa <forward_conv2d_nl_pool+0xb3a>
 8013786:	4602      	mov	r2, r0
 8013788:	4633      	mov	r3, r6
 801378a:	4649      	mov	r1, r9
 801378c:	edd3 7a00 	vldr	s15, [r3]
 8013790:	ecb1 7a01 	vldmia	r1!, {s14}
 8013794:	3201      	adds	r2, #1
 8013796:	42a2      	cmp	r2, r4
 8013798:	eee7 6a27 	vfma.f32	s13, s14, s15
 801379c:	445b      	add	r3, fp
 801379e:	d1f5      	bne.n	801378c <forward_conv2d_nl_pool+0xb1c>
 80137a0:	1a20      	subs	r0, r4, r0
 80137a2:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80137a6:	fb00 660b 	mla	r6, r0, fp, r6
 80137aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80137ae:	441e      	add	r6, r3
 80137b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137b4:	4499      	add	r9, r3
 80137b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80137ba:	f10c 0c01 	add.w	ip, ip, #1
 80137be:	4563      	cmp	r3, ip
 80137c0:	d1aa      	bne.n	8013718 <forward_conv2d_nl_pool+0xaa8>
 80137c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137c4:	4499      	add	r9, r3
 80137c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80137c8:	ece3 6a01 	vstmia	r3!, {s13}
 80137cc:	673b      	str	r3, [r7, #112]	; 0x70
 80137ce:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80137d2:	4293      	cmp	r3, r2
 80137d4:	d191      	bne.n	80136fa <forward_conv2d_nl_pool+0xa8a>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	1a9b      	subs	r3, r3, r2
 80137dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80137e0:	6a3b      	ldr	r3, [r7, #32]
 80137e2:	f10e 0e04 	add.w	lr, lr, #4
 80137e6:	459e      	cmp	lr, r3
 80137e8:	f4ff af7d 	bcc.w	80136e6 <forward_conv2d_nl_pool+0xa76>
 80137ec:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80137f0:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80137f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80137f8:	440a      	add	r2, r1
 80137fa:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80137fe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8013802:	4608      	mov	r0, r1
 8013804:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013808:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801380c:	4410      	add	r0, r2
 801380e:	1a8a      	subs	r2, r1, r2
 8013810:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8013814:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013818:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 801381c:	3301      	adds	r3, #1
 801381e:	429a      	cmp	r2, r3
 8013820:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013824:	f47f aefd 	bne.w	8013622 <forward_conv2d_nl_pool+0x9b2>
 8013828:	e556      	b.n	80132d8 <forward_conv2d_nl_pool+0x668>
 801382a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801382c:	2801      	cmp	r0, #1
 801382e:	f47f ac01 	bne.w	8013034 <forward_conv2d_nl_pool+0x3c4>
 8013832:	1a5b      	subs	r3, r3, r1
 8013834:	69f8      	ldr	r0, [r7, #28]
 8013836:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801383a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801383e:	fb00 f202 	mul.w	r2, r0, r2
 8013842:	677a      	str	r2, [r7, #116]	; 0x74
 8013844:	2b00      	cmp	r3, #0
 8013846:	f000 8164 	beq.w	8013b12 <forward_conv2d_nl_pool+0xea2>
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	6978      	ldr	r0, [r7, #20]
 801384e:	f8c7 b020 	str.w	fp, [r7, #32]
 8013852:	fb03 f101 	mul.w	r1, r3, r1
 8013856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801385a:	6679      	str	r1, [r7, #100]	; 0x64
 801385c:	330a      	adds	r3, #10
 801385e:	f023 0307 	bic.w	r3, r3, #7
 8013862:	637b      	str	r3, [r7, #52]	; 0x34
 8013864:	1813      	adds	r3, r2, r0
 8013866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013868:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801386c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013870:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8013874:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801387c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013880:	1a09      	subs	r1, r1, r0
 8013882:	2300      	movs	r3, #0
 8013884:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801388a:	f8c7 a010 	str.w	sl, [r7, #16]
 801388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013890:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8013894:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013896:	ebad 0d03 	sub.w	sp, sp, r3
 801389a:	ab0a      	add	r3, sp, #40	; 0x28
 801389c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801389e:	b132      	cbz	r2, 80138ae <forward_conv2d_nl_pool+0xc3e>
 80138a0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80138a4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80138a8:	4618      	mov	r0, r3
 80138aa:	f001 f85d 	bl	8014968 <memcpy>
 80138ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	f000 815b 	beq.w	8013b6e <forward_conv2d_nl_pool+0xefe>
 80138b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80138bc:	edd3 fa00 	vldr	s31, [r3]
 80138c0:	3304      	adds	r3, #4
 80138c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80138c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f000 8105 	beq.w	8013ada <forward_conv2d_nl_pool+0xe6a>
 80138d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80138d4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80138d8:	eb03 0802 	add.w	r8, r3, r2
 80138dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80138e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80138e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80138e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80138f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80138f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80138f8:	f04f 0b00 	mov.w	fp, #0
 80138fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013900:	2b00      	cmp	r3, #0
 8013902:	f2c0 812c 	blt.w	8013b5e <forward_conv2d_nl_pool+0xeee>
 8013906:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801390a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801390c:	2300      	movs	r3, #0
 801390e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8013912:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013916:	4422      	add	r2, r4
 8013918:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801391a:	4421      	add	r1, r4
 801391c:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 8013920:	4540      	cmp	r0, r8
 8013922:	bf94      	ite	ls
 8013924:	ebc3 0300 	rsbls	r3, r3, r0
 8013928:	ebc3 0308 	rsbhi	r3, r3, r8
 801392c:	eba4 0903 	sub.w	r9, r4, r3
 8013930:	1ac4      	subs	r4, r0, r3
 8013932:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013936:	fb03 f300 	mul.w	r3, r3, r0
 801393a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801393e:	2800      	cmp	r0, #0
 8013940:	f340 810a 	ble.w	8013b58 <forward_conv2d_nl_pool+0xee8>
 8013944:	f023 0c0f 	bic.w	ip, r3, #15
 8013948:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 801394c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8013950:	0900      	lsrs	r0, r0, #4
 8013952:	3001      	adds	r0, #1
 8013954:	fb05 f404 	mul.w	r4, r5, r4
 8013958:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801395c:	0100      	lsls	r0, r0, #4
 801395e:	fb05 f909 	mul.w	r9, r5, r9
 8013962:	663c      	str	r4, [r7, #96]	; 0x60
 8013964:	63b8      	str	r0, [r7, #56]	; 0x38
 8013966:	eef0 6a6f 	vmov.f32	s13, s31
 801396a:	f04f 0e00 	mov.w	lr, #0
 801396e:	f1bc 0f00 	cmp.w	ip, #0
 8013972:	f340 80ef 	ble.w	8013b54 <forward_conv2d_nl_pool+0xee4>
 8013976:	f102 0440 	add.w	r4, r2, #64	; 0x40
 801397a:	f101 0040 	add.w	r0, r1, #64	; 0x40
 801397e:	2500      	movs	r5, #0
 8013980:	ed14 fa0f 	vldr	s30, [r4, #-60]	; 0xffffffc4
 8013984:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8013988:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 801398c:	ed10 ea10 	vldr	s28, [r0, #-64]	; 0xffffffc0
 8013990:	ed50 da0e 	vldr	s27, [r0, #-56]	; 0xffffffc8
 8013994:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8013998:	ed54 ca0d 	vldr	s25, [r4, #-52]	; 0xffffffcc
 801399c:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 80139a0:	ed54 ba0c 	vldr	s23, [r4, #-48]	; 0xffffffd0
 80139a4:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 80139a8:	ed54 aa0b 	vldr	s21, [r4, #-44]	; 0xffffffd4
 80139ac:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80139b0:	ed54 9a0a 	vldr	s19, [r4, #-40]	; 0xffffffd8
 80139b4:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80139b8:	ed54 8a09 	vldr	s17, [r4, #-36]	; 0xffffffdc
 80139bc:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80139c0:	ed50 0a08 	vldr	s1, [r0, #-32]	; 0xffffffe0
 80139c4:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 80139c8:	ed54 1a07 	vldr	s3, [r4, #-28]	; 0xffffffe4
 80139cc:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80139d0:	ed50 2a06 	vldr	s5, [r0, #-24]	; 0xffffffe8
 80139d4:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 80139d8:	ed54 3a05 	vldr	s7, [r4, #-20]	; 0xffffffec
 80139dc:	ed14 4a04 	vldr	s8, [r4, #-16]
 80139e0:	ed50 4a04 	vldr	s9, [r0, #-16]
 80139e4:	ed14 5a03 	vldr	s10, [r4, #-12]
 80139e8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80139ec:	ed10 6a02 	vldr	s12, [r0, #-8]
 80139f0:	ed14 7a02 	vldr	s14, [r4, #-8]
 80139f4:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80139f8:	ed14 fa0e 	vldr	s30, [r4, #-56]	; 0xffffffc8
 80139fc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013a00:	3510      	adds	r5, #16
 8013a02:	4565      	cmp	r5, ip
 8013a04:	ed50 ea01 	vldr	s29, [r0, #-4]
 8013a08:	ed14 ea01 	vldr	s28, [r4, #-4]
 8013a0c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8013a10:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8013a14:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8013a18:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8013a1c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8013a20:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8013a24:	eeea 7a29 	vfma.f32	s15, s20, s19
 8013a28:	eee9 7a28 	vfma.f32	s15, s18, s17
 8013a2c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8013a30:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013a34:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013a38:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013a3c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013a40:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013a44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013a48:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013a4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013a50:	db96      	blt.n	8013980 <forward_conv2d_nl_pool+0xd10>
 8013a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a54:	4452      	add	r2, sl
 8013a56:	4451      	add	r1, sl
 8013a58:	4283      	cmp	r3, r0
 8013a5a:	dd0f      	ble.n	8013a7c <forward_conv2d_nl_pool+0xe0c>
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	4616      	mov	r6, r2
 8013a60:	460d      	mov	r5, r1
 8013a62:	ecb5 7a01 	vldmia	r5!, {s14}
 8013a66:	ecf6 7a01 	vldmia	r6!, {s15}
 8013a6a:	3401      	adds	r4, #1
 8013a6c:	42a3      	cmp	r3, r4
 8013a6e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013a72:	d1f6      	bne.n	8013a62 <forward_conv2d_nl_pool+0xdf2>
 8013a74:	1a18      	subs	r0, r3, r0
 8013a76:	0080      	lsls	r0, r0, #2
 8013a78:	4401      	add	r1, r0
 8013a7a:	4402      	add	r2, r0
 8013a7c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8013a7e:	4401      	add	r1, r0
 8013a80:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8013a84:	f10e 0e01 	add.w	lr, lr, #1
 8013a88:	4570      	cmp	r0, lr
 8013a8a:	444a      	add	r2, r9
 8013a8c:	f47f af6f 	bne.w	801396e <forward_conv2d_nl_pool+0xcfe>
 8013a90:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8013a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013a98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013a9c:	edc3 6a00 	vstr	s13, [r3]
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8013aa6:	440b      	add	r3, r1
 8013aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013aac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab2:	1ac9      	subs	r1, r1, r3
 8013ab4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8013ab8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8013abc:	4419      	add	r1, r3
 8013abe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013ac2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8013ac6:	f10b 0b01 	add.w	fp, fp, #1
 8013aca:	4410      	add	r0, r2
 8013acc:	455b      	cmp	r3, fp
 8013ace:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8013ad2:	eba8 0802 	sub.w	r8, r8, r2
 8013ad6:	f47f af11 	bne.w	80138fc <forward_conv2d_nl_pool+0xc8c>
 8013ada:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013ade:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013ae6:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8013aea:	440a      	add	r2, r1
 8013aec:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8013af0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013af4:	3204      	adds	r2, #4
 8013af6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8013afa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013afe:	3301      	adds	r3, #1
 8013b00:	429a      	cmp	r2, r3
 8013b02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013b06:	f47f aec2 	bne.w	801388e <forward_conv2d_nl_pool+0xc1e>
 8013b0a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013b0e:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8013b12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013b16:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013b1a:	699b      	ldr	r3, [r3, #24]
 8013b1c:	2a00      	cmp	r2, #0
 8013b1e:	f47f abde 	bne.w	80132de <forward_conv2d_nl_pool+0x66e>
 8013b22:	68da      	ldr	r2, [r3, #12]
 8013b24:	e42e      	b.n	8013384 <forward_conv2d_nl_pool+0x714>
 8013b26:	2000      	movs	r0, #0
 8013b28:	e62b      	b.n	8013782 <forward_conv2d_nl_pool+0xb12>
 8013b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8013b2e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8013b32:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013b36:	1b19      	subs	r1, r3, r4
 8013b38:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b3c:	eef0 3a48 	vmov.f32	s7, s16
 8013b40:	1b1a      	subs	r2, r3, r4
 8013b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b46:	e59e      	b.n	8013686 <forward_conv2d_nl_pool+0xa16>
 8013b48:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8013b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b4e:	460a      	mov	r2, r1
 8013b50:	440b      	add	r3, r1
 8013b52:	e56e      	b.n	8013632 <forward_conv2d_nl_pool+0x9c2>
 8013b54:	2000      	movs	r0, #0
 8013b56:	e77f      	b.n	8013a58 <forward_conv2d_nl_pool+0xde8>
 8013b58:	eef0 6a6f 	vmov.f32	s13, s31
 8013b5c:	e798      	b.n	8013a90 <forward_conv2d_nl_pool+0xe20>
 8013b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013b62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013b64:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013b68:	eba8 0303 	sub.w	r3, r8, r3
 8013b6c:	e6cf      	b.n	801390e <forward_conv2d_nl_pool+0xc9e>
 8013b6e:	eef0 fa48 	vmov.f32	s31, s16
 8013b72:	e6a8      	b.n	80138c6 <forward_conv2d_nl_pool+0xc56>
 8013b74:	b16a      	cbz	r2, 8013b92 <forward_conv2d_nl_pool+0xf22>
 8013b76:	6892      	ldr	r2, [r2, #8]
 8013b78:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8013b82:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8013b86:	f7ff b919 	b.w	8012dbc <forward_conv2d_nl_pool+0x14c>
 8013b8a:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8013b8e:	f7ff b8fb 	b.w	8012d88 <forward_conv2d_nl_pool+0x118>
 8013b92:	2201      	movs	r2, #1
 8013b94:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8013b98:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8013b9c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8013ba0:	f7ff b90c 	b.w	8012dbc <forward_conv2d_nl_pool+0x14c>
 8013ba4:	3418      	adds	r4, #24
 8013ba6:	d007      	beq.n	8013bb8 <forward_conv2d_nl_pool+0xf48>
 8013ba8:	4632      	mov	r2, r6
 8013baa:	4635      	mov	r5, r6
 8013bac:	4634      	mov	r4, r6
 8013bae:	f7ff b891 	b.w	8012cd4 <forward_conv2d_nl_pool+0x64>
 8013bb2:	4691      	mov	r9, r2
 8013bb4:	f7ff b87b 	b.w	8012cae <forward_conv2d_nl_pool+0x3e>
 8013bb8:	68e3      	ldr	r3, [r4, #12]
 8013bba:	deff      	udf	#255	; 0xff
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	deff      	udf	#255	; 0xff
 8013bc2:	4694      	mov	ip, r2
 8013bc4:	f7ff b868 	b.w	8012c98 <forward_conv2d_nl_pool+0x28>
 8013bc8:	4613      	mov	r3, r2
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	deff      	udf	#255	; 0xff
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f7ff b87f 	b.w	8012cd2 <forward_conv2d_nl_pool+0x62>

08013bd4 <forward_dense>:
 8013bd4:	6942      	ldr	r2, [r0, #20]
 8013bd6:	8813      	ldrh	r3, [r2, #0]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f000 81ca 	beq.w	8013f72 <forward_dense+0x39e>
 8013bde:	6852      	ldr	r2, [r2, #4]
 8013be0:	6850      	ldr	r0, [r2, #4]
 8013be2:	b100      	cbz	r0, 8013be6 <forward_dense+0x12>
 8013be4:	6800      	ldr	r0, [r0, #0]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	f240 81c0 	bls.w	8013f6c <forward_dense+0x398>
 8013bec:	6911      	ldr	r1, [r2, #16]
 8013bee:	b101      	cbz	r1, 8013bf2 <forward_dense+0x1e>
 8013bf0:	6809      	ldr	r1, [r1, #0]
 8013bf2:	2b02      	cmp	r3, #2
 8013bf4:	f000 81bf 	beq.w	8013f76 <forward_dense+0x3a2>
 8013bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bfc:	ed2d 8b10 	vpush	{d8-d15}
 8013c00:	69d3      	ldr	r3, [r2, #28]
 8013c02:	b091      	sub	sp, #68	; 0x44
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	f000 820b 	beq.w	8014020 <forward_dense+0x44c>
 8013c0a:	681c      	ldr	r4, [r3, #0]
 8013c0c:	9408      	str	r4, [sp, #32]
 8013c0e:	f112 0418 	adds.w	r4, r2, #24
 8013c12:	f000 81df 	beq.w	8013fd4 <forward_dense+0x400>
 8013c16:	8b12      	ldrh	r2, [r2, #24]
 8013c18:	2a01      	cmp	r2, #1
 8013c1a:	f240 81fe 	bls.w	801401a <forward_dense+0x446>
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	f000 81da 	beq.w	8013fd8 <forward_dense+0x404>
 8013c24:	685b      	ldr	r3, [r3, #4]
 8013c26:	9306      	str	r3, [sp, #24]
 8013c28:	9b08      	ldr	r3, [sp, #32]
 8013c2a:	68cc      	ldr	r4, [r1, #12]
 8013c2c:	699b      	ldr	r3, [r3, #24]
 8013c2e:	68c5      	ldr	r5, [r0, #12]
 8013c30:	681a      	ldr	r2, [r3, #0]
 8013c32:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8013c36:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013c3a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8013c3e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8013c42:	fa4c f505 	asr.w	r5, ip, r5
 8013c46:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8013c4a:	950b      	str	r5, [sp, #44]	; 0x2c
 8013c4c:	2a04      	cmp	r2, #4
 8013c4e:	fb07 f506 	mul.w	r5, r7, r6
 8013c52:	6864      	ldr	r4, [r4, #4]
 8013c54:	9507      	str	r5, [sp, #28]
 8013c56:	f000 81dd 	beq.w	8014014 <forward_dense+0x440>
 8013c5a:	2a08      	cmp	r2, #8
 8013c5c:	f000 81da 	beq.w	8014014 <forward_dense+0x440>
 8013c60:	f04f 0a00 	mov.w	sl, #0
 8013c64:	698a      	ldr	r2, [r1, #24]
 8013c66:	6981      	ldr	r1, [r0, #24]
 8013c68:	6890      	ldr	r0, [r2, #8]
 8013c6a:	9a08      	ldr	r2, [sp, #32]
 8013c6c:	9004      	str	r0, [sp, #16]
 8013c6e:	6952      	ldr	r2, [r2, #20]
 8013c70:	688f      	ldr	r7, [r1, #8]
 8013c72:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8013c76:	00a2      	lsls	r2, r4, #2
 8013c78:	9209      	str	r2, [sp, #36]	; 0x24
 8013c7a:	1886      	adds	r6, r0, r2
 8013c7c:	9a07      	ldr	r2, [sp, #28]
 8013c7e:	2a00      	cmp	r2, #0
 8013c80:	f000 81c3 	beq.w	801400a <forward_dense+0x436>
 8013c84:	f1a8 0210 	sub.w	r2, r8, #16
 8013c88:	0912      	lsrs	r2, r2, #4
 8013c8a:	3201      	adds	r2, #1
 8013c8c:	0192      	lsls	r2, r2, #6
 8013c8e:	920c      	str	r2, [sp, #48]	; 0x30
 8013c90:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013c94:	920a      	str	r2, [sp, #40]	; 0x28
 8013c96:	689d      	ldr	r5, [r3, #8]
 8013c98:	9b06      	ldr	r3, [sp, #24]
 8013c9a:	eddf aad0 	vldr	s21, [pc, #832]	; 8013fdc <forward_dense+0x408>
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	9205      	str	r2, [sp, #20]
 8013ca2:	f008 020f 	and.w	r2, r8, #15
 8013ca6:	920d      	str	r2, [sp, #52]	; 0x34
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d043      	beq.n	8013d34 <forward_dense+0x160>
 8013cac:	699b      	ldr	r3, [r3, #24]
 8013cae:	689c      	ldr	r4, [r3, #8]
 8013cb0:	9b04      	ldr	r3, [sp, #16]
 8013cb2:	f1ba 0f00 	cmp.w	sl, #0
 8013cb6:	d042      	beq.n	8013d3e <forward_dense+0x16a>
 8013cb8:	42b3      	cmp	r3, r6
 8013cba:	d22a      	bcs.n	8013d12 <forward_dense+0x13e>
 8013cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013cbe:	469b      	mov	fp, r3
 8013cc0:	ab0f      	add	r3, sp, #60	; 0x3c
 8013cc2:	9303      	str	r3, [sp, #12]
 8013cc4:	2a04      	cmp	r2, #4
 8013cc6:	4633      	mov	r3, r6
 8013cc8:	4646      	mov	r6, r8
 8013cca:	4698      	mov	r8, r3
 8013ccc:	f000 8156 	beq.w	8013f7c <forward_dense+0x3a8>
 8013cd0:	2c00      	cmp	r4, #0
 8013cd2:	f000 8185 	beq.w	8013fe0 <forward_dense+0x40c>
 8013cd6:	f8d4 c000 	ldr.w	ip, [r4]
 8013cda:	9803      	ldr	r0, [sp, #12]
 8013cdc:	9600      	str	r6, [sp, #0]
 8013cde:	463b      	mov	r3, r7
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	4652      	mov	r2, sl
 8013ce4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8013ce8:	f7fe fde6 	bl	80128b8 <ai_dict8_dot_array_f32>
 8013cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013cee:	f84b 3b04 	str.w	r3, [fp], #4
 8013cf2:	45c3      	cmp	fp, r8
 8013cf4:	f104 0404 	add.w	r4, r4, #4
 8013cf8:	444d      	add	r5, r9
 8013cfa:	d3e9      	bcc.n	8013cd0 <forward_dense+0xfc>
 8013cfc:	4643      	mov	r3, r8
 8013cfe:	46b0      	mov	r8, r6
 8013d00:	461e      	mov	r6, r3
 8013d02:	9a04      	ldr	r2, [sp, #16]
 8013d04:	43d3      	mvns	r3, r2
 8013d06:	4433      	add	r3, r6
 8013d08:	f023 0303 	bic.w	r3, r3, #3
 8013d0c:	3304      	adds	r3, #4
 8013d0e:	18d3      	adds	r3, r2, r3
 8013d10:	9304      	str	r3, [sp, #16]
 8013d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d14:	9b05      	ldr	r3, [sp, #20]
 8013d16:	4417      	add	r7, r2
 8013d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d1a:	4416      	add	r6, r2
 8013d1c:	9a07      	ldr	r2, [sp, #28]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	4293      	cmp	r3, r2
 8013d22:	9305      	str	r3, [sp, #20]
 8013d24:	f000 8171 	beq.w	801400a <forward_dense+0x436>
 8013d28:	9b08      	ldr	r3, [sp, #32]
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	689d      	ldr	r5, [r3, #8]
 8013d2e:	9b06      	ldr	r3, [sp, #24]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1bb      	bne.n	8013cac <forward_dense+0xd8>
 8013d34:	461c      	mov	r4, r3
 8013d36:	9b04      	ldr	r3, [sp, #16]
 8013d38:	f1ba 0f00 	cmp.w	sl, #0
 8013d3c:	d1bc      	bne.n	8013cb8 <forward_dense+0xe4>
 8013d3e:	42b3      	cmp	r3, r6
 8013d40:	d2e7      	bcs.n	8013d12 <forward_dense+0x13e>
 8013d42:	4618      	mov	r0, r3
 8013d44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d46:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013d4a:	eb07 0c03 	add.w	ip, r7, r3
 8013d4e:	469e      	mov	lr, r3
 8013d50:	2c00      	cmp	r4, #0
 8013d52:	f000 80ff 	beq.w	8013f54 <forward_dense+0x380>
 8013d56:	f1b8 0f0f 	cmp.w	r8, #15
 8013d5a:	edd4 fa00 	vldr	s31, [r4]
 8013d5e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013fdc <forward_dense+0x408>
 8013d62:	f104 0404 	add.w	r4, r4, #4
 8013d66:	f240 80fd 	bls.w	8013f64 <forward_dense+0x390>
 8013d6a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013d6e:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8013d72:	4641      	mov	r1, r8
 8013d74:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8013d78:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8013d7c:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8013d80:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8013d84:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8013d88:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8013d8c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8013d90:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8013d94:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8013d98:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8013d9c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8013da0:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8013da4:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8013da8:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8013dac:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8013db0:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8013db4:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8013db8:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8013dbc:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8013dc0:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8013dc4:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8013dc8:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8013dcc:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8013dd0:	ed13 4a04 	vldr	s8, [r3, #-16]
 8013dd4:	ed52 4a04 	vldr	s9, [r2, #-16]
 8013dd8:	ed12 5a03 	vldr	s10, [r2, #-12]
 8013ddc:	ed53 5a03 	vldr	s11, [r3, #-12]
 8013de0:	ed12 6a02 	vldr	s12, [r2, #-8]
 8013de4:	ed13 7a02 	vldr	s14, [r3, #-8]
 8013de8:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8013dec:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8013df0:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013df4:	3910      	subs	r1, #16
 8013df6:	290f      	cmp	r1, #15
 8013df8:	ed53 ea01 	vldr	s29, [r3, #-4]
 8013dfc:	ed12 ea01 	vldr	s28, [r2, #-4]
 8013e00:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8013e04:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8013e08:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8013e0c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8013e10:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8013e14:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8013e18:	eee9 7a89 	vfma.f32	s15, s19, s18
 8013e1c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8013e20:	eee0 7a20 	vfma.f32	s15, s0, s1
 8013e24:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013e28:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013e2c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013e30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013e34:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013e38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013e3c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013e40:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013e44:	d896      	bhi.n	8013d74 <forward_dense+0x1a0>
 8013e46:	eb05 010e 	add.w	r1, r5, lr
 8013e4a:	465b      	mov	r3, fp
 8013e4c:	4662      	mov	r2, ip
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d075      	beq.n	8013f3e <forward_dense+0x36a>
 8013e52:	ed91 7a00 	vldr	s14, [r1]
 8013e56:	edd2 7a00 	vldr	s15, [r2]
 8013e5a:	2b01      	cmp	r3, #1
 8013e5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013e60:	d06d      	beq.n	8013f3e <forward_dense+0x36a>
 8013e62:	ed91 7a01 	vldr	s14, [r1, #4]
 8013e66:	edd2 7a01 	vldr	s15, [r2, #4]
 8013e6a:	2b02      	cmp	r3, #2
 8013e6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013e70:	d065      	beq.n	8013f3e <forward_dense+0x36a>
 8013e72:	ed91 7a02 	vldr	s14, [r1, #8]
 8013e76:	edd2 7a02 	vldr	s15, [r2, #8]
 8013e7a:	2b03      	cmp	r3, #3
 8013e7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013e80:	d05d      	beq.n	8013f3e <forward_dense+0x36a>
 8013e82:	ed91 7a03 	vldr	s14, [r1, #12]
 8013e86:	edd2 7a03 	vldr	s15, [r2, #12]
 8013e8a:	2b04      	cmp	r3, #4
 8013e8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013e90:	d055      	beq.n	8013f3e <forward_dense+0x36a>
 8013e92:	ed91 7a04 	vldr	s14, [r1, #16]
 8013e96:	edd2 7a04 	vldr	s15, [r2, #16]
 8013e9a:	2b05      	cmp	r3, #5
 8013e9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ea0:	d04d      	beq.n	8013f3e <forward_dense+0x36a>
 8013ea2:	ed91 7a05 	vldr	s14, [r1, #20]
 8013ea6:	edd2 7a05 	vldr	s15, [r2, #20]
 8013eaa:	2b06      	cmp	r3, #6
 8013eac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013eb0:	d045      	beq.n	8013f3e <forward_dense+0x36a>
 8013eb2:	ed91 7a06 	vldr	s14, [r1, #24]
 8013eb6:	edd2 7a06 	vldr	s15, [r2, #24]
 8013eba:	2b07      	cmp	r3, #7
 8013ebc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ec0:	d03d      	beq.n	8013f3e <forward_dense+0x36a>
 8013ec2:	ed91 7a07 	vldr	s14, [r1, #28]
 8013ec6:	edd2 7a07 	vldr	s15, [r2, #28]
 8013eca:	2b08      	cmp	r3, #8
 8013ecc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ed0:	d035      	beq.n	8013f3e <forward_dense+0x36a>
 8013ed2:	ed91 7a08 	vldr	s14, [r1, #32]
 8013ed6:	edd2 7a08 	vldr	s15, [r2, #32]
 8013eda:	2b09      	cmp	r3, #9
 8013edc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ee0:	d02d      	beq.n	8013f3e <forward_dense+0x36a>
 8013ee2:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8013ee6:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8013eea:	2b0a      	cmp	r3, #10
 8013eec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ef0:	d025      	beq.n	8013f3e <forward_dense+0x36a>
 8013ef2:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8013ef6:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8013efa:	2b0b      	cmp	r3, #11
 8013efc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f00:	d01d      	beq.n	8013f3e <forward_dense+0x36a>
 8013f02:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8013f06:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8013f0a:	2b0c      	cmp	r3, #12
 8013f0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f10:	d015      	beq.n	8013f3e <forward_dense+0x36a>
 8013f12:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8013f16:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8013f1a:	2b0d      	cmp	r3, #13
 8013f1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f20:	d00d      	beq.n	8013f3e <forward_dense+0x36a>
 8013f22:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013f26:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013f2a:	2b0e      	cmp	r3, #14
 8013f2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f30:	d005      	beq.n	8013f3e <forward_dense+0x36a>
 8013f32:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8013f36:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8013f3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f3e:	444d      	add	r5, r9
 8013f40:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8013f44:	ece0 6a01 	vstmia	r0!, {s13}
 8013f48:	42b0      	cmp	r0, r6
 8013f4a:	f4bf aeda 	bcs.w	8013d02 <forward_dense+0x12e>
 8013f4e:	2c00      	cmp	r4, #0
 8013f50:	f47f af01 	bne.w	8013d56 <forward_dense+0x182>
 8013f54:	f1b8 0f0f 	cmp.w	r8, #15
 8013f58:	eef0 fa6a 	vmov.f32	s31, s21
 8013f5c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013fdc <forward_dense+0x408>
 8013f60:	f63f af03 	bhi.w	8013d6a <forward_dense+0x196>
 8013f64:	4643      	mov	r3, r8
 8013f66:	4629      	mov	r1, r5
 8013f68:	463a      	mov	r2, r7
 8013f6a:	e770      	b.n	8013e4e <forward_dense+0x27a>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	685b      	ldr	r3, [r3, #4]
 8013f70:	deff      	udf	#255	; 0xff
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	deff      	udf	#255	; 0xff
 8013f76:	2300      	movs	r3, #0
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	deff      	udf	#255	; 0xff
 8013f7c:	b1ac      	cbz	r4, 8013faa <forward_dense+0x3d6>
 8013f7e:	f8d4 c000 	ldr.w	ip, [r4]
 8013f82:	9803      	ldr	r0, [sp, #12]
 8013f84:	9600      	str	r6, [sp, #0]
 8013f86:	463b      	mov	r3, r7
 8013f88:	4629      	mov	r1, r5
 8013f8a:	4652      	mov	r2, sl
 8013f8c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8013f90:	f7fe fd60 	bl	8012a54 <ai_dict4_dot_array_f32>
 8013f94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f96:	f84b 3b04 	str.w	r3, [fp], #4
 8013f9a:	45c3      	cmp	fp, r8
 8013f9c:	f104 0404 	add.w	r4, r4, #4
 8013fa0:	444d      	add	r5, r9
 8013fa2:	f4bf aeab 	bcs.w	8013cfc <forward_dense+0x128>
 8013fa6:	2c00      	cmp	r4, #0
 8013fa8:	d1e9      	bne.n	8013f7e <forward_dense+0x3aa>
 8013faa:	4634      	mov	r4, r6
 8013fac:	4646      	mov	r6, r8
 8013fae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013fb2:	9400      	str	r4, [sp, #0]
 8013fb4:	463b      	mov	r3, r7
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	4652      	mov	r2, sl
 8013fba:	4640      	mov	r0, r8
 8013fbc:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8013fc0:	f7fe fd48 	bl	8012a54 <ai_dict4_dot_array_f32>
 8013fc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fc6:	f84b 3b04 	str.w	r3, [fp], #4
 8013fca:	45b3      	cmp	fp, r6
 8013fcc:	444d      	add	r5, r9
 8013fce:	d3f0      	bcc.n	8013fb2 <forward_dense+0x3de>
 8013fd0:	46a0      	mov	r8, r4
 8013fd2:	e696      	b.n	8013d02 <forward_dense+0x12e>
 8013fd4:	9406      	str	r4, [sp, #24]
 8013fd6:	e627      	b.n	8013c28 <forward_dense+0x54>
 8013fd8:	9306      	str	r3, [sp, #24]
 8013fda:	e625      	b.n	8013c28 <forward_dense+0x54>
 8013fdc:	00000000 	.word	0x00000000
 8013fe0:	4634      	mov	r4, r6
 8013fe2:	4646      	mov	r6, r8
 8013fe4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013fe8:	9400      	str	r4, [sp, #0]
 8013fea:	463b      	mov	r3, r7
 8013fec:	4629      	mov	r1, r5
 8013fee:	4652      	mov	r2, sl
 8013ff0:	4640      	mov	r0, r8
 8013ff2:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8013ff6:	f7fe fc5f 	bl	80128b8 <ai_dict8_dot_array_f32>
 8013ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ffc:	f84b 3b04 	str.w	r3, [fp], #4
 8014000:	45b3      	cmp	fp, r6
 8014002:	444d      	add	r5, r9
 8014004:	d3f0      	bcc.n	8013fe8 <forward_dense+0x414>
 8014006:	46a0      	mov	r8, r4
 8014008:	e67b      	b.n	8013d02 <forward_dense+0x12e>
 801400a:	b011      	add	sp, #68	; 0x44
 801400c:	ecbd 8b10 	vpop	{d8-d15}
 8014010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014014:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8014018:	e624      	b.n	8013c64 <forward_dense+0x90>
 801401a:	2300      	movs	r3, #0
 801401c:	9306      	str	r3, [sp, #24]
 801401e:	e603      	b.n	8013c28 <forward_dense+0x54>
 8014020:	9308      	str	r3, [sp, #32]
 8014022:	e5f4      	b.n	8013c0e <forward_dense+0x3a>

08014024 <nl_func_relu_array_f32>:
 8014024:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8014028:	3a01      	subs	r2, #1
 801402a:	688b      	ldr	r3, [r1, #8]
 801402c:	6880      	ldr	r0, [r0, #8]
 801402e:	0092      	lsls	r2, r2, #2
 8014030:	189b      	adds	r3, r3, r2
 8014032:	d21a      	bcs.n	801406a <nl_func_relu_array_f32+0x46>
 8014034:	b410      	push	{r4}
 8014036:	3204      	adds	r2, #4
 8014038:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801406c <nl_func_relu_array_f32+0x48>
 801403c:	4410      	add	r0, r2
 801403e:	3304      	adds	r3, #4
 8014040:	ed53 7a01 	vldr	s15, [r3, #-4]
 8014044:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404c:	bfb8      	it	lt
 801404e:	eef0 7a47 	vmovlt.f32	s15, s14
 8014052:	ed60 7a01 	vstmdb	r0!, {s15}
 8014056:	688c      	ldr	r4, [r1, #8]
 8014058:	f1a3 0208 	sub.w	r2, r3, #8
 801405c:	4294      	cmp	r4, r2
 801405e:	f1a3 0304 	sub.w	r3, r3, #4
 8014062:	d9ed      	bls.n	8014040 <nl_func_relu_array_f32+0x1c>
 8014064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014068:	4770      	bx	lr
 801406a:	4770      	bx	lr
 801406c:	00000000 	.word	0x00000000

08014070 <forward_sm>:
 8014070:	6942      	ldr	r2, [r0, #20]
 8014072:	8813      	ldrh	r3, [r2, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	f000 808a 	beq.w	801418e <forward_sm+0x11e>
 801407a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801407e:	ed2d 8b04 	vpush	{d8-d9}
 8014082:	6852      	ldr	r2, [r2, #4]
 8014084:	6855      	ldr	r5, [r2, #4]
 8014086:	b085      	sub	sp, #20
 8014088:	b105      	cbz	r5, 801408c <forward_sm+0x1c>
 801408a:	682d      	ldr	r5, [r5, #0]
 801408c:	2b01      	cmp	r3, #1
 801408e:	d976      	bls.n	801417e <forward_sm+0x10e>
 8014090:	6913      	ldr	r3, [r2, #16]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d071      	beq.n	801417a <forward_sm+0x10a>
 8014096:	681f      	ldr	r7, [r3, #0]
 8014098:	68ec      	ldr	r4, [r5, #12]
 801409a:	68fa      	ldr	r2, [r7, #12]
 801409c:	68ab      	ldr	r3, [r5, #8]
 801409e:	6850      	ldr	r0, [r2, #4]
 80140a0:	6862      	ldr	r2, [r4, #4]
 80140a2:	9201      	str	r2, [sp, #4]
 80140a4:	0a1b      	lsrs	r3, r3, #8
 80140a6:	d074      	beq.n	8014192 <forward_sm+0x122>
 80140a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80140ac:	2201      	movs	r2, #1
 80140ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140b2:	429c      	cmp	r4, r3
 80140b4:	fb01 f202 	mul.w	r2, r1, r2
 80140b8:	d1f9      	bne.n	80140ae <forward_sm+0x3e>
 80140ba:	69ae      	ldr	r6, [r5, #24]
 80140bc:	f8d7 9018 	ldr.w	r9, [r7, #24]
 80140c0:	9f01      	ldr	r7, [sp, #4]
 80140c2:	68b5      	ldr	r5, [r6, #8]
 80140c4:	68f3      	ldr	r3, [r6, #12]
 80140c6:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80140ca:	1bd1      	subs	r1, r2, r7
 80140cc:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80140d0:	1a12      	subs	r2, r2, r0
 80140d2:	429d      	cmp	r5, r3
 80140d4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80140d8:	d345      	bcc.n	8014166 <forward_sm+0xf6>
 80140da:	00bb      	lsls	r3, r7, #2
 80140dc:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80140e0:	9300      	str	r3, [sp, #0]
 80140e2:	f1c8 0200 	rsb	r2, r8, #0
 80140e6:	425b      	negs	r3, r3
 80140e8:	9203      	str	r2, [sp, #12]
 80140ea:	9302      	str	r3, [sp, #8]
 80140ec:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80140f0:	60b5      	str	r5, [r6, #8]
 80140f2:	9b01      	ldr	r3, [sp, #4]
 80140f4:	f8c9 4008 	str.w	r4, [r9, #8]
 80140f8:	68b2      	ldr	r2, [r6, #8]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	ed92 8a00 	vldr	s16, [r2]
 8014100:	d940      	bls.n	8014184 <forward_sm+0x114>
 8014102:	9900      	ldr	r1, [sp, #0]
 8014104:	1d13      	adds	r3, r2, #4
 8014106:	1857      	adds	r7, r2, r1
 8014108:	ecf3 7a01 	vldmia	r3!, {s15}
 801410c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014114:	bfb8      	it	lt
 8014116:	eeb0 8a67 	vmovlt.f32	s16, s15
 801411a:	429f      	cmp	r7, r3
 801411c:	d1f4      	bne.n	8014108 <forward_sm+0x98>
 801411e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 8014198 <forward_sm+0x128>
 8014122:	4692      	mov	sl, r2
 8014124:	46a3      	mov	fp, r4
 8014126:	46a0      	mov	r8, r4
 8014128:	ecba 0a01 	vldmia	sl!, {s0}
 801412c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8014130:	f005 f964 	bl	80193fc <expf>
 8014134:	4557      	cmp	r7, sl
 8014136:	eca8 0a01 	vstmia	r8!, {s0}
 801413a:	ee78 8a80 	vadd.f32	s17, s17, s0
 801413e:	d1f3      	bne.n	8014128 <forward_sm+0xb8>
 8014140:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8014144:	9b00      	ldr	r3, [sp, #0]
 8014146:	18e2      	adds	r2, r4, r3
 8014148:	eddb 7a00 	vldr	s15, [fp]
 801414c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014150:	eceb 7a01 	vstmia	fp!, {s15}
 8014154:	455a      	cmp	r2, fp
 8014156:	d1f7      	bne.n	8014148 <forward_sm+0xd8>
 8014158:	9a02      	ldr	r2, [sp, #8]
 801415a:	68f3      	ldr	r3, [r6, #12]
 801415c:	4415      	add	r5, r2
 801415e:	9a03      	ldr	r2, [sp, #12]
 8014160:	429d      	cmp	r5, r3
 8014162:	4414      	add	r4, r2
 8014164:	d2c4      	bcs.n	80140f0 <forward_sm+0x80>
 8014166:	60b3      	str	r3, [r6, #8]
 8014168:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801416c:	f8c9 3008 	str.w	r3, [r9, #8]
 8014170:	b005      	add	sp, #20
 8014172:	ecbd 8b04 	vpop	{d8-d9}
 8014176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	deff      	udf	#255	; 0xff
 801417e:	2300      	movs	r3, #0
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	deff      	udf	#255	; 0xff
 8014184:	2b00      	cmp	r3, #0
 8014186:	d0e7      	beq.n	8014158 <forward_sm+0xe8>
 8014188:	9b00      	ldr	r3, [sp, #0]
 801418a:	18d7      	adds	r7, r2, r3
 801418c:	e7c7      	b.n	801411e <forward_sm+0xae>
 801418e:	685b      	ldr	r3, [r3, #4]
 8014190:	deff      	udf	#255	; 0xff
 8014192:	2201      	movs	r2, #1
 8014194:	e791      	b.n	80140ba <forward_sm+0x4a>
 8014196:	bf00      	nop
 8014198:	00000000 	.word	0x00000000

0801419c <pool_func_mp_array_f32>:
 801419c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141a0:	b093      	sub	sp, #76	; 0x4c
 80141a2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80141a6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80141a8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 80141ac:	68a8      	ldr	r0, [r5, #8]
 80141ae:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 80141b2:	9508      	str	r5, [sp, #32]
 80141b4:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 80141b8:	9002      	str	r0, [sp, #8]
 80141ba:	950d      	str	r5, [sp, #52]	; 0x34
 80141bc:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 80141c0:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 80141c4:	9004      	str	r0, [sp, #16]
 80141c6:	9506      	str	r5, [sp, #24]
 80141c8:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 80141cc:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 80141d0:	9009      	str	r0, [sp, #36]	; 0x24
 80141d2:	950b      	str	r5, [sp, #44]	; 0x2c
 80141d4:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 80141d8:	9200      	str	r2, [sp, #0]
 80141da:	468a      	mov	sl, r1
 80141dc:	4699      	mov	r9, r3
 80141de:	b95c      	cbnz	r4, 80141f8 <pool_func_mp_array_f32+0x5c>
 80141e0:	b950      	cbnz	r0, 80141f8 <pool_func_mp_array_f32+0x5c>
 80141e2:	9b04      	ldr	r3, [sp, #16]
 80141e4:	1a5a      	subs	r2, r3, r1
 80141e6:	9b06      	ldr	r3, [sp, #24]
 80141e8:	9908      	ldr	r1, [sp, #32]
 80141ea:	3a01      	subs	r2, #1
 80141ec:	3b01      	subs	r3, #1
 80141ee:	fb13 2301 	smlabb	r3, r3, r1, r2
 80141f2:	041a      	lsls	r2, r3, #16
 80141f4:	f100 809b 	bmi.w	801432e <pool_func_mp_array_f32+0x192>
 80141f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f000 808b 	beq.w	8014316 <pool_func_mp_array_f32+0x17a>
 8014200:	9b06      	ldr	r3, [sp, #24]
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 8087 	beq.w	8014316 <pool_func_mp_array_f32+0x17a>
 8014208:	f1b9 0f00 	cmp.w	r9, #0
 801420c:	f000 8083 	beq.w	8014316 <pool_func_mp_array_f32+0x17a>
 8014210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014212:	1b1c      	subs	r4, r3, r4
 8014214:	9b04      	ldr	r3, [sp, #16]
 8014216:	1a1b      	subs	r3, r3, r0
 8014218:	b29b      	uxth	r3, r3
 801421a:	4240      	negs	r0, r0
 801421c:	2200      	movs	r2, #0
 801421e:	b2a1      	uxth	r1, r4
 8014220:	930f      	str	r3, [sp, #60]	; 0x3c
 8014222:	b283      	uxth	r3, r0
 8014224:	920e      	str	r2, [sp, #56]	; 0x38
 8014226:	910c      	str	r1, [sp, #48]	; 0x30
 8014228:	9310      	str	r3, [sp, #64]	; 0x40
 801422a:	9c06      	ldr	r4, [sp, #24]
 801422c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801422e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014230:	fb02 f204 	mul.w	r2, r2, r4
 8014234:	1acb      	subs	r3, r1, r3
 8014236:	920a      	str	r2, [sp, #40]	; 0x28
 8014238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801423a:	9205      	str	r2, [sp, #20]
 801423c:	2000      	movs	r0, #0
 801423e:	b21b      	sxth	r3, r3
 8014240:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014242:	9303      	str	r3, [sp, #12]
 8014244:	9007      	str	r0, [sp, #28]
 8014246:	4603      	mov	r3, r0
 8014248:	fa0f f881 	sxth.w	r8, r1
 801424c:	9204      	str	r2, [sp, #16]
 801424e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014250:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8014254:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8014258:	4413      	add	r3, r2
 801425a:	f04f 0e00 	mov.w	lr, #0
 801425e:	fb09 f303 	mul.w	r3, r9, r3
 8014262:	9301      	str	r3, [sp, #4]
 8014264:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8014268:	4675      	mov	r5, lr
 801426a:	9903      	ldr	r1, [sp, #12]
 801426c:	eddf 7a78 	vldr	s15, [pc, #480]	; 8014450 <pool_func_mp_array_f32+0x2b4>
 8014270:	4588      	cmp	r8, r1
 8014272:	dd24      	ble.n	80142be <pool_func_mp_array_f32+0x122>
 8014274:	4564      	cmp	r4, ip
 8014276:	dd1e      	ble.n	80142b6 <pool_func_mp_array_f32+0x11a>
 8014278:	2900      	cmp	r1, #0
 801427a:	fb0a f601 	mul.w	r6, sl, r1
 801427e:	db1a      	blt.n	80142b6 <pool_func_mp_array_f32+0x11a>
 8014280:	9b00      	ldr	r3, [sp, #0]
 8014282:	4299      	cmp	r1, r3
 8014284:	da17      	bge.n	80142b6 <pool_func_mp_array_f32+0x11a>
 8014286:	f1bc 0f00 	cmp.w	ip, #0
 801428a:	4663      	mov	r3, ip
 801428c:	db46      	blt.n	801431c <pool_func_mp_array_f32+0x180>
 801428e:	18f2      	adds	r2, r6, r3
 8014290:	fb09 5202 	mla	r2, r9, r2, r5
 8014294:	1c58      	adds	r0, r3, #1
 8014296:	459a      	cmp	sl, r3
 8014298:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801429c:	b203      	sxth	r3, r0
 801429e:	dd08      	ble.n	80142b2 <pool_func_mp_array_f32+0x116>
 80142a0:	ed92 7a00 	vldr	s14, [r2]
 80142a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ac:	bfb8      	it	lt
 80142ae:	eef0 7a47 	vmovlt.f32	s15, s14
 80142b2:	429c      	cmp	r4, r3
 80142b4:	dceb      	bgt.n	801428e <pool_func_mp_array_f32+0xf2>
 80142b6:	3101      	adds	r1, #1
 80142b8:	b209      	sxth	r1, r1
 80142ba:	4588      	cmp	r8, r1
 80142bc:	dcda      	bgt.n	8014274 <pool_func_mp_array_f32+0xd8>
 80142be:	9b01      	ldr	r3, [sp, #4]
 80142c0:	f10e 0e01 	add.w	lr, lr, #1
 80142c4:	441d      	add	r5, r3
 80142c6:	9b02      	ldr	r3, [sp, #8]
 80142c8:	fa0f fe8e 	sxth.w	lr, lr
 80142cc:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80142d0:	45ce      	cmp	lr, r9
 80142d2:	edc5 7a00 	vstr	s15, [r5]
 80142d6:	4675      	mov	r5, lr
 80142d8:	dbc7      	blt.n	801426a <pool_func_mp_array_f32+0xce>
 80142da:	9b07      	ldr	r3, [sp, #28]
 80142dc:	9808      	ldr	r0, [sp, #32]
 80142de:	3301      	adds	r3, #1
 80142e0:	b219      	sxth	r1, r3
 80142e2:	9b05      	ldr	r3, [sp, #20]
 80142e4:	9107      	str	r1, [sp, #28]
 80142e6:	461a      	mov	r2, r3
 80142e8:	4402      	add	r2, r0
 80142ea:	9b04      	ldr	r3, [sp, #16]
 80142ec:	b292      	uxth	r2, r2
 80142ee:	9205      	str	r2, [sp, #20]
 80142f0:	9a06      	ldr	r2, [sp, #24]
 80142f2:	4403      	add	r3, r0
 80142f4:	b29b      	uxth	r3, r3
 80142f6:	428a      	cmp	r2, r1
 80142f8:	9304      	str	r3, [sp, #16]
 80142fa:	460b      	mov	r3, r1
 80142fc:	dca7      	bgt.n	801424e <pool_func_mp_array_f32+0xb2>
 80142fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014300:	3301      	adds	r3, #1
 8014302:	b21a      	sxth	r2, r3
 8014304:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8014308:	440b      	add	r3, r1
 801430a:	b29b      	uxth	r3, r3
 801430c:	930c      	str	r3, [sp, #48]	; 0x30
 801430e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014310:	920e      	str	r2, [sp, #56]	; 0x38
 8014312:	4293      	cmp	r3, r2
 8014314:	dc89      	bgt.n	801422a <pool_func_mp_array_f32+0x8e>
 8014316:	b013      	add	sp, #76	; 0x4c
 8014318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	3301      	adds	r3, #1
 801431e:	b21b      	sxth	r3, r3
 8014320:	42bb      	cmp	r3, r7
 8014322:	dac6      	bge.n	80142b2 <pool_func_mp_array_f32+0x116>
 8014324:	3301      	adds	r3, #1
 8014326:	b21b      	sxth	r3, r3
 8014328:	42bb      	cmp	r3, r7
 801432a:	dbf7      	blt.n	801431c <pool_func_mp_array_f32+0x180>
 801432c:	e7c1      	b.n	80142b2 <pool_func_mp_array_f32+0x116>
 801432e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014330:	9a00      	ldr	r2, [sp, #0]
 8014332:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014334:	1a9a      	subs	r2, r3, r2
 8014336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014338:	3a01      	subs	r2, #1
 801433a:	3b01      	subs	r3, #1
 801433c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8014340:	041b      	lsls	r3, r3, #16
 8014342:	f57f af59 	bpl.w	80141f8 <pool_func_mp_array_f32+0x5c>
 8014346:	fb0a f309 	mul.w	r3, sl, r9
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8014350:	930e      	str	r3, [sp, #56]	; 0x38
 8014352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014354:	9001      	str	r0, [sp, #4]
 8014356:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 801435a:	9300      	str	r3, [sp, #0]
 801435c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014362:	429a      	cmp	r2, r3
 8014364:	ddd7      	ble.n	8014316 <pool_func_mp_array_f32+0x17a>
 8014366:	9a00      	ldr	r2, [sp, #0]
 8014368:	9906      	ldr	r1, [sp, #24]
 801436a:	fa0f f882 	sxth.w	r8, r2
 801436e:	2900      	cmp	r1, #0
 8014370:	d062      	beq.n	8014438 <pool_func_mp_array_f32+0x29c>
 8014372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014374:	fb01 f303 	mul.w	r3, r1, r3
 8014378:	1a12      	subs	r2, r2, r0
 801437a:	9305      	str	r3, [sp, #20]
 801437c:	b213      	sxth	r3, r2
 801437e:	9307      	str	r3, [sp, #28]
 8014380:	f1b9 0f00 	cmp.w	r9, #0
 8014384:	d058      	beq.n	8014438 <pool_func_mp_array_f32+0x29c>
 8014386:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014388:	fb02 f303 	mul.w	r3, r2, r3
 801438c:	2600      	movs	r6, #0
 801438e:	930c      	str	r3, [sp, #48]	; 0x30
 8014390:	9b04      	ldr	r3, [sp, #16]
 8014392:	9303      	str	r3, [sp, #12]
 8014394:	4637      	mov	r7, r6
 8014396:	46b2      	mov	sl, r6
 8014398:	9b05      	ldr	r3, [sp, #20]
 801439a:	9611      	str	r6, [sp, #68]	; 0x44
 801439c:	eb0a 0b03 	add.w	fp, sl, r3
 80143a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143a2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80143a6:	b235      	sxth	r5, r6
 80143a8:	18eb      	adds	r3, r5, r3
 80143aa:	f04f 0a00 	mov.w	sl, #0
 80143ae:	fb09 f303 	mul.w	r3, r9, r3
 80143b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80143b4:	930a      	str	r3, [sp, #40]	; 0x28
 80143b6:	fb09 fb0b 	mul.w	fp, r9, fp
 80143ba:	46d6      	mov	lr, sl
 80143bc:	9807      	ldr	r0, [sp, #28]
 80143be:	4580      	cmp	r8, r0
 80143c0:	dd43      	ble.n	801444a <pool_func_mp_array_f32+0x2ae>
 80143c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143c4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014450 <pool_func_mp_array_f32+0x2b4>
 80143c8:	eb0e 0403 	add.w	r4, lr, r3
 80143cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80143ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80143d2:	42a9      	cmp	r1, r5
 80143d4:	dd0f      	ble.n	80143f6 <pool_func_mp_array_f32+0x25a>
 80143d6:	4622      	mov	r2, r4
 80143d8:	462b      	mov	r3, r5
 80143da:	ed92 7a00 	vldr	s14, [r2]
 80143de:	3301      	adds	r3, #1
 80143e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80143e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e8:	b21b      	sxth	r3, r3
 80143ea:	bfb8      	it	lt
 80143ec:	eef0 7a47 	vmovlt.f32	s15, s14
 80143f0:	4299      	cmp	r1, r3
 80143f2:	4462      	add	r2, ip
 80143f4:	d1f1      	bne.n	80143da <pool_func_mp_array_f32+0x23e>
 80143f6:	3001      	adds	r0, #1
 80143f8:	b200      	sxth	r0, r0
 80143fa:	4580      	cmp	r8, r0
 80143fc:	4434      	add	r4, r6
 80143fe:	d1e8      	bne.n	80143d2 <pool_func_mp_array_f32+0x236>
 8014400:	f10a 0a01 	add.w	sl, sl, #1
 8014404:	9a02      	ldr	r2, [sp, #8]
 8014406:	eb0b 030e 	add.w	r3, fp, lr
 801440a:	fa0f fa8a 	sxth.w	sl, sl
 801440e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014412:	45ca      	cmp	sl, r9
 8014414:	edc3 7a00 	vstr	s15, [r3]
 8014418:	46d6      	mov	lr, sl
 801441a:	dbcf      	blt.n	80143bc <pool_func_mp_array_f32+0x220>
 801441c:	9b03      	ldr	r3, [sp, #12]
 801441e:	9a08      	ldr	r2, [sp, #32]
 8014420:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014422:	4413      	add	r3, r2
 8014424:	b29b      	uxth	r3, r3
 8014426:	3701      	adds	r7, #1
 8014428:	9303      	str	r3, [sp, #12]
 801442a:	9b06      	ldr	r3, [sp, #24]
 801442c:	b23f      	sxth	r7, r7
 801442e:	4416      	add	r6, r2
 8014430:	42bb      	cmp	r3, r7
 8014432:	b2b6      	uxth	r6, r6
 8014434:	46ba      	mov	sl, r7
 8014436:	dcaf      	bgt.n	8014398 <pool_func_mp_array_f32+0x1fc>
 8014438:	9b00      	ldr	r3, [sp, #0]
 801443a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801443c:	4413      	add	r3, r2
 801443e:	b29b      	uxth	r3, r3
 8014440:	9300      	str	r3, [sp, #0]
 8014442:	9b01      	ldr	r3, [sp, #4]
 8014444:	3301      	adds	r3, #1
 8014446:	9301      	str	r3, [sp, #4]
 8014448:	e788      	b.n	801435c <pool_func_mp_array_f32+0x1c0>
 801444a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8014450 <pool_func_mp_array_f32+0x2b4>
 801444e:	e7d7      	b.n	8014400 <pool_func_mp_array_f32+0x264>
 8014450:	cf000000 	.word	0xcf000000

08014454 <pool_func_ap_array_f32>:
 8014454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014458:	b095      	sub	sp, #84	; 0x54
 801445a:	f8d0 b008 	ldr.w	fp, [r0, #8]
 801445e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8014460:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8014464:	68a8      	ldr	r0, [r5, #8]
 8014466:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 801446a:	9509      	str	r5, [sp, #36]	; 0x24
 801446c:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8014470:	9003      	str	r0, [sp, #12]
 8014472:	950e      	str	r5, [sp, #56]	; 0x38
 8014474:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8014478:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801447c:	9004      	str	r0, [sp, #16]
 801447e:	9507      	str	r5, [sp, #28]
 8014480:	f8bd 007c 	ldrh.w	r0, [sp, #124]	; 0x7c
 8014484:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 8014488:	900a      	str	r0, [sp, #40]	; 0x28
 801448a:	950c      	str	r5, [sp, #48]	; 0x30
 801448c:	f8bd 0080 	ldrh.w	r0, [sp, #128]	; 0x80
 8014490:	9201      	str	r2, [sp, #4]
 8014492:	468a      	mov	sl, r1
 8014494:	4699      	mov	r9, r3
 8014496:	b95c      	cbnz	r4, 80144b0 <pool_func_ap_array_f32+0x5c>
 8014498:	b950      	cbnz	r0, 80144b0 <pool_func_ap_array_f32+0x5c>
 801449a:	9b04      	ldr	r3, [sp, #16]
 801449c:	1a5a      	subs	r2, r3, r1
 801449e:	9b07      	ldr	r3, [sp, #28]
 80144a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144a2:	3a01      	subs	r2, #1
 80144a4:	3b01      	subs	r3, #1
 80144a6:	fb13 2301 	smlabb	r3, r3, r1, r2
 80144aa:	041a      	lsls	r2, r3, #16
 80144ac:	f100 80a6 	bmi.w	80145fc <pool_func_ap_array_f32+0x1a8>
 80144b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 8093 	beq.w	80145de <pool_func_ap_array_f32+0x18a>
 80144b8:	9b07      	ldr	r3, [sp, #28]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f000 808f 	beq.w	80145de <pool_func_ap_array_f32+0x18a>
 80144c0:	f1b9 0f00 	cmp.w	r9, #0
 80144c4:	f000 808b 	beq.w	80145de <pool_func_ap_array_f32+0x18a>
 80144c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ca:	ed9f 6a9f 	vldr	s12, [pc, #636]	; 8014748 <pool_func_ap_array_f32+0x2f4>
 80144ce:	1b1c      	subs	r4, r3, r4
 80144d0:	9b04      	ldr	r3, [sp, #16]
 80144d2:	1a1b      	subs	r3, r3, r0
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	4240      	negs	r0, r0
 80144d8:	2200      	movs	r2, #0
 80144da:	b2a1      	uxth	r1, r4
 80144dc:	9310      	str	r3, [sp, #64]	; 0x40
 80144de:	b283      	uxth	r3, r0
 80144e0:	920f      	str	r2, [sp, #60]	; 0x3c
 80144e2:	910d      	str	r1, [sp, #52]	; 0x34
 80144e4:	9311      	str	r3, [sp, #68]	; 0x44
 80144e6:	9c07      	ldr	r4, [sp, #28]
 80144e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80144ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80144ec:	fb02 f204 	mul.w	r2, r2, r4
 80144f0:	1acb      	subs	r3, r1, r3
 80144f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80144f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80144f6:	9206      	str	r2, [sp, #24]
 80144f8:	2000      	movs	r0, #0
 80144fa:	b21b      	sxth	r3, r3
 80144fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80144fe:	9304      	str	r3, [sp, #16]
 8014500:	9008      	str	r0, [sp, #32]
 8014502:	4603      	mov	r3, r0
 8014504:	fa0f f881 	sxth.w	r8, r1
 8014508:	9205      	str	r2, [sp, #20]
 801450a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801450c:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 8014510:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 8014514:	4413      	add	r3, r2
 8014516:	f04f 0e00 	mov.w	lr, #0
 801451a:	fb09 f303 	mul.w	r3, r9, r3
 801451e:	9302      	str	r3, [sp, #8]
 8014520:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8014524:	4675      	mov	r5, lr
 8014526:	9904      	ldr	r1, [sp, #16]
 8014528:	4588      	cmp	r8, r1
 801452a:	dd64      	ble.n	80145f6 <pool_func_ap_array_f32+0x1a2>
 801452c:	2300      	movs	r3, #0
 801452e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801474c <pool_func_ap_array_f32+0x2f8>
 8014532:	9300      	str	r3, [sp, #0]
 8014534:	4564      	cmp	r4, ip
 8014536:	dd1c      	ble.n	8014572 <pool_func_ap_array_f32+0x11e>
 8014538:	2900      	cmp	r1, #0
 801453a:	fb0a f601 	mul.w	r6, sl, r1
 801453e:	db18      	blt.n	8014572 <pool_func_ap_array_f32+0x11e>
 8014540:	9b01      	ldr	r3, [sp, #4]
 8014542:	4299      	cmp	r1, r3
 8014544:	da15      	bge.n	8014572 <pool_func_ap_array_f32+0x11e>
 8014546:	f1bc 0f00 	cmp.w	ip, #0
 801454a:	4663      	mov	r3, ip
 801454c:	db4a      	blt.n	80145e4 <pool_func_ap_array_f32+0x190>
 801454e:	18f2      	adds	r2, r6, r3
 8014550:	1c58      	adds	r0, r3, #1
 8014552:	fb09 5202 	mla	r2, r9, r2, r5
 8014556:	459a      	cmp	sl, r3
 8014558:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 801455c:	b203      	sxth	r3, r0
 801455e:	dd06      	ble.n	801456e <pool_func_ap_array_f32+0x11a>
 8014560:	edd2 7a00 	vldr	s15, [r2]
 8014564:	9a00      	ldr	r2, [sp, #0]
 8014566:	ee37 7a27 	vadd.f32	s14, s14, s15
 801456a:	3201      	adds	r2, #1
 801456c:	9200      	str	r2, [sp, #0]
 801456e:	429c      	cmp	r4, r3
 8014570:	dced      	bgt.n	801454e <pool_func_ap_array_f32+0xfa>
 8014572:	3101      	adds	r1, #1
 8014574:	b209      	sxth	r1, r1
 8014576:	4588      	cmp	r8, r1
 8014578:	dcdc      	bgt.n	8014534 <pool_func_ap_array_f32+0xe0>
 801457a:	eddd 7a00 	vldr	s15, [sp]
 801457e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014582:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014586:	9b02      	ldr	r3, [sp, #8]
 8014588:	f10e 0e01 	add.w	lr, lr, #1
 801458c:	441d      	add	r5, r3
 801458e:	9b03      	ldr	r3, [sp, #12]
 8014590:	fa0f fe8e 	sxth.w	lr, lr
 8014594:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8014598:	45ce      	cmp	lr, r9
 801459a:	edc5 6a00 	vstr	s13, [r5]
 801459e:	4675      	mov	r5, lr
 80145a0:	dbc1      	blt.n	8014526 <pool_func_ap_array_f32+0xd2>
 80145a2:	9b08      	ldr	r3, [sp, #32]
 80145a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145a6:	3301      	adds	r3, #1
 80145a8:	b219      	sxth	r1, r3
 80145aa:	9b06      	ldr	r3, [sp, #24]
 80145ac:	9108      	str	r1, [sp, #32]
 80145ae:	461a      	mov	r2, r3
 80145b0:	4402      	add	r2, r0
 80145b2:	9b05      	ldr	r3, [sp, #20]
 80145b4:	b292      	uxth	r2, r2
 80145b6:	9206      	str	r2, [sp, #24]
 80145b8:	9a07      	ldr	r2, [sp, #28]
 80145ba:	4403      	add	r3, r0
 80145bc:	b29b      	uxth	r3, r3
 80145be:	428a      	cmp	r2, r1
 80145c0:	9305      	str	r3, [sp, #20]
 80145c2:	460b      	mov	r3, r1
 80145c4:	dca1      	bgt.n	801450a <pool_func_ap_array_f32+0xb6>
 80145c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145c8:	3301      	adds	r3, #1
 80145ca:	b21a      	sxth	r2, r3
 80145cc:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80145d0:	440b      	add	r3, r1
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	930d      	str	r3, [sp, #52]	; 0x34
 80145d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145d8:	920f      	str	r2, [sp, #60]	; 0x3c
 80145da:	4293      	cmp	r3, r2
 80145dc:	dc83      	bgt.n	80144e6 <pool_func_ap_array_f32+0x92>
 80145de:	b015      	add	sp, #84	; 0x54
 80145e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e4:	3301      	adds	r3, #1
 80145e6:	b21b      	sxth	r3, r3
 80145e8:	42bb      	cmp	r3, r7
 80145ea:	dac0      	bge.n	801456e <pool_func_ap_array_f32+0x11a>
 80145ec:	3301      	adds	r3, #1
 80145ee:	b21b      	sxth	r3, r3
 80145f0:	42bb      	cmp	r3, r7
 80145f2:	dbf7      	blt.n	80145e4 <pool_func_ap_array_f32+0x190>
 80145f4:	e7bb      	b.n	801456e <pool_func_ap_array_f32+0x11a>
 80145f6:	eef0 6a46 	vmov.f32	s13, s12
 80145fa:	e7c4      	b.n	8014586 <pool_func_ap_array_f32+0x132>
 80145fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145fe:	9a01      	ldr	r2, [sp, #4]
 8014600:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014602:	1a9a      	subs	r2, r3, r2
 8014604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014606:	3a01      	subs	r2, #1
 8014608:	3b01      	subs	r3, #1
 801460a:	fb13 2301 	smlabb	r3, r3, r1, r2
 801460e:	041b      	lsls	r3, r3, #16
 8014610:	f57f af4e 	bpl.w	80144b0 <pool_func_ap_array_f32+0x5c>
 8014614:	fb09 f30a 	mul.w	r3, r9, sl
 8014618:	009b      	lsls	r3, r3, #2
 801461a:	e9cd ba11 	strd	fp, sl, [sp, #68]	; 0x44
 801461e:	9310      	str	r3, [sp, #64]	; 0x40
 8014620:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8014748 <pool_func_ap_array_f32+0x2f4>
 8014624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014626:	9001      	str	r0, [sp, #4]
 8014628:	ea4f 0e89 	mov.w	lr, r9, lsl #2
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014634:	429a      	cmp	r2, r3
 8014636:	ddd2      	ble.n	80145de <pool_func_ap_array_f32+0x18a>
 8014638:	9a00      	ldr	r2, [sp, #0]
 801463a:	9907      	ldr	r1, [sp, #28]
 801463c:	fa0f fc82 	sxth.w	ip, r2
 8014640:	2900      	cmp	r1, #0
 8014642:	d074      	beq.n	801472e <pool_func_ap_array_f32+0x2da>
 8014644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014646:	fb01 f303 	mul.w	r3, r1, r3
 801464a:	1a12      	subs	r2, r2, r0
 801464c:	9306      	str	r3, [sp, #24]
 801464e:	b213      	sxth	r3, r2
 8014650:	930b      	str	r3, [sp, #44]	; 0x2c
 8014652:	f1b9 0f00 	cmp.w	r9, #0
 8014656:	d06a      	beq.n	801472e <pool_func_ap_array_f32+0x2da>
 8014658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801465a:	fb02 f303 	mul.w	r3, r2, r3
 801465e:	f04f 0b00 	mov.w	fp, #0
 8014662:	930f      	str	r3, [sp, #60]	; 0x3c
 8014664:	9b04      	ldr	r3, [sp, #16]
 8014666:	f8cd b014 	str.w	fp, [sp, #20]
 801466a:	46da      	mov	sl, fp
 801466c:	9302      	str	r3, [sp, #8]
 801466e:	9b06      	ldr	r3, [sp, #24]
 8014670:	9902      	ldr	r1, [sp, #8]
 8014672:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
 8014676:	eb0a 0203 	add.w	r2, sl, r3
 801467a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801467c:	fa0f f78b 	sxth.w	r7, fp
 8014680:	1e4e      	subs	r6, r1, #1
 8014682:	18fb      	adds	r3, r7, r3
 8014684:	eba6 060b 	sub.w	r6, r6, fp
 8014688:	f04f 0a00 	mov.w	sl, #0
 801468c:	fb09 f202 	mul.w	r2, r9, r2
 8014690:	fb09 f303 	mul.w	r3, r9, r3
 8014694:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8014698:	9208      	str	r2, [sp, #32]
 801469a:	930d      	str	r3, [sp, #52]	; 0x34
 801469c:	b2b6      	uxth	r6, r6
 801469e:	46d0      	mov	r8, sl
 80146a0:	b209      	sxth	r1, r1
 80146a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80146a4:	4584      	cmp	ip, r0
 80146a6:	dd4b      	ble.n	8014740 <pool_func_ap_array_f32+0x2ec>
 80146a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146aa:	eddf 7a28 	vldr	s15, [pc, #160]	; 801474c <pool_func_ap_array_f32+0x2f8>
 80146ae:	eb08 0503 	add.w	r5, r8, r3
 80146b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80146b4:	2400      	movs	r4, #0
 80146b6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80146ba:	42b9      	cmp	r1, r7
 80146bc:	dd0c      	ble.n	80146d8 <pool_func_ap_array_f32+0x284>
 80146be:	462a      	mov	r2, r5
 80146c0:	463b      	mov	r3, r7
 80146c2:	3301      	adds	r3, #1
 80146c4:	ed92 7a00 	vldr	s14, [r2]
 80146c8:	b21b      	sxth	r3, r3
 80146ca:	428b      	cmp	r3, r1
 80146cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146d0:	4472      	add	r2, lr
 80146d2:	d1f6      	bne.n	80146c2 <pool_func_ap_array_f32+0x26e>
 80146d4:	3401      	adds	r4, #1
 80146d6:	4434      	add	r4, r6
 80146d8:	3001      	adds	r0, #1
 80146da:	b200      	sxth	r0, r0
 80146dc:	4584      	cmp	ip, r0
 80146de:	445d      	add	r5, fp
 80146e0:	d1eb      	bne.n	80146ba <pool_func_ap_array_f32+0x266>
 80146e2:	ee07 4a10 	vmov	s14, r4
 80146e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80146ee:	9b08      	ldr	r3, [sp, #32]
 80146f0:	9a03      	ldr	r2, [sp, #12]
 80146f2:	f10a 0a01 	add.w	sl, sl, #1
 80146f6:	4443      	add	r3, r8
 80146f8:	fa0f fa8a 	sxth.w	sl, sl
 80146fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014700:	45ca      	cmp	sl, r9
 8014702:	46d0      	mov	r8, sl
 8014704:	edc3 6a00 	vstr	s13, [r3]
 8014708:	dbcb      	blt.n	80146a2 <pool_func_ap_array_f32+0x24e>
 801470a:	9b05      	ldr	r3, [sp, #20]
 801470c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801470e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8014712:	3301      	adds	r3, #1
 8014714:	b21a      	sxth	r2, r3
 8014716:	9b02      	ldr	r3, [sp, #8]
 8014718:	9205      	str	r2, [sp, #20]
 801471a:	440b      	add	r3, r1
 801471c:	b29b      	uxth	r3, r3
 801471e:	9302      	str	r3, [sp, #8]
 8014720:	9b07      	ldr	r3, [sp, #28]
 8014722:	448b      	add	fp, r1
 8014724:	4293      	cmp	r3, r2
 8014726:	fa1f fb8b 	uxth.w	fp, fp
 801472a:	4692      	mov	sl, r2
 801472c:	dc9f      	bgt.n	801466e <pool_func_ap_array_f32+0x21a>
 801472e:	9b00      	ldr	r3, [sp, #0]
 8014730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014732:	4413      	add	r3, r2
 8014734:	b29b      	uxth	r3, r3
 8014736:	9300      	str	r3, [sp, #0]
 8014738:	9b01      	ldr	r3, [sp, #4]
 801473a:	3301      	adds	r3, #1
 801473c:	9301      	str	r3, [sp, #4]
 801473e:	e776      	b.n	801462e <pool_func_ap_array_f32+0x1da>
 8014740:	eef0 6a46 	vmov.f32	s13, s12
 8014744:	e7d3      	b.n	80146ee <pool_func_ap_array_f32+0x29a>
 8014746:	bf00      	nop
 8014748:	7fc00000 	.word	0x7fc00000
 801474c:	00000000 	.word	0x00000000

08014750 <ai_check_custom_types>:
 8014750:	4b13      	ldr	r3, [pc, #76]	; (80147a0 <ai_check_custom_types+0x50>)
 8014752:	b082      	sub	sp, #8
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	9301      	str	r3, [sp, #4]
 8014758:	b118      	cbz	r0, 8014762 <ai_check_custom_types+0x12>
 801475a:	7803      	ldrb	r3, [r0, #0]
 801475c:	2b03      	cmp	r3, #3
 801475e:	d002      	beq.n	8014766 <ai_check_custom_types+0x16>
 8014760:	2000      	movs	r0, #0
 8014762:	b002      	add	sp, #8
 8014764:	4770      	bx	lr
 8014766:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801476a:	4293      	cmp	r3, r2
 801476c:	d004      	beq.n	8014778 <ai_check_custom_types+0x28>
 801476e:	2001      	movs	r0, #1
 8014770:	f080 0001 	eor.w	r0, r0, #1
 8014774:	b002      	add	sp, #8
 8014776:	4770      	bx	lr
 8014778:	7842      	ldrb	r2, [r0, #1]
 801477a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801477e:	429a      	cmp	r2, r3
 8014780:	f100 0001 	add.w	r0, r0, #1
 8014784:	d1f3      	bne.n	801476e <ai_check_custom_types+0x1e>
 8014786:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801478a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801478e:	429a      	cmp	r2, r3
 8014790:	d1ed      	bne.n	801476e <ai_check_custom_types+0x1e>
 8014792:	7842      	ldrb	r2, [r0, #1]
 8014794:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8014798:	429a      	cmp	r2, r3
 801479a:	d1e8      	bne.n	801476e <ai_check_custom_types+0x1e>
 801479c:	2000      	movs	r0, #0
 801479e:	e7e7      	b.n	8014770 <ai_check_custom_types+0x20>
 80147a0:	08019980 	.word	0x08019980

080147a4 <ai_layers_forward_all>:
 80147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147a6:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80147a8:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80147aa:	4604      	mov	r4, r0
 80147ac:	b31e      	cbz	r6, 80147f6 <ai_layers_forward_all+0x52>
 80147ae:	b1cd      	cbz	r5, 80147e4 <ai_layers_forward_all+0x40>
 80147b0:	6545      	str	r5, [r0, #84]	; 0x54
 80147b2:	4629      	mov	r1, r5
 80147b4:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80147b6:	2001      	movs	r0, #1
 80147b8:	47b0      	blx	r6
 80147ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80147bc:	2700      	movs	r7, #0
 80147be:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80147c0:	2002      	movs	r0, #2
 80147c2:	47b0      	blx	r6
 80147c4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80147c6:	692b      	ldr	r3, [r5, #16]
 80147c8:	4628      	mov	r0, r5
 80147ca:	4798      	blx	r3
 80147cc:	68eb      	ldr	r3, [r5, #12]
 80147ce:	429d      	cmp	r5, r3
 80147d0:	f04f 0003 	mov.w	r0, #3
 80147d4:	4619      	mov	r1, r3
 80147d6:	d006      	beq.n	80147e6 <ai_layers_forward_all+0x42>
 80147d8:	6563      	str	r3, [r4, #84]	; 0x54
 80147da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80147dc:	47b0      	blx	r6
 80147de:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80147e0:	2900      	cmp	r1, #0
 80147e2:	d1ec      	bne.n	80147be <ai_layers_forward_all+0x1a>
 80147e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e6:	2100      	movs	r1, #0
 80147e8:	6567      	str	r7, [r4, #84]	; 0x54
 80147ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80147ec:	47b0      	blx	r6
 80147ee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80147f0:	2900      	cmp	r1, #0
 80147f2:	d1e4      	bne.n	80147be <ai_layers_forward_all+0x1a>
 80147f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f6:	2d00      	cmp	r5, #0
 80147f8:	d0f4      	beq.n	80147e4 <ai_layers_forward_all+0x40>
 80147fa:	6545      	str	r5, [r0, #84]	; 0x54
 80147fc:	692b      	ldr	r3, [r5, #16]
 80147fe:	4628      	mov	r0, r5
 8014800:	4798      	blx	r3
 8014802:	68eb      	ldr	r3, [r5, #12]
 8014804:	42ab      	cmp	r3, r5
 8014806:	d004      	beq.n	8014812 <ai_layers_forward_all+0x6e>
 8014808:	6563      	str	r3, [r4, #84]	; 0x54
 801480a:	461d      	mov	r5, r3
 801480c:	2b00      	cmp	r3, #0
 801480e:	d1f5      	bne.n	80147fc <ai_layers_forward_all+0x58>
 8014810:	e7e8      	b.n	80147e4 <ai_layers_forward_all+0x40>
 8014812:	2300      	movs	r3, #0
 8014814:	6563      	str	r3, [r4, #84]	; 0x54
 8014816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014818 <ai_array_to_buffer_fmt>:
 8014818:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801481c:	2b02      	cmp	r3, #2
 801481e:	d01f      	beq.n	8014860 <ai_array_to_buffer_fmt+0x48>
 8014820:	4a1c      	ldr	r2, [pc, #112]	; (8014894 <ai_array_to_buffer_fmt+0x7c>)
 8014822:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8014826:	4293      	cmp	r3, r2
 8014828:	d00a      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 801482a:	dc0d      	bgt.n	8014848 <ai_array_to_buffer_fmt+0x30>
 801482c:	4a1a      	ldr	r2, [pc, #104]	; (8014898 <ai_array_to_buffer_fmt+0x80>)
 801482e:	4293      	cmp	r3, r2
 8014830:	d006      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014832:	dd1d      	ble.n	8014870 <ai_array_to_buffer_fmt+0x58>
 8014834:	4a19      	ldr	r2, [pc, #100]	; (801489c <ai_array_to_buffer_fmt+0x84>)
 8014836:	4293      	cmp	r3, r2
 8014838:	d002      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 801483a:	320f      	adds	r2, #15
 801483c:	4293      	cmp	r3, r2
 801483e:	d10d      	bne.n	801485c <ai_array_to_buffer_fmt+0x44>
 8014840:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014844:	4318      	orrs	r0, r3
 8014846:	4770      	bx	lr
 8014848:	4a15      	ldr	r2, [pc, #84]	; (80148a0 <ai_array_to_buffer_fmt+0x88>)
 801484a:	4293      	cmp	r3, r2
 801484c:	d0f8      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 801484e:	dd18      	ble.n	8014882 <ai_array_to_buffer_fmt+0x6a>
 8014850:	4a14      	ldr	r2, [pc, #80]	; (80148a4 <ai_array_to_buffer_fmt+0x8c>)
 8014852:	4293      	cmp	r3, r2
 8014854:	d0f4      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014856:	4a14      	ldr	r2, [pc, #80]	; (80148a8 <ai_array_to_buffer_fmt+0x90>)
 8014858:	4293      	cmp	r3, r2
 801485a:	d0f1      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 801485c:	2340      	movs	r3, #64	; 0x40
 801485e:	e7ef      	b.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014860:	4b12      	ldr	r3, [pc, #72]	; (80148ac <ai_array_to_buffer_fmt+0x94>)
 8014862:	4003      	ands	r3, r0
 8014864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014868:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 801486c:	4318      	orrs	r0, r3
 801486e:	4770      	bx	lr
 8014870:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8014874:	4293      	cmp	r3, r2
 8014876:	d0e3      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014878:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801487c:	4293      	cmp	r3, r2
 801487e:	d0df      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014880:	e7ec      	b.n	801485c <ai_array_to_buffer_fmt+0x44>
 8014882:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8014886:	4293      	cmp	r3, r2
 8014888:	d0da      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 801488a:	3207      	adds	r2, #7
 801488c:	4293      	cmp	r3, r2
 801488e:	d0d7      	beq.n	8014840 <ai_array_to_buffer_fmt+0x28>
 8014890:	e7e4      	b.n	801485c <ai_array_to_buffer_fmt+0x44>
 8014892:	bf00      	nop
 8014894:	00840040 	.word	0x00840040
 8014898:	00040447 	.word	0x00040447
 801489c:	00040840 	.word	0x00040840
 80148a0:	00840840 	.word	0x00840840
 80148a4:	0084084f 	.word	0x0084084f
 80148a8:	01821040 	.word	0x01821040
 80148ac:	00803fff 	.word	0x00803fff

080148b0 <ai_array_get_byte_size>:
 80148b0:	b1c1      	cbz	r1, 80148e4 <ai_array_get_byte_size+0x34>
 80148b2:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80148b6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80148ba:	4413      	add	r3, r2
 80148bc:	fb01 f103 	mul.w	r1, r1, r3
 80148c0:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80148c4:	3107      	adds	r1, #7
 80148c6:	f3c0 4043 	ubfx	r0, r0, #17, #4
 80148ca:	f021 0107 	bic.w	r1, r1, #7
 80148ce:	2804      	cmp	r0, #4
 80148d0:	fa21 f102 	lsr.w	r1, r1, r2
 80148d4:	d008      	beq.n	80148e8 <ai_array_get_byte_size+0x38>
 80148d6:	2808      	cmp	r0, #8
 80148d8:	d101      	bne.n	80148de <ai_array_get_byte_size+0x2e>
 80148da:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80148de:	3107      	adds	r1, #7
 80148e0:	08c8      	lsrs	r0, r1, #3
 80148e2:	4770      	bx	lr
 80148e4:	4608      	mov	r0, r1
 80148e6:	4770      	bx	lr
 80148e8:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 80148ec:	3107      	adds	r1, #7
 80148ee:	08c8      	lsrs	r0, r1, #3
 80148f0:	4770      	bx	lr
 80148f2:	bf00      	nop

080148f4 <__errno>:
 80148f4:	4b01      	ldr	r3, [pc, #4]	; (80148fc <__errno+0x8>)
 80148f6:	6818      	ldr	r0, [r3, #0]
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	200006dc 	.word	0x200006dc

08014900 <__libc_init_array>:
 8014900:	b570      	push	{r4, r5, r6, lr}
 8014902:	4d0d      	ldr	r5, [pc, #52]	; (8014938 <__libc_init_array+0x38>)
 8014904:	4c0d      	ldr	r4, [pc, #52]	; (801493c <__libc_init_array+0x3c>)
 8014906:	1b64      	subs	r4, r4, r5
 8014908:	10a4      	asrs	r4, r4, #2
 801490a:	2600      	movs	r6, #0
 801490c:	42a6      	cmp	r6, r4
 801490e:	d109      	bne.n	8014924 <__libc_init_array+0x24>
 8014910:	4d0b      	ldr	r5, [pc, #44]	; (8014940 <__libc_init_array+0x40>)
 8014912:	4c0c      	ldr	r4, [pc, #48]	; (8014944 <__libc_init_array+0x44>)
 8014914:	f004 fea6 	bl	8019664 <_init>
 8014918:	1b64      	subs	r4, r4, r5
 801491a:	10a4      	asrs	r4, r4, #2
 801491c:	2600      	movs	r6, #0
 801491e:	42a6      	cmp	r6, r4
 8014920:	d105      	bne.n	801492e <__libc_init_array+0x2e>
 8014922:	bd70      	pop	{r4, r5, r6, pc}
 8014924:	f855 3b04 	ldr.w	r3, [r5], #4
 8014928:	4798      	blx	r3
 801492a:	3601      	adds	r6, #1
 801492c:	e7ee      	b.n	801490c <__libc_init_array+0xc>
 801492e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014932:	4798      	blx	r3
 8014934:	3601      	adds	r6, #1
 8014936:	e7f2      	b.n	801491e <__libc_init_array+0x1e>
 8014938:	0808cbc8 	.word	0x0808cbc8
 801493c:	0808cbc8 	.word	0x0808cbc8
 8014940:	0808cbc8 	.word	0x0808cbc8
 8014944:	0808cbcc 	.word	0x0808cbcc

08014948 <malloc>:
 8014948:	4b02      	ldr	r3, [pc, #8]	; (8014954 <malloc+0xc>)
 801494a:	4601      	mov	r1, r0
 801494c:	6818      	ldr	r0, [r3, #0]
 801494e:	f000 b88d 	b.w	8014a6c <_malloc_r>
 8014952:	bf00      	nop
 8014954:	200006dc 	.word	0x200006dc

08014958 <free>:
 8014958:	4b02      	ldr	r3, [pc, #8]	; (8014964 <free+0xc>)
 801495a:	4601      	mov	r1, r0
 801495c:	6818      	ldr	r0, [r3, #0]
 801495e:	f000 b819 	b.w	8014994 <_free_r>
 8014962:	bf00      	nop
 8014964:	200006dc 	.word	0x200006dc

08014968 <memcpy>:
 8014968:	440a      	add	r2, r1
 801496a:	4291      	cmp	r1, r2
 801496c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014970:	d100      	bne.n	8014974 <memcpy+0xc>
 8014972:	4770      	bx	lr
 8014974:	b510      	push	{r4, lr}
 8014976:	f811 4b01 	ldrb.w	r4, [r1], #1
 801497a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801497e:	4291      	cmp	r1, r2
 8014980:	d1f9      	bne.n	8014976 <memcpy+0xe>
 8014982:	bd10      	pop	{r4, pc}

08014984 <memset>:
 8014984:	4402      	add	r2, r0
 8014986:	4603      	mov	r3, r0
 8014988:	4293      	cmp	r3, r2
 801498a:	d100      	bne.n	801498e <memset+0xa>
 801498c:	4770      	bx	lr
 801498e:	f803 1b01 	strb.w	r1, [r3], #1
 8014992:	e7f9      	b.n	8014988 <memset+0x4>

08014994 <_free_r>:
 8014994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014996:	2900      	cmp	r1, #0
 8014998:	d044      	beq.n	8014a24 <_free_r+0x90>
 801499a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801499e:	9001      	str	r0, [sp, #4]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f1a1 0404 	sub.w	r4, r1, #4
 80149a6:	bfb8      	it	lt
 80149a8:	18e4      	addlt	r4, r4, r3
 80149aa:	f003 fc1d 	bl	80181e8 <__malloc_lock>
 80149ae:	4a1e      	ldr	r2, [pc, #120]	; (8014a28 <_free_r+0x94>)
 80149b0:	9801      	ldr	r0, [sp, #4]
 80149b2:	6813      	ldr	r3, [r2, #0]
 80149b4:	b933      	cbnz	r3, 80149c4 <_free_r+0x30>
 80149b6:	6063      	str	r3, [r4, #4]
 80149b8:	6014      	str	r4, [r2, #0]
 80149ba:	b003      	add	sp, #12
 80149bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149c0:	f003 bc18 	b.w	80181f4 <__malloc_unlock>
 80149c4:	42a3      	cmp	r3, r4
 80149c6:	d908      	bls.n	80149da <_free_r+0x46>
 80149c8:	6825      	ldr	r5, [r4, #0]
 80149ca:	1961      	adds	r1, r4, r5
 80149cc:	428b      	cmp	r3, r1
 80149ce:	bf01      	itttt	eq
 80149d0:	6819      	ldreq	r1, [r3, #0]
 80149d2:	685b      	ldreq	r3, [r3, #4]
 80149d4:	1949      	addeq	r1, r1, r5
 80149d6:	6021      	streq	r1, [r4, #0]
 80149d8:	e7ed      	b.n	80149b6 <_free_r+0x22>
 80149da:	461a      	mov	r2, r3
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	b10b      	cbz	r3, 80149e4 <_free_r+0x50>
 80149e0:	42a3      	cmp	r3, r4
 80149e2:	d9fa      	bls.n	80149da <_free_r+0x46>
 80149e4:	6811      	ldr	r1, [r2, #0]
 80149e6:	1855      	adds	r5, r2, r1
 80149e8:	42a5      	cmp	r5, r4
 80149ea:	d10b      	bne.n	8014a04 <_free_r+0x70>
 80149ec:	6824      	ldr	r4, [r4, #0]
 80149ee:	4421      	add	r1, r4
 80149f0:	1854      	adds	r4, r2, r1
 80149f2:	42a3      	cmp	r3, r4
 80149f4:	6011      	str	r1, [r2, #0]
 80149f6:	d1e0      	bne.n	80149ba <_free_r+0x26>
 80149f8:	681c      	ldr	r4, [r3, #0]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	6053      	str	r3, [r2, #4]
 80149fe:	4421      	add	r1, r4
 8014a00:	6011      	str	r1, [r2, #0]
 8014a02:	e7da      	b.n	80149ba <_free_r+0x26>
 8014a04:	d902      	bls.n	8014a0c <_free_r+0x78>
 8014a06:	230c      	movs	r3, #12
 8014a08:	6003      	str	r3, [r0, #0]
 8014a0a:	e7d6      	b.n	80149ba <_free_r+0x26>
 8014a0c:	6825      	ldr	r5, [r4, #0]
 8014a0e:	1961      	adds	r1, r4, r5
 8014a10:	428b      	cmp	r3, r1
 8014a12:	bf04      	itt	eq
 8014a14:	6819      	ldreq	r1, [r3, #0]
 8014a16:	685b      	ldreq	r3, [r3, #4]
 8014a18:	6063      	str	r3, [r4, #4]
 8014a1a:	bf04      	itt	eq
 8014a1c:	1949      	addeq	r1, r1, r5
 8014a1e:	6021      	streq	r1, [r4, #0]
 8014a20:	6054      	str	r4, [r2, #4]
 8014a22:	e7ca      	b.n	80149ba <_free_r+0x26>
 8014a24:	b003      	add	sp, #12
 8014a26:	bd30      	pop	{r4, r5, pc}
 8014a28:	20001908 	.word	0x20001908

08014a2c <sbrk_aligned>:
 8014a2c:	b570      	push	{r4, r5, r6, lr}
 8014a2e:	4e0e      	ldr	r6, [pc, #56]	; (8014a68 <sbrk_aligned+0x3c>)
 8014a30:	460c      	mov	r4, r1
 8014a32:	6831      	ldr	r1, [r6, #0]
 8014a34:	4605      	mov	r5, r0
 8014a36:	b911      	cbnz	r1, 8014a3e <sbrk_aligned+0x12>
 8014a38:	f000 ff7c 	bl	8015934 <_sbrk_r>
 8014a3c:	6030      	str	r0, [r6, #0]
 8014a3e:	4621      	mov	r1, r4
 8014a40:	4628      	mov	r0, r5
 8014a42:	f000 ff77 	bl	8015934 <_sbrk_r>
 8014a46:	1c43      	adds	r3, r0, #1
 8014a48:	d00a      	beq.n	8014a60 <sbrk_aligned+0x34>
 8014a4a:	1cc4      	adds	r4, r0, #3
 8014a4c:	f024 0403 	bic.w	r4, r4, #3
 8014a50:	42a0      	cmp	r0, r4
 8014a52:	d007      	beq.n	8014a64 <sbrk_aligned+0x38>
 8014a54:	1a21      	subs	r1, r4, r0
 8014a56:	4628      	mov	r0, r5
 8014a58:	f000 ff6c 	bl	8015934 <_sbrk_r>
 8014a5c:	3001      	adds	r0, #1
 8014a5e:	d101      	bne.n	8014a64 <sbrk_aligned+0x38>
 8014a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014a64:	4620      	mov	r0, r4
 8014a66:	bd70      	pop	{r4, r5, r6, pc}
 8014a68:	2000190c 	.word	0x2000190c

08014a6c <_malloc_r>:
 8014a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a70:	1ccd      	adds	r5, r1, #3
 8014a72:	f025 0503 	bic.w	r5, r5, #3
 8014a76:	3508      	adds	r5, #8
 8014a78:	2d0c      	cmp	r5, #12
 8014a7a:	bf38      	it	cc
 8014a7c:	250c      	movcc	r5, #12
 8014a7e:	2d00      	cmp	r5, #0
 8014a80:	4607      	mov	r7, r0
 8014a82:	db01      	blt.n	8014a88 <_malloc_r+0x1c>
 8014a84:	42a9      	cmp	r1, r5
 8014a86:	d905      	bls.n	8014a94 <_malloc_r+0x28>
 8014a88:	230c      	movs	r3, #12
 8014a8a:	603b      	str	r3, [r7, #0]
 8014a8c:	2600      	movs	r6, #0
 8014a8e:	4630      	mov	r0, r6
 8014a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a94:	4e2e      	ldr	r6, [pc, #184]	; (8014b50 <_malloc_r+0xe4>)
 8014a96:	f003 fba7 	bl	80181e8 <__malloc_lock>
 8014a9a:	6833      	ldr	r3, [r6, #0]
 8014a9c:	461c      	mov	r4, r3
 8014a9e:	bb34      	cbnz	r4, 8014aee <_malloc_r+0x82>
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	f7ff ffc2 	bl	8014a2c <sbrk_aligned>
 8014aa8:	1c43      	adds	r3, r0, #1
 8014aaa:	4604      	mov	r4, r0
 8014aac:	d14d      	bne.n	8014b4a <_malloc_r+0xde>
 8014aae:	6834      	ldr	r4, [r6, #0]
 8014ab0:	4626      	mov	r6, r4
 8014ab2:	2e00      	cmp	r6, #0
 8014ab4:	d140      	bne.n	8014b38 <_malloc_r+0xcc>
 8014ab6:	6823      	ldr	r3, [r4, #0]
 8014ab8:	4631      	mov	r1, r6
 8014aba:	4638      	mov	r0, r7
 8014abc:	eb04 0803 	add.w	r8, r4, r3
 8014ac0:	f000 ff38 	bl	8015934 <_sbrk_r>
 8014ac4:	4580      	cmp	r8, r0
 8014ac6:	d13a      	bne.n	8014b3e <_malloc_r+0xd2>
 8014ac8:	6821      	ldr	r1, [r4, #0]
 8014aca:	3503      	adds	r5, #3
 8014acc:	1a6d      	subs	r5, r5, r1
 8014ace:	f025 0503 	bic.w	r5, r5, #3
 8014ad2:	3508      	adds	r5, #8
 8014ad4:	2d0c      	cmp	r5, #12
 8014ad6:	bf38      	it	cc
 8014ad8:	250c      	movcc	r5, #12
 8014ada:	4629      	mov	r1, r5
 8014adc:	4638      	mov	r0, r7
 8014ade:	f7ff ffa5 	bl	8014a2c <sbrk_aligned>
 8014ae2:	3001      	adds	r0, #1
 8014ae4:	d02b      	beq.n	8014b3e <_malloc_r+0xd2>
 8014ae6:	6823      	ldr	r3, [r4, #0]
 8014ae8:	442b      	add	r3, r5
 8014aea:	6023      	str	r3, [r4, #0]
 8014aec:	e00e      	b.n	8014b0c <_malloc_r+0xa0>
 8014aee:	6822      	ldr	r2, [r4, #0]
 8014af0:	1b52      	subs	r2, r2, r5
 8014af2:	d41e      	bmi.n	8014b32 <_malloc_r+0xc6>
 8014af4:	2a0b      	cmp	r2, #11
 8014af6:	d916      	bls.n	8014b26 <_malloc_r+0xba>
 8014af8:	1961      	adds	r1, r4, r5
 8014afa:	42a3      	cmp	r3, r4
 8014afc:	6025      	str	r5, [r4, #0]
 8014afe:	bf18      	it	ne
 8014b00:	6059      	strne	r1, [r3, #4]
 8014b02:	6863      	ldr	r3, [r4, #4]
 8014b04:	bf08      	it	eq
 8014b06:	6031      	streq	r1, [r6, #0]
 8014b08:	5162      	str	r2, [r4, r5]
 8014b0a:	604b      	str	r3, [r1, #4]
 8014b0c:	4638      	mov	r0, r7
 8014b0e:	f104 060b 	add.w	r6, r4, #11
 8014b12:	f003 fb6f 	bl	80181f4 <__malloc_unlock>
 8014b16:	f026 0607 	bic.w	r6, r6, #7
 8014b1a:	1d23      	adds	r3, r4, #4
 8014b1c:	1af2      	subs	r2, r6, r3
 8014b1e:	d0b6      	beq.n	8014a8e <_malloc_r+0x22>
 8014b20:	1b9b      	subs	r3, r3, r6
 8014b22:	50a3      	str	r3, [r4, r2]
 8014b24:	e7b3      	b.n	8014a8e <_malloc_r+0x22>
 8014b26:	6862      	ldr	r2, [r4, #4]
 8014b28:	42a3      	cmp	r3, r4
 8014b2a:	bf0c      	ite	eq
 8014b2c:	6032      	streq	r2, [r6, #0]
 8014b2e:	605a      	strne	r2, [r3, #4]
 8014b30:	e7ec      	b.n	8014b0c <_malloc_r+0xa0>
 8014b32:	4623      	mov	r3, r4
 8014b34:	6864      	ldr	r4, [r4, #4]
 8014b36:	e7b2      	b.n	8014a9e <_malloc_r+0x32>
 8014b38:	4634      	mov	r4, r6
 8014b3a:	6876      	ldr	r6, [r6, #4]
 8014b3c:	e7b9      	b.n	8014ab2 <_malloc_r+0x46>
 8014b3e:	230c      	movs	r3, #12
 8014b40:	603b      	str	r3, [r7, #0]
 8014b42:	4638      	mov	r0, r7
 8014b44:	f003 fb56 	bl	80181f4 <__malloc_unlock>
 8014b48:	e7a1      	b.n	8014a8e <_malloc_r+0x22>
 8014b4a:	6025      	str	r5, [r4, #0]
 8014b4c:	e7de      	b.n	8014b0c <_malloc_r+0xa0>
 8014b4e:	bf00      	nop
 8014b50:	20001908 	.word	0x20001908

08014b54 <__cvt>:
 8014b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014b58:	ec55 4b10 	vmov	r4, r5, d0
 8014b5c:	2d00      	cmp	r5, #0
 8014b5e:	460e      	mov	r6, r1
 8014b60:	4619      	mov	r1, r3
 8014b62:	462b      	mov	r3, r5
 8014b64:	bfbb      	ittet	lt
 8014b66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014b6a:	461d      	movlt	r5, r3
 8014b6c:	2300      	movge	r3, #0
 8014b6e:	232d      	movlt	r3, #45	; 0x2d
 8014b70:	700b      	strb	r3, [r1, #0]
 8014b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014b74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014b78:	4691      	mov	r9, r2
 8014b7a:	f023 0820 	bic.w	r8, r3, #32
 8014b7e:	bfbc      	itt	lt
 8014b80:	4622      	movlt	r2, r4
 8014b82:	4614      	movlt	r4, r2
 8014b84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014b88:	d005      	beq.n	8014b96 <__cvt+0x42>
 8014b8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8014b8e:	d100      	bne.n	8014b92 <__cvt+0x3e>
 8014b90:	3601      	adds	r6, #1
 8014b92:	2102      	movs	r1, #2
 8014b94:	e000      	b.n	8014b98 <__cvt+0x44>
 8014b96:	2103      	movs	r1, #3
 8014b98:	ab03      	add	r3, sp, #12
 8014b9a:	9301      	str	r3, [sp, #4]
 8014b9c:	ab02      	add	r3, sp, #8
 8014b9e:	9300      	str	r3, [sp, #0]
 8014ba0:	ec45 4b10 	vmov	d0, r4, r5
 8014ba4:	4653      	mov	r3, sl
 8014ba6:	4632      	mov	r2, r6
 8014ba8:	f001 ff7a 	bl	8016aa0 <_dtoa_r>
 8014bac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014bb0:	4607      	mov	r7, r0
 8014bb2:	d102      	bne.n	8014bba <__cvt+0x66>
 8014bb4:	f019 0f01 	tst.w	r9, #1
 8014bb8:	d022      	beq.n	8014c00 <__cvt+0xac>
 8014bba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014bbe:	eb07 0906 	add.w	r9, r7, r6
 8014bc2:	d110      	bne.n	8014be6 <__cvt+0x92>
 8014bc4:	783b      	ldrb	r3, [r7, #0]
 8014bc6:	2b30      	cmp	r3, #48	; 0x30
 8014bc8:	d10a      	bne.n	8014be0 <__cvt+0x8c>
 8014bca:	2200      	movs	r2, #0
 8014bcc:	2300      	movs	r3, #0
 8014bce:	4620      	mov	r0, r4
 8014bd0:	4629      	mov	r1, r5
 8014bd2:	f7eb ff89 	bl	8000ae8 <__aeabi_dcmpeq>
 8014bd6:	b918      	cbnz	r0, 8014be0 <__cvt+0x8c>
 8014bd8:	f1c6 0601 	rsb	r6, r6, #1
 8014bdc:	f8ca 6000 	str.w	r6, [sl]
 8014be0:	f8da 3000 	ldr.w	r3, [sl]
 8014be4:	4499      	add	r9, r3
 8014be6:	2200      	movs	r2, #0
 8014be8:	2300      	movs	r3, #0
 8014bea:	4620      	mov	r0, r4
 8014bec:	4629      	mov	r1, r5
 8014bee:	f7eb ff7b 	bl	8000ae8 <__aeabi_dcmpeq>
 8014bf2:	b108      	cbz	r0, 8014bf8 <__cvt+0xa4>
 8014bf4:	f8cd 900c 	str.w	r9, [sp, #12]
 8014bf8:	2230      	movs	r2, #48	; 0x30
 8014bfa:	9b03      	ldr	r3, [sp, #12]
 8014bfc:	454b      	cmp	r3, r9
 8014bfe:	d307      	bcc.n	8014c10 <__cvt+0xbc>
 8014c00:	9b03      	ldr	r3, [sp, #12]
 8014c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c04:	1bdb      	subs	r3, r3, r7
 8014c06:	4638      	mov	r0, r7
 8014c08:	6013      	str	r3, [r2, #0]
 8014c0a:	b004      	add	sp, #16
 8014c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c10:	1c59      	adds	r1, r3, #1
 8014c12:	9103      	str	r1, [sp, #12]
 8014c14:	701a      	strb	r2, [r3, #0]
 8014c16:	e7f0      	b.n	8014bfa <__cvt+0xa6>

08014c18 <__exponent>:
 8014c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2900      	cmp	r1, #0
 8014c1e:	bfb8      	it	lt
 8014c20:	4249      	neglt	r1, r1
 8014c22:	f803 2b02 	strb.w	r2, [r3], #2
 8014c26:	bfb4      	ite	lt
 8014c28:	222d      	movlt	r2, #45	; 0x2d
 8014c2a:	222b      	movge	r2, #43	; 0x2b
 8014c2c:	2909      	cmp	r1, #9
 8014c2e:	7042      	strb	r2, [r0, #1]
 8014c30:	dd2a      	ble.n	8014c88 <__exponent+0x70>
 8014c32:	f10d 0407 	add.w	r4, sp, #7
 8014c36:	46a4      	mov	ip, r4
 8014c38:	270a      	movs	r7, #10
 8014c3a:	46a6      	mov	lr, r4
 8014c3c:	460a      	mov	r2, r1
 8014c3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8014c42:	fb07 1516 	mls	r5, r7, r6, r1
 8014c46:	3530      	adds	r5, #48	; 0x30
 8014c48:	2a63      	cmp	r2, #99	; 0x63
 8014c4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014c4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014c52:	4631      	mov	r1, r6
 8014c54:	dcf1      	bgt.n	8014c3a <__exponent+0x22>
 8014c56:	3130      	adds	r1, #48	; 0x30
 8014c58:	f1ae 0502 	sub.w	r5, lr, #2
 8014c5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014c60:	1c44      	adds	r4, r0, #1
 8014c62:	4629      	mov	r1, r5
 8014c64:	4561      	cmp	r1, ip
 8014c66:	d30a      	bcc.n	8014c7e <__exponent+0x66>
 8014c68:	f10d 0209 	add.w	r2, sp, #9
 8014c6c:	eba2 020e 	sub.w	r2, r2, lr
 8014c70:	4565      	cmp	r5, ip
 8014c72:	bf88      	it	hi
 8014c74:	2200      	movhi	r2, #0
 8014c76:	4413      	add	r3, r2
 8014c78:	1a18      	subs	r0, r3, r0
 8014c7a:	b003      	add	sp, #12
 8014c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014c86:	e7ed      	b.n	8014c64 <__exponent+0x4c>
 8014c88:	2330      	movs	r3, #48	; 0x30
 8014c8a:	3130      	adds	r1, #48	; 0x30
 8014c8c:	7083      	strb	r3, [r0, #2]
 8014c8e:	70c1      	strb	r1, [r0, #3]
 8014c90:	1d03      	adds	r3, r0, #4
 8014c92:	e7f1      	b.n	8014c78 <__exponent+0x60>

08014c94 <_printf_float>:
 8014c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c98:	ed2d 8b02 	vpush	{d8}
 8014c9c:	b08d      	sub	sp, #52	; 0x34
 8014c9e:	460c      	mov	r4, r1
 8014ca0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014ca4:	4616      	mov	r6, r2
 8014ca6:	461f      	mov	r7, r3
 8014ca8:	4605      	mov	r5, r0
 8014caa:	f003 fa1f 	bl	80180ec <_localeconv_r>
 8014cae:	f8d0 a000 	ldr.w	sl, [r0]
 8014cb2:	4650      	mov	r0, sl
 8014cb4:	f7eb fa9c 	bl	80001f0 <strlen>
 8014cb8:	2300      	movs	r3, #0
 8014cba:	930a      	str	r3, [sp, #40]	; 0x28
 8014cbc:	6823      	ldr	r3, [r4, #0]
 8014cbe:	9305      	str	r3, [sp, #20]
 8014cc0:	f8d8 3000 	ldr.w	r3, [r8]
 8014cc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014cc8:	3307      	adds	r3, #7
 8014cca:	f023 0307 	bic.w	r3, r3, #7
 8014cce:	f103 0208 	add.w	r2, r3, #8
 8014cd2:	f8c8 2000 	str.w	r2, [r8]
 8014cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014cde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014ce2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014ce6:	9307      	str	r3, [sp, #28]
 8014ce8:	f8cd 8018 	str.w	r8, [sp, #24]
 8014cec:	ee08 0a10 	vmov	s16, r0
 8014cf0:	4b9f      	ldr	r3, [pc, #636]	; (8014f70 <_printf_float+0x2dc>)
 8014cf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014cf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014cfa:	f7eb ff27 	bl	8000b4c <__aeabi_dcmpun>
 8014cfe:	bb88      	cbnz	r0, 8014d64 <_printf_float+0xd0>
 8014d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d04:	4b9a      	ldr	r3, [pc, #616]	; (8014f70 <_printf_float+0x2dc>)
 8014d06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014d0a:	f7eb ff01 	bl	8000b10 <__aeabi_dcmple>
 8014d0e:	bb48      	cbnz	r0, 8014d64 <_printf_float+0xd0>
 8014d10:	2200      	movs	r2, #0
 8014d12:	2300      	movs	r3, #0
 8014d14:	4640      	mov	r0, r8
 8014d16:	4649      	mov	r1, r9
 8014d18:	f7eb fef0 	bl	8000afc <__aeabi_dcmplt>
 8014d1c:	b110      	cbz	r0, 8014d24 <_printf_float+0x90>
 8014d1e:	232d      	movs	r3, #45	; 0x2d
 8014d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d24:	4b93      	ldr	r3, [pc, #588]	; (8014f74 <_printf_float+0x2e0>)
 8014d26:	4894      	ldr	r0, [pc, #592]	; (8014f78 <_printf_float+0x2e4>)
 8014d28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014d2c:	bf94      	ite	ls
 8014d2e:	4698      	movls	r8, r3
 8014d30:	4680      	movhi	r8, r0
 8014d32:	2303      	movs	r3, #3
 8014d34:	6123      	str	r3, [r4, #16]
 8014d36:	9b05      	ldr	r3, [sp, #20]
 8014d38:	f023 0204 	bic.w	r2, r3, #4
 8014d3c:	6022      	str	r2, [r4, #0]
 8014d3e:	f04f 0900 	mov.w	r9, #0
 8014d42:	9700      	str	r7, [sp, #0]
 8014d44:	4633      	mov	r3, r6
 8014d46:	aa0b      	add	r2, sp, #44	; 0x2c
 8014d48:	4621      	mov	r1, r4
 8014d4a:	4628      	mov	r0, r5
 8014d4c:	f000 f9d8 	bl	8015100 <_printf_common>
 8014d50:	3001      	adds	r0, #1
 8014d52:	f040 8090 	bne.w	8014e76 <_printf_float+0x1e2>
 8014d56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d5a:	b00d      	add	sp, #52	; 0x34
 8014d5c:	ecbd 8b02 	vpop	{d8}
 8014d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d64:	4642      	mov	r2, r8
 8014d66:	464b      	mov	r3, r9
 8014d68:	4640      	mov	r0, r8
 8014d6a:	4649      	mov	r1, r9
 8014d6c:	f7eb feee 	bl	8000b4c <__aeabi_dcmpun>
 8014d70:	b140      	cbz	r0, 8014d84 <_printf_float+0xf0>
 8014d72:	464b      	mov	r3, r9
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	bfbc      	itt	lt
 8014d78:	232d      	movlt	r3, #45	; 0x2d
 8014d7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014d7e:	487f      	ldr	r0, [pc, #508]	; (8014f7c <_printf_float+0x2e8>)
 8014d80:	4b7f      	ldr	r3, [pc, #508]	; (8014f80 <_printf_float+0x2ec>)
 8014d82:	e7d1      	b.n	8014d28 <_printf_float+0x94>
 8014d84:	6863      	ldr	r3, [r4, #4]
 8014d86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014d8a:	9206      	str	r2, [sp, #24]
 8014d8c:	1c5a      	adds	r2, r3, #1
 8014d8e:	d13f      	bne.n	8014e10 <_printf_float+0x17c>
 8014d90:	2306      	movs	r3, #6
 8014d92:	6063      	str	r3, [r4, #4]
 8014d94:	9b05      	ldr	r3, [sp, #20]
 8014d96:	6861      	ldr	r1, [r4, #4]
 8014d98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	9303      	str	r3, [sp, #12]
 8014da0:	ab0a      	add	r3, sp, #40	; 0x28
 8014da2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014da6:	ab09      	add	r3, sp, #36	; 0x24
 8014da8:	ec49 8b10 	vmov	d0, r8, r9
 8014dac:	9300      	str	r3, [sp, #0]
 8014dae:	6022      	str	r2, [r4, #0]
 8014db0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014db4:	4628      	mov	r0, r5
 8014db6:	f7ff fecd 	bl	8014b54 <__cvt>
 8014dba:	9b06      	ldr	r3, [sp, #24]
 8014dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014dbe:	2b47      	cmp	r3, #71	; 0x47
 8014dc0:	4680      	mov	r8, r0
 8014dc2:	d108      	bne.n	8014dd6 <_printf_float+0x142>
 8014dc4:	1cc8      	adds	r0, r1, #3
 8014dc6:	db02      	blt.n	8014dce <_printf_float+0x13a>
 8014dc8:	6863      	ldr	r3, [r4, #4]
 8014dca:	4299      	cmp	r1, r3
 8014dcc:	dd41      	ble.n	8014e52 <_printf_float+0x1be>
 8014dce:	f1ab 0b02 	sub.w	fp, fp, #2
 8014dd2:	fa5f fb8b 	uxtb.w	fp, fp
 8014dd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014dda:	d820      	bhi.n	8014e1e <_printf_float+0x18a>
 8014ddc:	3901      	subs	r1, #1
 8014dde:	465a      	mov	r2, fp
 8014de0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014de4:	9109      	str	r1, [sp, #36]	; 0x24
 8014de6:	f7ff ff17 	bl	8014c18 <__exponent>
 8014dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dec:	1813      	adds	r3, r2, r0
 8014dee:	2a01      	cmp	r2, #1
 8014df0:	4681      	mov	r9, r0
 8014df2:	6123      	str	r3, [r4, #16]
 8014df4:	dc02      	bgt.n	8014dfc <_printf_float+0x168>
 8014df6:	6822      	ldr	r2, [r4, #0]
 8014df8:	07d2      	lsls	r2, r2, #31
 8014dfa:	d501      	bpl.n	8014e00 <_printf_float+0x16c>
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	6123      	str	r3, [r4, #16]
 8014e00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d09c      	beq.n	8014d42 <_printf_float+0xae>
 8014e08:	232d      	movs	r3, #45	; 0x2d
 8014e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e0e:	e798      	b.n	8014d42 <_printf_float+0xae>
 8014e10:	9a06      	ldr	r2, [sp, #24]
 8014e12:	2a47      	cmp	r2, #71	; 0x47
 8014e14:	d1be      	bne.n	8014d94 <_printf_float+0x100>
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1bc      	bne.n	8014d94 <_printf_float+0x100>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e7b9      	b.n	8014d92 <_printf_float+0xfe>
 8014e1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014e22:	d118      	bne.n	8014e56 <_printf_float+0x1c2>
 8014e24:	2900      	cmp	r1, #0
 8014e26:	6863      	ldr	r3, [r4, #4]
 8014e28:	dd0b      	ble.n	8014e42 <_printf_float+0x1ae>
 8014e2a:	6121      	str	r1, [r4, #16]
 8014e2c:	b913      	cbnz	r3, 8014e34 <_printf_float+0x1a0>
 8014e2e:	6822      	ldr	r2, [r4, #0]
 8014e30:	07d0      	lsls	r0, r2, #31
 8014e32:	d502      	bpl.n	8014e3a <_printf_float+0x1a6>
 8014e34:	3301      	adds	r3, #1
 8014e36:	440b      	add	r3, r1
 8014e38:	6123      	str	r3, [r4, #16]
 8014e3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014e3c:	f04f 0900 	mov.w	r9, #0
 8014e40:	e7de      	b.n	8014e00 <_printf_float+0x16c>
 8014e42:	b913      	cbnz	r3, 8014e4a <_printf_float+0x1b6>
 8014e44:	6822      	ldr	r2, [r4, #0]
 8014e46:	07d2      	lsls	r2, r2, #31
 8014e48:	d501      	bpl.n	8014e4e <_printf_float+0x1ba>
 8014e4a:	3302      	adds	r3, #2
 8014e4c:	e7f4      	b.n	8014e38 <_printf_float+0x1a4>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	e7f2      	b.n	8014e38 <_printf_float+0x1a4>
 8014e52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e58:	4299      	cmp	r1, r3
 8014e5a:	db05      	blt.n	8014e68 <_printf_float+0x1d4>
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	6121      	str	r1, [r4, #16]
 8014e60:	07d8      	lsls	r0, r3, #31
 8014e62:	d5ea      	bpl.n	8014e3a <_printf_float+0x1a6>
 8014e64:	1c4b      	adds	r3, r1, #1
 8014e66:	e7e7      	b.n	8014e38 <_printf_float+0x1a4>
 8014e68:	2900      	cmp	r1, #0
 8014e6a:	bfd4      	ite	le
 8014e6c:	f1c1 0202 	rsble	r2, r1, #2
 8014e70:	2201      	movgt	r2, #1
 8014e72:	4413      	add	r3, r2
 8014e74:	e7e0      	b.n	8014e38 <_printf_float+0x1a4>
 8014e76:	6823      	ldr	r3, [r4, #0]
 8014e78:	055a      	lsls	r2, r3, #21
 8014e7a:	d407      	bmi.n	8014e8c <_printf_float+0x1f8>
 8014e7c:	6923      	ldr	r3, [r4, #16]
 8014e7e:	4642      	mov	r2, r8
 8014e80:	4631      	mov	r1, r6
 8014e82:	4628      	mov	r0, r5
 8014e84:	47b8      	blx	r7
 8014e86:	3001      	adds	r0, #1
 8014e88:	d12c      	bne.n	8014ee4 <_printf_float+0x250>
 8014e8a:	e764      	b.n	8014d56 <_printf_float+0xc2>
 8014e8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014e90:	f240 80e0 	bls.w	8015054 <_printf_float+0x3c0>
 8014e94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e98:	2200      	movs	r2, #0
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	f7eb fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 8014ea0:	2800      	cmp	r0, #0
 8014ea2:	d034      	beq.n	8014f0e <_printf_float+0x27a>
 8014ea4:	4a37      	ldr	r2, [pc, #220]	; (8014f84 <_printf_float+0x2f0>)
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	4631      	mov	r1, r6
 8014eaa:	4628      	mov	r0, r5
 8014eac:	47b8      	blx	r7
 8014eae:	3001      	adds	r0, #1
 8014eb0:	f43f af51 	beq.w	8014d56 <_printf_float+0xc2>
 8014eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	db02      	blt.n	8014ec2 <_printf_float+0x22e>
 8014ebc:	6823      	ldr	r3, [r4, #0]
 8014ebe:	07d8      	lsls	r0, r3, #31
 8014ec0:	d510      	bpl.n	8014ee4 <_printf_float+0x250>
 8014ec2:	ee18 3a10 	vmov	r3, s16
 8014ec6:	4652      	mov	r2, sl
 8014ec8:	4631      	mov	r1, r6
 8014eca:	4628      	mov	r0, r5
 8014ecc:	47b8      	blx	r7
 8014ece:	3001      	adds	r0, #1
 8014ed0:	f43f af41 	beq.w	8014d56 <_printf_float+0xc2>
 8014ed4:	f04f 0800 	mov.w	r8, #0
 8014ed8:	f104 091a 	add.w	r9, r4, #26
 8014edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	4543      	cmp	r3, r8
 8014ee2:	dc09      	bgt.n	8014ef8 <_printf_float+0x264>
 8014ee4:	6823      	ldr	r3, [r4, #0]
 8014ee6:	079b      	lsls	r3, r3, #30
 8014ee8:	f100 8105 	bmi.w	80150f6 <_printf_float+0x462>
 8014eec:	68e0      	ldr	r0, [r4, #12]
 8014eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ef0:	4298      	cmp	r0, r3
 8014ef2:	bfb8      	it	lt
 8014ef4:	4618      	movlt	r0, r3
 8014ef6:	e730      	b.n	8014d5a <_printf_float+0xc6>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	464a      	mov	r2, r9
 8014efc:	4631      	mov	r1, r6
 8014efe:	4628      	mov	r0, r5
 8014f00:	47b8      	blx	r7
 8014f02:	3001      	adds	r0, #1
 8014f04:	f43f af27 	beq.w	8014d56 <_printf_float+0xc2>
 8014f08:	f108 0801 	add.w	r8, r8, #1
 8014f0c:	e7e6      	b.n	8014edc <_printf_float+0x248>
 8014f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	dc39      	bgt.n	8014f88 <_printf_float+0x2f4>
 8014f14:	4a1b      	ldr	r2, [pc, #108]	; (8014f84 <_printf_float+0x2f0>)
 8014f16:	2301      	movs	r3, #1
 8014f18:	4631      	mov	r1, r6
 8014f1a:	4628      	mov	r0, r5
 8014f1c:	47b8      	blx	r7
 8014f1e:	3001      	adds	r0, #1
 8014f20:	f43f af19 	beq.w	8014d56 <_printf_float+0xc2>
 8014f24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014f28:	4313      	orrs	r3, r2
 8014f2a:	d102      	bne.n	8014f32 <_printf_float+0x29e>
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	07d9      	lsls	r1, r3, #31
 8014f30:	d5d8      	bpl.n	8014ee4 <_printf_float+0x250>
 8014f32:	ee18 3a10 	vmov	r3, s16
 8014f36:	4652      	mov	r2, sl
 8014f38:	4631      	mov	r1, r6
 8014f3a:	4628      	mov	r0, r5
 8014f3c:	47b8      	blx	r7
 8014f3e:	3001      	adds	r0, #1
 8014f40:	f43f af09 	beq.w	8014d56 <_printf_float+0xc2>
 8014f44:	f04f 0900 	mov.w	r9, #0
 8014f48:	f104 0a1a 	add.w	sl, r4, #26
 8014f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f4e:	425b      	negs	r3, r3
 8014f50:	454b      	cmp	r3, r9
 8014f52:	dc01      	bgt.n	8014f58 <_printf_float+0x2c4>
 8014f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f56:	e792      	b.n	8014e7e <_printf_float+0x1ea>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	4652      	mov	r2, sl
 8014f5c:	4631      	mov	r1, r6
 8014f5e:	4628      	mov	r0, r5
 8014f60:	47b8      	blx	r7
 8014f62:	3001      	adds	r0, #1
 8014f64:	f43f aef7 	beq.w	8014d56 <_printf_float+0xc2>
 8014f68:	f109 0901 	add.w	r9, r9, #1
 8014f6c:	e7ee      	b.n	8014f4c <_printf_float+0x2b8>
 8014f6e:	bf00      	nop
 8014f70:	7fefffff 	.word	0x7fefffff
 8014f74:	0808c6a4 	.word	0x0808c6a4
 8014f78:	0808c6a8 	.word	0x0808c6a8
 8014f7c:	0808c6b0 	.word	0x0808c6b0
 8014f80:	0808c6ac 	.word	0x0808c6ac
 8014f84:	0808c6b4 	.word	0x0808c6b4
 8014f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	bfa8      	it	ge
 8014f90:	461a      	movge	r2, r3
 8014f92:	2a00      	cmp	r2, #0
 8014f94:	4691      	mov	r9, r2
 8014f96:	dc37      	bgt.n	8015008 <_printf_float+0x374>
 8014f98:	f04f 0b00 	mov.w	fp, #0
 8014f9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014fa0:	f104 021a 	add.w	r2, r4, #26
 8014fa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014fa6:	9305      	str	r3, [sp, #20]
 8014fa8:	eba3 0309 	sub.w	r3, r3, r9
 8014fac:	455b      	cmp	r3, fp
 8014fae:	dc33      	bgt.n	8015018 <_printf_float+0x384>
 8014fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	db3b      	blt.n	8015030 <_printf_float+0x39c>
 8014fb8:	6823      	ldr	r3, [r4, #0]
 8014fba:	07da      	lsls	r2, r3, #31
 8014fbc:	d438      	bmi.n	8015030 <_printf_float+0x39c>
 8014fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fc0:	9a05      	ldr	r2, [sp, #20]
 8014fc2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fc4:	1a9a      	subs	r2, r3, r2
 8014fc6:	eba3 0901 	sub.w	r9, r3, r1
 8014fca:	4591      	cmp	r9, r2
 8014fcc:	bfa8      	it	ge
 8014fce:	4691      	movge	r9, r2
 8014fd0:	f1b9 0f00 	cmp.w	r9, #0
 8014fd4:	dc35      	bgt.n	8015042 <_printf_float+0x3ae>
 8014fd6:	f04f 0800 	mov.w	r8, #0
 8014fda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014fde:	f104 0a1a 	add.w	sl, r4, #26
 8014fe2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014fe6:	1a9b      	subs	r3, r3, r2
 8014fe8:	eba3 0309 	sub.w	r3, r3, r9
 8014fec:	4543      	cmp	r3, r8
 8014fee:	f77f af79 	ble.w	8014ee4 <_printf_float+0x250>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	4652      	mov	r2, sl
 8014ff6:	4631      	mov	r1, r6
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	47b8      	blx	r7
 8014ffc:	3001      	adds	r0, #1
 8014ffe:	f43f aeaa 	beq.w	8014d56 <_printf_float+0xc2>
 8015002:	f108 0801 	add.w	r8, r8, #1
 8015006:	e7ec      	b.n	8014fe2 <_printf_float+0x34e>
 8015008:	4613      	mov	r3, r2
 801500a:	4631      	mov	r1, r6
 801500c:	4642      	mov	r2, r8
 801500e:	4628      	mov	r0, r5
 8015010:	47b8      	blx	r7
 8015012:	3001      	adds	r0, #1
 8015014:	d1c0      	bne.n	8014f98 <_printf_float+0x304>
 8015016:	e69e      	b.n	8014d56 <_printf_float+0xc2>
 8015018:	2301      	movs	r3, #1
 801501a:	4631      	mov	r1, r6
 801501c:	4628      	mov	r0, r5
 801501e:	9205      	str	r2, [sp, #20]
 8015020:	47b8      	blx	r7
 8015022:	3001      	adds	r0, #1
 8015024:	f43f ae97 	beq.w	8014d56 <_printf_float+0xc2>
 8015028:	9a05      	ldr	r2, [sp, #20]
 801502a:	f10b 0b01 	add.w	fp, fp, #1
 801502e:	e7b9      	b.n	8014fa4 <_printf_float+0x310>
 8015030:	ee18 3a10 	vmov	r3, s16
 8015034:	4652      	mov	r2, sl
 8015036:	4631      	mov	r1, r6
 8015038:	4628      	mov	r0, r5
 801503a:	47b8      	blx	r7
 801503c:	3001      	adds	r0, #1
 801503e:	d1be      	bne.n	8014fbe <_printf_float+0x32a>
 8015040:	e689      	b.n	8014d56 <_printf_float+0xc2>
 8015042:	9a05      	ldr	r2, [sp, #20]
 8015044:	464b      	mov	r3, r9
 8015046:	4442      	add	r2, r8
 8015048:	4631      	mov	r1, r6
 801504a:	4628      	mov	r0, r5
 801504c:	47b8      	blx	r7
 801504e:	3001      	adds	r0, #1
 8015050:	d1c1      	bne.n	8014fd6 <_printf_float+0x342>
 8015052:	e680      	b.n	8014d56 <_printf_float+0xc2>
 8015054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015056:	2a01      	cmp	r2, #1
 8015058:	dc01      	bgt.n	801505e <_printf_float+0x3ca>
 801505a:	07db      	lsls	r3, r3, #31
 801505c:	d538      	bpl.n	80150d0 <_printf_float+0x43c>
 801505e:	2301      	movs	r3, #1
 8015060:	4642      	mov	r2, r8
 8015062:	4631      	mov	r1, r6
 8015064:	4628      	mov	r0, r5
 8015066:	47b8      	blx	r7
 8015068:	3001      	adds	r0, #1
 801506a:	f43f ae74 	beq.w	8014d56 <_printf_float+0xc2>
 801506e:	ee18 3a10 	vmov	r3, s16
 8015072:	4652      	mov	r2, sl
 8015074:	4631      	mov	r1, r6
 8015076:	4628      	mov	r0, r5
 8015078:	47b8      	blx	r7
 801507a:	3001      	adds	r0, #1
 801507c:	f43f ae6b 	beq.w	8014d56 <_printf_float+0xc2>
 8015080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015084:	2200      	movs	r2, #0
 8015086:	2300      	movs	r3, #0
 8015088:	f7eb fd2e 	bl	8000ae8 <__aeabi_dcmpeq>
 801508c:	b9d8      	cbnz	r0, 80150c6 <_printf_float+0x432>
 801508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015090:	f108 0201 	add.w	r2, r8, #1
 8015094:	3b01      	subs	r3, #1
 8015096:	4631      	mov	r1, r6
 8015098:	4628      	mov	r0, r5
 801509a:	47b8      	blx	r7
 801509c:	3001      	adds	r0, #1
 801509e:	d10e      	bne.n	80150be <_printf_float+0x42a>
 80150a0:	e659      	b.n	8014d56 <_printf_float+0xc2>
 80150a2:	2301      	movs	r3, #1
 80150a4:	4652      	mov	r2, sl
 80150a6:	4631      	mov	r1, r6
 80150a8:	4628      	mov	r0, r5
 80150aa:	47b8      	blx	r7
 80150ac:	3001      	adds	r0, #1
 80150ae:	f43f ae52 	beq.w	8014d56 <_printf_float+0xc2>
 80150b2:	f108 0801 	add.w	r8, r8, #1
 80150b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150b8:	3b01      	subs	r3, #1
 80150ba:	4543      	cmp	r3, r8
 80150bc:	dcf1      	bgt.n	80150a2 <_printf_float+0x40e>
 80150be:	464b      	mov	r3, r9
 80150c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80150c4:	e6dc      	b.n	8014e80 <_printf_float+0x1ec>
 80150c6:	f04f 0800 	mov.w	r8, #0
 80150ca:	f104 0a1a 	add.w	sl, r4, #26
 80150ce:	e7f2      	b.n	80150b6 <_printf_float+0x422>
 80150d0:	2301      	movs	r3, #1
 80150d2:	4642      	mov	r2, r8
 80150d4:	e7df      	b.n	8015096 <_printf_float+0x402>
 80150d6:	2301      	movs	r3, #1
 80150d8:	464a      	mov	r2, r9
 80150da:	4631      	mov	r1, r6
 80150dc:	4628      	mov	r0, r5
 80150de:	47b8      	blx	r7
 80150e0:	3001      	adds	r0, #1
 80150e2:	f43f ae38 	beq.w	8014d56 <_printf_float+0xc2>
 80150e6:	f108 0801 	add.w	r8, r8, #1
 80150ea:	68e3      	ldr	r3, [r4, #12]
 80150ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150ee:	1a5b      	subs	r3, r3, r1
 80150f0:	4543      	cmp	r3, r8
 80150f2:	dcf0      	bgt.n	80150d6 <_printf_float+0x442>
 80150f4:	e6fa      	b.n	8014eec <_printf_float+0x258>
 80150f6:	f04f 0800 	mov.w	r8, #0
 80150fa:	f104 0919 	add.w	r9, r4, #25
 80150fe:	e7f4      	b.n	80150ea <_printf_float+0x456>

08015100 <_printf_common>:
 8015100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015104:	4616      	mov	r6, r2
 8015106:	4699      	mov	r9, r3
 8015108:	688a      	ldr	r2, [r1, #8]
 801510a:	690b      	ldr	r3, [r1, #16]
 801510c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015110:	4293      	cmp	r3, r2
 8015112:	bfb8      	it	lt
 8015114:	4613      	movlt	r3, r2
 8015116:	6033      	str	r3, [r6, #0]
 8015118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801511c:	4607      	mov	r7, r0
 801511e:	460c      	mov	r4, r1
 8015120:	b10a      	cbz	r2, 8015126 <_printf_common+0x26>
 8015122:	3301      	adds	r3, #1
 8015124:	6033      	str	r3, [r6, #0]
 8015126:	6823      	ldr	r3, [r4, #0]
 8015128:	0699      	lsls	r1, r3, #26
 801512a:	bf42      	ittt	mi
 801512c:	6833      	ldrmi	r3, [r6, #0]
 801512e:	3302      	addmi	r3, #2
 8015130:	6033      	strmi	r3, [r6, #0]
 8015132:	6825      	ldr	r5, [r4, #0]
 8015134:	f015 0506 	ands.w	r5, r5, #6
 8015138:	d106      	bne.n	8015148 <_printf_common+0x48>
 801513a:	f104 0a19 	add.w	sl, r4, #25
 801513e:	68e3      	ldr	r3, [r4, #12]
 8015140:	6832      	ldr	r2, [r6, #0]
 8015142:	1a9b      	subs	r3, r3, r2
 8015144:	42ab      	cmp	r3, r5
 8015146:	dc26      	bgt.n	8015196 <_printf_common+0x96>
 8015148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801514c:	1e13      	subs	r3, r2, #0
 801514e:	6822      	ldr	r2, [r4, #0]
 8015150:	bf18      	it	ne
 8015152:	2301      	movne	r3, #1
 8015154:	0692      	lsls	r2, r2, #26
 8015156:	d42b      	bmi.n	80151b0 <_printf_common+0xb0>
 8015158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801515c:	4649      	mov	r1, r9
 801515e:	4638      	mov	r0, r7
 8015160:	47c0      	blx	r8
 8015162:	3001      	adds	r0, #1
 8015164:	d01e      	beq.n	80151a4 <_printf_common+0xa4>
 8015166:	6823      	ldr	r3, [r4, #0]
 8015168:	68e5      	ldr	r5, [r4, #12]
 801516a:	6832      	ldr	r2, [r6, #0]
 801516c:	f003 0306 	and.w	r3, r3, #6
 8015170:	2b04      	cmp	r3, #4
 8015172:	bf08      	it	eq
 8015174:	1aad      	subeq	r5, r5, r2
 8015176:	68a3      	ldr	r3, [r4, #8]
 8015178:	6922      	ldr	r2, [r4, #16]
 801517a:	bf0c      	ite	eq
 801517c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015180:	2500      	movne	r5, #0
 8015182:	4293      	cmp	r3, r2
 8015184:	bfc4      	itt	gt
 8015186:	1a9b      	subgt	r3, r3, r2
 8015188:	18ed      	addgt	r5, r5, r3
 801518a:	2600      	movs	r6, #0
 801518c:	341a      	adds	r4, #26
 801518e:	42b5      	cmp	r5, r6
 8015190:	d11a      	bne.n	80151c8 <_printf_common+0xc8>
 8015192:	2000      	movs	r0, #0
 8015194:	e008      	b.n	80151a8 <_printf_common+0xa8>
 8015196:	2301      	movs	r3, #1
 8015198:	4652      	mov	r2, sl
 801519a:	4649      	mov	r1, r9
 801519c:	4638      	mov	r0, r7
 801519e:	47c0      	blx	r8
 80151a0:	3001      	adds	r0, #1
 80151a2:	d103      	bne.n	80151ac <_printf_common+0xac>
 80151a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80151a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ac:	3501      	adds	r5, #1
 80151ae:	e7c6      	b.n	801513e <_printf_common+0x3e>
 80151b0:	18e1      	adds	r1, r4, r3
 80151b2:	1c5a      	adds	r2, r3, #1
 80151b4:	2030      	movs	r0, #48	; 0x30
 80151b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80151ba:	4422      	add	r2, r4
 80151bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80151c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80151c4:	3302      	adds	r3, #2
 80151c6:	e7c7      	b.n	8015158 <_printf_common+0x58>
 80151c8:	2301      	movs	r3, #1
 80151ca:	4622      	mov	r2, r4
 80151cc:	4649      	mov	r1, r9
 80151ce:	4638      	mov	r0, r7
 80151d0:	47c0      	blx	r8
 80151d2:	3001      	adds	r0, #1
 80151d4:	d0e6      	beq.n	80151a4 <_printf_common+0xa4>
 80151d6:	3601      	adds	r6, #1
 80151d8:	e7d9      	b.n	801518e <_printf_common+0x8e>
	...

080151dc <_printf_i>:
 80151dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80151e0:	7e0f      	ldrb	r7, [r1, #24]
 80151e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80151e4:	2f78      	cmp	r7, #120	; 0x78
 80151e6:	4691      	mov	r9, r2
 80151e8:	4680      	mov	r8, r0
 80151ea:	460c      	mov	r4, r1
 80151ec:	469a      	mov	sl, r3
 80151ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80151f2:	d807      	bhi.n	8015204 <_printf_i+0x28>
 80151f4:	2f62      	cmp	r7, #98	; 0x62
 80151f6:	d80a      	bhi.n	801520e <_printf_i+0x32>
 80151f8:	2f00      	cmp	r7, #0
 80151fa:	f000 80d8 	beq.w	80153ae <_printf_i+0x1d2>
 80151fe:	2f58      	cmp	r7, #88	; 0x58
 8015200:	f000 80a3 	beq.w	801534a <_printf_i+0x16e>
 8015204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801520c:	e03a      	b.n	8015284 <_printf_i+0xa8>
 801520e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015212:	2b15      	cmp	r3, #21
 8015214:	d8f6      	bhi.n	8015204 <_printf_i+0x28>
 8015216:	a101      	add	r1, pc, #4	; (adr r1, 801521c <_printf_i+0x40>)
 8015218:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801521c:	08015275 	.word	0x08015275
 8015220:	08015289 	.word	0x08015289
 8015224:	08015205 	.word	0x08015205
 8015228:	08015205 	.word	0x08015205
 801522c:	08015205 	.word	0x08015205
 8015230:	08015205 	.word	0x08015205
 8015234:	08015289 	.word	0x08015289
 8015238:	08015205 	.word	0x08015205
 801523c:	08015205 	.word	0x08015205
 8015240:	08015205 	.word	0x08015205
 8015244:	08015205 	.word	0x08015205
 8015248:	08015395 	.word	0x08015395
 801524c:	080152b9 	.word	0x080152b9
 8015250:	08015377 	.word	0x08015377
 8015254:	08015205 	.word	0x08015205
 8015258:	08015205 	.word	0x08015205
 801525c:	080153b7 	.word	0x080153b7
 8015260:	08015205 	.word	0x08015205
 8015264:	080152b9 	.word	0x080152b9
 8015268:	08015205 	.word	0x08015205
 801526c:	08015205 	.word	0x08015205
 8015270:	0801537f 	.word	0x0801537f
 8015274:	682b      	ldr	r3, [r5, #0]
 8015276:	1d1a      	adds	r2, r3, #4
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	602a      	str	r2, [r5, #0]
 801527c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015284:	2301      	movs	r3, #1
 8015286:	e0a3      	b.n	80153d0 <_printf_i+0x1f4>
 8015288:	6820      	ldr	r0, [r4, #0]
 801528a:	6829      	ldr	r1, [r5, #0]
 801528c:	0606      	lsls	r6, r0, #24
 801528e:	f101 0304 	add.w	r3, r1, #4
 8015292:	d50a      	bpl.n	80152aa <_printf_i+0xce>
 8015294:	680e      	ldr	r6, [r1, #0]
 8015296:	602b      	str	r3, [r5, #0]
 8015298:	2e00      	cmp	r6, #0
 801529a:	da03      	bge.n	80152a4 <_printf_i+0xc8>
 801529c:	232d      	movs	r3, #45	; 0x2d
 801529e:	4276      	negs	r6, r6
 80152a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80152a4:	485e      	ldr	r0, [pc, #376]	; (8015420 <_printf_i+0x244>)
 80152a6:	230a      	movs	r3, #10
 80152a8:	e019      	b.n	80152de <_printf_i+0x102>
 80152aa:	680e      	ldr	r6, [r1, #0]
 80152ac:	602b      	str	r3, [r5, #0]
 80152ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80152b2:	bf18      	it	ne
 80152b4:	b236      	sxthne	r6, r6
 80152b6:	e7ef      	b.n	8015298 <_printf_i+0xbc>
 80152b8:	682b      	ldr	r3, [r5, #0]
 80152ba:	6820      	ldr	r0, [r4, #0]
 80152bc:	1d19      	adds	r1, r3, #4
 80152be:	6029      	str	r1, [r5, #0]
 80152c0:	0601      	lsls	r1, r0, #24
 80152c2:	d501      	bpl.n	80152c8 <_printf_i+0xec>
 80152c4:	681e      	ldr	r6, [r3, #0]
 80152c6:	e002      	b.n	80152ce <_printf_i+0xf2>
 80152c8:	0646      	lsls	r6, r0, #25
 80152ca:	d5fb      	bpl.n	80152c4 <_printf_i+0xe8>
 80152cc:	881e      	ldrh	r6, [r3, #0]
 80152ce:	4854      	ldr	r0, [pc, #336]	; (8015420 <_printf_i+0x244>)
 80152d0:	2f6f      	cmp	r7, #111	; 0x6f
 80152d2:	bf0c      	ite	eq
 80152d4:	2308      	moveq	r3, #8
 80152d6:	230a      	movne	r3, #10
 80152d8:	2100      	movs	r1, #0
 80152da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80152de:	6865      	ldr	r5, [r4, #4]
 80152e0:	60a5      	str	r5, [r4, #8]
 80152e2:	2d00      	cmp	r5, #0
 80152e4:	bfa2      	ittt	ge
 80152e6:	6821      	ldrge	r1, [r4, #0]
 80152e8:	f021 0104 	bicge.w	r1, r1, #4
 80152ec:	6021      	strge	r1, [r4, #0]
 80152ee:	b90e      	cbnz	r6, 80152f4 <_printf_i+0x118>
 80152f0:	2d00      	cmp	r5, #0
 80152f2:	d04d      	beq.n	8015390 <_printf_i+0x1b4>
 80152f4:	4615      	mov	r5, r2
 80152f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80152fa:	fb03 6711 	mls	r7, r3, r1, r6
 80152fe:	5dc7      	ldrb	r7, [r0, r7]
 8015300:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015304:	4637      	mov	r7, r6
 8015306:	42bb      	cmp	r3, r7
 8015308:	460e      	mov	r6, r1
 801530a:	d9f4      	bls.n	80152f6 <_printf_i+0x11a>
 801530c:	2b08      	cmp	r3, #8
 801530e:	d10b      	bne.n	8015328 <_printf_i+0x14c>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	07de      	lsls	r6, r3, #31
 8015314:	d508      	bpl.n	8015328 <_printf_i+0x14c>
 8015316:	6923      	ldr	r3, [r4, #16]
 8015318:	6861      	ldr	r1, [r4, #4]
 801531a:	4299      	cmp	r1, r3
 801531c:	bfde      	ittt	le
 801531e:	2330      	movle	r3, #48	; 0x30
 8015320:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015324:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015328:	1b52      	subs	r2, r2, r5
 801532a:	6122      	str	r2, [r4, #16]
 801532c:	f8cd a000 	str.w	sl, [sp]
 8015330:	464b      	mov	r3, r9
 8015332:	aa03      	add	r2, sp, #12
 8015334:	4621      	mov	r1, r4
 8015336:	4640      	mov	r0, r8
 8015338:	f7ff fee2 	bl	8015100 <_printf_common>
 801533c:	3001      	adds	r0, #1
 801533e:	d14c      	bne.n	80153da <_printf_i+0x1fe>
 8015340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015344:	b004      	add	sp, #16
 8015346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801534a:	4835      	ldr	r0, [pc, #212]	; (8015420 <_printf_i+0x244>)
 801534c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015350:	6829      	ldr	r1, [r5, #0]
 8015352:	6823      	ldr	r3, [r4, #0]
 8015354:	f851 6b04 	ldr.w	r6, [r1], #4
 8015358:	6029      	str	r1, [r5, #0]
 801535a:	061d      	lsls	r5, r3, #24
 801535c:	d514      	bpl.n	8015388 <_printf_i+0x1ac>
 801535e:	07df      	lsls	r7, r3, #31
 8015360:	bf44      	itt	mi
 8015362:	f043 0320 	orrmi.w	r3, r3, #32
 8015366:	6023      	strmi	r3, [r4, #0]
 8015368:	b91e      	cbnz	r6, 8015372 <_printf_i+0x196>
 801536a:	6823      	ldr	r3, [r4, #0]
 801536c:	f023 0320 	bic.w	r3, r3, #32
 8015370:	6023      	str	r3, [r4, #0]
 8015372:	2310      	movs	r3, #16
 8015374:	e7b0      	b.n	80152d8 <_printf_i+0xfc>
 8015376:	6823      	ldr	r3, [r4, #0]
 8015378:	f043 0320 	orr.w	r3, r3, #32
 801537c:	6023      	str	r3, [r4, #0]
 801537e:	2378      	movs	r3, #120	; 0x78
 8015380:	4828      	ldr	r0, [pc, #160]	; (8015424 <_printf_i+0x248>)
 8015382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015386:	e7e3      	b.n	8015350 <_printf_i+0x174>
 8015388:	0659      	lsls	r1, r3, #25
 801538a:	bf48      	it	mi
 801538c:	b2b6      	uxthmi	r6, r6
 801538e:	e7e6      	b.n	801535e <_printf_i+0x182>
 8015390:	4615      	mov	r5, r2
 8015392:	e7bb      	b.n	801530c <_printf_i+0x130>
 8015394:	682b      	ldr	r3, [r5, #0]
 8015396:	6826      	ldr	r6, [r4, #0]
 8015398:	6961      	ldr	r1, [r4, #20]
 801539a:	1d18      	adds	r0, r3, #4
 801539c:	6028      	str	r0, [r5, #0]
 801539e:	0635      	lsls	r5, r6, #24
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	d501      	bpl.n	80153a8 <_printf_i+0x1cc>
 80153a4:	6019      	str	r1, [r3, #0]
 80153a6:	e002      	b.n	80153ae <_printf_i+0x1d2>
 80153a8:	0670      	lsls	r0, r6, #25
 80153aa:	d5fb      	bpl.n	80153a4 <_printf_i+0x1c8>
 80153ac:	8019      	strh	r1, [r3, #0]
 80153ae:	2300      	movs	r3, #0
 80153b0:	6123      	str	r3, [r4, #16]
 80153b2:	4615      	mov	r5, r2
 80153b4:	e7ba      	b.n	801532c <_printf_i+0x150>
 80153b6:	682b      	ldr	r3, [r5, #0]
 80153b8:	1d1a      	adds	r2, r3, #4
 80153ba:	602a      	str	r2, [r5, #0]
 80153bc:	681d      	ldr	r5, [r3, #0]
 80153be:	6862      	ldr	r2, [r4, #4]
 80153c0:	2100      	movs	r1, #0
 80153c2:	4628      	mov	r0, r5
 80153c4:	f7ea ff1c 	bl	8000200 <memchr>
 80153c8:	b108      	cbz	r0, 80153ce <_printf_i+0x1f2>
 80153ca:	1b40      	subs	r0, r0, r5
 80153cc:	6060      	str	r0, [r4, #4]
 80153ce:	6863      	ldr	r3, [r4, #4]
 80153d0:	6123      	str	r3, [r4, #16]
 80153d2:	2300      	movs	r3, #0
 80153d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80153d8:	e7a8      	b.n	801532c <_printf_i+0x150>
 80153da:	6923      	ldr	r3, [r4, #16]
 80153dc:	462a      	mov	r2, r5
 80153de:	4649      	mov	r1, r9
 80153e0:	4640      	mov	r0, r8
 80153e2:	47d0      	blx	sl
 80153e4:	3001      	adds	r0, #1
 80153e6:	d0ab      	beq.n	8015340 <_printf_i+0x164>
 80153e8:	6823      	ldr	r3, [r4, #0]
 80153ea:	079b      	lsls	r3, r3, #30
 80153ec:	d413      	bmi.n	8015416 <_printf_i+0x23a>
 80153ee:	68e0      	ldr	r0, [r4, #12]
 80153f0:	9b03      	ldr	r3, [sp, #12]
 80153f2:	4298      	cmp	r0, r3
 80153f4:	bfb8      	it	lt
 80153f6:	4618      	movlt	r0, r3
 80153f8:	e7a4      	b.n	8015344 <_printf_i+0x168>
 80153fa:	2301      	movs	r3, #1
 80153fc:	4632      	mov	r2, r6
 80153fe:	4649      	mov	r1, r9
 8015400:	4640      	mov	r0, r8
 8015402:	47d0      	blx	sl
 8015404:	3001      	adds	r0, #1
 8015406:	d09b      	beq.n	8015340 <_printf_i+0x164>
 8015408:	3501      	adds	r5, #1
 801540a:	68e3      	ldr	r3, [r4, #12]
 801540c:	9903      	ldr	r1, [sp, #12]
 801540e:	1a5b      	subs	r3, r3, r1
 8015410:	42ab      	cmp	r3, r5
 8015412:	dcf2      	bgt.n	80153fa <_printf_i+0x21e>
 8015414:	e7eb      	b.n	80153ee <_printf_i+0x212>
 8015416:	2500      	movs	r5, #0
 8015418:	f104 0619 	add.w	r6, r4, #25
 801541c:	e7f5      	b.n	801540a <_printf_i+0x22e>
 801541e:	bf00      	nop
 8015420:	0808c6b6 	.word	0x0808c6b6
 8015424:	0808c6c7 	.word	0x0808c6c7

08015428 <_scanf_float>:
 8015428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801542c:	b087      	sub	sp, #28
 801542e:	4617      	mov	r7, r2
 8015430:	9303      	str	r3, [sp, #12]
 8015432:	688b      	ldr	r3, [r1, #8]
 8015434:	1e5a      	subs	r2, r3, #1
 8015436:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801543a:	bf83      	ittte	hi
 801543c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015440:	195b      	addhi	r3, r3, r5
 8015442:	9302      	strhi	r3, [sp, #8]
 8015444:	2300      	movls	r3, #0
 8015446:	bf86      	itte	hi
 8015448:	f240 135d 	movwhi	r3, #349	; 0x15d
 801544c:	608b      	strhi	r3, [r1, #8]
 801544e:	9302      	strls	r3, [sp, #8]
 8015450:	680b      	ldr	r3, [r1, #0]
 8015452:	468b      	mov	fp, r1
 8015454:	2500      	movs	r5, #0
 8015456:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801545a:	f84b 3b1c 	str.w	r3, [fp], #28
 801545e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015462:	4680      	mov	r8, r0
 8015464:	460c      	mov	r4, r1
 8015466:	465e      	mov	r6, fp
 8015468:	46aa      	mov	sl, r5
 801546a:	46a9      	mov	r9, r5
 801546c:	9501      	str	r5, [sp, #4]
 801546e:	68a2      	ldr	r2, [r4, #8]
 8015470:	b152      	cbz	r2, 8015488 <_scanf_float+0x60>
 8015472:	683b      	ldr	r3, [r7, #0]
 8015474:	781b      	ldrb	r3, [r3, #0]
 8015476:	2b4e      	cmp	r3, #78	; 0x4e
 8015478:	d864      	bhi.n	8015544 <_scanf_float+0x11c>
 801547a:	2b40      	cmp	r3, #64	; 0x40
 801547c:	d83c      	bhi.n	80154f8 <_scanf_float+0xd0>
 801547e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015482:	b2c8      	uxtb	r0, r1
 8015484:	280e      	cmp	r0, #14
 8015486:	d93a      	bls.n	80154fe <_scanf_float+0xd6>
 8015488:	f1b9 0f00 	cmp.w	r9, #0
 801548c:	d003      	beq.n	8015496 <_scanf_float+0x6e>
 801548e:	6823      	ldr	r3, [r4, #0]
 8015490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015494:	6023      	str	r3, [r4, #0]
 8015496:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801549a:	f1ba 0f01 	cmp.w	sl, #1
 801549e:	f200 8113 	bhi.w	80156c8 <_scanf_float+0x2a0>
 80154a2:	455e      	cmp	r6, fp
 80154a4:	f200 8105 	bhi.w	80156b2 <_scanf_float+0x28a>
 80154a8:	2501      	movs	r5, #1
 80154aa:	4628      	mov	r0, r5
 80154ac:	b007      	add	sp, #28
 80154ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80154b6:	2a0d      	cmp	r2, #13
 80154b8:	d8e6      	bhi.n	8015488 <_scanf_float+0x60>
 80154ba:	a101      	add	r1, pc, #4	; (adr r1, 80154c0 <_scanf_float+0x98>)
 80154bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80154c0:	080155ff 	.word	0x080155ff
 80154c4:	08015489 	.word	0x08015489
 80154c8:	08015489 	.word	0x08015489
 80154cc:	08015489 	.word	0x08015489
 80154d0:	0801565f 	.word	0x0801565f
 80154d4:	08015637 	.word	0x08015637
 80154d8:	08015489 	.word	0x08015489
 80154dc:	08015489 	.word	0x08015489
 80154e0:	0801560d 	.word	0x0801560d
 80154e4:	08015489 	.word	0x08015489
 80154e8:	08015489 	.word	0x08015489
 80154ec:	08015489 	.word	0x08015489
 80154f0:	08015489 	.word	0x08015489
 80154f4:	080155c5 	.word	0x080155c5
 80154f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80154fc:	e7db      	b.n	80154b6 <_scanf_float+0x8e>
 80154fe:	290e      	cmp	r1, #14
 8015500:	d8c2      	bhi.n	8015488 <_scanf_float+0x60>
 8015502:	a001      	add	r0, pc, #4	; (adr r0, 8015508 <_scanf_float+0xe0>)
 8015504:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015508:	080155b7 	.word	0x080155b7
 801550c:	08015489 	.word	0x08015489
 8015510:	080155b7 	.word	0x080155b7
 8015514:	0801564b 	.word	0x0801564b
 8015518:	08015489 	.word	0x08015489
 801551c:	08015565 	.word	0x08015565
 8015520:	080155a1 	.word	0x080155a1
 8015524:	080155a1 	.word	0x080155a1
 8015528:	080155a1 	.word	0x080155a1
 801552c:	080155a1 	.word	0x080155a1
 8015530:	080155a1 	.word	0x080155a1
 8015534:	080155a1 	.word	0x080155a1
 8015538:	080155a1 	.word	0x080155a1
 801553c:	080155a1 	.word	0x080155a1
 8015540:	080155a1 	.word	0x080155a1
 8015544:	2b6e      	cmp	r3, #110	; 0x6e
 8015546:	d809      	bhi.n	801555c <_scanf_float+0x134>
 8015548:	2b60      	cmp	r3, #96	; 0x60
 801554a:	d8b2      	bhi.n	80154b2 <_scanf_float+0x8a>
 801554c:	2b54      	cmp	r3, #84	; 0x54
 801554e:	d077      	beq.n	8015640 <_scanf_float+0x218>
 8015550:	2b59      	cmp	r3, #89	; 0x59
 8015552:	d199      	bne.n	8015488 <_scanf_float+0x60>
 8015554:	2d07      	cmp	r5, #7
 8015556:	d197      	bne.n	8015488 <_scanf_float+0x60>
 8015558:	2508      	movs	r5, #8
 801555a:	e029      	b.n	80155b0 <_scanf_float+0x188>
 801555c:	2b74      	cmp	r3, #116	; 0x74
 801555e:	d06f      	beq.n	8015640 <_scanf_float+0x218>
 8015560:	2b79      	cmp	r3, #121	; 0x79
 8015562:	e7f6      	b.n	8015552 <_scanf_float+0x12a>
 8015564:	6821      	ldr	r1, [r4, #0]
 8015566:	05c8      	lsls	r0, r1, #23
 8015568:	d51a      	bpl.n	80155a0 <_scanf_float+0x178>
 801556a:	9b02      	ldr	r3, [sp, #8]
 801556c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015570:	6021      	str	r1, [r4, #0]
 8015572:	f109 0901 	add.w	r9, r9, #1
 8015576:	b11b      	cbz	r3, 8015580 <_scanf_float+0x158>
 8015578:	3b01      	subs	r3, #1
 801557a:	3201      	adds	r2, #1
 801557c:	9302      	str	r3, [sp, #8]
 801557e:	60a2      	str	r2, [r4, #8]
 8015580:	68a3      	ldr	r3, [r4, #8]
 8015582:	3b01      	subs	r3, #1
 8015584:	60a3      	str	r3, [r4, #8]
 8015586:	6923      	ldr	r3, [r4, #16]
 8015588:	3301      	adds	r3, #1
 801558a:	6123      	str	r3, [r4, #16]
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	3b01      	subs	r3, #1
 8015590:	2b00      	cmp	r3, #0
 8015592:	607b      	str	r3, [r7, #4]
 8015594:	f340 8084 	ble.w	80156a0 <_scanf_float+0x278>
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	3301      	adds	r3, #1
 801559c:	603b      	str	r3, [r7, #0]
 801559e:	e766      	b.n	801546e <_scanf_float+0x46>
 80155a0:	eb1a 0f05 	cmn.w	sl, r5
 80155a4:	f47f af70 	bne.w	8015488 <_scanf_float+0x60>
 80155a8:	6822      	ldr	r2, [r4, #0]
 80155aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80155ae:	6022      	str	r2, [r4, #0]
 80155b0:	f806 3b01 	strb.w	r3, [r6], #1
 80155b4:	e7e4      	b.n	8015580 <_scanf_float+0x158>
 80155b6:	6822      	ldr	r2, [r4, #0]
 80155b8:	0610      	lsls	r0, r2, #24
 80155ba:	f57f af65 	bpl.w	8015488 <_scanf_float+0x60>
 80155be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80155c2:	e7f4      	b.n	80155ae <_scanf_float+0x186>
 80155c4:	f1ba 0f00 	cmp.w	sl, #0
 80155c8:	d10e      	bne.n	80155e8 <_scanf_float+0x1c0>
 80155ca:	f1b9 0f00 	cmp.w	r9, #0
 80155ce:	d10e      	bne.n	80155ee <_scanf_float+0x1c6>
 80155d0:	6822      	ldr	r2, [r4, #0]
 80155d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80155d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80155da:	d108      	bne.n	80155ee <_scanf_float+0x1c6>
 80155dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80155e0:	6022      	str	r2, [r4, #0]
 80155e2:	f04f 0a01 	mov.w	sl, #1
 80155e6:	e7e3      	b.n	80155b0 <_scanf_float+0x188>
 80155e8:	f1ba 0f02 	cmp.w	sl, #2
 80155ec:	d055      	beq.n	801569a <_scanf_float+0x272>
 80155ee:	2d01      	cmp	r5, #1
 80155f0:	d002      	beq.n	80155f8 <_scanf_float+0x1d0>
 80155f2:	2d04      	cmp	r5, #4
 80155f4:	f47f af48 	bne.w	8015488 <_scanf_float+0x60>
 80155f8:	3501      	adds	r5, #1
 80155fa:	b2ed      	uxtb	r5, r5
 80155fc:	e7d8      	b.n	80155b0 <_scanf_float+0x188>
 80155fe:	f1ba 0f01 	cmp.w	sl, #1
 8015602:	f47f af41 	bne.w	8015488 <_scanf_float+0x60>
 8015606:	f04f 0a02 	mov.w	sl, #2
 801560a:	e7d1      	b.n	80155b0 <_scanf_float+0x188>
 801560c:	b97d      	cbnz	r5, 801562e <_scanf_float+0x206>
 801560e:	f1b9 0f00 	cmp.w	r9, #0
 8015612:	f47f af3c 	bne.w	801548e <_scanf_float+0x66>
 8015616:	6822      	ldr	r2, [r4, #0]
 8015618:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801561c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015620:	f47f af39 	bne.w	8015496 <_scanf_float+0x6e>
 8015624:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015628:	6022      	str	r2, [r4, #0]
 801562a:	2501      	movs	r5, #1
 801562c:	e7c0      	b.n	80155b0 <_scanf_float+0x188>
 801562e:	2d03      	cmp	r5, #3
 8015630:	d0e2      	beq.n	80155f8 <_scanf_float+0x1d0>
 8015632:	2d05      	cmp	r5, #5
 8015634:	e7de      	b.n	80155f4 <_scanf_float+0x1cc>
 8015636:	2d02      	cmp	r5, #2
 8015638:	f47f af26 	bne.w	8015488 <_scanf_float+0x60>
 801563c:	2503      	movs	r5, #3
 801563e:	e7b7      	b.n	80155b0 <_scanf_float+0x188>
 8015640:	2d06      	cmp	r5, #6
 8015642:	f47f af21 	bne.w	8015488 <_scanf_float+0x60>
 8015646:	2507      	movs	r5, #7
 8015648:	e7b2      	b.n	80155b0 <_scanf_float+0x188>
 801564a:	6822      	ldr	r2, [r4, #0]
 801564c:	0591      	lsls	r1, r2, #22
 801564e:	f57f af1b 	bpl.w	8015488 <_scanf_float+0x60>
 8015652:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8015656:	6022      	str	r2, [r4, #0]
 8015658:	f8cd 9004 	str.w	r9, [sp, #4]
 801565c:	e7a8      	b.n	80155b0 <_scanf_float+0x188>
 801565e:	6822      	ldr	r2, [r4, #0]
 8015660:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8015664:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8015668:	d006      	beq.n	8015678 <_scanf_float+0x250>
 801566a:	0550      	lsls	r0, r2, #21
 801566c:	f57f af0c 	bpl.w	8015488 <_scanf_float+0x60>
 8015670:	f1b9 0f00 	cmp.w	r9, #0
 8015674:	f43f af0f 	beq.w	8015496 <_scanf_float+0x6e>
 8015678:	0591      	lsls	r1, r2, #22
 801567a:	bf58      	it	pl
 801567c:	9901      	ldrpl	r1, [sp, #4]
 801567e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015682:	bf58      	it	pl
 8015684:	eba9 0101 	subpl.w	r1, r9, r1
 8015688:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801568c:	bf58      	it	pl
 801568e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8015692:	6022      	str	r2, [r4, #0]
 8015694:	f04f 0900 	mov.w	r9, #0
 8015698:	e78a      	b.n	80155b0 <_scanf_float+0x188>
 801569a:	f04f 0a03 	mov.w	sl, #3
 801569e:	e787      	b.n	80155b0 <_scanf_float+0x188>
 80156a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80156a4:	4639      	mov	r1, r7
 80156a6:	4640      	mov	r0, r8
 80156a8:	4798      	blx	r3
 80156aa:	2800      	cmp	r0, #0
 80156ac:	f43f aedf 	beq.w	801546e <_scanf_float+0x46>
 80156b0:	e6ea      	b.n	8015488 <_scanf_float+0x60>
 80156b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80156b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80156ba:	463a      	mov	r2, r7
 80156bc:	4640      	mov	r0, r8
 80156be:	4798      	blx	r3
 80156c0:	6923      	ldr	r3, [r4, #16]
 80156c2:	3b01      	subs	r3, #1
 80156c4:	6123      	str	r3, [r4, #16]
 80156c6:	e6ec      	b.n	80154a2 <_scanf_float+0x7a>
 80156c8:	1e6b      	subs	r3, r5, #1
 80156ca:	2b06      	cmp	r3, #6
 80156cc:	d825      	bhi.n	801571a <_scanf_float+0x2f2>
 80156ce:	2d02      	cmp	r5, #2
 80156d0:	d836      	bhi.n	8015740 <_scanf_float+0x318>
 80156d2:	455e      	cmp	r6, fp
 80156d4:	f67f aee8 	bls.w	80154a8 <_scanf_float+0x80>
 80156d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80156dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80156e0:	463a      	mov	r2, r7
 80156e2:	4640      	mov	r0, r8
 80156e4:	4798      	blx	r3
 80156e6:	6923      	ldr	r3, [r4, #16]
 80156e8:	3b01      	subs	r3, #1
 80156ea:	6123      	str	r3, [r4, #16]
 80156ec:	e7f1      	b.n	80156d2 <_scanf_float+0x2aa>
 80156ee:	9802      	ldr	r0, [sp, #8]
 80156f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80156f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80156f8:	9002      	str	r0, [sp, #8]
 80156fa:	463a      	mov	r2, r7
 80156fc:	4640      	mov	r0, r8
 80156fe:	4798      	blx	r3
 8015700:	6923      	ldr	r3, [r4, #16]
 8015702:	3b01      	subs	r3, #1
 8015704:	6123      	str	r3, [r4, #16]
 8015706:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801570a:	fa5f fa8a 	uxtb.w	sl, sl
 801570e:	f1ba 0f02 	cmp.w	sl, #2
 8015712:	d1ec      	bne.n	80156ee <_scanf_float+0x2c6>
 8015714:	3d03      	subs	r5, #3
 8015716:	b2ed      	uxtb	r5, r5
 8015718:	1b76      	subs	r6, r6, r5
 801571a:	6823      	ldr	r3, [r4, #0]
 801571c:	05da      	lsls	r2, r3, #23
 801571e:	d52f      	bpl.n	8015780 <_scanf_float+0x358>
 8015720:	055b      	lsls	r3, r3, #21
 8015722:	d510      	bpl.n	8015746 <_scanf_float+0x31e>
 8015724:	455e      	cmp	r6, fp
 8015726:	f67f aebf 	bls.w	80154a8 <_scanf_float+0x80>
 801572a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801572e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015732:	463a      	mov	r2, r7
 8015734:	4640      	mov	r0, r8
 8015736:	4798      	blx	r3
 8015738:	6923      	ldr	r3, [r4, #16]
 801573a:	3b01      	subs	r3, #1
 801573c:	6123      	str	r3, [r4, #16]
 801573e:	e7f1      	b.n	8015724 <_scanf_float+0x2fc>
 8015740:	46aa      	mov	sl, r5
 8015742:	9602      	str	r6, [sp, #8]
 8015744:	e7df      	b.n	8015706 <_scanf_float+0x2de>
 8015746:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801574a:	6923      	ldr	r3, [r4, #16]
 801574c:	2965      	cmp	r1, #101	; 0x65
 801574e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015752:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8015756:	6123      	str	r3, [r4, #16]
 8015758:	d00c      	beq.n	8015774 <_scanf_float+0x34c>
 801575a:	2945      	cmp	r1, #69	; 0x45
 801575c:	d00a      	beq.n	8015774 <_scanf_float+0x34c>
 801575e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015762:	463a      	mov	r2, r7
 8015764:	4640      	mov	r0, r8
 8015766:	4798      	blx	r3
 8015768:	6923      	ldr	r3, [r4, #16]
 801576a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801576e:	3b01      	subs	r3, #1
 8015770:	1eb5      	subs	r5, r6, #2
 8015772:	6123      	str	r3, [r4, #16]
 8015774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015778:	463a      	mov	r2, r7
 801577a:	4640      	mov	r0, r8
 801577c:	4798      	blx	r3
 801577e:	462e      	mov	r6, r5
 8015780:	6825      	ldr	r5, [r4, #0]
 8015782:	f015 0510 	ands.w	r5, r5, #16
 8015786:	d159      	bne.n	801583c <_scanf_float+0x414>
 8015788:	7035      	strb	r5, [r6, #0]
 801578a:	6823      	ldr	r3, [r4, #0]
 801578c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015794:	d11b      	bne.n	80157ce <_scanf_float+0x3a6>
 8015796:	9b01      	ldr	r3, [sp, #4]
 8015798:	454b      	cmp	r3, r9
 801579a:	eba3 0209 	sub.w	r2, r3, r9
 801579e:	d123      	bne.n	80157e8 <_scanf_float+0x3c0>
 80157a0:	2200      	movs	r2, #0
 80157a2:	4659      	mov	r1, fp
 80157a4:	4640      	mov	r0, r8
 80157a6:	f000 ff1d 	bl	80165e4 <_strtod_r>
 80157aa:	6822      	ldr	r2, [r4, #0]
 80157ac:	9b03      	ldr	r3, [sp, #12]
 80157ae:	f012 0f02 	tst.w	r2, #2
 80157b2:	ec57 6b10 	vmov	r6, r7, d0
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	d021      	beq.n	80157fe <_scanf_float+0x3d6>
 80157ba:	9903      	ldr	r1, [sp, #12]
 80157bc:	1d1a      	adds	r2, r3, #4
 80157be:	600a      	str	r2, [r1, #0]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	e9c3 6700 	strd	r6, r7, [r3]
 80157c6:	68e3      	ldr	r3, [r4, #12]
 80157c8:	3301      	adds	r3, #1
 80157ca:	60e3      	str	r3, [r4, #12]
 80157cc:	e66d      	b.n	80154aa <_scanf_float+0x82>
 80157ce:	9b04      	ldr	r3, [sp, #16]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d0e5      	beq.n	80157a0 <_scanf_float+0x378>
 80157d4:	9905      	ldr	r1, [sp, #20]
 80157d6:	230a      	movs	r3, #10
 80157d8:	462a      	mov	r2, r5
 80157da:	3101      	adds	r1, #1
 80157dc:	4640      	mov	r0, r8
 80157de:	f000 fff1 	bl	80167c4 <_strtol_r>
 80157e2:	9b04      	ldr	r3, [sp, #16]
 80157e4:	9e05      	ldr	r6, [sp, #20]
 80157e6:	1ac2      	subs	r2, r0, r3
 80157e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80157ec:	429e      	cmp	r6, r3
 80157ee:	bf28      	it	cs
 80157f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80157f4:	4912      	ldr	r1, [pc, #72]	; (8015840 <_scanf_float+0x418>)
 80157f6:	4630      	mov	r0, r6
 80157f8:	f000 f8b2 	bl	8015960 <siprintf>
 80157fc:	e7d0      	b.n	80157a0 <_scanf_float+0x378>
 80157fe:	9903      	ldr	r1, [sp, #12]
 8015800:	f012 0f04 	tst.w	r2, #4
 8015804:	f103 0204 	add.w	r2, r3, #4
 8015808:	600a      	str	r2, [r1, #0]
 801580a:	d1d9      	bne.n	80157c0 <_scanf_float+0x398>
 801580c:	f8d3 8000 	ldr.w	r8, [r3]
 8015810:	ee10 2a10 	vmov	r2, s0
 8015814:	ee10 0a10 	vmov	r0, s0
 8015818:	463b      	mov	r3, r7
 801581a:	4639      	mov	r1, r7
 801581c:	f7eb f996 	bl	8000b4c <__aeabi_dcmpun>
 8015820:	b128      	cbz	r0, 801582e <_scanf_float+0x406>
 8015822:	4808      	ldr	r0, [pc, #32]	; (8015844 <_scanf_float+0x41c>)
 8015824:	f000 f896 	bl	8015954 <nanf>
 8015828:	ed88 0a00 	vstr	s0, [r8]
 801582c:	e7cb      	b.n	80157c6 <_scanf_float+0x39e>
 801582e:	4630      	mov	r0, r6
 8015830:	4639      	mov	r1, r7
 8015832:	f7eb f9e9 	bl	8000c08 <__aeabi_d2f>
 8015836:	f8c8 0000 	str.w	r0, [r8]
 801583a:	e7c4      	b.n	80157c6 <_scanf_float+0x39e>
 801583c:	2500      	movs	r5, #0
 801583e:	e634      	b.n	80154aa <_scanf_float+0x82>
 8015840:	0808c6d8 	.word	0x0808c6d8
 8015844:	0808c7df 	.word	0x0808c7df

08015848 <_puts_r>:
 8015848:	b570      	push	{r4, r5, r6, lr}
 801584a:	460e      	mov	r6, r1
 801584c:	4605      	mov	r5, r0
 801584e:	b118      	cbz	r0, 8015858 <_puts_r+0x10>
 8015850:	6983      	ldr	r3, [r0, #24]
 8015852:	b90b      	cbnz	r3, 8015858 <_puts_r+0x10>
 8015854:	f002 f82c 	bl	80178b0 <__sinit>
 8015858:	69ab      	ldr	r3, [r5, #24]
 801585a:	68ac      	ldr	r4, [r5, #8]
 801585c:	b913      	cbnz	r3, 8015864 <_puts_r+0x1c>
 801585e:	4628      	mov	r0, r5
 8015860:	f002 f826 	bl	80178b0 <__sinit>
 8015864:	4b2c      	ldr	r3, [pc, #176]	; (8015918 <_puts_r+0xd0>)
 8015866:	429c      	cmp	r4, r3
 8015868:	d120      	bne.n	80158ac <_puts_r+0x64>
 801586a:	686c      	ldr	r4, [r5, #4]
 801586c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801586e:	07db      	lsls	r3, r3, #31
 8015870:	d405      	bmi.n	801587e <_puts_r+0x36>
 8015872:	89a3      	ldrh	r3, [r4, #12]
 8015874:	0598      	lsls	r0, r3, #22
 8015876:	d402      	bmi.n	801587e <_puts_r+0x36>
 8015878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801587a:	f002 fc3c 	bl	80180f6 <__retarget_lock_acquire_recursive>
 801587e:	89a3      	ldrh	r3, [r4, #12]
 8015880:	0719      	lsls	r1, r3, #28
 8015882:	d51d      	bpl.n	80158c0 <_puts_r+0x78>
 8015884:	6923      	ldr	r3, [r4, #16]
 8015886:	b1db      	cbz	r3, 80158c0 <_puts_r+0x78>
 8015888:	3e01      	subs	r6, #1
 801588a:	68a3      	ldr	r3, [r4, #8]
 801588c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015890:	3b01      	subs	r3, #1
 8015892:	60a3      	str	r3, [r4, #8]
 8015894:	bb39      	cbnz	r1, 80158e6 <_puts_r+0x9e>
 8015896:	2b00      	cmp	r3, #0
 8015898:	da38      	bge.n	801590c <_puts_r+0xc4>
 801589a:	4622      	mov	r2, r4
 801589c:	210a      	movs	r1, #10
 801589e:	4628      	mov	r0, r5
 80158a0:	f000 ff92 	bl	80167c8 <__swbuf_r>
 80158a4:	3001      	adds	r0, #1
 80158a6:	d011      	beq.n	80158cc <_puts_r+0x84>
 80158a8:	250a      	movs	r5, #10
 80158aa:	e011      	b.n	80158d0 <_puts_r+0x88>
 80158ac:	4b1b      	ldr	r3, [pc, #108]	; (801591c <_puts_r+0xd4>)
 80158ae:	429c      	cmp	r4, r3
 80158b0:	d101      	bne.n	80158b6 <_puts_r+0x6e>
 80158b2:	68ac      	ldr	r4, [r5, #8]
 80158b4:	e7da      	b.n	801586c <_puts_r+0x24>
 80158b6:	4b1a      	ldr	r3, [pc, #104]	; (8015920 <_puts_r+0xd8>)
 80158b8:	429c      	cmp	r4, r3
 80158ba:	bf08      	it	eq
 80158bc:	68ec      	ldreq	r4, [r5, #12]
 80158be:	e7d5      	b.n	801586c <_puts_r+0x24>
 80158c0:	4621      	mov	r1, r4
 80158c2:	4628      	mov	r0, r5
 80158c4:	f000 ffd2 	bl	801686c <__swsetup_r>
 80158c8:	2800      	cmp	r0, #0
 80158ca:	d0dd      	beq.n	8015888 <_puts_r+0x40>
 80158cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80158d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80158d2:	07da      	lsls	r2, r3, #31
 80158d4:	d405      	bmi.n	80158e2 <_puts_r+0x9a>
 80158d6:	89a3      	ldrh	r3, [r4, #12]
 80158d8:	059b      	lsls	r3, r3, #22
 80158da:	d402      	bmi.n	80158e2 <_puts_r+0x9a>
 80158dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80158de:	f002 fc0b 	bl	80180f8 <__retarget_lock_release_recursive>
 80158e2:	4628      	mov	r0, r5
 80158e4:	bd70      	pop	{r4, r5, r6, pc}
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	da04      	bge.n	80158f4 <_puts_r+0xac>
 80158ea:	69a2      	ldr	r2, [r4, #24]
 80158ec:	429a      	cmp	r2, r3
 80158ee:	dc06      	bgt.n	80158fe <_puts_r+0xb6>
 80158f0:	290a      	cmp	r1, #10
 80158f2:	d004      	beq.n	80158fe <_puts_r+0xb6>
 80158f4:	6823      	ldr	r3, [r4, #0]
 80158f6:	1c5a      	adds	r2, r3, #1
 80158f8:	6022      	str	r2, [r4, #0]
 80158fa:	7019      	strb	r1, [r3, #0]
 80158fc:	e7c5      	b.n	801588a <_puts_r+0x42>
 80158fe:	4622      	mov	r2, r4
 8015900:	4628      	mov	r0, r5
 8015902:	f000 ff61 	bl	80167c8 <__swbuf_r>
 8015906:	3001      	adds	r0, #1
 8015908:	d1bf      	bne.n	801588a <_puts_r+0x42>
 801590a:	e7df      	b.n	80158cc <_puts_r+0x84>
 801590c:	6823      	ldr	r3, [r4, #0]
 801590e:	250a      	movs	r5, #10
 8015910:	1c5a      	adds	r2, r3, #1
 8015912:	6022      	str	r2, [r4, #0]
 8015914:	701d      	strb	r5, [r3, #0]
 8015916:	e7db      	b.n	80158d0 <_puts_r+0x88>
 8015918:	0808c97c 	.word	0x0808c97c
 801591c:	0808c99c 	.word	0x0808c99c
 8015920:	0808c95c 	.word	0x0808c95c

08015924 <puts>:
 8015924:	4b02      	ldr	r3, [pc, #8]	; (8015930 <puts+0xc>)
 8015926:	4601      	mov	r1, r0
 8015928:	6818      	ldr	r0, [r3, #0]
 801592a:	f7ff bf8d 	b.w	8015848 <_puts_r>
 801592e:	bf00      	nop
 8015930:	200006dc 	.word	0x200006dc

08015934 <_sbrk_r>:
 8015934:	b538      	push	{r3, r4, r5, lr}
 8015936:	4d06      	ldr	r5, [pc, #24]	; (8015950 <_sbrk_r+0x1c>)
 8015938:	2300      	movs	r3, #0
 801593a:	4604      	mov	r4, r0
 801593c:	4608      	mov	r0, r1
 801593e:	602b      	str	r3, [r5, #0]
 8015940:	f7ec fffc 	bl	800293c <_sbrk>
 8015944:	1c43      	adds	r3, r0, #1
 8015946:	d102      	bne.n	801594e <_sbrk_r+0x1a>
 8015948:	682b      	ldr	r3, [r5, #0]
 801594a:	b103      	cbz	r3, 801594e <_sbrk_r+0x1a>
 801594c:	6023      	str	r3, [r4, #0]
 801594e:	bd38      	pop	{r3, r4, r5, pc}
 8015950:	20001914 	.word	0x20001914

08015954 <nanf>:
 8015954:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801595c <nanf+0x8>
 8015958:	4770      	bx	lr
 801595a:	bf00      	nop
 801595c:	7fc00000 	.word	0x7fc00000

08015960 <siprintf>:
 8015960:	b40e      	push	{r1, r2, r3}
 8015962:	b500      	push	{lr}
 8015964:	b09c      	sub	sp, #112	; 0x70
 8015966:	ab1d      	add	r3, sp, #116	; 0x74
 8015968:	9002      	str	r0, [sp, #8]
 801596a:	9006      	str	r0, [sp, #24]
 801596c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015970:	4809      	ldr	r0, [pc, #36]	; (8015998 <siprintf+0x38>)
 8015972:	9107      	str	r1, [sp, #28]
 8015974:	9104      	str	r1, [sp, #16]
 8015976:	4909      	ldr	r1, [pc, #36]	; (801599c <siprintf+0x3c>)
 8015978:	f853 2b04 	ldr.w	r2, [r3], #4
 801597c:	9105      	str	r1, [sp, #20]
 801597e:	6800      	ldr	r0, [r0, #0]
 8015980:	9301      	str	r3, [sp, #4]
 8015982:	a902      	add	r1, sp, #8
 8015984:	f003 f99e 	bl	8018cc4 <_svfiprintf_r>
 8015988:	9b02      	ldr	r3, [sp, #8]
 801598a:	2200      	movs	r2, #0
 801598c:	701a      	strb	r2, [r3, #0]
 801598e:	b01c      	add	sp, #112	; 0x70
 8015990:	f85d eb04 	ldr.w	lr, [sp], #4
 8015994:	b003      	add	sp, #12
 8015996:	4770      	bx	lr
 8015998:	200006dc 	.word	0x200006dc
 801599c:	ffff0208 	.word	0xffff0208

080159a0 <sulp>:
 80159a0:	b570      	push	{r4, r5, r6, lr}
 80159a2:	4604      	mov	r4, r0
 80159a4:	460d      	mov	r5, r1
 80159a6:	ec45 4b10 	vmov	d0, r4, r5
 80159aa:	4616      	mov	r6, r2
 80159ac:	f002 ff9a 	bl	80188e4 <__ulp>
 80159b0:	ec51 0b10 	vmov	r0, r1, d0
 80159b4:	b17e      	cbz	r6, 80159d6 <sulp+0x36>
 80159b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80159ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80159be:	2b00      	cmp	r3, #0
 80159c0:	dd09      	ble.n	80159d6 <sulp+0x36>
 80159c2:	051b      	lsls	r3, r3, #20
 80159c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80159c8:	2400      	movs	r4, #0
 80159ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80159ce:	4622      	mov	r2, r4
 80159d0:	462b      	mov	r3, r5
 80159d2:	f7ea fe21 	bl	8000618 <__aeabi_dmul>
 80159d6:	bd70      	pop	{r4, r5, r6, pc}

080159d8 <_strtod_l>:
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	ed2d 8b02 	vpush	{d8}
 80159e0:	b09d      	sub	sp, #116	; 0x74
 80159e2:	461f      	mov	r7, r3
 80159e4:	2300      	movs	r3, #0
 80159e6:	9318      	str	r3, [sp, #96]	; 0x60
 80159e8:	4ba2      	ldr	r3, [pc, #648]	; (8015c74 <_strtod_l+0x29c>)
 80159ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	9305      	str	r3, [sp, #20]
 80159f0:	4604      	mov	r4, r0
 80159f2:	4618      	mov	r0, r3
 80159f4:	4688      	mov	r8, r1
 80159f6:	f7ea fbfb 	bl	80001f0 <strlen>
 80159fa:	f04f 0a00 	mov.w	sl, #0
 80159fe:	4605      	mov	r5, r0
 8015a00:	f04f 0b00 	mov.w	fp, #0
 8015a04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015a08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a0a:	781a      	ldrb	r2, [r3, #0]
 8015a0c:	2a2b      	cmp	r2, #43	; 0x2b
 8015a0e:	d04e      	beq.n	8015aae <_strtod_l+0xd6>
 8015a10:	d83b      	bhi.n	8015a8a <_strtod_l+0xb2>
 8015a12:	2a0d      	cmp	r2, #13
 8015a14:	d834      	bhi.n	8015a80 <_strtod_l+0xa8>
 8015a16:	2a08      	cmp	r2, #8
 8015a18:	d834      	bhi.n	8015a84 <_strtod_l+0xac>
 8015a1a:	2a00      	cmp	r2, #0
 8015a1c:	d03e      	beq.n	8015a9c <_strtod_l+0xc4>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	930a      	str	r3, [sp, #40]	; 0x28
 8015a22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8015a24:	7833      	ldrb	r3, [r6, #0]
 8015a26:	2b30      	cmp	r3, #48	; 0x30
 8015a28:	f040 80b0 	bne.w	8015b8c <_strtod_l+0x1b4>
 8015a2c:	7873      	ldrb	r3, [r6, #1]
 8015a2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015a32:	2b58      	cmp	r3, #88	; 0x58
 8015a34:	d168      	bne.n	8015b08 <_strtod_l+0x130>
 8015a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a38:	9301      	str	r3, [sp, #4]
 8015a3a:	ab18      	add	r3, sp, #96	; 0x60
 8015a3c:	9702      	str	r7, [sp, #8]
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	4a8d      	ldr	r2, [pc, #564]	; (8015c78 <_strtod_l+0x2a0>)
 8015a42:	ab19      	add	r3, sp, #100	; 0x64
 8015a44:	a917      	add	r1, sp, #92	; 0x5c
 8015a46:	4620      	mov	r0, r4
 8015a48:	f002 f848 	bl	8017adc <__gethex>
 8015a4c:	f010 0707 	ands.w	r7, r0, #7
 8015a50:	4605      	mov	r5, r0
 8015a52:	d005      	beq.n	8015a60 <_strtod_l+0x88>
 8015a54:	2f06      	cmp	r7, #6
 8015a56:	d12c      	bne.n	8015ab2 <_strtod_l+0xda>
 8015a58:	3601      	adds	r6, #1
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8015a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f040 8590 	bne.w	8016588 <_strtod_l+0xbb0>
 8015a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a6a:	b1eb      	cbz	r3, 8015aa8 <_strtod_l+0xd0>
 8015a6c:	4652      	mov	r2, sl
 8015a6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015a72:	ec43 2b10 	vmov	d0, r2, r3
 8015a76:	b01d      	add	sp, #116	; 0x74
 8015a78:	ecbd 8b02 	vpop	{d8}
 8015a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a80:	2a20      	cmp	r2, #32
 8015a82:	d1cc      	bne.n	8015a1e <_strtod_l+0x46>
 8015a84:	3301      	adds	r3, #1
 8015a86:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a88:	e7be      	b.n	8015a08 <_strtod_l+0x30>
 8015a8a:	2a2d      	cmp	r2, #45	; 0x2d
 8015a8c:	d1c7      	bne.n	8015a1e <_strtod_l+0x46>
 8015a8e:	2201      	movs	r2, #1
 8015a90:	920a      	str	r2, [sp, #40]	; 0x28
 8015a92:	1c5a      	adds	r2, r3, #1
 8015a94:	9217      	str	r2, [sp, #92]	; 0x5c
 8015a96:	785b      	ldrb	r3, [r3, #1]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1c2      	bne.n	8015a22 <_strtod_l+0x4a>
 8015a9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015a9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	f040 856e 	bne.w	8016584 <_strtod_l+0xbac>
 8015aa8:	4652      	mov	r2, sl
 8015aaa:	465b      	mov	r3, fp
 8015aac:	e7e1      	b.n	8015a72 <_strtod_l+0x9a>
 8015aae:	2200      	movs	r2, #0
 8015ab0:	e7ee      	b.n	8015a90 <_strtod_l+0xb8>
 8015ab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ab4:	b13a      	cbz	r2, 8015ac6 <_strtod_l+0xee>
 8015ab6:	2135      	movs	r1, #53	; 0x35
 8015ab8:	a81a      	add	r0, sp, #104	; 0x68
 8015aba:	f003 f81e 	bl	8018afa <__copybits>
 8015abe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015ac0:	4620      	mov	r0, r4
 8015ac2:	f002 fbdd 	bl	8018280 <_Bfree>
 8015ac6:	3f01      	subs	r7, #1
 8015ac8:	2f04      	cmp	r7, #4
 8015aca:	d806      	bhi.n	8015ada <_strtod_l+0x102>
 8015acc:	e8df f007 	tbb	[pc, r7]
 8015ad0:	1714030a 	.word	0x1714030a
 8015ad4:	0a          	.byte	0x0a
 8015ad5:	00          	.byte	0x00
 8015ad6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015ada:	0728      	lsls	r0, r5, #28
 8015adc:	d5c0      	bpl.n	8015a60 <_strtod_l+0x88>
 8015ade:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015ae2:	e7bd      	b.n	8015a60 <_strtod_l+0x88>
 8015ae4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015ae8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015aea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015aee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015af2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015af6:	e7f0      	b.n	8015ada <_strtod_l+0x102>
 8015af8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8015c7c <_strtod_l+0x2a4>
 8015afc:	e7ed      	b.n	8015ada <_strtod_l+0x102>
 8015afe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015b02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015b06:	e7e8      	b.n	8015ada <_strtod_l+0x102>
 8015b08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b0a:	1c5a      	adds	r2, r3, #1
 8015b0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8015b0e:	785b      	ldrb	r3, [r3, #1]
 8015b10:	2b30      	cmp	r3, #48	; 0x30
 8015b12:	d0f9      	beq.n	8015b08 <_strtod_l+0x130>
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d0a3      	beq.n	8015a60 <_strtod_l+0x88>
 8015b18:	2301      	movs	r3, #1
 8015b1a:	f04f 0900 	mov.w	r9, #0
 8015b1e:	9304      	str	r3, [sp, #16]
 8015b20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015b22:	9308      	str	r3, [sp, #32]
 8015b24:	f8cd 901c 	str.w	r9, [sp, #28]
 8015b28:	464f      	mov	r7, r9
 8015b2a:	220a      	movs	r2, #10
 8015b2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015b2e:	7806      	ldrb	r6, [r0, #0]
 8015b30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015b34:	b2d9      	uxtb	r1, r3
 8015b36:	2909      	cmp	r1, #9
 8015b38:	d92a      	bls.n	8015b90 <_strtod_l+0x1b8>
 8015b3a:	9905      	ldr	r1, [sp, #20]
 8015b3c:	462a      	mov	r2, r5
 8015b3e:	f003 fb66 	bl	801920e <strncmp>
 8015b42:	b398      	cbz	r0, 8015bac <_strtod_l+0x1d4>
 8015b44:	2000      	movs	r0, #0
 8015b46:	4632      	mov	r2, r6
 8015b48:	463d      	mov	r5, r7
 8015b4a:	9005      	str	r0, [sp, #20]
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	2a65      	cmp	r2, #101	; 0x65
 8015b50:	d001      	beq.n	8015b56 <_strtod_l+0x17e>
 8015b52:	2a45      	cmp	r2, #69	; 0x45
 8015b54:	d118      	bne.n	8015b88 <_strtod_l+0x1b0>
 8015b56:	b91d      	cbnz	r5, 8015b60 <_strtod_l+0x188>
 8015b58:	9a04      	ldr	r2, [sp, #16]
 8015b5a:	4302      	orrs	r2, r0
 8015b5c:	d09e      	beq.n	8015a9c <_strtod_l+0xc4>
 8015b5e:	2500      	movs	r5, #0
 8015b60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8015b64:	f108 0201 	add.w	r2, r8, #1
 8015b68:	9217      	str	r2, [sp, #92]	; 0x5c
 8015b6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015b6e:	2a2b      	cmp	r2, #43	; 0x2b
 8015b70:	d075      	beq.n	8015c5e <_strtod_l+0x286>
 8015b72:	2a2d      	cmp	r2, #45	; 0x2d
 8015b74:	d07b      	beq.n	8015c6e <_strtod_l+0x296>
 8015b76:	f04f 0c00 	mov.w	ip, #0
 8015b7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015b7e:	2909      	cmp	r1, #9
 8015b80:	f240 8082 	bls.w	8015c88 <_strtod_l+0x2b0>
 8015b84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015b88:	2600      	movs	r6, #0
 8015b8a:	e09d      	b.n	8015cc8 <_strtod_l+0x2f0>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e7c4      	b.n	8015b1a <_strtod_l+0x142>
 8015b90:	2f08      	cmp	r7, #8
 8015b92:	bfd8      	it	le
 8015b94:	9907      	ldrle	r1, [sp, #28]
 8015b96:	f100 0001 	add.w	r0, r0, #1
 8015b9a:	bfda      	itte	le
 8015b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8015ba0:	9307      	strle	r3, [sp, #28]
 8015ba2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015ba6:	3701      	adds	r7, #1
 8015ba8:	9017      	str	r0, [sp, #92]	; 0x5c
 8015baa:	e7bf      	b.n	8015b2c <_strtod_l+0x154>
 8015bac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015bae:	195a      	adds	r2, r3, r5
 8015bb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015bb2:	5d5a      	ldrb	r2, [r3, r5]
 8015bb4:	2f00      	cmp	r7, #0
 8015bb6:	d037      	beq.n	8015c28 <_strtod_l+0x250>
 8015bb8:	9005      	str	r0, [sp, #20]
 8015bba:	463d      	mov	r5, r7
 8015bbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015bc0:	2b09      	cmp	r3, #9
 8015bc2:	d912      	bls.n	8015bea <_strtod_l+0x212>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	e7c2      	b.n	8015b4e <_strtod_l+0x176>
 8015bc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015bca:	1c5a      	adds	r2, r3, #1
 8015bcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8015bce:	785a      	ldrb	r2, [r3, #1]
 8015bd0:	3001      	adds	r0, #1
 8015bd2:	2a30      	cmp	r2, #48	; 0x30
 8015bd4:	d0f8      	beq.n	8015bc8 <_strtod_l+0x1f0>
 8015bd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015bda:	2b08      	cmp	r3, #8
 8015bdc:	f200 84d9 	bhi.w	8016592 <_strtod_l+0xbba>
 8015be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015be2:	9005      	str	r0, [sp, #20]
 8015be4:	2000      	movs	r0, #0
 8015be6:	9308      	str	r3, [sp, #32]
 8015be8:	4605      	mov	r5, r0
 8015bea:	3a30      	subs	r2, #48	; 0x30
 8015bec:	f100 0301 	add.w	r3, r0, #1
 8015bf0:	d014      	beq.n	8015c1c <_strtod_l+0x244>
 8015bf2:	9905      	ldr	r1, [sp, #20]
 8015bf4:	4419      	add	r1, r3
 8015bf6:	9105      	str	r1, [sp, #20]
 8015bf8:	462b      	mov	r3, r5
 8015bfa:	eb00 0e05 	add.w	lr, r0, r5
 8015bfe:	210a      	movs	r1, #10
 8015c00:	4573      	cmp	r3, lr
 8015c02:	d113      	bne.n	8015c2c <_strtod_l+0x254>
 8015c04:	182b      	adds	r3, r5, r0
 8015c06:	2b08      	cmp	r3, #8
 8015c08:	f105 0501 	add.w	r5, r5, #1
 8015c0c:	4405      	add	r5, r0
 8015c0e:	dc1c      	bgt.n	8015c4a <_strtod_l+0x272>
 8015c10:	9907      	ldr	r1, [sp, #28]
 8015c12:	230a      	movs	r3, #10
 8015c14:	fb03 2301 	mla	r3, r3, r1, r2
 8015c18:	9307      	str	r3, [sp, #28]
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c1e:	1c51      	adds	r1, r2, #1
 8015c20:	9117      	str	r1, [sp, #92]	; 0x5c
 8015c22:	7852      	ldrb	r2, [r2, #1]
 8015c24:	4618      	mov	r0, r3
 8015c26:	e7c9      	b.n	8015bbc <_strtod_l+0x1e4>
 8015c28:	4638      	mov	r0, r7
 8015c2a:	e7d2      	b.n	8015bd2 <_strtod_l+0x1fa>
 8015c2c:	2b08      	cmp	r3, #8
 8015c2e:	dc04      	bgt.n	8015c3a <_strtod_l+0x262>
 8015c30:	9e07      	ldr	r6, [sp, #28]
 8015c32:	434e      	muls	r6, r1
 8015c34:	9607      	str	r6, [sp, #28]
 8015c36:	3301      	adds	r3, #1
 8015c38:	e7e2      	b.n	8015c00 <_strtod_l+0x228>
 8015c3a:	f103 0c01 	add.w	ip, r3, #1
 8015c3e:	f1bc 0f10 	cmp.w	ip, #16
 8015c42:	bfd8      	it	le
 8015c44:	fb01 f909 	mulle.w	r9, r1, r9
 8015c48:	e7f5      	b.n	8015c36 <_strtod_l+0x25e>
 8015c4a:	2d10      	cmp	r5, #16
 8015c4c:	bfdc      	itt	le
 8015c4e:	230a      	movle	r3, #10
 8015c50:	fb03 2909 	mlale	r9, r3, r9, r2
 8015c54:	e7e1      	b.n	8015c1a <_strtod_l+0x242>
 8015c56:	2300      	movs	r3, #0
 8015c58:	9305      	str	r3, [sp, #20]
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	e77c      	b.n	8015b58 <_strtod_l+0x180>
 8015c5e:	f04f 0c00 	mov.w	ip, #0
 8015c62:	f108 0202 	add.w	r2, r8, #2
 8015c66:	9217      	str	r2, [sp, #92]	; 0x5c
 8015c68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8015c6c:	e785      	b.n	8015b7a <_strtod_l+0x1a2>
 8015c6e:	f04f 0c01 	mov.w	ip, #1
 8015c72:	e7f6      	b.n	8015c62 <_strtod_l+0x28a>
 8015c74:	0808ca24 	.word	0x0808ca24
 8015c78:	0808c6e0 	.word	0x0808c6e0
 8015c7c:	7ff00000 	.word	0x7ff00000
 8015c80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c82:	1c51      	adds	r1, r2, #1
 8015c84:	9117      	str	r1, [sp, #92]	; 0x5c
 8015c86:	7852      	ldrb	r2, [r2, #1]
 8015c88:	2a30      	cmp	r2, #48	; 0x30
 8015c8a:	d0f9      	beq.n	8015c80 <_strtod_l+0x2a8>
 8015c8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8015c90:	2908      	cmp	r1, #8
 8015c92:	f63f af79 	bhi.w	8015b88 <_strtod_l+0x1b0>
 8015c96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015c9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015c9c:	9206      	str	r2, [sp, #24]
 8015c9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015ca0:	1c51      	adds	r1, r2, #1
 8015ca2:	9117      	str	r1, [sp, #92]	; 0x5c
 8015ca4:	7852      	ldrb	r2, [r2, #1]
 8015ca6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8015caa:	2e09      	cmp	r6, #9
 8015cac:	d937      	bls.n	8015d1e <_strtod_l+0x346>
 8015cae:	9e06      	ldr	r6, [sp, #24]
 8015cb0:	1b89      	subs	r1, r1, r6
 8015cb2:	2908      	cmp	r1, #8
 8015cb4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015cb8:	dc02      	bgt.n	8015cc0 <_strtod_l+0x2e8>
 8015cba:	4576      	cmp	r6, lr
 8015cbc:	bfa8      	it	ge
 8015cbe:	4676      	movge	r6, lr
 8015cc0:	f1bc 0f00 	cmp.w	ip, #0
 8015cc4:	d000      	beq.n	8015cc8 <_strtod_l+0x2f0>
 8015cc6:	4276      	negs	r6, r6
 8015cc8:	2d00      	cmp	r5, #0
 8015cca:	d14d      	bne.n	8015d68 <_strtod_l+0x390>
 8015ccc:	9904      	ldr	r1, [sp, #16]
 8015cce:	4301      	orrs	r1, r0
 8015cd0:	f47f aec6 	bne.w	8015a60 <_strtod_l+0x88>
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f47f aee1 	bne.w	8015a9c <_strtod_l+0xc4>
 8015cda:	2a69      	cmp	r2, #105	; 0x69
 8015cdc:	d027      	beq.n	8015d2e <_strtod_l+0x356>
 8015cde:	dc24      	bgt.n	8015d2a <_strtod_l+0x352>
 8015ce0:	2a49      	cmp	r2, #73	; 0x49
 8015ce2:	d024      	beq.n	8015d2e <_strtod_l+0x356>
 8015ce4:	2a4e      	cmp	r2, #78	; 0x4e
 8015ce6:	f47f aed9 	bne.w	8015a9c <_strtod_l+0xc4>
 8015cea:	499f      	ldr	r1, [pc, #636]	; (8015f68 <_strtod_l+0x590>)
 8015cec:	a817      	add	r0, sp, #92	; 0x5c
 8015cee:	f002 f94d 	bl	8017f8c <__match>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	f43f aed2 	beq.w	8015a9c <_strtod_l+0xc4>
 8015cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015cfa:	781b      	ldrb	r3, [r3, #0]
 8015cfc:	2b28      	cmp	r3, #40	; 0x28
 8015cfe:	d12d      	bne.n	8015d5c <_strtod_l+0x384>
 8015d00:	499a      	ldr	r1, [pc, #616]	; (8015f6c <_strtod_l+0x594>)
 8015d02:	aa1a      	add	r2, sp, #104	; 0x68
 8015d04:	a817      	add	r0, sp, #92	; 0x5c
 8015d06:	f002 f955 	bl	8017fb4 <__hexnan>
 8015d0a:	2805      	cmp	r0, #5
 8015d0c:	d126      	bne.n	8015d5c <_strtod_l+0x384>
 8015d0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015d10:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8015d14:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015d18:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015d1c:	e6a0      	b.n	8015a60 <_strtod_l+0x88>
 8015d1e:	210a      	movs	r1, #10
 8015d20:	fb01 2e0e 	mla	lr, r1, lr, r2
 8015d24:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015d28:	e7b9      	b.n	8015c9e <_strtod_l+0x2c6>
 8015d2a:	2a6e      	cmp	r2, #110	; 0x6e
 8015d2c:	e7db      	b.n	8015ce6 <_strtod_l+0x30e>
 8015d2e:	4990      	ldr	r1, [pc, #576]	; (8015f70 <_strtod_l+0x598>)
 8015d30:	a817      	add	r0, sp, #92	; 0x5c
 8015d32:	f002 f92b 	bl	8017f8c <__match>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	f43f aeb0 	beq.w	8015a9c <_strtod_l+0xc4>
 8015d3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d3e:	498d      	ldr	r1, [pc, #564]	; (8015f74 <_strtod_l+0x59c>)
 8015d40:	3b01      	subs	r3, #1
 8015d42:	a817      	add	r0, sp, #92	; 0x5c
 8015d44:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d46:	f002 f921 	bl	8017f8c <__match>
 8015d4a:	b910      	cbnz	r0, 8015d52 <_strtod_l+0x37a>
 8015d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d4e:	3301      	adds	r3, #1
 8015d50:	9317      	str	r3, [sp, #92]	; 0x5c
 8015d52:	f8df b230 	ldr.w	fp, [pc, #560]	; 8015f84 <_strtod_l+0x5ac>
 8015d56:	f04f 0a00 	mov.w	sl, #0
 8015d5a:	e681      	b.n	8015a60 <_strtod_l+0x88>
 8015d5c:	4886      	ldr	r0, [pc, #536]	; (8015f78 <_strtod_l+0x5a0>)
 8015d5e:	f003 fa0b 	bl	8019178 <nan>
 8015d62:	ec5b ab10 	vmov	sl, fp, d0
 8015d66:	e67b      	b.n	8015a60 <_strtod_l+0x88>
 8015d68:	9b05      	ldr	r3, [sp, #20]
 8015d6a:	9807      	ldr	r0, [sp, #28]
 8015d6c:	1af3      	subs	r3, r6, r3
 8015d6e:	2f00      	cmp	r7, #0
 8015d70:	bf08      	it	eq
 8015d72:	462f      	moveq	r7, r5
 8015d74:	2d10      	cmp	r5, #16
 8015d76:	9306      	str	r3, [sp, #24]
 8015d78:	46a8      	mov	r8, r5
 8015d7a:	bfa8      	it	ge
 8015d7c:	f04f 0810 	movge.w	r8, #16
 8015d80:	f7ea fbd0 	bl	8000524 <__aeabi_ui2d>
 8015d84:	2d09      	cmp	r5, #9
 8015d86:	4682      	mov	sl, r0
 8015d88:	468b      	mov	fp, r1
 8015d8a:	dd13      	ble.n	8015db4 <_strtod_l+0x3dc>
 8015d8c:	4b7b      	ldr	r3, [pc, #492]	; (8015f7c <_strtod_l+0x5a4>)
 8015d8e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015d92:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015d96:	f7ea fc3f 	bl	8000618 <__aeabi_dmul>
 8015d9a:	4682      	mov	sl, r0
 8015d9c:	4648      	mov	r0, r9
 8015d9e:	468b      	mov	fp, r1
 8015da0:	f7ea fbc0 	bl	8000524 <__aeabi_ui2d>
 8015da4:	4602      	mov	r2, r0
 8015da6:	460b      	mov	r3, r1
 8015da8:	4650      	mov	r0, sl
 8015daa:	4659      	mov	r1, fp
 8015dac:	f7ea fa7e 	bl	80002ac <__adddf3>
 8015db0:	4682      	mov	sl, r0
 8015db2:	468b      	mov	fp, r1
 8015db4:	2d0f      	cmp	r5, #15
 8015db6:	dc38      	bgt.n	8015e2a <_strtod_l+0x452>
 8015db8:	9b06      	ldr	r3, [sp, #24]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	f43f ae50 	beq.w	8015a60 <_strtod_l+0x88>
 8015dc0:	dd24      	ble.n	8015e0c <_strtod_l+0x434>
 8015dc2:	2b16      	cmp	r3, #22
 8015dc4:	dc0b      	bgt.n	8015dde <_strtod_l+0x406>
 8015dc6:	496d      	ldr	r1, [pc, #436]	; (8015f7c <_strtod_l+0x5a4>)
 8015dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dd0:	4652      	mov	r2, sl
 8015dd2:	465b      	mov	r3, fp
 8015dd4:	f7ea fc20 	bl	8000618 <__aeabi_dmul>
 8015dd8:	4682      	mov	sl, r0
 8015dda:	468b      	mov	fp, r1
 8015ddc:	e640      	b.n	8015a60 <_strtod_l+0x88>
 8015dde:	9a06      	ldr	r2, [sp, #24]
 8015de0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015de4:	4293      	cmp	r3, r2
 8015de6:	db20      	blt.n	8015e2a <_strtod_l+0x452>
 8015de8:	4c64      	ldr	r4, [pc, #400]	; (8015f7c <_strtod_l+0x5a4>)
 8015dea:	f1c5 050f 	rsb	r5, r5, #15
 8015dee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015df2:	4652      	mov	r2, sl
 8015df4:	465b      	mov	r3, fp
 8015df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015dfa:	f7ea fc0d 	bl	8000618 <__aeabi_dmul>
 8015dfe:	9b06      	ldr	r3, [sp, #24]
 8015e00:	1b5d      	subs	r5, r3, r5
 8015e02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015e06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015e0a:	e7e3      	b.n	8015dd4 <_strtod_l+0x3fc>
 8015e0c:	9b06      	ldr	r3, [sp, #24]
 8015e0e:	3316      	adds	r3, #22
 8015e10:	db0b      	blt.n	8015e2a <_strtod_l+0x452>
 8015e12:	9b05      	ldr	r3, [sp, #20]
 8015e14:	1b9e      	subs	r6, r3, r6
 8015e16:	4b59      	ldr	r3, [pc, #356]	; (8015f7c <_strtod_l+0x5a4>)
 8015e18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8015e1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015e20:	4650      	mov	r0, sl
 8015e22:	4659      	mov	r1, fp
 8015e24:	f7ea fd22 	bl	800086c <__aeabi_ddiv>
 8015e28:	e7d6      	b.n	8015dd8 <_strtod_l+0x400>
 8015e2a:	9b06      	ldr	r3, [sp, #24]
 8015e2c:	eba5 0808 	sub.w	r8, r5, r8
 8015e30:	4498      	add	r8, r3
 8015e32:	f1b8 0f00 	cmp.w	r8, #0
 8015e36:	dd74      	ble.n	8015f22 <_strtod_l+0x54a>
 8015e38:	f018 030f 	ands.w	r3, r8, #15
 8015e3c:	d00a      	beq.n	8015e54 <_strtod_l+0x47c>
 8015e3e:	494f      	ldr	r1, [pc, #316]	; (8015f7c <_strtod_l+0x5a4>)
 8015e40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015e44:	4652      	mov	r2, sl
 8015e46:	465b      	mov	r3, fp
 8015e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015e4c:	f7ea fbe4 	bl	8000618 <__aeabi_dmul>
 8015e50:	4682      	mov	sl, r0
 8015e52:	468b      	mov	fp, r1
 8015e54:	f038 080f 	bics.w	r8, r8, #15
 8015e58:	d04f      	beq.n	8015efa <_strtod_l+0x522>
 8015e5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015e5e:	dd22      	ble.n	8015ea6 <_strtod_l+0x4ce>
 8015e60:	2500      	movs	r5, #0
 8015e62:	462e      	mov	r6, r5
 8015e64:	9507      	str	r5, [sp, #28]
 8015e66:	9505      	str	r5, [sp, #20]
 8015e68:	2322      	movs	r3, #34	; 0x22
 8015e6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8015f84 <_strtod_l+0x5ac>
 8015e6e:	6023      	str	r3, [r4, #0]
 8015e70:	f04f 0a00 	mov.w	sl, #0
 8015e74:	9b07      	ldr	r3, [sp, #28]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	f43f adf2 	beq.w	8015a60 <_strtod_l+0x88>
 8015e7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015e7e:	4620      	mov	r0, r4
 8015e80:	f002 f9fe 	bl	8018280 <_Bfree>
 8015e84:	9905      	ldr	r1, [sp, #20]
 8015e86:	4620      	mov	r0, r4
 8015e88:	f002 f9fa 	bl	8018280 <_Bfree>
 8015e8c:	4631      	mov	r1, r6
 8015e8e:	4620      	mov	r0, r4
 8015e90:	f002 f9f6 	bl	8018280 <_Bfree>
 8015e94:	9907      	ldr	r1, [sp, #28]
 8015e96:	4620      	mov	r0, r4
 8015e98:	f002 f9f2 	bl	8018280 <_Bfree>
 8015e9c:	4629      	mov	r1, r5
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f002 f9ee 	bl	8018280 <_Bfree>
 8015ea4:	e5dc      	b.n	8015a60 <_strtod_l+0x88>
 8015ea6:	4b36      	ldr	r3, [pc, #216]	; (8015f80 <_strtod_l+0x5a8>)
 8015ea8:	9304      	str	r3, [sp, #16]
 8015eaa:	2300      	movs	r3, #0
 8015eac:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015eb0:	4650      	mov	r0, sl
 8015eb2:	4659      	mov	r1, fp
 8015eb4:	4699      	mov	r9, r3
 8015eb6:	f1b8 0f01 	cmp.w	r8, #1
 8015eba:	dc21      	bgt.n	8015f00 <_strtod_l+0x528>
 8015ebc:	b10b      	cbz	r3, 8015ec2 <_strtod_l+0x4ea>
 8015ebe:	4682      	mov	sl, r0
 8015ec0:	468b      	mov	fp, r1
 8015ec2:	4b2f      	ldr	r3, [pc, #188]	; (8015f80 <_strtod_l+0x5a8>)
 8015ec4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015ec8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015ecc:	4652      	mov	r2, sl
 8015ece:	465b      	mov	r3, fp
 8015ed0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015ed4:	f7ea fba0 	bl	8000618 <__aeabi_dmul>
 8015ed8:	4b2a      	ldr	r3, [pc, #168]	; (8015f84 <_strtod_l+0x5ac>)
 8015eda:	460a      	mov	r2, r1
 8015edc:	400b      	ands	r3, r1
 8015ede:	492a      	ldr	r1, [pc, #168]	; (8015f88 <_strtod_l+0x5b0>)
 8015ee0:	428b      	cmp	r3, r1
 8015ee2:	4682      	mov	sl, r0
 8015ee4:	d8bc      	bhi.n	8015e60 <_strtod_l+0x488>
 8015ee6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015eea:	428b      	cmp	r3, r1
 8015eec:	bf86      	itte	hi
 8015eee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8015f8c <_strtod_l+0x5b4>
 8015ef2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8015ef6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015efa:	2300      	movs	r3, #0
 8015efc:	9304      	str	r3, [sp, #16]
 8015efe:	e084      	b.n	801600a <_strtod_l+0x632>
 8015f00:	f018 0f01 	tst.w	r8, #1
 8015f04:	d005      	beq.n	8015f12 <_strtod_l+0x53a>
 8015f06:	9b04      	ldr	r3, [sp, #16]
 8015f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f0c:	f7ea fb84 	bl	8000618 <__aeabi_dmul>
 8015f10:	2301      	movs	r3, #1
 8015f12:	9a04      	ldr	r2, [sp, #16]
 8015f14:	3208      	adds	r2, #8
 8015f16:	f109 0901 	add.w	r9, r9, #1
 8015f1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f1e:	9204      	str	r2, [sp, #16]
 8015f20:	e7c9      	b.n	8015eb6 <_strtod_l+0x4de>
 8015f22:	d0ea      	beq.n	8015efa <_strtod_l+0x522>
 8015f24:	f1c8 0800 	rsb	r8, r8, #0
 8015f28:	f018 020f 	ands.w	r2, r8, #15
 8015f2c:	d00a      	beq.n	8015f44 <_strtod_l+0x56c>
 8015f2e:	4b13      	ldr	r3, [pc, #76]	; (8015f7c <_strtod_l+0x5a4>)
 8015f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015f34:	4650      	mov	r0, sl
 8015f36:	4659      	mov	r1, fp
 8015f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f3c:	f7ea fc96 	bl	800086c <__aeabi_ddiv>
 8015f40:	4682      	mov	sl, r0
 8015f42:	468b      	mov	fp, r1
 8015f44:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015f48:	d0d7      	beq.n	8015efa <_strtod_l+0x522>
 8015f4a:	f1b8 0f1f 	cmp.w	r8, #31
 8015f4e:	dd1f      	ble.n	8015f90 <_strtod_l+0x5b8>
 8015f50:	2500      	movs	r5, #0
 8015f52:	462e      	mov	r6, r5
 8015f54:	9507      	str	r5, [sp, #28]
 8015f56:	9505      	str	r5, [sp, #20]
 8015f58:	2322      	movs	r3, #34	; 0x22
 8015f5a:	f04f 0a00 	mov.w	sl, #0
 8015f5e:	f04f 0b00 	mov.w	fp, #0
 8015f62:	6023      	str	r3, [r4, #0]
 8015f64:	e786      	b.n	8015e74 <_strtod_l+0x49c>
 8015f66:	bf00      	nop
 8015f68:	0808c6b1 	.word	0x0808c6b1
 8015f6c:	0808c6f4 	.word	0x0808c6f4
 8015f70:	0808c6a9 	.word	0x0808c6a9
 8015f74:	0808c8e4 	.word	0x0808c8e4
 8015f78:	0808c7df 	.word	0x0808c7df
 8015f7c:	0808cac0 	.word	0x0808cac0
 8015f80:	0808ca98 	.word	0x0808ca98
 8015f84:	7ff00000 	.word	0x7ff00000
 8015f88:	7ca00000 	.word	0x7ca00000
 8015f8c:	7fefffff 	.word	0x7fefffff
 8015f90:	f018 0310 	ands.w	r3, r8, #16
 8015f94:	bf18      	it	ne
 8015f96:	236a      	movne	r3, #106	; 0x6a
 8015f98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8016348 <_strtod_l+0x970>
 8015f9c:	9304      	str	r3, [sp, #16]
 8015f9e:	4650      	mov	r0, sl
 8015fa0:	4659      	mov	r1, fp
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	f018 0f01 	tst.w	r8, #1
 8015fa8:	d004      	beq.n	8015fb4 <_strtod_l+0x5dc>
 8015faa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015fae:	f7ea fb33 	bl	8000618 <__aeabi_dmul>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015fb8:	f109 0908 	add.w	r9, r9, #8
 8015fbc:	d1f2      	bne.n	8015fa4 <_strtod_l+0x5cc>
 8015fbe:	b10b      	cbz	r3, 8015fc4 <_strtod_l+0x5ec>
 8015fc0:	4682      	mov	sl, r0
 8015fc2:	468b      	mov	fp, r1
 8015fc4:	9b04      	ldr	r3, [sp, #16]
 8015fc6:	b1c3      	cbz	r3, 8015ffa <_strtod_l+0x622>
 8015fc8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015fcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	4659      	mov	r1, fp
 8015fd4:	dd11      	ble.n	8015ffa <_strtod_l+0x622>
 8015fd6:	2b1f      	cmp	r3, #31
 8015fd8:	f340 8124 	ble.w	8016224 <_strtod_l+0x84c>
 8015fdc:	2b34      	cmp	r3, #52	; 0x34
 8015fde:	bfde      	ittt	le
 8015fe0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015fe4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8015fe8:	fa03 f202 	lslle.w	r2, r3, r2
 8015fec:	f04f 0a00 	mov.w	sl, #0
 8015ff0:	bfcc      	ite	gt
 8015ff2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015ff6:	ea02 0b01 	andle.w	fp, r2, r1
 8015ffa:	2200      	movs	r2, #0
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	4650      	mov	r0, sl
 8016000:	4659      	mov	r1, fp
 8016002:	f7ea fd71 	bl	8000ae8 <__aeabi_dcmpeq>
 8016006:	2800      	cmp	r0, #0
 8016008:	d1a2      	bne.n	8015f50 <_strtod_l+0x578>
 801600a:	9b07      	ldr	r3, [sp, #28]
 801600c:	9300      	str	r3, [sp, #0]
 801600e:	9908      	ldr	r1, [sp, #32]
 8016010:	462b      	mov	r3, r5
 8016012:	463a      	mov	r2, r7
 8016014:	4620      	mov	r0, r4
 8016016:	f002 f99b 	bl	8018350 <__s2b>
 801601a:	9007      	str	r0, [sp, #28]
 801601c:	2800      	cmp	r0, #0
 801601e:	f43f af1f 	beq.w	8015e60 <_strtod_l+0x488>
 8016022:	9b05      	ldr	r3, [sp, #20]
 8016024:	1b9e      	subs	r6, r3, r6
 8016026:	9b06      	ldr	r3, [sp, #24]
 8016028:	2b00      	cmp	r3, #0
 801602a:	bfb4      	ite	lt
 801602c:	4633      	movlt	r3, r6
 801602e:	2300      	movge	r3, #0
 8016030:	930c      	str	r3, [sp, #48]	; 0x30
 8016032:	9b06      	ldr	r3, [sp, #24]
 8016034:	2500      	movs	r5, #0
 8016036:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801603a:	9312      	str	r3, [sp, #72]	; 0x48
 801603c:	462e      	mov	r6, r5
 801603e:	9b07      	ldr	r3, [sp, #28]
 8016040:	4620      	mov	r0, r4
 8016042:	6859      	ldr	r1, [r3, #4]
 8016044:	f002 f8dc 	bl	8018200 <_Balloc>
 8016048:	9005      	str	r0, [sp, #20]
 801604a:	2800      	cmp	r0, #0
 801604c:	f43f af0c 	beq.w	8015e68 <_strtod_l+0x490>
 8016050:	9b07      	ldr	r3, [sp, #28]
 8016052:	691a      	ldr	r2, [r3, #16]
 8016054:	3202      	adds	r2, #2
 8016056:	f103 010c 	add.w	r1, r3, #12
 801605a:	0092      	lsls	r2, r2, #2
 801605c:	300c      	adds	r0, #12
 801605e:	f7fe fc83 	bl	8014968 <memcpy>
 8016062:	ec4b ab10 	vmov	d0, sl, fp
 8016066:	aa1a      	add	r2, sp, #104	; 0x68
 8016068:	a919      	add	r1, sp, #100	; 0x64
 801606a:	4620      	mov	r0, r4
 801606c:	f002 fcb6 	bl	80189dc <__d2b>
 8016070:	ec4b ab18 	vmov	d8, sl, fp
 8016074:	9018      	str	r0, [sp, #96]	; 0x60
 8016076:	2800      	cmp	r0, #0
 8016078:	f43f aef6 	beq.w	8015e68 <_strtod_l+0x490>
 801607c:	2101      	movs	r1, #1
 801607e:	4620      	mov	r0, r4
 8016080:	f002 fa00 	bl	8018484 <__i2b>
 8016084:	4606      	mov	r6, r0
 8016086:	2800      	cmp	r0, #0
 8016088:	f43f aeee 	beq.w	8015e68 <_strtod_l+0x490>
 801608c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801608e:	9904      	ldr	r1, [sp, #16]
 8016090:	2b00      	cmp	r3, #0
 8016092:	bfab      	itete	ge
 8016094:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8016096:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8016098:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801609a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801609e:	bfac      	ite	ge
 80160a0:	eb03 0902 	addge.w	r9, r3, r2
 80160a4:	1ad7      	sublt	r7, r2, r3
 80160a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80160a8:	eba3 0801 	sub.w	r8, r3, r1
 80160ac:	4490      	add	r8, r2
 80160ae:	4ba1      	ldr	r3, [pc, #644]	; (8016334 <_strtod_l+0x95c>)
 80160b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80160b4:	4598      	cmp	r8, r3
 80160b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80160ba:	f280 80c7 	bge.w	801624c <_strtod_l+0x874>
 80160be:	eba3 0308 	sub.w	r3, r3, r8
 80160c2:	2b1f      	cmp	r3, #31
 80160c4:	eba2 0203 	sub.w	r2, r2, r3
 80160c8:	f04f 0101 	mov.w	r1, #1
 80160cc:	f300 80b1 	bgt.w	8016232 <_strtod_l+0x85a>
 80160d0:	fa01 f303 	lsl.w	r3, r1, r3
 80160d4:	930d      	str	r3, [sp, #52]	; 0x34
 80160d6:	2300      	movs	r3, #0
 80160d8:	9308      	str	r3, [sp, #32]
 80160da:	eb09 0802 	add.w	r8, r9, r2
 80160de:	9b04      	ldr	r3, [sp, #16]
 80160e0:	45c1      	cmp	r9, r8
 80160e2:	4417      	add	r7, r2
 80160e4:	441f      	add	r7, r3
 80160e6:	464b      	mov	r3, r9
 80160e8:	bfa8      	it	ge
 80160ea:	4643      	movge	r3, r8
 80160ec:	42bb      	cmp	r3, r7
 80160ee:	bfa8      	it	ge
 80160f0:	463b      	movge	r3, r7
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	bfc2      	ittt	gt
 80160f6:	eba8 0803 	subgt.w	r8, r8, r3
 80160fa:	1aff      	subgt	r7, r7, r3
 80160fc:	eba9 0903 	subgt.w	r9, r9, r3
 8016100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016102:	2b00      	cmp	r3, #0
 8016104:	dd17      	ble.n	8016136 <_strtod_l+0x75e>
 8016106:	4631      	mov	r1, r6
 8016108:	461a      	mov	r2, r3
 801610a:	4620      	mov	r0, r4
 801610c:	f002 fa7a 	bl	8018604 <__pow5mult>
 8016110:	4606      	mov	r6, r0
 8016112:	2800      	cmp	r0, #0
 8016114:	f43f aea8 	beq.w	8015e68 <_strtod_l+0x490>
 8016118:	4601      	mov	r1, r0
 801611a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801611c:	4620      	mov	r0, r4
 801611e:	f002 f9c7 	bl	80184b0 <__multiply>
 8016122:	900b      	str	r0, [sp, #44]	; 0x2c
 8016124:	2800      	cmp	r0, #0
 8016126:	f43f ae9f 	beq.w	8015e68 <_strtod_l+0x490>
 801612a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801612c:	4620      	mov	r0, r4
 801612e:	f002 f8a7 	bl	8018280 <_Bfree>
 8016132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016134:	9318      	str	r3, [sp, #96]	; 0x60
 8016136:	f1b8 0f00 	cmp.w	r8, #0
 801613a:	f300 808c 	bgt.w	8016256 <_strtod_l+0x87e>
 801613e:	9b06      	ldr	r3, [sp, #24]
 8016140:	2b00      	cmp	r3, #0
 8016142:	dd08      	ble.n	8016156 <_strtod_l+0x77e>
 8016144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016146:	9905      	ldr	r1, [sp, #20]
 8016148:	4620      	mov	r0, r4
 801614a:	f002 fa5b 	bl	8018604 <__pow5mult>
 801614e:	9005      	str	r0, [sp, #20]
 8016150:	2800      	cmp	r0, #0
 8016152:	f43f ae89 	beq.w	8015e68 <_strtod_l+0x490>
 8016156:	2f00      	cmp	r7, #0
 8016158:	dd08      	ble.n	801616c <_strtod_l+0x794>
 801615a:	9905      	ldr	r1, [sp, #20]
 801615c:	463a      	mov	r2, r7
 801615e:	4620      	mov	r0, r4
 8016160:	f002 faaa 	bl	80186b8 <__lshift>
 8016164:	9005      	str	r0, [sp, #20]
 8016166:	2800      	cmp	r0, #0
 8016168:	f43f ae7e 	beq.w	8015e68 <_strtod_l+0x490>
 801616c:	f1b9 0f00 	cmp.w	r9, #0
 8016170:	dd08      	ble.n	8016184 <_strtod_l+0x7ac>
 8016172:	4631      	mov	r1, r6
 8016174:	464a      	mov	r2, r9
 8016176:	4620      	mov	r0, r4
 8016178:	f002 fa9e 	bl	80186b8 <__lshift>
 801617c:	4606      	mov	r6, r0
 801617e:	2800      	cmp	r0, #0
 8016180:	f43f ae72 	beq.w	8015e68 <_strtod_l+0x490>
 8016184:	9a05      	ldr	r2, [sp, #20]
 8016186:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016188:	4620      	mov	r0, r4
 801618a:	f002 fb21 	bl	80187d0 <__mdiff>
 801618e:	4605      	mov	r5, r0
 8016190:	2800      	cmp	r0, #0
 8016192:	f43f ae69 	beq.w	8015e68 <_strtod_l+0x490>
 8016196:	68c3      	ldr	r3, [r0, #12]
 8016198:	930b      	str	r3, [sp, #44]	; 0x2c
 801619a:	2300      	movs	r3, #0
 801619c:	60c3      	str	r3, [r0, #12]
 801619e:	4631      	mov	r1, r6
 80161a0:	f002 fafa 	bl	8018798 <__mcmp>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	da60      	bge.n	801626a <_strtod_l+0x892>
 80161a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161aa:	ea53 030a 	orrs.w	r3, r3, sl
 80161ae:	f040 8082 	bne.w	80162b6 <_strtod_l+0x8de>
 80161b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d17d      	bne.n	80162b6 <_strtod_l+0x8de>
 80161ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161be:	0d1b      	lsrs	r3, r3, #20
 80161c0:	051b      	lsls	r3, r3, #20
 80161c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80161c6:	d976      	bls.n	80162b6 <_strtod_l+0x8de>
 80161c8:	696b      	ldr	r3, [r5, #20]
 80161ca:	b913      	cbnz	r3, 80161d2 <_strtod_l+0x7fa>
 80161cc:	692b      	ldr	r3, [r5, #16]
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	dd71      	ble.n	80162b6 <_strtod_l+0x8de>
 80161d2:	4629      	mov	r1, r5
 80161d4:	2201      	movs	r2, #1
 80161d6:	4620      	mov	r0, r4
 80161d8:	f002 fa6e 	bl	80186b8 <__lshift>
 80161dc:	4631      	mov	r1, r6
 80161de:	4605      	mov	r5, r0
 80161e0:	f002 fada 	bl	8018798 <__mcmp>
 80161e4:	2800      	cmp	r0, #0
 80161e6:	dd66      	ble.n	80162b6 <_strtod_l+0x8de>
 80161e8:	9904      	ldr	r1, [sp, #16]
 80161ea:	4a53      	ldr	r2, [pc, #332]	; (8016338 <_strtod_l+0x960>)
 80161ec:	465b      	mov	r3, fp
 80161ee:	2900      	cmp	r1, #0
 80161f0:	f000 8081 	beq.w	80162f6 <_strtod_l+0x91e>
 80161f4:	ea02 010b 	and.w	r1, r2, fp
 80161f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80161fc:	dc7b      	bgt.n	80162f6 <_strtod_l+0x91e>
 80161fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016202:	f77f aea9 	ble.w	8015f58 <_strtod_l+0x580>
 8016206:	4b4d      	ldr	r3, [pc, #308]	; (801633c <_strtod_l+0x964>)
 8016208:	4650      	mov	r0, sl
 801620a:	4659      	mov	r1, fp
 801620c:	2200      	movs	r2, #0
 801620e:	f7ea fa03 	bl	8000618 <__aeabi_dmul>
 8016212:	460b      	mov	r3, r1
 8016214:	4303      	orrs	r3, r0
 8016216:	bf08      	it	eq
 8016218:	2322      	moveq	r3, #34	; 0x22
 801621a:	4682      	mov	sl, r0
 801621c:	468b      	mov	fp, r1
 801621e:	bf08      	it	eq
 8016220:	6023      	streq	r3, [r4, #0]
 8016222:	e62b      	b.n	8015e7c <_strtod_l+0x4a4>
 8016224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016228:	fa02 f303 	lsl.w	r3, r2, r3
 801622c:	ea03 0a0a 	and.w	sl, r3, sl
 8016230:	e6e3      	b.n	8015ffa <_strtod_l+0x622>
 8016232:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8016236:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801623a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801623e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8016242:	fa01 f308 	lsl.w	r3, r1, r8
 8016246:	9308      	str	r3, [sp, #32]
 8016248:	910d      	str	r1, [sp, #52]	; 0x34
 801624a:	e746      	b.n	80160da <_strtod_l+0x702>
 801624c:	2300      	movs	r3, #0
 801624e:	9308      	str	r3, [sp, #32]
 8016250:	2301      	movs	r3, #1
 8016252:	930d      	str	r3, [sp, #52]	; 0x34
 8016254:	e741      	b.n	80160da <_strtod_l+0x702>
 8016256:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016258:	4642      	mov	r2, r8
 801625a:	4620      	mov	r0, r4
 801625c:	f002 fa2c 	bl	80186b8 <__lshift>
 8016260:	9018      	str	r0, [sp, #96]	; 0x60
 8016262:	2800      	cmp	r0, #0
 8016264:	f47f af6b 	bne.w	801613e <_strtod_l+0x766>
 8016268:	e5fe      	b.n	8015e68 <_strtod_l+0x490>
 801626a:	465f      	mov	r7, fp
 801626c:	d16e      	bne.n	801634c <_strtod_l+0x974>
 801626e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016270:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016274:	b342      	cbz	r2, 80162c8 <_strtod_l+0x8f0>
 8016276:	4a32      	ldr	r2, [pc, #200]	; (8016340 <_strtod_l+0x968>)
 8016278:	4293      	cmp	r3, r2
 801627a:	d128      	bne.n	80162ce <_strtod_l+0x8f6>
 801627c:	9b04      	ldr	r3, [sp, #16]
 801627e:	4651      	mov	r1, sl
 8016280:	b1eb      	cbz	r3, 80162be <_strtod_l+0x8e6>
 8016282:	4b2d      	ldr	r3, [pc, #180]	; (8016338 <_strtod_l+0x960>)
 8016284:	403b      	ands	r3, r7
 8016286:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801628a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801628e:	d819      	bhi.n	80162c4 <_strtod_l+0x8ec>
 8016290:	0d1b      	lsrs	r3, r3, #20
 8016292:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016296:	fa02 f303 	lsl.w	r3, r2, r3
 801629a:	4299      	cmp	r1, r3
 801629c:	d117      	bne.n	80162ce <_strtod_l+0x8f6>
 801629e:	4b29      	ldr	r3, [pc, #164]	; (8016344 <_strtod_l+0x96c>)
 80162a0:	429f      	cmp	r7, r3
 80162a2:	d102      	bne.n	80162aa <_strtod_l+0x8d2>
 80162a4:	3101      	adds	r1, #1
 80162a6:	f43f addf 	beq.w	8015e68 <_strtod_l+0x490>
 80162aa:	4b23      	ldr	r3, [pc, #140]	; (8016338 <_strtod_l+0x960>)
 80162ac:	403b      	ands	r3, r7
 80162ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80162b2:	f04f 0a00 	mov.w	sl, #0
 80162b6:	9b04      	ldr	r3, [sp, #16]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d1a4      	bne.n	8016206 <_strtod_l+0x82e>
 80162bc:	e5de      	b.n	8015e7c <_strtod_l+0x4a4>
 80162be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80162c2:	e7ea      	b.n	801629a <_strtod_l+0x8c2>
 80162c4:	4613      	mov	r3, r2
 80162c6:	e7e8      	b.n	801629a <_strtod_l+0x8c2>
 80162c8:	ea53 030a 	orrs.w	r3, r3, sl
 80162cc:	d08c      	beq.n	80161e8 <_strtod_l+0x810>
 80162ce:	9b08      	ldr	r3, [sp, #32]
 80162d0:	b1db      	cbz	r3, 801630a <_strtod_l+0x932>
 80162d2:	423b      	tst	r3, r7
 80162d4:	d0ef      	beq.n	80162b6 <_strtod_l+0x8de>
 80162d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162d8:	9a04      	ldr	r2, [sp, #16]
 80162da:	4650      	mov	r0, sl
 80162dc:	4659      	mov	r1, fp
 80162de:	b1c3      	cbz	r3, 8016312 <_strtod_l+0x93a>
 80162e0:	f7ff fb5e 	bl	80159a0 <sulp>
 80162e4:	4602      	mov	r2, r0
 80162e6:	460b      	mov	r3, r1
 80162e8:	ec51 0b18 	vmov	r0, r1, d8
 80162ec:	f7e9 ffde 	bl	80002ac <__adddf3>
 80162f0:	4682      	mov	sl, r0
 80162f2:	468b      	mov	fp, r1
 80162f4:	e7df      	b.n	80162b6 <_strtod_l+0x8de>
 80162f6:	4013      	ands	r3, r2
 80162f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80162fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016300:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016304:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016308:	e7d5      	b.n	80162b6 <_strtod_l+0x8de>
 801630a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801630c:	ea13 0f0a 	tst.w	r3, sl
 8016310:	e7e0      	b.n	80162d4 <_strtod_l+0x8fc>
 8016312:	f7ff fb45 	bl	80159a0 <sulp>
 8016316:	4602      	mov	r2, r0
 8016318:	460b      	mov	r3, r1
 801631a:	ec51 0b18 	vmov	r0, r1, d8
 801631e:	f7e9 ffc3 	bl	80002a8 <__aeabi_dsub>
 8016322:	2200      	movs	r2, #0
 8016324:	2300      	movs	r3, #0
 8016326:	4682      	mov	sl, r0
 8016328:	468b      	mov	fp, r1
 801632a:	f7ea fbdd 	bl	8000ae8 <__aeabi_dcmpeq>
 801632e:	2800      	cmp	r0, #0
 8016330:	d0c1      	beq.n	80162b6 <_strtod_l+0x8de>
 8016332:	e611      	b.n	8015f58 <_strtod_l+0x580>
 8016334:	fffffc02 	.word	0xfffffc02
 8016338:	7ff00000 	.word	0x7ff00000
 801633c:	39500000 	.word	0x39500000
 8016340:	000fffff 	.word	0x000fffff
 8016344:	7fefffff 	.word	0x7fefffff
 8016348:	0808c708 	.word	0x0808c708
 801634c:	4631      	mov	r1, r6
 801634e:	4628      	mov	r0, r5
 8016350:	f002 fba0 	bl	8018a94 <__ratio>
 8016354:	ec59 8b10 	vmov	r8, r9, d0
 8016358:	ee10 0a10 	vmov	r0, s0
 801635c:	2200      	movs	r2, #0
 801635e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016362:	4649      	mov	r1, r9
 8016364:	f7ea fbd4 	bl	8000b10 <__aeabi_dcmple>
 8016368:	2800      	cmp	r0, #0
 801636a:	d07a      	beq.n	8016462 <_strtod_l+0xa8a>
 801636c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801636e:	2b00      	cmp	r3, #0
 8016370:	d04a      	beq.n	8016408 <_strtod_l+0xa30>
 8016372:	4b95      	ldr	r3, [pc, #596]	; (80165c8 <_strtod_l+0xbf0>)
 8016374:	2200      	movs	r2, #0
 8016376:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801637a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80165c8 <_strtod_l+0xbf0>
 801637e:	f04f 0800 	mov.w	r8, #0
 8016382:	4b92      	ldr	r3, [pc, #584]	; (80165cc <_strtod_l+0xbf4>)
 8016384:	403b      	ands	r3, r7
 8016386:	930d      	str	r3, [sp, #52]	; 0x34
 8016388:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801638a:	4b91      	ldr	r3, [pc, #580]	; (80165d0 <_strtod_l+0xbf8>)
 801638c:	429a      	cmp	r2, r3
 801638e:	f040 80b0 	bne.w	80164f2 <_strtod_l+0xb1a>
 8016392:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016396:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801639a:	ec4b ab10 	vmov	d0, sl, fp
 801639e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163a2:	f002 fa9f 	bl	80188e4 <__ulp>
 80163a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80163aa:	ec53 2b10 	vmov	r2, r3, d0
 80163ae:	f7ea f933 	bl	8000618 <__aeabi_dmul>
 80163b2:	4652      	mov	r2, sl
 80163b4:	465b      	mov	r3, fp
 80163b6:	f7e9 ff79 	bl	80002ac <__adddf3>
 80163ba:	460b      	mov	r3, r1
 80163bc:	4983      	ldr	r1, [pc, #524]	; (80165cc <_strtod_l+0xbf4>)
 80163be:	4a85      	ldr	r2, [pc, #532]	; (80165d4 <_strtod_l+0xbfc>)
 80163c0:	4019      	ands	r1, r3
 80163c2:	4291      	cmp	r1, r2
 80163c4:	4682      	mov	sl, r0
 80163c6:	d960      	bls.n	801648a <_strtod_l+0xab2>
 80163c8:	ee18 3a90 	vmov	r3, s17
 80163cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80163d0:	4293      	cmp	r3, r2
 80163d2:	d104      	bne.n	80163de <_strtod_l+0xa06>
 80163d4:	ee18 3a10 	vmov	r3, s16
 80163d8:	3301      	adds	r3, #1
 80163da:	f43f ad45 	beq.w	8015e68 <_strtod_l+0x490>
 80163de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80165e0 <_strtod_l+0xc08>
 80163e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80163e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80163e8:	4620      	mov	r0, r4
 80163ea:	f001 ff49 	bl	8018280 <_Bfree>
 80163ee:	9905      	ldr	r1, [sp, #20]
 80163f0:	4620      	mov	r0, r4
 80163f2:	f001 ff45 	bl	8018280 <_Bfree>
 80163f6:	4631      	mov	r1, r6
 80163f8:	4620      	mov	r0, r4
 80163fa:	f001 ff41 	bl	8018280 <_Bfree>
 80163fe:	4629      	mov	r1, r5
 8016400:	4620      	mov	r0, r4
 8016402:	f001 ff3d 	bl	8018280 <_Bfree>
 8016406:	e61a      	b.n	801603e <_strtod_l+0x666>
 8016408:	f1ba 0f00 	cmp.w	sl, #0
 801640c:	d11b      	bne.n	8016446 <_strtod_l+0xa6e>
 801640e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016412:	b9f3      	cbnz	r3, 8016452 <_strtod_l+0xa7a>
 8016414:	4b6c      	ldr	r3, [pc, #432]	; (80165c8 <_strtod_l+0xbf0>)
 8016416:	2200      	movs	r2, #0
 8016418:	4640      	mov	r0, r8
 801641a:	4649      	mov	r1, r9
 801641c:	f7ea fb6e 	bl	8000afc <__aeabi_dcmplt>
 8016420:	b9d0      	cbnz	r0, 8016458 <_strtod_l+0xa80>
 8016422:	4640      	mov	r0, r8
 8016424:	4649      	mov	r1, r9
 8016426:	4b6c      	ldr	r3, [pc, #432]	; (80165d8 <_strtod_l+0xc00>)
 8016428:	2200      	movs	r2, #0
 801642a:	f7ea f8f5 	bl	8000618 <__aeabi_dmul>
 801642e:	4680      	mov	r8, r0
 8016430:	4689      	mov	r9, r1
 8016432:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016436:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801643a:	9315      	str	r3, [sp, #84]	; 0x54
 801643c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016440:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016444:	e79d      	b.n	8016382 <_strtod_l+0x9aa>
 8016446:	f1ba 0f01 	cmp.w	sl, #1
 801644a:	d102      	bne.n	8016452 <_strtod_l+0xa7a>
 801644c:	2f00      	cmp	r7, #0
 801644e:	f43f ad83 	beq.w	8015f58 <_strtod_l+0x580>
 8016452:	4b62      	ldr	r3, [pc, #392]	; (80165dc <_strtod_l+0xc04>)
 8016454:	2200      	movs	r2, #0
 8016456:	e78e      	b.n	8016376 <_strtod_l+0x99e>
 8016458:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80165d8 <_strtod_l+0xc00>
 801645c:	f04f 0800 	mov.w	r8, #0
 8016460:	e7e7      	b.n	8016432 <_strtod_l+0xa5a>
 8016462:	4b5d      	ldr	r3, [pc, #372]	; (80165d8 <_strtod_l+0xc00>)
 8016464:	4640      	mov	r0, r8
 8016466:	4649      	mov	r1, r9
 8016468:	2200      	movs	r2, #0
 801646a:	f7ea f8d5 	bl	8000618 <__aeabi_dmul>
 801646e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016470:	4680      	mov	r8, r0
 8016472:	4689      	mov	r9, r1
 8016474:	b933      	cbnz	r3, 8016484 <_strtod_l+0xaac>
 8016476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801647a:	900e      	str	r0, [sp, #56]	; 0x38
 801647c:	930f      	str	r3, [sp, #60]	; 0x3c
 801647e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8016482:	e7dd      	b.n	8016440 <_strtod_l+0xa68>
 8016484:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8016488:	e7f9      	b.n	801647e <_strtod_l+0xaa6>
 801648a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801648e:	9b04      	ldr	r3, [sp, #16]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d1a8      	bne.n	80163e6 <_strtod_l+0xa0e>
 8016494:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016498:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801649a:	0d1b      	lsrs	r3, r3, #20
 801649c:	051b      	lsls	r3, r3, #20
 801649e:	429a      	cmp	r2, r3
 80164a0:	d1a1      	bne.n	80163e6 <_strtod_l+0xa0e>
 80164a2:	4640      	mov	r0, r8
 80164a4:	4649      	mov	r1, r9
 80164a6:	f7ea fc17 	bl	8000cd8 <__aeabi_d2lz>
 80164aa:	f7ea f887 	bl	80005bc <__aeabi_l2d>
 80164ae:	4602      	mov	r2, r0
 80164b0:	460b      	mov	r3, r1
 80164b2:	4640      	mov	r0, r8
 80164b4:	4649      	mov	r1, r9
 80164b6:	f7e9 fef7 	bl	80002a8 <__aeabi_dsub>
 80164ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80164bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80164c0:	ea43 030a 	orr.w	r3, r3, sl
 80164c4:	4313      	orrs	r3, r2
 80164c6:	4680      	mov	r8, r0
 80164c8:	4689      	mov	r9, r1
 80164ca:	d055      	beq.n	8016578 <_strtod_l+0xba0>
 80164cc:	a336      	add	r3, pc, #216	; (adr r3, 80165a8 <_strtod_l+0xbd0>)
 80164ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164d2:	f7ea fb13 	bl	8000afc <__aeabi_dcmplt>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	f47f acd0 	bne.w	8015e7c <_strtod_l+0x4a4>
 80164dc:	a334      	add	r3, pc, #208	; (adr r3, 80165b0 <_strtod_l+0xbd8>)
 80164de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e2:	4640      	mov	r0, r8
 80164e4:	4649      	mov	r1, r9
 80164e6:	f7ea fb27 	bl	8000b38 <__aeabi_dcmpgt>
 80164ea:	2800      	cmp	r0, #0
 80164ec:	f43f af7b 	beq.w	80163e6 <_strtod_l+0xa0e>
 80164f0:	e4c4      	b.n	8015e7c <_strtod_l+0x4a4>
 80164f2:	9b04      	ldr	r3, [sp, #16]
 80164f4:	b333      	cbz	r3, 8016544 <_strtod_l+0xb6c>
 80164f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80164fc:	d822      	bhi.n	8016544 <_strtod_l+0xb6c>
 80164fe:	a32e      	add	r3, pc, #184	; (adr r3, 80165b8 <_strtod_l+0xbe0>)
 8016500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016504:	4640      	mov	r0, r8
 8016506:	4649      	mov	r1, r9
 8016508:	f7ea fb02 	bl	8000b10 <__aeabi_dcmple>
 801650c:	b1a0      	cbz	r0, 8016538 <_strtod_l+0xb60>
 801650e:	4649      	mov	r1, r9
 8016510:	4640      	mov	r0, r8
 8016512:	f7ea fb59 	bl	8000bc8 <__aeabi_d2uiz>
 8016516:	2801      	cmp	r0, #1
 8016518:	bf38      	it	cc
 801651a:	2001      	movcc	r0, #1
 801651c:	f7ea f802 	bl	8000524 <__aeabi_ui2d>
 8016520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016522:	4680      	mov	r8, r0
 8016524:	4689      	mov	r9, r1
 8016526:	bb23      	cbnz	r3, 8016572 <_strtod_l+0xb9a>
 8016528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801652c:	9010      	str	r0, [sp, #64]	; 0x40
 801652e:	9311      	str	r3, [sp, #68]	; 0x44
 8016530:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016534:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801653a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801653c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016540:	1a9b      	subs	r3, r3, r2
 8016542:	9309      	str	r3, [sp, #36]	; 0x24
 8016544:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016548:	eeb0 0a48 	vmov.f32	s0, s16
 801654c:	eef0 0a68 	vmov.f32	s1, s17
 8016550:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016554:	f002 f9c6 	bl	80188e4 <__ulp>
 8016558:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801655c:	ec53 2b10 	vmov	r2, r3, d0
 8016560:	f7ea f85a 	bl	8000618 <__aeabi_dmul>
 8016564:	ec53 2b18 	vmov	r2, r3, d8
 8016568:	f7e9 fea0 	bl	80002ac <__adddf3>
 801656c:	4682      	mov	sl, r0
 801656e:	468b      	mov	fp, r1
 8016570:	e78d      	b.n	801648e <_strtod_l+0xab6>
 8016572:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8016576:	e7db      	b.n	8016530 <_strtod_l+0xb58>
 8016578:	a311      	add	r3, pc, #68	; (adr r3, 80165c0 <_strtod_l+0xbe8>)
 801657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801657e:	f7ea fabd 	bl	8000afc <__aeabi_dcmplt>
 8016582:	e7b2      	b.n	80164ea <_strtod_l+0xb12>
 8016584:	2300      	movs	r3, #0
 8016586:	930a      	str	r3, [sp, #40]	; 0x28
 8016588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801658a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801658c:	6013      	str	r3, [r2, #0]
 801658e:	f7ff ba6b 	b.w	8015a68 <_strtod_l+0x90>
 8016592:	2a65      	cmp	r2, #101	; 0x65
 8016594:	f43f ab5f 	beq.w	8015c56 <_strtod_l+0x27e>
 8016598:	2a45      	cmp	r2, #69	; 0x45
 801659a:	f43f ab5c 	beq.w	8015c56 <_strtod_l+0x27e>
 801659e:	2301      	movs	r3, #1
 80165a0:	f7ff bb94 	b.w	8015ccc <_strtod_l+0x2f4>
 80165a4:	f3af 8000 	nop.w
 80165a8:	94a03595 	.word	0x94a03595
 80165ac:	3fdfffff 	.word	0x3fdfffff
 80165b0:	35afe535 	.word	0x35afe535
 80165b4:	3fe00000 	.word	0x3fe00000
 80165b8:	ffc00000 	.word	0xffc00000
 80165bc:	41dfffff 	.word	0x41dfffff
 80165c0:	94a03595 	.word	0x94a03595
 80165c4:	3fcfffff 	.word	0x3fcfffff
 80165c8:	3ff00000 	.word	0x3ff00000
 80165cc:	7ff00000 	.word	0x7ff00000
 80165d0:	7fe00000 	.word	0x7fe00000
 80165d4:	7c9fffff 	.word	0x7c9fffff
 80165d8:	3fe00000 	.word	0x3fe00000
 80165dc:	bff00000 	.word	0xbff00000
 80165e0:	7fefffff 	.word	0x7fefffff

080165e4 <_strtod_r>:
 80165e4:	4b01      	ldr	r3, [pc, #4]	; (80165ec <_strtod_r+0x8>)
 80165e6:	f7ff b9f7 	b.w	80159d8 <_strtod_l>
 80165ea:	bf00      	nop
 80165ec:	20000744 	.word	0x20000744

080165f0 <strtod>:
 80165f0:	460a      	mov	r2, r1
 80165f2:	4601      	mov	r1, r0
 80165f4:	4802      	ldr	r0, [pc, #8]	; (8016600 <strtod+0x10>)
 80165f6:	4b03      	ldr	r3, [pc, #12]	; (8016604 <strtod+0x14>)
 80165f8:	6800      	ldr	r0, [r0, #0]
 80165fa:	f7ff b9ed 	b.w	80159d8 <_strtod_l>
 80165fe:	bf00      	nop
 8016600:	200006dc 	.word	0x200006dc
 8016604:	20000744 	.word	0x20000744

08016608 <strtok>:
 8016608:	4b16      	ldr	r3, [pc, #88]	; (8016664 <strtok+0x5c>)
 801660a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801660c:	681e      	ldr	r6, [r3, #0]
 801660e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016610:	4605      	mov	r5, r0
 8016612:	b9fc      	cbnz	r4, 8016654 <strtok+0x4c>
 8016614:	2050      	movs	r0, #80	; 0x50
 8016616:	9101      	str	r1, [sp, #4]
 8016618:	f7fe f996 	bl	8014948 <malloc>
 801661c:	9901      	ldr	r1, [sp, #4]
 801661e:	65b0      	str	r0, [r6, #88]	; 0x58
 8016620:	4602      	mov	r2, r0
 8016622:	b920      	cbnz	r0, 801662e <strtok+0x26>
 8016624:	4b10      	ldr	r3, [pc, #64]	; (8016668 <strtok+0x60>)
 8016626:	4811      	ldr	r0, [pc, #68]	; (801666c <strtok+0x64>)
 8016628:	2157      	movs	r1, #87	; 0x57
 801662a:	f000 f98d 	bl	8016948 <__assert_func>
 801662e:	e9c0 4400 	strd	r4, r4, [r0]
 8016632:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8016636:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801663a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801663e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8016642:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8016646:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801664a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801664e:	6184      	str	r4, [r0, #24]
 8016650:	7704      	strb	r4, [r0, #28]
 8016652:	6244      	str	r4, [r0, #36]	; 0x24
 8016654:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8016656:	2301      	movs	r3, #1
 8016658:	4628      	mov	r0, r5
 801665a:	b002      	add	sp, #8
 801665c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016660:	f000 b806 	b.w	8016670 <__strtok_r>
 8016664:	200006dc 	.word	0x200006dc
 8016668:	0808c730 	.word	0x0808c730
 801666c:	0808c747 	.word	0x0808c747

08016670 <__strtok_r>:
 8016670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016672:	b908      	cbnz	r0, 8016678 <__strtok_r+0x8>
 8016674:	6810      	ldr	r0, [r2, #0]
 8016676:	b188      	cbz	r0, 801669c <__strtok_r+0x2c>
 8016678:	4604      	mov	r4, r0
 801667a:	4620      	mov	r0, r4
 801667c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016680:	460f      	mov	r7, r1
 8016682:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016686:	b91e      	cbnz	r6, 8016690 <__strtok_r+0x20>
 8016688:	b965      	cbnz	r5, 80166a4 <__strtok_r+0x34>
 801668a:	6015      	str	r5, [r2, #0]
 801668c:	4628      	mov	r0, r5
 801668e:	e005      	b.n	801669c <__strtok_r+0x2c>
 8016690:	42b5      	cmp	r5, r6
 8016692:	d1f6      	bne.n	8016682 <__strtok_r+0x12>
 8016694:	2b00      	cmp	r3, #0
 8016696:	d1f0      	bne.n	801667a <__strtok_r+0xa>
 8016698:	6014      	str	r4, [r2, #0]
 801669a:	7003      	strb	r3, [r0, #0]
 801669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801669e:	461c      	mov	r4, r3
 80166a0:	e00c      	b.n	80166bc <__strtok_r+0x4c>
 80166a2:	b915      	cbnz	r5, 80166aa <__strtok_r+0x3a>
 80166a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80166a8:	460e      	mov	r6, r1
 80166aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80166ae:	42ab      	cmp	r3, r5
 80166b0:	d1f7      	bne.n	80166a2 <__strtok_r+0x32>
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d0f3      	beq.n	801669e <__strtok_r+0x2e>
 80166b6:	2300      	movs	r3, #0
 80166b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80166bc:	6014      	str	r4, [r2, #0]
 80166be:	e7ed      	b.n	801669c <__strtok_r+0x2c>

080166c0 <_strtol_l.constprop.0>:
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166c6:	d001      	beq.n	80166cc <_strtol_l.constprop.0+0xc>
 80166c8:	2b24      	cmp	r3, #36	; 0x24
 80166ca:	d906      	bls.n	80166da <_strtol_l.constprop.0+0x1a>
 80166cc:	f7fe f912 	bl	80148f4 <__errno>
 80166d0:	2316      	movs	r3, #22
 80166d2:	6003      	str	r3, [r0, #0]
 80166d4:	2000      	movs	r0, #0
 80166d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80167c0 <_strtol_l.constprop.0+0x100>
 80166de:	460d      	mov	r5, r1
 80166e0:	462e      	mov	r6, r5
 80166e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80166e6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80166ea:	f017 0708 	ands.w	r7, r7, #8
 80166ee:	d1f7      	bne.n	80166e0 <_strtol_l.constprop.0+0x20>
 80166f0:	2c2d      	cmp	r4, #45	; 0x2d
 80166f2:	d132      	bne.n	801675a <_strtol_l.constprop.0+0x9a>
 80166f4:	782c      	ldrb	r4, [r5, #0]
 80166f6:	2701      	movs	r7, #1
 80166f8:	1cb5      	adds	r5, r6, #2
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d05b      	beq.n	80167b6 <_strtol_l.constprop.0+0xf6>
 80166fe:	2b10      	cmp	r3, #16
 8016700:	d109      	bne.n	8016716 <_strtol_l.constprop.0+0x56>
 8016702:	2c30      	cmp	r4, #48	; 0x30
 8016704:	d107      	bne.n	8016716 <_strtol_l.constprop.0+0x56>
 8016706:	782c      	ldrb	r4, [r5, #0]
 8016708:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801670c:	2c58      	cmp	r4, #88	; 0x58
 801670e:	d14d      	bne.n	80167ac <_strtol_l.constprop.0+0xec>
 8016710:	786c      	ldrb	r4, [r5, #1]
 8016712:	2310      	movs	r3, #16
 8016714:	3502      	adds	r5, #2
 8016716:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801671a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801671e:	f04f 0c00 	mov.w	ip, #0
 8016722:	fbb8 f9f3 	udiv	r9, r8, r3
 8016726:	4666      	mov	r6, ip
 8016728:	fb03 8a19 	mls	sl, r3, r9, r8
 801672c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016730:	f1be 0f09 	cmp.w	lr, #9
 8016734:	d816      	bhi.n	8016764 <_strtol_l.constprop.0+0xa4>
 8016736:	4674      	mov	r4, lr
 8016738:	42a3      	cmp	r3, r4
 801673a:	dd24      	ble.n	8016786 <_strtol_l.constprop.0+0xc6>
 801673c:	f1bc 0f00 	cmp.w	ip, #0
 8016740:	db1e      	blt.n	8016780 <_strtol_l.constprop.0+0xc0>
 8016742:	45b1      	cmp	r9, r6
 8016744:	d31c      	bcc.n	8016780 <_strtol_l.constprop.0+0xc0>
 8016746:	d101      	bne.n	801674c <_strtol_l.constprop.0+0x8c>
 8016748:	45a2      	cmp	sl, r4
 801674a:	db19      	blt.n	8016780 <_strtol_l.constprop.0+0xc0>
 801674c:	fb06 4603 	mla	r6, r6, r3, r4
 8016750:	f04f 0c01 	mov.w	ip, #1
 8016754:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016758:	e7e8      	b.n	801672c <_strtol_l.constprop.0+0x6c>
 801675a:	2c2b      	cmp	r4, #43	; 0x2b
 801675c:	bf04      	itt	eq
 801675e:	782c      	ldrbeq	r4, [r5, #0]
 8016760:	1cb5      	addeq	r5, r6, #2
 8016762:	e7ca      	b.n	80166fa <_strtol_l.constprop.0+0x3a>
 8016764:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016768:	f1be 0f19 	cmp.w	lr, #25
 801676c:	d801      	bhi.n	8016772 <_strtol_l.constprop.0+0xb2>
 801676e:	3c37      	subs	r4, #55	; 0x37
 8016770:	e7e2      	b.n	8016738 <_strtol_l.constprop.0+0x78>
 8016772:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016776:	f1be 0f19 	cmp.w	lr, #25
 801677a:	d804      	bhi.n	8016786 <_strtol_l.constprop.0+0xc6>
 801677c:	3c57      	subs	r4, #87	; 0x57
 801677e:	e7db      	b.n	8016738 <_strtol_l.constprop.0+0x78>
 8016780:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8016784:	e7e6      	b.n	8016754 <_strtol_l.constprop.0+0x94>
 8016786:	f1bc 0f00 	cmp.w	ip, #0
 801678a:	da05      	bge.n	8016798 <_strtol_l.constprop.0+0xd8>
 801678c:	2322      	movs	r3, #34	; 0x22
 801678e:	6003      	str	r3, [r0, #0]
 8016790:	4646      	mov	r6, r8
 8016792:	b942      	cbnz	r2, 80167a6 <_strtol_l.constprop.0+0xe6>
 8016794:	4630      	mov	r0, r6
 8016796:	e79e      	b.n	80166d6 <_strtol_l.constprop.0+0x16>
 8016798:	b107      	cbz	r7, 801679c <_strtol_l.constprop.0+0xdc>
 801679a:	4276      	negs	r6, r6
 801679c:	2a00      	cmp	r2, #0
 801679e:	d0f9      	beq.n	8016794 <_strtol_l.constprop.0+0xd4>
 80167a0:	f1bc 0f00 	cmp.w	ip, #0
 80167a4:	d000      	beq.n	80167a8 <_strtol_l.constprop.0+0xe8>
 80167a6:	1e69      	subs	r1, r5, #1
 80167a8:	6011      	str	r1, [r2, #0]
 80167aa:	e7f3      	b.n	8016794 <_strtol_l.constprop.0+0xd4>
 80167ac:	2430      	movs	r4, #48	; 0x30
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d1b1      	bne.n	8016716 <_strtol_l.constprop.0+0x56>
 80167b2:	2308      	movs	r3, #8
 80167b4:	e7af      	b.n	8016716 <_strtol_l.constprop.0+0x56>
 80167b6:	2c30      	cmp	r4, #48	; 0x30
 80167b8:	d0a5      	beq.n	8016706 <_strtol_l.constprop.0+0x46>
 80167ba:	230a      	movs	r3, #10
 80167bc:	e7ab      	b.n	8016716 <_strtol_l.constprop.0+0x56>
 80167be:	bf00      	nop
 80167c0:	0808c7e1 	.word	0x0808c7e1

080167c4 <_strtol_r>:
 80167c4:	f7ff bf7c 	b.w	80166c0 <_strtol_l.constprop.0>

080167c8 <__swbuf_r>:
 80167c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ca:	460e      	mov	r6, r1
 80167cc:	4614      	mov	r4, r2
 80167ce:	4605      	mov	r5, r0
 80167d0:	b118      	cbz	r0, 80167da <__swbuf_r+0x12>
 80167d2:	6983      	ldr	r3, [r0, #24]
 80167d4:	b90b      	cbnz	r3, 80167da <__swbuf_r+0x12>
 80167d6:	f001 f86b 	bl	80178b0 <__sinit>
 80167da:	4b21      	ldr	r3, [pc, #132]	; (8016860 <__swbuf_r+0x98>)
 80167dc:	429c      	cmp	r4, r3
 80167de:	d12b      	bne.n	8016838 <__swbuf_r+0x70>
 80167e0:	686c      	ldr	r4, [r5, #4]
 80167e2:	69a3      	ldr	r3, [r4, #24]
 80167e4:	60a3      	str	r3, [r4, #8]
 80167e6:	89a3      	ldrh	r3, [r4, #12]
 80167e8:	071a      	lsls	r2, r3, #28
 80167ea:	d52f      	bpl.n	801684c <__swbuf_r+0x84>
 80167ec:	6923      	ldr	r3, [r4, #16]
 80167ee:	b36b      	cbz	r3, 801684c <__swbuf_r+0x84>
 80167f0:	6923      	ldr	r3, [r4, #16]
 80167f2:	6820      	ldr	r0, [r4, #0]
 80167f4:	1ac0      	subs	r0, r0, r3
 80167f6:	6963      	ldr	r3, [r4, #20]
 80167f8:	b2f6      	uxtb	r6, r6
 80167fa:	4283      	cmp	r3, r0
 80167fc:	4637      	mov	r7, r6
 80167fe:	dc04      	bgt.n	801680a <__swbuf_r+0x42>
 8016800:	4621      	mov	r1, r4
 8016802:	4628      	mov	r0, r5
 8016804:	f000 ffc0 	bl	8017788 <_fflush_r>
 8016808:	bb30      	cbnz	r0, 8016858 <__swbuf_r+0x90>
 801680a:	68a3      	ldr	r3, [r4, #8]
 801680c:	3b01      	subs	r3, #1
 801680e:	60a3      	str	r3, [r4, #8]
 8016810:	6823      	ldr	r3, [r4, #0]
 8016812:	1c5a      	adds	r2, r3, #1
 8016814:	6022      	str	r2, [r4, #0]
 8016816:	701e      	strb	r6, [r3, #0]
 8016818:	6963      	ldr	r3, [r4, #20]
 801681a:	3001      	adds	r0, #1
 801681c:	4283      	cmp	r3, r0
 801681e:	d004      	beq.n	801682a <__swbuf_r+0x62>
 8016820:	89a3      	ldrh	r3, [r4, #12]
 8016822:	07db      	lsls	r3, r3, #31
 8016824:	d506      	bpl.n	8016834 <__swbuf_r+0x6c>
 8016826:	2e0a      	cmp	r6, #10
 8016828:	d104      	bne.n	8016834 <__swbuf_r+0x6c>
 801682a:	4621      	mov	r1, r4
 801682c:	4628      	mov	r0, r5
 801682e:	f000 ffab 	bl	8017788 <_fflush_r>
 8016832:	b988      	cbnz	r0, 8016858 <__swbuf_r+0x90>
 8016834:	4638      	mov	r0, r7
 8016836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016838:	4b0a      	ldr	r3, [pc, #40]	; (8016864 <__swbuf_r+0x9c>)
 801683a:	429c      	cmp	r4, r3
 801683c:	d101      	bne.n	8016842 <__swbuf_r+0x7a>
 801683e:	68ac      	ldr	r4, [r5, #8]
 8016840:	e7cf      	b.n	80167e2 <__swbuf_r+0x1a>
 8016842:	4b09      	ldr	r3, [pc, #36]	; (8016868 <__swbuf_r+0xa0>)
 8016844:	429c      	cmp	r4, r3
 8016846:	bf08      	it	eq
 8016848:	68ec      	ldreq	r4, [r5, #12]
 801684a:	e7ca      	b.n	80167e2 <__swbuf_r+0x1a>
 801684c:	4621      	mov	r1, r4
 801684e:	4628      	mov	r0, r5
 8016850:	f000 f80c 	bl	801686c <__swsetup_r>
 8016854:	2800      	cmp	r0, #0
 8016856:	d0cb      	beq.n	80167f0 <__swbuf_r+0x28>
 8016858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801685c:	e7ea      	b.n	8016834 <__swbuf_r+0x6c>
 801685e:	bf00      	nop
 8016860:	0808c97c 	.word	0x0808c97c
 8016864:	0808c99c 	.word	0x0808c99c
 8016868:	0808c95c 	.word	0x0808c95c

0801686c <__swsetup_r>:
 801686c:	4b32      	ldr	r3, [pc, #200]	; (8016938 <__swsetup_r+0xcc>)
 801686e:	b570      	push	{r4, r5, r6, lr}
 8016870:	681d      	ldr	r5, [r3, #0]
 8016872:	4606      	mov	r6, r0
 8016874:	460c      	mov	r4, r1
 8016876:	b125      	cbz	r5, 8016882 <__swsetup_r+0x16>
 8016878:	69ab      	ldr	r3, [r5, #24]
 801687a:	b913      	cbnz	r3, 8016882 <__swsetup_r+0x16>
 801687c:	4628      	mov	r0, r5
 801687e:	f001 f817 	bl	80178b0 <__sinit>
 8016882:	4b2e      	ldr	r3, [pc, #184]	; (801693c <__swsetup_r+0xd0>)
 8016884:	429c      	cmp	r4, r3
 8016886:	d10f      	bne.n	80168a8 <__swsetup_r+0x3c>
 8016888:	686c      	ldr	r4, [r5, #4]
 801688a:	89a3      	ldrh	r3, [r4, #12]
 801688c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016890:	0719      	lsls	r1, r3, #28
 8016892:	d42c      	bmi.n	80168ee <__swsetup_r+0x82>
 8016894:	06dd      	lsls	r5, r3, #27
 8016896:	d411      	bmi.n	80168bc <__swsetup_r+0x50>
 8016898:	2309      	movs	r3, #9
 801689a:	6033      	str	r3, [r6, #0]
 801689c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80168a0:	81a3      	strh	r3, [r4, #12]
 80168a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80168a6:	e03e      	b.n	8016926 <__swsetup_r+0xba>
 80168a8:	4b25      	ldr	r3, [pc, #148]	; (8016940 <__swsetup_r+0xd4>)
 80168aa:	429c      	cmp	r4, r3
 80168ac:	d101      	bne.n	80168b2 <__swsetup_r+0x46>
 80168ae:	68ac      	ldr	r4, [r5, #8]
 80168b0:	e7eb      	b.n	801688a <__swsetup_r+0x1e>
 80168b2:	4b24      	ldr	r3, [pc, #144]	; (8016944 <__swsetup_r+0xd8>)
 80168b4:	429c      	cmp	r4, r3
 80168b6:	bf08      	it	eq
 80168b8:	68ec      	ldreq	r4, [r5, #12]
 80168ba:	e7e6      	b.n	801688a <__swsetup_r+0x1e>
 80168bc:	0758      	lsls	r0, r3, #29
 80168be:	d512      	bpl.n	80168e6 <__swsetup_r+0x7a>
 80168c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168c2:	b141      	cbz	r1, 80168d6 <__swsetup_r+0x6a>
 80168c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168c8:	4299      	cmp	r1, r3
 80168ca:	d002      	beq.n	80168d2 <__swsetup_r+0x66>
 80168cc:	4630      	mov	r0, r6
 80168ce:	f7fe f861 	bl	8014994 <_free_r>
 80168d2:	2300      	movs	r3, #0
 80168d4:	6363      	str	r3, [r4, #52]	; 0x34
 80168d6:	89a3      	ldrh	r3, [r4, #12]
 80168d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80168dc:	81a3      	strh	r3, [r4, #12]
 80168de:	2300      	movs	r3, #0
 80168e0:	6063      	str	r3, [r4, #4]
 80168e2:	6923      	ldr	r3, [r4, #16]
 80168e4:	6023      	str	r3, [r4, #0]
 80168e6:	89a3      	ldrh	r3, [r4, #12]
 80168e8:	f043 0308 	orr.w	r3, r3, #8
 80168ec:	81a3      	strh	r3, [r4, #12]
 80168ee:	6923      	ldr	r3, [r4, #16]
 80168f0:	b94b      	cbnz	r3, 8016906 <__swsetup_r+0x9a>
 80168f2:	89a3      	ldrh	r3, [r4, #12]
 80168f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80168f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80168fc:	d003      	beq.n	8016906 <__swsetup_r+0x9a>
 80168fe:	4621      	mov	r1, r4
 8016900:	4630      	mov	r0, r6
 8016902:	f001 fc1f 	bl	8018144 <__smakebuf_r>
 8016906:	89a0      	ldrh	r0, [r4, #12]
 8016908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801690c:	f010 0301 	ands.w	r3, r0, #1
 8016910:	d00a      	beq.n	8016928 <__swsetup_r+0xbc>
 8016912:	2300      	movs	r3, #0
 8016914:	60a3      	str	r3, [r4, #8]
 8016916:	6963      	ldr	r3, [r4, #20]
 8016918:	425b      	negs	r3, r3
 801691a:	61a3      	str	r3, [r4, #24]
 801691c:	6923      	ldr	r3, [r4, #16]
 801691e:	b943      	cbnz	r3, 8016932 <__swsetup_r+0xc6>
 8016920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016924:	d1ba      	bne.n	801689c <__swsetup_r+0x30>
 8016926:	bd70      	pop	{r4, r5, r6, pc}
 8016928:	0781      	lsls	r1, r0, #30
 801692a:	bf58      	it	pl
 801692c:	6963      	ldrpl	r3, [r4, #20]
 801692e:	60a3      	str	r3, [r4, #8]
 8016930:	e7f4      	b.n	801691c <__swsetup_r+0xb0>
 8016932:	2000      	movs	r0, #0
 8016934:	e7f7      	b.n	8016926 <__swsetup_r+0xba>
 8016936:	bf00      	nop
 8016938:	200006dc 	.word	0x200006dc
 801693c:	0808c97c 	.word	0x0808c97c
 8016940:	0808c99c 	.word	0x0808c99c
 8016944:	0808c95c 	.word	0x0808c95c

08016948 <__assert_func>:
 8016948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801694a:	4614      	mov	r4, r2
 801694c:	461a      	mov	r2, r3
 801694e:	4b09      	ldr	r3, [pc, #36]	; (8016974 <__assert_func+0x2c>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4605      	mov	r5, r0
 8016954:	68d8      	ldr	r0, [r3, #12]
 8016956:	b14c      	cbz	r4, 801696c <__assert_func+0x24>
 8016958:	4b07      	ldr	r3, [pc, #28]	; (8016978 <__assert_func+0x30>)
 801695a:	9100      	str	r1, [sp, #0]
 801695c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016960:	4906      	ldr	r1, [pc, #24]	; (801697c <__assert_func+0x34>)
 8016962:	462b      	mov	r3, r5
 8016964:	f001 f822 	bl	80179ac <fiprintf>
 8016968:	f002 fc84 	bl	8019274 <abort>
 801696c:	4b04      	ldr	r3, [pc, #16]	; (8016980 <__assert_func+0x38>)
 801696e:	461c      	mov	r4, r3
 8016970:	e7f3      	b.n	801695a <__assert_func+0x12>
 8016972:	bf00      	nop
 8016974:	200006dc 	.word	0x200006dc
 8016978:	0808c7a4 	.word	0x0808c7a4
 801697c:	0808c7b1 	.word	0x0808c7b1
 8016980:	0808c7df 	.word	0x0808c7df

08016984 <quorem>:
 8016984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016988:	6903      	ldr	r3, [r0, #16]
 801698a:	690c      	ldr	r4, [r1, #16]
 801698c:	42a3      	cmp	r3, r4
 801698e:	4607      	mov	r7, r0
 8016990:	f2c0 8081 	blt.w	8016a96 <quorem+0x112>
 8016994:	3c01      	subs	r4, #1
 8016996:	f101 0814 	add.w	r8, r1, #20
 801699a:	f100 0514 	add.w	r5, r0, #20
 801699e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80169a2:	9301      	str	r3, [sp, #4]
 80169a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80169a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80169ac:	3301      	adds	r3, #1
 80169ae:	429a      	cmp	r2, r3
 80169b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80169b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80169b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80169bc:	d331      	bcc.n	8016a22 <quorem+0x9e>
 80169be:	f04f 0e00 	mov.w	lr, #0
 80169c2:	4640      	mov	r0, r8
 80169c4:	46ac      	mov	ip, r5
 80169c6:	46f2      	mov	sl, lr
 80169c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80169cc:	b293      	uxth	r3, r2
 80169ce:	fb06 e303 	mla	r3, r6, r3, lr
 80169d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	ebaa 0303 	sub.w	r3, sl, r3
 80169dc:	f8dc a000 	ldr.w	sl, [ip]
 80169e0:	0c12      	lsrs	r2, r2, #16
 80169e2:	fa13 f38a 	uxtah	r3, r3, sl
 80169e6:	fb06 e202 	mla	r2, r6, r2, lr
 80169ea:	9300      	str	r3, [sp, #0]
 80169ec:	9b00      	ldr	r3, [sp, #0]
 80169ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80169f2:	b292      	uxth	r2, r2
 80169f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80169f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80169fc:	f8bd 3000 	ldrh.w	r3, [sp]
 8016a00:	4581      	cmp	r9, r0
 8016a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a06:	f84c 3b04 	str.w	r3, [ip], #4
 8016a0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016a0e:	d2db      	bcs.n	80169c8 <quorem+0x44>
 8016a10:	f855 300b 	ldr.w	r3, [r5, fp]
 8016a14:	b92b      	cbnz	r3, 8016a22 <quorem+0x9e>
 8016a16:	9b01      	ldr	r3, [sp, #4]
 8016a18:	3b04      	subs	r3, #4
 8016a1a:	429d      	cmp	r5, r3
 8016a1c:	461a      	mov	r2, r3
 8016a1e:	d32e      	bcc.n	8016a7e <quorem+0xfa>
 8016a20:	613c      	str	r4, [r7, #16]
 8016a22:	4638      	mov	r0, r7
 8016a24:	f001 feb8 	bl	8018798 <__mcmp>
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	db24      	blt.n	8016a76 <quorem+0xf2>
 8016a2c:	3601      	adds	r6, #1
 8016a2e:	4628      	mov	r0, r5
 8016a30:	f04f 0c00 	mov.w	ip, #0
 8016a34:	f858 2b04 	ldr.w	r2, [r8], #4
 8016a38:	f8d0 e000 	ldr.w	lr, [r0]
 8016a3c:	b293      	uxth	r3, r2
 8016a3e:	ebac 0303 	sub.w	r3, ip, r3
 8016a42:	0c12      	lsrs	r2, r2, #16
 8016a44:	fa13 f38e 	uxtah	r3, r3, lr
 8016a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016a56:	45c1      	cmp	r9, r8
 8016a58:	f840 3b04 	str.w	r3, [r0], #4
 8016a5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016a60:	d2e8      	bcs.n	8016a34 <quorem+0xb0>
 8016a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016a6a:	b922      	cbnz	r2, 8016a76 <quorem+0xf2>
 8016a6c:	3b04      	subs	r3, #4
 8016a6e:	429d      	cmp	r5, r3
 8016a70:	461a      	mov	r2, r3
 8016a72:	d30a      	bcc.n	8016a8a <quorem+0x106>
 8016a74:	613c      	str	r4, [r7, #16]
 8016a76:	4630      	mov	r0, r6
 8016a78:	b003      	add	sp, #12
 8016a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a7e:	6812      	ldr	r2, [r2, #0]
 8016a80:	3b04      	subs	r3, #4
 8016a82:	2a00      	cmp	r2, #0
 8016a84:	d1cc      	bne.n	8016a20 <quorem+0x9c>
 8016a86:	3c01      	subs	r4, #1
 8016a88:	e7c7      	b.n	8016a1a <quorem+0x96>
 8016a8a:	6812      	ldr	r2, [r2, #0]
 8016a8c:	3b04      	subs	r3, #4
 8016a8e:	2a00      	cmp	r2, #0
 8016a90:	d1f0      	bne.n	8016a74 <quorem+0xf0>
 8016a92:	3c01      	subs	r4, #1
 8016a94:	e7eb      	b.n	8016a6e <quorem+0xea>
 8016a96:	2000      	movs	r0, #0
 8016a98:	e7ee      	b.n	8016a78 <quorem+0xf4>
 8016a9a:	0000      	movs	r0, r0
 8016a9c:	0000      	movs	r0, r0
	...

08016aa0 <_dtoa_r>:
 8016aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa4:	ed2d 8b04 	vpush	{d8-d9}
 8016aa8:	ec57 6b10 	vmov	r6, r7, d0
 8016aac:	b093      	sub	sp, #76	; 0x4c
 8016aae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ab0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016ab4:	9106      	str	r1, [sp, #24]
 8016ab6:	ee10 aa10 	vmov	sl, s0
 8016aba:	4604      	mov	r4, r0
 8016abc:	9209      	str	r2, [sp, #36]	; 0x24
 8016abe:	930c      	str	r3, [sp, #48]	; 0x30
 8016ac0:	46bb      	mov	fp, r7
 8016ac2:	b975      	cbnz	r5, 8016ae2 <_dtoa_r+0x42>
 8016ac4:	2010      	movs	r0, #16
 8016ac6:	f7fd ff3f 	bl	8014948 <malloc>
 8016aca:	4602      	mov	r2, r0
 8016acc:	6260      	str	r0, [r4, #36]	; 0x24
 8016ace:	b920      	cbnz	r0, 8016ada <_dtoa_r+0x3a>
 8016ad0:	4ba7      	ldr	r3, [pc, #668]	; (8016d70 <_dtoa_r+0x2d0>)
 8016ad2:	21ea      	movs	r1, #234	; 0xea
 8016ad4:	48a7      	ldr	r0, [pc, #668]	; (8016d74 <_dtoa_r+0x2d4>)
 8016ad6:	f7ff ff37 	bl	8016948 <__assert_func>
 8016ada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016ade:	6005      	str	r5, [r0, #0]
 8016ae0:	60c5      	str	r5, [r0, #12]
 8016ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ae4:	6819      	ldr	r1, [r3, #0]
 8016ae6:	b151      	cbz	r1, 8016afe <_dtoa_r+0x5e>
 8016ae8:	685a      	ldr	r2, [r3, #4]
 8016aea:	604a      	str	r2, [r1, #4]
 8016aec:	2301      	movs	r3, #1
 8016aee:	4093      	lsls	r3, r2
 8016af0:	608b      	str	r3, [r1, #8]
 8016af2:	4620      	mov	r0, r4
 8016af4:	f001 fbc4 	bl	8018280 <_Bfree>
 8016af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016afa:	2200      	movs	r2, #0
 8016afc:	601a      	str	r2, [r3, #0]
 8016afe:	1e3b      	subs	r3, r7, #0
 8016b00:	bfaa      	itet	ge
 8016b02:	2300      	movge	r3, #0
 8016b04:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016b08:	f8c8 3000 	strge.w	r3, [r8]
 8016b0c:	4b9a      	ldr	r3, [pc, #616]	; (8016d78 <_dtoa_r+0x2d8>)
 8016b0e:	bfbc      	itt	lt
 8016b10:	2201      	movlt	r2, #1
 8016b12:	f8c8 2000 	strlt.w	r2, [r8]
 8016b16:	ea33 030b 	bics.w	r3, r3, fp
 8016b1a:	d11b      	bne.n	8016b54 <_dtoa_r+0xb4>
 8016b1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8016b22:	6013      	str	r3, [r2, #0]
 8016b24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b28:	4333      	orrs	r3, r6
 8016b2a:	f000 8592 	beq.w	8017652 <_dtoa_r+0xbb2>
 8016b2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b30:	b963      	cbnz	r3, 8016b4c <_dtoa_r+0xac>
 8016b32:	4b92      	ldr	r3, [pc, #584]	; (8016d7c <_dtoa_r+0x2dc>)
 8016b34:	e022      	b.n	8016b7c <_dtoa_r+0xdc>
 8016b36:	4b92      	ldr	r3, [pc, #584]	; (8016d80 <_dtoa_r+0x2e0>)
 8016b38:	9301      	str	r3, [sp, #4]
 8016b3a:	3308      	adds	r3, #8
 8016b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016b3e:	6013      	str	r3, [r2, #0]
 8016b40:	9801      	ldr	r0, [sp, #4]
 8016b42:	b013      	add	sp, #76	; 0x4c
 8016b44:	ecbd 8b04 	vpop	{d8-d9}
 8016b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b4c:	4b8b      	ldr	r3, [pc, #556]	; (8016d7c <_dtoa_r+0x2dc>)
 8016b4e:	9301      	str	r3, [sp, #4]
 8016b50:	3303      	adds	r3, #3
 8016b52:	e7f3      	b.n	8016b3c <_dtoa_r+0x9c>
 8016b54:	2200      	movs	r2, #0
 8016b56:	2300      	movs	r3, #0
 8016b58:	4650      	mov	r0, sl
 8016b5a:	4659      	mov	r1, fp
 8016b5c:	f7e9 ffc4 	bl	8000ae8 <__aeabi_dcmpeq>
 8016b60:	ec4b ab19 	vmov	d9, sl, fp
 8016b64:	4680      	mov	r8, r0
 8016b66:	b158      	cbz	r0, 8016b80 <_dtoa_r+0xe0>
 8016b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	6013      	str	r3, [r2, #0]
 8016b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	f000 856b 	beq.w	801764c <_dtoa_r+0xbac>
 8016b76:	4883      	ldr	r0, [pc, #524]	; (8016d84 <_dtoa_r+0x2e4>)
 8016b78:	6018      	str	r0, [r3, #0]
 8016b7a:	1e43      	subs	r3, r0, #1
 8016b7c:	9301      	str	r3, [sp, #4]
 8016b7e:	e7df      	b.n	8016b40 <_dtoa_r+0xa0>
 8016b80:	ec4b ab10 	vmov	d0, sl, fp
 8016b84:	aa10      	add	r2, sp, #64	; 0x40
 8016b86:	a911      	add	r1, sp, #68	; 0x44
 8016b88:	4620      	mov	r0, r4
 8016b8a:	f001 ff27 	bl	80189dc <__d2b>
 8016b8e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016b92:	ee08 0a10 	vmov	s16, r0
 8016b96:	2d00      	cmp	r5, #0
 8016b98:	f000 8084 	beq.w	8016ca4 <_dtoa_r+0x204>
 8016b9c:	ee19 3a90 	vmov	r3, s19
 8016ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ba4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016ba8:	4656      	mov	r6, sl
 8016baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016bb2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016bb6:	4b74      	ldr	r3, [pc, #464]	; (8016d88 <_dtoa_r+0x2e8>)
 8016bb8:	2200      	movs	r2, #0
 8016bba:	4630      	mov	r0, r6
 8016bbc:	4639      	mov	r1, r7
 8016bbe:	f7e9 fb73 	bl	80002a8 <__aeabi_dsub>
 8016bc2:	a365      	add	r3, pc, #404	; (adr r3, 8016d58 <_dtoa_r+0x2b8>)
 8016bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc8:	f7e9 fd26 	bl	8000618 <__aeabi_dmul>
 8016bcc:	a364      	add	r3, pc, #400	; (adr r3, 8016d60 <_dtoa_r+0x2c0>)
 8016bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd2:	f7e9 fb6b 	bl	80002ac <__adddf3>
 8016bd6:	4606      	mov	r6, r0
 8016bd8:	4628      	mov	r0, r5
 8016bda:	460f      	mov	r7, r1
 8016bdc:	f7e9 fcb2 	bl	8000544 <__aeabi_i2d>
 8016be0:	a361      	add	r3, pc, #388	; (adr r3, 8016d68 <_dtoa_r+0x2c8>)
 8016be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be6:	f7e9 fd17 	bl	8000618 <__aeabi_dmul>
 8016bea:	4602      	mov	r2, r0
 8016bec:	460b      	mov	r3, r1
 8016bee:	4630      	mov	r0, r6
 8016bf0:	4639      	mov	r1, r7
 8016bf2:	f7e9 fb5b 	bl	80002ac <__adddf3>
 8016bf6:	4606      	mov	r6, r0
 8016bf8:	460f      	mov	r7, r1
 8016bfa:	f7e9 ffbd 	bl	8000b78 <__aeabi_d2iz>
 8016bfe:	2200      	movs	r2, #0
 8016c00:	9000      	str	r0, [sp, #0]
 8016c02:	2300      	movs	r3, #0
 8016c04:	4630      	mov	r0, r6
 8016c06:	4639      	mov	r1, r7
 8016c08:	f7e9 ff78 	bl	8000afc <__aeabi_dcmplt>
 8016c0c:	b150      	cbz	r0, 8016c24 <_dtoa_r+0x184>
 8016c0e:	9800      	ldr	r0, [sp, #0]
 8016c10:	f7e9 fc98 	bl	8000544 <__aeabi_i2d>
 8016c14:	4632      	mov	r2, r6
 8016c16:	463b      	mov	r3, r7
 8016c18:	f7e9 ff66 	bl	8000ae8 <__aeabi_dcmpeq>
 8016c1c:	b910      	cbnz	r0, 8016c24 <_dtoa_r+0x184>
 8016c1e:	9b00      	ldr	r3, [sp, #0]
 8016c20:	3b01      	subs	r3, #1
 8016c22:	9300      	str	r3, [sp, #0]
 8016c24:	9b00      	ldr	r3, [sp, #0]
 8016c26:	2b16      	cmp	r3, #22
 8016c28:	d85a      	bhi.n	8016ce0 <_dtoa_r+0x240>
 8016c2a:	9a00      	ldr	r2, [sp, #0]
 8016c2c:	4b57      	ldr	r3, [pc, #348]	; (8016d8c <_dtoa_r+0x2ec>)
 8016c2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c36:	ec51 0b19 	vmov	r0, r1, d9
 8016c3a:	f7e9 ff5f 	bl	8000afc <__aeabi_dcmplt>
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	d050      	beq.n	8016ce4 <_dtoa_r+0x244>
 8016c42:	9b00      	ldr	r3, [sp, #0]
 8016c44:	3b01      	subs	r3, #1
 8016c46:	9300      	str	r3, [sp, #0]
 8016c48:	2300      	movs	r3, #0
 8016c4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c4e:	1b5d      	subs	r5, r3, r5
 8016c50:	1e6b      	subs	r3, r5, #1
 8016c52:	9305      	str	r3, [sp, #20]
 8016c54:	bf45      	ittet	mi
 8016c56:	f1c5 0301 	rsbmi	r3, r5, #1
 8016c5a:	9304      	strmi	r3, [sp, #16]
 8016c5c:	2300      	movpl	r3, #0
 8016c5e:	2300      	movmi	r3, #0
 8016c60:	bf4c      	ite	mi
 8016c62:	9305      	strmi	r3, [sp, #20]
 8016c64:	9304      	strpl	r3, [sp, #16]
 8016c66:	9b00      	ldr	r3, [sp, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	db3d      	blt.n	8016ce8 <_dtoa_r+0x248>
 8016c6c:	9b05      	ldr	r3, [sp, #20]
 8016c6e:	9a00      	ldr	r2, [sp, #0]
 8016c70:	920a      	str	r2, [sp, #40]	; 0x28
 8016c72:	4413      	add	r3, r2
 8016c74:	9305      	str	r3, [sp, #20]
 8016c76:	2300      	movs	r3, #0
 8016c78:	9307      	str	r3, [sp, #28]
 8016c7a:	9b06      	ldr	r3, [sp, #24]
 8016c7c:	2b09      	cmp	r3, #9
 8016c7e:	f200 8089 	bhi.w	8016d94 <_dtoa_r+0x2f4>
 8016c82:	2b05      	cmp	r3, #5
 8016c84:	bfc4      	itt	gt
 8016c86:	3b04      	subgt	r3, #4
 8016c88:	9306      	strgt	r3, [sp, #24]
 8016c8a:	9b06      	ldr	r3, [sp, #24]
 8016c8c:	f1a3 0302 	sub.w	r3, r3, #2
 8016c90:	bfcc      	ite	gt
 8016c92:	2500      	movgt	r5, #0
 8016c94:	2501      	movle	r5, #1
 8016c96:	2b03      	cmp	r3, #3
 8016c98:	f200 8087 	bhi.w	8016daa <_dtoa_r+0x30a>
 8016c9c:	e8df f003 	tbb	[pc, r3]
 8016ca0:	59383a2d 	.word	0x59383a2d
 8016ca4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016ca8:	441d      	add	r5, r3
 8016caa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016cae:	2b20      	cmp	r3, #32
 8016cb0:	bfc1      	itttt	gt
 8016cb2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016cb6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016cba:	fa0b f303 	lslgt.w	r3, fp, r3
 8016cbe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016cc2:	bfda      	itte	le
 8016cc4:	f1c3 0320 	rsble	r3, r3, #32
 8016cc8:	fa06 f003 	lslle.w	r0, r6, r3
 8016ccc:	4318      	orrgt	r0, r3
 8016cce:	f7e9 fc29 	bl	8000524 <__aeabi_ui2d>
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016cda:	3d01      	subs	r5, #1
 8016cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8016cde:	e76a      	b.n	8016bb6 <_dtoa_r+0x116>
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	e7b2      	b.n	8016c4a <_dtoa_r+0x1aa>
 8016ce4:	900b      	str	r0, [sp, #44]	; 0x2c
 8016ce6:	e7b1      	b.n	8016c4c <_dtoa_r+0x1ac>
 8016ce8:	9b04      	ldr	r3, [sp, #16]
 8016cea:	9a00      	ldr	r2, [sp, #0]
 8016cec:	1a9b      	subs	r3, r3, r2
 8016cee:	9304      	str	r3, [sp, #16]
 8016cf0:	4253      	negs	r3, r2
 8016cf2:	9307      	str	r3, [sp, #28]
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8016cf8:	e7bf      	b.n	8016c7a <_dtoa_r+0x1da>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	9308      	str	r3, [sp, #32]
 8016cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	dc55      	bgt.n	8016db0 <_dtoa_r+0x310>
 8016d04:	2301      	movs	r3, #1
 8016d06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8016d0e:	e00c      	b.n	8016d2a <_dtoa_r+0x28a>
 8016d10:	2301      	movs	r3, #1
 8016d12:	e7f3      	b.n	8016cfc <_dtoa_r+0x25c>
 8016d14:	2300      	movs	r3, #0
 8016d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d18:	9308      	str	r3, [sp, #32]
 8016d1a:	9b00      	ldr	r3, [sp, #0]
 8016d1c:	4413      	add	r3, r2
 8016d1e:	9302      	str	r3, [sp, #8]
 8016d20:	3301      	adds	r3, #1
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	9303      	str	r3, [sp, #12]
 8016d26:	bfb8      	it	lt
 8016d28:	2301      	movlt	r3, #1
 8016d2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016d2c:	2200      	movs	r2, #0
 8016d2e:	6042      	str	r2, [r0, #4]
 8016d30:	2204      	movs	r2, #4
 8016d32:	f102 0614 	add.w	r6, r2, #20
 8016d36:	429e      	cmp	r6, r3
 8016d38:	6841      	ldr	r1, [r0, #4]
 8016d3a:	d93d      	bls.n	8016db8 <_dtoa_r+0x318>
 8016d3c:	4620      	mov	r0, r4
 8016d3e:	f001 fa5f 	bl	8018200 <_Balloc>
 8016d42:	9001      	str	r0, [sp, #4]
 8016d44:	2800      	cmp	r0, #0
 8016d46:	d13b      	bne.n	8016dc0 <_dtoa_r+0x320>
 8016d48:	4b11      	ldr	r3, [pc, #68]	; (8016d90 <_dtoa_r+0x2f0>)
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016d50:	e6c0      	b.n	8016ad4 <_dtoa_r+0x34>
 8016d52:	2301      	movs	r3, #1
 8016d54:	e7df      	b.n	8016d16 <_dtoa_r+0x276>
 8016d56:	bf00      	nop
 8016d58:	636f4361 	.word	0x636f4361
 8016d5c:	3fd287a7 	.word	0x3fd287a7
 8016d60:	8b60c8b3 	.word	0x8b60c8b3
 8016d64:	3fc68a28 	.word	0x3fc68a28
 8016d68:	509f79fb 	.word	0x509f79fb
 8016d6c:	3fd34413 	.word	0x3fd34413
 8016d70:	0808c730 	.word	0x0808c730
 8016d74:	0808c8ee 	.word	0x0808c8ee
 8016d78:	7ff00000 	.word	0x7ff00000
 8016d7c:	0808c8ea 	.word	0x0808c8ea
 8016d80:	0808c8e1 	.word	0x0808c8e1
 8016d84:	0808c6b5 	.word	0x0808c6b5
 8016d88:	3ff80000 	.word	0x3ff80000
 8016d8c:	0808cac0 	.word	0x0808cac0
 8016d90:	0808c949 	.word	0x0808c949
 8016d94:	2501      	movs	r5, #1
 8016d96:	2300      	movs	r3, #0
 8016d98:	9306      	str	r3, [sp, #24]
 8016d9a:	9508      	str	r5, [sp, #32]
 8016d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016da0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016da4:	2200      	movs	r2, #0
 8016da6:	2312      	movs	r3, #18
 8016da8:	e7b0      	b.n	8016d0c <_dtoa_r+0x26c>
 8016daa:	2301      	movs	r3, #1
 8016dac:	9308      	str	r3, [sp, #32]
 8016dae:	e7f5      	b.n	8016d9c <_dtoa_r+0x2fc>
 8016db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016db2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016db6:	e7b8      	b.n	8016d2a <_dtoa_r+0x28a>
 8016db8:	3101      	adds	r1, #1
 8016dba:	6041      	str	r1, [r0, #4]
 8016dbc:	0052      	lsls	r2, r2, #1
 8016dbe:	e7b8      	b.n	8016d32 <_dtoa_r+0x292>
 8016dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016dc2:	9a01      	ldr	r2, [sp, #4]
 8016dc4:	601a      	str	r2, [r3, #0]
 8016dc6:	9b03      	ldr	r3, [sp, #12]
 8016dc8:	2b0e      	cmp	r3, #14
 8016dca:	f200 809d 	bhi.w	8016f08 <_dtoa_r+0x468>
 8016dce:	2d00      	cmp	r5, #0
 8016dd0:	f000 809a 	beq.w	8016f08 <_dtoa_r+0x468>
 8016dd4:	9b00      	ldr	r3, [sp, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	dd32      	ble.n	8016e40 <_dtoa_r+0x3a0>
 8016dda:	4ab7      	ldr	r2, [pc, #732]	; (80170b8 <_dtoa_r+0x618>)
 8016ddc:	f003 030f 	and.w	r3, r3, #15
 8016de0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016de8:	9b00      	ldr	r3, [sp, #0]
 8016dea:	05d8      	lsls	r0, r3, #23
 8016dec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016df0:	d516      	bpl.n	8016e20 <_dtoa_r+0x380>
 8016df2:	4bb2      	ldr	r3, [pc, #712]	; (80170bc <_dtoa_r+0x61c>)
 8016df4:	ec51 0b19 	vmov	r0, r1, d9
 8016df8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016dfc:	f7e9 fd36 	bl	800086c <__aeabi_ddiv>
 8016e00:	f007 070f 	and.w	r7, r7, #15
 8016e04:	4682      	mov	sl, r0
 8016e06:	468b      	mov	fp, r1
 8016e08:	2503      	movs	r5, #3
 8016e0a:	4eac      	ldr	r6, [pc, #688]	; (80170bc <_dtoa_r+0x61c>)
 8016e0c:	b957      	cbnz	r7, 8016e24 <_dtoa_r+0x384>
 8016e0e:	4642      	mov	r2, r8
 8016e10:	464b      	mov	r3, r9
 8016e12:	4650      	mov	r0, sl
 8016e14:	4659      	mov	r1, fp
 8016e16:	f7e9 fd29 	bl	800086c <__aeabi_ddiv>
 8016e1a:	4682      	mov	sl, r0
 8016e1c:	468b      	mov	fp, r1
 8016e1e:	e028      	b.n	8016e72 <_dtoa_r+0x3d2>
 8016e20:	2502      	movs	r5, #2
 8016e22:	e7f2      	b.n	8016e0a <_dtoa_r+0x36a>
 8016e24:	07f9      	lsls	r1, r7, #31
 8016e26:	d508      	bpl.n	8016e3a <_dtoa_r+0x39a>
 8016e28:	4640      	mov	r0, r8
 8016e2a:	4649      	mov	r1, r9
 8016e2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016e30:	f7e9 fbf2 	bl	8000618 <__aeabi_dmul>
 8016e34:	3501      	adds	r5, #1
 8016e36:	4680      	mov	r8, r0
 8016e38:	4689      	mov	r9, r1
 8016e3a:	107f      	asrs	r7, r7, #1
 8016e3c:	3608      	adds	r6, #8
 8016e3e:	e7e5      	b.n	8016e0c <_dtoa_r+0x36c>
 8016e40:	f000 809b 	beq.w	8016f7a <_dtoa_r+0x4da>
 8016e44:	9b00      	ldr	r3, [sp, #0]
 8016e46:	4f9d      	ldr	r7, [pc, #628]	; (80170bc <_dtoa_r+0x61c>)
 8016e48:	425e      	negs	r6, r3
 8016e4a:	4b9b      	ldr	r3, [pc, #620]	; (80170b8 <_dtoa_r+0x618>)
 8016e4c:	f006 020f 	and.w	r2, r6, #15
 8016e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e58:	ec51 0b19 	vmov	r0, r1, d9
 8016e5c:	f7e9 fbdc 	bl	8000618 <__aeabi_dmul>
 8016e60:	1136      	asrs	r6, r6, #4
 8016e62:	4682      	mov	sl, r0
 8016e64:	468b      	mov	fp, r1
 8016e66:	2300      	movs	r3, #0
 8016e68:	2502      	movs	r5, #2
 8016e6a:	2e00      	cmp	r6, #0
 8016e6c:	d17a      	bne.n	8016f64 <_dtoa_r+0x4c4>
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1d3      	bne.n	8016e1a <_dtoa_r+0x37a>
 8016e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	f000 8082 	beq.w	8016f7e <_dtoa_r+0x4de>
 8016e7a:	4b91      	ldr	r3, [pc, #580]	; (80170c0 <_dtoa_r+0x620>)
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	4650      	mov	r0, sl
 8016e80:	4659      	mov	r1, fp
 8016e82:	f7e9 fe3b 	bl	8000afc <__aeabi_dcmplt>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d079      	beq.n	8016f7e <_dtoa_r+0x4de>
 8016e8a:	9b03      	ldr	r3, [sp, #12]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d076      	beq.n	8016f7e <_dtoa_r+0x4de>
 8016e90:	9b02      	ldr	r3, [sp, #8]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	dd36      	ble.n	8016f04 <_dtoa_r+0x464>
 8016e96:	9b00      	ldr	r3, [sp, #0]
 8016e98:	4650      	mov	r0, sl
 8016e9a:	4659      	mov	r1, fp
 8016e9c:	1e5f      	subs	r7, r3, #1
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	4b88      	ldr	r3, [pc, #544]	; (80170c4 <_dtoa_r+0x624>)
 8016ea2:	f7e9 fbb9 	bl	8000618 <__aeabi_dmul>
 8016ea6:	9e02      	ldr	r6, [sp, #8]
 8016ea8:	4682      	mov	sl, r0
 8016eaa:	468b      	mov	fp, r1
 8016eac:	3501      	adds	r5, #1
 8016eae:	4628      	mov	r0, r5
 8016eb0:	f7e9 fb48 	bl	8000544 <__aeabi_i2d>
 8016eb4:	4652      	mov	r2, sl
 8016eb6:	465b      	mov	r3, fp
 8016eb8:	f7e9 fbae 	bl	8000618 <__aeabi_dmul>
 8016ebc:	4b82      	ldr	r3, [pc, #520]	; (80170c8 <_dtoa_r+0x628>)
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	f7e9 f9f4 	bl	80002ac <__adddf3>
 8016ec4:	46d0      	mov	r8, sl
 8016ec6:	46d9      	mov	r9, fp
 8016ec8:	4682      	mov	sl, r0
 8016eca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016ece:	2e00      	cmp	r6, #0
 8016ed0:	d158      	bne.n	8016f84 <_dtoa_r+0x4e4>
 8016ed2:	4b7e      	ldr	r3, [pc, #504]	; (80170cc <_dtoa_r+0x62c>)
 8016ed4:	2200      	movs	r2, #0
 8016ed6:	4640      	mov	r0, r8
 8016ed8:	4649      	mov	r1, r9
 8016eda:	f7e9 f9e5 	bl	80002a8 <__aeabi_dsub>
 8016ede:	4652      	mov	r2, sl
 8016ee0:	465b      	mov	r3, fp
 8016ee2:	4680      	mov	r8, r0
 8016ee4:	4689      	mov	r9, r1
 8016ee6:	f7e9 fe27 	bl	8000b38 <__aeabi_dcmpgt>
 8016eea:	2800      	cmp	r0, #0
 8016eec:	f040 8295 	bne.w	801741a <_dtoa_r+0x97a>
 8016ef0:	4652      	mov	r2, sl
 8016ef2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016ef6:	4640      	mov	r0, r8
 8016ef8:	4649      	mov	r1, r9
 8016efa:	f7e9 fdff 	bl	8000afc <__aeabi_dcmplt>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	f040 8289 	bne.w	8017416 <_dtoa_r+0x976>
 8016f04:	ec5b ab19 	vmov	sl, fp, d9
 8016f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f2c0 8148 	blt.w	80171a0 <_dtoa_r+0x700>
 8016f10:	9a00      	ldr	r2, [sp, #0]
 8016f12:	2a0e      	cmp	r2, #14
 8016f14:	f300 8144 	bgt.w	80171a0 <_dtoa_r+0x700>
 8016f18:	4b67      	ldr	r3, [pc, #412]	; (80170b8 <_dtoa_r+0x618>)
 8016f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	f280 80d5 	bge.w	80170d4 <_dtoa_r+0x634>
 8016f2a:	9b03      	ldr	r3, [sp, #12]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	f300 80d1 	bgt.w	80170d4 <_dtoa_r+0x634>
 8016f32:	f040 826f 	bne.w	8017414 <_dtoa_r+0x974>
 8016f36:	4b65      	ldr	r3, [pc, #404]	; (80170cc <_dtoa_r+0x62c>)
 8016f38:	2200      	movs	r2, #0
 8016f3a:	4640      	mov	r0, r8
 8016f3c:	4649      	mov	r1, r9
 8016f3e:	f7e9 fb6b 	bl	8000618 <__aeabi_dmul>
 8016f42:	4652      	mov	r2, sl
 8016f44:	465b      	mov	r3, fp
 8016f46:	f7e9 fded 	bl	8000b24 <__aeabi_dcmpge>
 8016f4a:	9e03      	ldr	r6, [sp, #12]
 8016f4c:	4637      	mov	r7, r6
 8016f4e:	2800      	cmp	r0, #0
 8016f50:	f040 8245 	bne.w	80173de <_dtoa_r+0x93e>
 8016f54:	9d01      	ldr	r5, [sp, #4]
 8016f56:	2331      	movs	r3, #49	; 0x31
 8016f58:	f805 3b01 	strb.w	r3, [r5], #1
 8016f5c:	9b00      	ldr	r3, [sp, #0]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	9300      	str	r3, [sp, #0]
 8016f62:	e240      	b.n	80173e6 <_dtoa_r+0x946>
 8016f64:	07f2      	lsls	r2, r6, #31
 8016f66:	d505      	bpl.n	8016f74 <_dtoa_r+0x4d4>
 8016f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f6c:	f7e9 fb54 	bl	8000618 <__aeabi_dmul>
 8016f70:	3501      	adds	r5, #1
 8016f72:	2301      	movs	r3, #1
 8016f74:	1076      	asrs	r6, r6, #1
 8016f76:	3708      	adds	r7, #8
 8016f78:	e777      	b.n	8016e6a <_dtoa_r+0x3ca>
 8016f7a:	2502      	movs	r5, #2
 8016f7c:	e779      	b.n	8016e72 <_dtoa_r+0x3d2>
 8016f7e:	9f00      	ldr	r7, [sp, #0]
 8016f80:	9e03      	ldr	r6, [sp, #12]
 8016f82:	e794      	b.n	8016eae <_dtoa_r+0x40e>
 8016f84:	9901      	ldr	r1, [sp, #4]
 8016f86:	4b4c      	ldr	r3, [pc, #304]	; (80170b8 <_dtoa_r+0x618>)
 8016f88:	4431      	add	r1, r6
 8016f8a:	910d      	str	r1, [sp, #52]	; 0x34
 8016f8c:	9908      	ldr	r1, [sp, #32]
 8016f8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016f92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016f96:	2900      	cmp	r1, #0
 8016f98:	d043      	beq.n	8017022 <_dtoa_r+0x582>
 8016f9a:	494d      	ldr	r1, [pc, #308]	; (80170d0 <_dtoa_r+0x630>)
 8016f9c:	2000      	movs	r0, #0
 8016f9e:	f7e9 fc65 	bl	800086c <__aeabi_ddiv>
 8016fa2:	4652      	mov	r2, sl
 8016fa4:	465b      	mov	r3, fp
 8016fa6:	f7e9 f97f 	bl	80002a8 <__aeabi_dsub>
 8016faa:	9d01      	ldr	r5, [sp, #4]
 8016fac:	4682      	mov	sl, r0
 8016fae:	468b      	mov	fp, r1
 8016fb0:	4649      	mov	r1, r9
 8016fb2:	4640      	mov	r0, r8
 8016fb4:	f7e9 fde0 	bl	8000b78 <__aeabi_d2iz>
 8016fb8:	4606      	mov	r6, r0
 8016fba:	f7e9 fac3 	bl	8000544 <__aeabi_i2d>
 8016fbe:	4602      	mov	r2, r0
 8016fc0:	460b      	mov	r3, r1
 8016fc2:	4640      	mov	r0, r8
 8016fc4:	4649      	mov	r1, r9
 8016fc6:	f7e9 f96f 	bl	80002a8 <__aeabi_dsub>
 8016fca:	3630      	adds	r6, #48	; 0x30
 8016fcc:	f805 6b01 	strb.w	r6, [r5], #1
 8016fd0:	4652      	mov	r2, sl
 8016fd2:	465b      	mov	r3, fp
 8016fd4:	4680      	mov	r8, r0
 8016fd6:	4689      	mov	r9, r1
 8016fd8:	f7e9 fd90 	bl	8000afc <__aeabi_dcmplt>
 8016fdc:	2800      	cmp	r0, #0
 8016fde:	d163      	bne.n	80170a8 <_dtoa_r+0x608>
 8016fe0:	4642      	mov	r2, r8
 8016fe2:	464b      	mov	r3, r9
 8016fe4:	4936      	ldr	r1, [pc, #216]	; (80170c0 <_dtoa_r+0x620>)
 8016fe6:	2000      	movs	r0, #0
 8016fe8:	f7e9 f95e 	bl	80002a8 <__aeabi_dsub>
 8016fec:	4652      	mov	r2, sl
 8016fee:	465b      	mov	r3, fp
 8016ff0:	f7e9 fd84 	bl	8000afc <__aeabi_dcmplt>
 8016ff4:	2800      	cmp	r0, #0
 8016ff6:	f040 80b5 	bne.w	8017164 <_dtoa_r+0x6c4>
 8016ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ffc:	429d      	cmp	r5, r3
 8016ffe:	d081      	beq.n	8016f04 <_dtoa_r+0x464>
 8017000:	4b30      	ldr	r3, [pc, #192]	; (80170c4 <_dtoa_r+0x624>)
 8017002:	2200      	movs	r2, #0
 8017004:	4650      	mov	r0, sl
 8017006:	4659      	mov	r1, fp
 8017008:	f7e9 fb06 	bl	8000618 <__aeabi_dmul>
 801700c:	4b2d      	ldr	r3, [pc, #180]	; (80170c4 <_dtoa_r+0x624>)
 801700e:	4682      	mov	sl, r0
 8017010:	468b      	mov	fp, r1
 8017012:	4640      	mov	r0, r8
 8017014:	4649      	mov	r1, r9
 8017016:	2200      	movs	r2, #0
 8017018:	f7e9 fafe 	bl	8000618 <__aeabi_dmul>
 801701c:	4680      	mov	r8, r0
 801701e:	4689      	mov	r9, r1
 8017020:	e7c6      	b.n	8016fb0 <_dtoa_r+0x510>
 8017022:	4650      	mov	r0, sl
 8017024:	4659      	mov	r1, fp
 8017026:	f7e9 faf7 	bl	8000618 <__aeabi_dmul>
 801702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801702c:	9d01      	ldr	r5, [sp, #4]
 801702e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017030:	4682      	mov	sl, r0
 8017032:	468b      	mov	fp, r1
 8017034:	4649      	mov	r1, r9
 8017036:	4640      	mov	r0, r8
 8017038:	f7e9 fd9e 	bl	8000b78 <__aeabi_d2iz>
 801703c:	4606      	mov	r6, r0
 801703e:	f7e9 fa81 	bl	8000544 <__aeabi_i2d>
 8017042:	3630      	adds	r6, #48	; 0x30
 8017044:	4602      	mov	r2, r0
 8017046:	460b      	mov	r3, r1
 8017048:	4640      	mov	r0, r8
 801704a:	4649      	mov	r1, r9
 801704c:	f7e9 f92c 	bl	80002a8 <__aeabi_dsub>
 8017050:	f805 6b01 	strb.w	r6, [r5], #1
 8017054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017056:	429d      	cmp	r5, r3
 8017058:	4680      	mov	r8, r0
 801705a:	4689      	mov	r9, r1
 801705c:	f04f 0200 	mov.w	r2, #0
 8017060:	d124      	bne.n	80170ac <_dtoa_r+0x60c>
 8017062:	4b1b      	ldr	r3, [pc, #108]	; (80170d0 <_dtoa_r+0x630>)
 8017064:	4650      	mov	r0, sl
 8017066:	4659      	mov	r1, fp
 8017068:	f7e9 f920 	bl	80002ac <__adddf3>
 801706c:	4602      	mov	r2, r0
 801706e:	460b      	mov	r3, r1
 8017070:	4640      	mov	r0, r8
 8017072:	4649      	mov	r1, r9
 8017074:	f7e9 fd60 	bl	8000b38 <__aeabi_dcmpgt>
 8017078:	2800      	cmp	r0, #0
 801707a:	d173      	bne.n	8017164 <_dtoa_r+0x6c4>
 801707c:	4652      	mov	r2, sl
 801707e:	465b      	mov	r3, fp
 8017080:	4913      	ldr	r1, [pc, #76]	; (80170d0 <_dtoa_r+0x630>)
 8017082:	2000      	movs	r0, #0
 8017084:	f7e9 f910 	bl	80002a8 <__aeabi_dsub>
 8017088:	4602      	mov	r2, r0
 801708a:	460b      	mov	r3, r1
 801708c:	4640      	mov	r0, r8
 801708e:	4649      	mov	r1, r9
 8017090:	f7e9 fd34 	bl	8000afc <__aeabi_dcmplt>
 8017094:	2800      	cmp	r0, #0
 8017096:	f43f af35 	beq.w	8016f04 <_dtoa_r+0x464>
 801709a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801709c:	1e6b      	subs	r3, r5, #1
 801709e:	930f      	str	r3, [sp, #60]	; 0x3c
 80170a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170a4:	2b30      	cmp	r3, #48	; 0x30
 80170a6:	d0f8      	beq.n	801709a <_dtoa_r+0x5fa>
 80170a8:	9700      	str	r7, [sp, #0]
 80170aa:	e049      	b.n	8017140 <_dtoa_r+0x6a0>
 80170ac:	4b05      	ldr	r3, [pc, #20]	; (80170c4 <_dtoa_r+0x624>)
 80170ae:	f7e9 fab3 	bl	8000618 <__aeabi_dmul>
 80170b2:	4680      	mov	r8, r0
 80170b4:	4689      	mov	r9, r1
 80170b6:	e7bd      	b.n	8017034 <_dtoa_r+0x594>
 80170b8:	0808cac0 	.word	0x0808cac0
 80170bc:	0808ca98 	.word	0x0808ca98
 80170c0:	3ff00000 	.word	0x3ff00000
 80170c4:	40240000 	.word	0x40240000
 80170c8:	401c0000 	.word	0x401c0000
 80170cc:	40140000 	.word	0x40140000
 80170d0:	3fe00000 	.word	0x3fe00000
 80170d4:	9d01      	ldr	r5, [sp, #4]
 80170d6:	4656      	mov	r6, sl
 80170d8:	465f      	mov	r7, fp
 80170da:	4642      	mov	r2, r8
 80170dc:	464b      	mov	r3, r9
 80170de:	4630      	mov	r0, r6
 80170e0:	4639      	mov	r1, r7
 80170e2:	f7e9 fbc3 	bl	800086c <__aeabi_ddiv>
 80170e6:	f7e9 fd47 	bl	8000b78 <__aeabi_d2iz>
 80170ea:	4682      	mov	sl, r0
 80170ec:	f7e9 fa2a 	bl	8000544 <__aeabi_i2d>
 80170f0:	4642      	mov	r2, r8
 80170f2:	464b      	mov	r3, r9
 80170f4:	f7e9 fa90 	bl	8000618 <__aeabi_dmul>
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	4630      	mov	r0, r6
 80170fe:	4639      	mov	r1, r7
 8017100:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8017104:	f7e9 f8d0 	bl	80002a8 <__aeabi_dsub>
 8017108:	f805 6b01 	strb.w	r6, [r5], #1
 801710c:	9e01      	ldr	r6, [sp, #4]
 801710e:	9f03      	ldr	r7, [sp, #12]
 8017110:	1bae      	subs	r6, r5, r6
 8017112:	42b7      	cmp	r7, r6
 8017114:	4602      	mov	r2, r0
 8017116:	460b      	mov	r3, r1
 8017118:	d135      	bne.n	8017186 <_dtoa_r+0x6e6>
 801711a:	f7e9 f8c7 	bl	80002ac <__adddf3>
 801711e:	4642      	mov	r2, r8
 8017120:	464b      	mov	r3, r9
 8017122:	4606      	mov	r6, r0
 8017124:	460f      	mov	r7, r1
 8017126:	f7e9 fd07 	bl	8000b38 <__aeabi_dcmpgt>
 801712a:	b9d0      	cbnz	r0, 8017162 <_dtoa_r+0x6c2>
 801712c:	4642      	mov	r2, r8
 801712e:	464b      	mov	r3, r9
 8017130:	4630      	mov	r0, r6
 8017132:	4639      	mov	r1, r7
 8017134:	f7e9 fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8017138:	b110      	cbz	r0, 8017140 <_dtoa_r+0x6a0>
 801713a:	f01a 0f01 	tst.w	sl, #1
 801713e:	d110      	bne.n	8017162 <_dtoa_r+0x6c2>
 8017140:	4620      	mov	r0, r4
 8017142:	ee18 1a10 	vmov	r1, s16
 8017146:	f001 f89b 	bl	8018280 <_Bfree>
 801714a:	2300      	movs	r3, #0
 801714c:	9800      	ldr	r0, [sp, #0]
 801714e:	702b      	strb	r3, [r5, #0]
 8017150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017152:	3001      	adds	r0, #1
 8017154:	6018      	str	r0, [r3, #0]
 8017156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017158:	2b00      	cmp	r3, #0
 801715a:	f43f acf1 	beq.w	8016b40 <_dtoa_r+0xa0>
 801715e:	601d      	str	r5, [r3, #0]
 8017160:	e4ee      	b.n	8016b40 <_dtoa_r+0xa0>
 8017162:	9f00      	ldr	r7, [sp, #0]
 8017164:	462b      	mov	r3, r5
 8017166:	461d      	mov	r5, r3
 8017168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801716c:	2a39      	cmp	r2, #57	; 0x39
 801716e:	d106      	bne.n	801717e <_dtoa_r+0x6de>
 8017170:	9a01      	ldr	r2, [sp, #4]
 8017172:	429a      	cmp	r2, r3
 8017174:	d1f7      	bne.n	8017166 <_dtoa_r+0x6c6>
 8017176:	9901      	ldr	r1, [sp, #4]
 8017178:	2230      	movs	r2, #48	; 0x30
 801717a:	3701      	adds	r7, #1
 801717c:	700a      	strb	r2, [r1, #0]
 801717e:	781a      	ldrb	r2, [r3, #0]
 8017180:	3201      	adds	r2, #1
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	e790      	b.n	80170a8 <_dtoa_r+0x608>
 8017186:	4ba6      	ldr	r3, [pc, #664]	; (8017420 <_dtoa_r+0x980>)
 8017188:	2200      	movs	r2, #0
 801718a:	f7e9 fa45 	bl	8000618 <__aeabi_dmul>
 801718e:	2200      	movs	r2, #0
 8017190:	2300      	movs	r3, #0
 8017192:	4606      	mov	r6, r0
 8017194:	460f      	mov	r7, r1
 8017196:	f7e9 fca7 	bl	8000ae8 <__aeabi_dcmpeq>
 801719a:	2800      	cmp	r0, #0
 801719c:	d09d      	beq.n	80170da <_dtoa_r+0x63a>
 801719e:	e7cf      	b.n	8017140 <_dtoa_r+0x6a0>
 80171a0:	9a08      	ldr	r2, [sp, #32]
 80171a2:	2a00      	cmp	r2, #0
 80171a4:	f000 80d7 	beq.w	8017356 <_dtoa_r+0x8b6>
 80171a8:	9a06      	ldr	r2, [sp, #24]
 80171aa:	2a01      	cmp	r2, #1
 80171ac:	f300 80ba 	bgt.w	8017324 <_dtoa_r+0x884>
 80171b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80171b2:	2a00      	cmp	r2, #0
 80171b4:	f000 80b2 	beq.w	801731c <_dtoa_r+0x87c>
 80171b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80171bc:	9e07      	ldr	r6, [sp, #28]
 80171be:	9d04      	ldr	r5, [sp, #16]
 80171c0:	9a04      	ldr	r2, [sp, #16]
 80171c2:	441a      	add	r2, r3
 80171c4:	9204      	str	r2, [sp, #16]
 80171c6:	9a05      	ldr	r2, [sp, #20]
 80171c8:	2101      	movs	r1, #1
 80171ca:	441a      	add	r2, r3
 80171cc:	4620      	mov	r0, r4
 80171ce:	9205      	str	r2, [sp, #20]
 80171d0:	f001 f958 	bl	8018484 <__i2b>
 80171d4:	4607      	mov	r7, r0
 80171d6:	2d00      	cmp	r5, #0
 80171d8:	dd0c      	ble.n	80171f4 <_dtoa_r+0x754>
 80171da:	9b05      	ldr	r3, [sp, #20]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	dd09      	ble.n	80171f4 <_dtoa_r+0x754>
 80171e0:	42ab      	cmp	r3, r5
 80171e2:	9a04      	ldr	r2, [sp, #16]
 80171e4:	bfa8      	it	ge
 80171e6:	462b      	movge	r3, r5
 80171e8:	1ad2      	subs	r2, r2, r3
 80171ea:	9204      	str	r2, [sp, #16]
 80171ec:	9a05      	ldr	r2, [sp, #20]
 80171ee:	1aed      	subs	r5, r5, r3
 80171f0:	1ad3      	subs	r3, r2, r3
 80171f2:	9305      	str	r3, [sp, #20]
 80171f4:	9b07      	ldr	r3, [sp, #28]
 80171f6:	b31b      	cbz	r3, 8017240 <_dtoa_r+0x7a0>
 80171f8:	9b08      	ldr	r3, [sp, #32]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f000 80af 	beq.w	801735e <_dtoa_r+0x8be>
 8017200:	2e00      	cmp	r6, #0
 8017202:	dd13      	ble.n	801722c <_dtoa_r+0x78c>
 8017204:	4639      	mov	r1, r7
 8017206:	4632      	mov	r2, r6
 8017208:	4620      	mov	r0, r4
 801720a:	f001 f9fb 	bl	8018604 <__pow5mult>
 801720e:	ee18 2a10 	vmov	r2, s16
 8017212:	4601      	mov	r1, r0
 8017214:	4607      	mov	r7, r0
 8017216:	4620      	mov	r0, r4
 8017218:	f001 f94a 	bl	80184b0 <__multiply>
 801721c:	ee18 1a10 	vmov	r1, s16
 8017220:	4680      	mov	r8, r0
 8017222:	4620      	mov	r0, r4
 8017224:	f001 f82c 	bl	8018280 <_Bfree>
 8017228:	ee08 8a10 	vmov	s16, r8
 801722c:	9b07      	ldr	r3, [sp, #28]
 801722e:	1b9a      	subs	r2, r3, r6
 8017230:	d006      	beq.n	8017240 <_dtoa_r+0x7a0>
 8017232:	ee18 1a10 	vmov	r1, s16
 8017236:	4620      	mov	r0, r4
 8017238:	f001 f9e4 	bl	8018604 <__pow5mult>
 801723c:	ee08 0a10 	vmov	s16, r0
 8017240:	2101      	movs	r1, #1
 8017242:	4620      	mov	r0, r4
 8017244:	f001 f91e 	bl	8018484 <__i2b>
 8017248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801724a:	2b00      	cmp	r3, #0
 801724c:	4606      	mov	r6, r0
 801724e:	f340 8088 	ble.w	8017362 <_dtoa_r+0x8c2>
 8017252:	461a      	mov	r2, r3
 8017254:	4601      	mov	r1, r0
 8017256:	4620      	mov	r0, r4
 8017258:	f001 f9d4 	bl	8018604 <__pow5mult>
 801725c:	9b06      	ldr	r3, [sp, #24]
 801725e:	2b01      	cmp	r3, #1
 8017260:	4606      	mov	r6, r0
 8017262:	f340 8081 	ble.w	8017368 <_dtoa_r+0x8c8>
 8017266:	f04f 0800 	mov.w	r8, #0
 801726a:	6933      	ldr	r3, [r6, #16]
 801726c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017270:	6918      	ldr	r0, [r3, #16]
 8017272:	f001 f8b7 	bl	80183e4 <__hi0bits>
 8017276:	f1c0 0020 	rsb	r0, r0, #32
 801727a:	9b05      	ldr	r3, [sp, #20]
 801727c:	4418      	add	r0, r3
 801727e:	f010 001f 	ands.w	r0, r0, #31
 8017282:	f000 8092 	beq.w	80173aa <_dtoa_r+0x90a>
 8017286:	f1c0 0320 	rsb	r3, r0, #32
 801728a:	2b04      	cmp	r3, #4
 801728c:	f340 808a 	ble.w	80173a4 <_dtoa_r+0x904>
 8017290:	f1c0 001c 	rsb	r0, r0, #28
 8017294:	9b04      	ldr	r3, [sp, #16]
 8017296:	4403      	add	r3, r0
 8017298:	9304      	str	r3, [sp, #16]
 801729a:	9b05      	ldr	r3, [sp, #20]
 801729c:	4403      	add	r3, r0
 801729e:	4405      	add	r5, r0
 80172a0:	9305      	str	r3, [sp, #20]
 80172a2:	9b04      	ldr	r3, [sp, #16]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	dd07      	ble.n	80172b8 <_dtoa_r+0x818>
 80172a8:	ee18 1a10 	vmov	r1, s16
 80172ac:	461a      	mov	r2, r3
 80172ae:	4620      	mov	r0, r4
 80172b0:	f001 fa02 	bl	80186b8 <__lshift>
 80172b4:	ee08 0a10 	vmov	s16, r0
 80172b8:	9b05      	ldr	r3, [sp, #20]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	dd05      	ble.n	80172ca <_dtoa_r+0x82a>
 80172be:	4631      	mov	r1, r6
 80172c0:	461a      	mov	r2, r3
 80172c2:	4620      	mov	r0, r4
 80172c4:	f001 f9f8 	bl	80186b8 <__lshift>
 80172c8:	4606      	mov	r6, r0
 80172ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d06e      	beq.n	80173ae <_dtoa_r+0x90e>
 80172d0:	ee18 0a10 	vmov	r0, s16
 80172d4:	4631      	mov	r1, r6
 80172d6:	f001 fa5f 	bl	8018798 <__mcmp>
 80172da:	2800      	cmp	r0, #0
 80172dc:	da67      	bge.n	80173ae <_dtoa_r+0x90e>
 80172de:	9b00      	ldr	r3, [sp, #0]
 80172e0:	3b01      	subs	r3, #1
 80172e2:	ee18 1a10 	vmov	r1, s16
 80172e6:	9300      	str	r3, [sp, #0]
 80172e8:	220a      	movs	r2, #10
 80172ea:	2300      	movs	r3, #0
 80172ec:	4620      	mov	r0, r4
 80172ee:	f000 ffe9 	bl	80182c4 <__multadd>
 80172f2:	9b08      	ldr	r3, [sp, #32]
 80172f4:	ee08 0a10 	vmov	s16, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f000 81b1 	beq.w	8017660 <_dtoa_r+0xbc0>
 80172fe:	2300      	movs	r3, #0
 8017300:	4639      	mov	r1, r7
 8017302:	220a      	movs	r2, #10
 8017304:	4620      	mov	r0, r4
 8017306:	f000 ffdd 	bl	80182c4 <__multadd>
 801730a:	9b02      	ldr	r3, [sp, #8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	4607      	mov	r7, r0
 8017310:	f300 808e 	bgt.w	8017430 <_dtoa_r+0x990>
 8017314:	9b06      	ldr	r3, [sp, #24]
 8017316:	2b02      	cmp	r3, #2
 8017318:	dc51      	bgt.n	80173be <_dtoa_r+0x91e>
 801731a:	e089      	b.n	8017430 <_dtoa_r+0x990>
 801731c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801731e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017322:	e74b      	b.n	80171bc <_dtoa_r+0x71c>
 8017324:	9b03      	ldr	r3, [sp, #12]
 8017326:	1e5e      	subs	r6, r3, #1
 8017328:	9b07      	ldr	r3, [sp, #28]
 801732a:	42b3      	cmp	r3, r6
 801732c:	bfbf      	itttt	lt
 801732e:	9b07      	ldrlt	r3, [sp, #28]
 8017330:	9607      	strlt	r6, [sp, #28]
 8017332:	1af2      	sublt	r2, r6, r3
 8017334:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8017336:	bfb6      	itet	lt
 8017338:	189b      	addlt	r3, r3, r2
 801733a:	1b9e      	subge	r6, r3, r6
 801733c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801733e:	9b03      	ldr	r3, [sp, #12]
 8017340:	bfb8      	it	lt
 8017342:	2600      	movlt	r6, #0
 8017344:	2b00      	cmp	r3, #0
 8017346:	bfb7      	itett	lt
 8017348:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801734c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017350:	1a9d      	sublt	r5, r3, r2
 8017352:	2300      	movlt	r3, #0
 8017354:	e734      	b.n	80171c0 <_dtoa_r+0x720>
 8017356:	9e07      	ldr	r6, [sp, #28]
 8017358:	9d04      	ldr	r5, [sp, #16]
 801735a:	9f08      	ldr	r7, [sp, #32]
 801735c:	e73b      	b.n	80171d6 <_dtoa_r+0x736>
 801735e:	9a07      	ldr	r2, [sp, #28]
 8017360:	e767      	b.n	8017232 <_dtoa_r+0x792>
 8017362:	9b06      	ldr	r3, [sp, #24]
 8017364:	2b01      	cmp	r3, #1
 8017366:	dc18      	bgt.n	801739a <_dtoa_r+0x8fa>
 8017368:	f1ba 0f00 	cmp.w	sl, #0
 801736c:	d115      	bne.n	801739a <_dtoa_r+0x8fa>
 801736e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017372:	b993      	cbnz	r3, 801739a <_dtoa_r+0x8fa>
 8017374:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017378:	0d1b      	lsrs	r3, r3, #20
 801737a:	051b      	lsls	r3, r3, #20
 801737c:	b183      	cbz	r3, 80173a0 <_dtoa_r+0x900>
 801737e:	9b04      	ldr	r3, [sp, #16]
 8017380:	3301      	adds	r3, #1
 8017382:	9304      	str	r3, [sp, #16]
 8017384:	9b05      	ldr	r3, [sp, #20]
 8017386:	3301      	adds	r3, #1
 8017388:	9305      	str	r3, [sp, #20]
 801738a:	f04f 0801 	mov.w	r8, #1
 801738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017390:	2b00      	cmp	r3, #0
 8017392:	f47f af6a 	bne.w	801726a <_dtoa_r+0x7ca>
 8017396:	2001      	movs	r0, #1
 8017398:	e76f      	b.n	801727a <_dtoa_r+0x7da>
 801739a:	f04f 0800 	mov.w	r8, #0
 801739e:	e7f6      	b.n	801738e <_dtoa_r+0x8ee>
 80173a0:	4698      	mov	r8, r3
 80173a2:	e7f4      	b.n	801738e <_dtoa_r+0x8ee>
 80173a4:	f43f af7d 	beq.w	80172a2 <_dtoa_r+0x802>
 80173a8:	4618      	mov	r0, r3
 80173aa:	301c      	adds	r0, #28
 80173ac:	e772      	b.n	8017294 <_dtoa_r+0x7f4>
 80173ae:	9b03      	ldr	r3, [sp, #12]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	dc37      	bgt.n	8017424 <_dtoa_r+0x984>
 80173b4:	9b06      	ldr	r3, [sp, #24]
 80173b6:	2b02      	cmp	r3, #2
 80173b8:	dd34      	ble.n	8017424 <_dtoa_r+0x984>
 80173ba:	9b03      	ldr	r3, [sp, #12]
 80173bc:	9302      	str	r3, [sp, #8]
 80173be:	9b02      	ldr	r3, [sp, #8]
 80173c0:	b96b      	cbnz	r3, 80173de <_dtoa_r+0x93e>
 80173c2:	4631      	mov	r1, r6
 80173c4:	2205      	movs	r2, #5
 80173c6:	4620      	mov	r0, r4
 80173c8:	f000 ff7c 	bl	80182c4 <__multadd>
 80173cc:	4601      	mov	r1, r0
 80173ce:	4606      	mov	r6, r0
 80173d0:	ee18 0a10 	vmov	r0, s16
 80173d4:	f001 f9e0 	bl	8018798 <__mcmp>
 80173d8:	2800      	cmp	r0, #0
 80173da:	f73f adbb 	bgt.w	8016f54 <_dtoa_r+0x4b4>
 80173de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173e0:	9d01      	ldr	r5, [sp, #4]
 80173e2:	43db      	mvns	r3, r3
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	f04f 0800 	mov.w	r8, #0
 80173ea:	4631      	mov	r1, r6
 80173ec:	4620      	mov	r0, r4
 80173ee:	f000 ff47 	bl	8018280 <_Bfree>
 80173f2:	2f00      	cmp	r7, #0
 80173f4:	f43f aea4 	beq.w	8017140 <_dtoa_r+0x6a0>
 80173f8:	f1b8 0f00 	cmp.w	r8, #0
 80173fc:	d005      	beq.n	801740a <_dtoa_r+0x96a>
 80173fe:	45b8      	cmp	r8, r7
 8017400:	d003      	beq.n	801740a <_dtoa_r+0x96a>
 8017402:	4641      	mov	r1, r8
 8017404:	4620      	mov	r0, r4
 8017406:	f000 ff3b 	bl	8018280 <_Bfree>
 801740a:	4639      	mov	r1, r7
 801740c:	4620      	mov	r0, r4
 801740e:	f000 ff37 	bl	8018280 <_Bfree>
 8017412:	e695      	b.n	8017140 <_dtoa_r+0x6a0>
 8017414:	2600      	movs	r6, #0
 8017416:	4637      	mov	r7, r6
 8017418:	e7e1      	b.n	80173de <_dtoa_r+0x93e>
 801741a:	9700      	str	r7, [sp, #0]
 801741c:	4637      	mov	r7, r6
 801741e:	e599      	b.n	8016f54 <_dtoa_r+0x4b4>
 8017420:	40240000 	.word	0x40240000
 8017424:	9b08      	ldr	r3, [sp, #32]
 8017426:	2b00      	cmp	r3, #0
 8017428:	f000 80ca 	beq.w	80175c0 <_dtoa_r+0xb20>
 801742c:	9b03      	ldr	r3, [sp, #12]
 801742e:	9302      	str	r3, [sp, #8]
 8017430:	2d00      	cmp	r5, #0
 8017432:	dd05      	ble.n	8017440 <_dtoa_r+0x9a0>
 8017434:	4639      	mov	r1, r7
 8017436:	462a      	mov	r2, r5
 8017438:	4620      	mov	r0, r4
 801743a:	f001 f93d 	bl	80186b8 <__lshift>
 801743e:	4607      	mov	r7, r0
 8017440:	f1b8 0f00 	cmp.w	r8, #0
 8017444:	d05b      	beq.n	80174fe <_dtoa_r+0xa5e>
 8017446:	6879      	ldr	r1, [r7, #4]
 8017448:	4620      	mov	r0, r4
 801744a:	f000 fed9 	bl	8018200 <_Balloc>
 801744e:	4605      	mov	r5, r0
 8017450:	b928      	cbnz	r0, 801745e <_dtoa_r+0x9be>
 8017452:	4b87      	ldr	r3, [pc, #540]	; (8017670 <_dtoa_r+0xbd0>)
 8017454:	4602      	mov	r2, r0
 8017456:	f240 21ea 	movw	r1, #746	; 0x2ea
 801745a:	f7ff bb3b 	b.w	8016ad4 <_dtoa_r+0x34>
 801745e:	693a      	ldr	r2, [r7, #16]
 8017460:	3202      	adds	r2, #2
 8017462:	0092      	lsls	r2, r2, #2
 8017464:	f107 010c 	add.w	r1, r7, #12
 8017468:	300c      	adds	r0, #12
 801746a:	f7fd fa7d 	bl	8014968 <memcpy>
 801746e:	2201      	movs	r2, #1
 8017470:	4629      	mov	r1, r5
 8017472:	4620      	mov	r0, r4
 8017474:	f001 f920 	bl	80186b8 <__lshift>
 8017478:	9b01      	ldr	r3, [sp, #4]
 801747a:	f103 0901 	add.w	r9, r3, #1
 801747e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017482:	4413      	add	r3, r2
 8017484:	9305      	str	r3, [sp, #20]
 8017486:	f00a 0301 	and.w	r3, sl, #1
 801748a:	46b8      	mov	r8, r7
 801748c:	9304      	str	r3, [sp, #16]
 801748e:	4607      	mov	r7, r0
 8017490:	4631      	mov	r1, r6
 8017492:	ee18 0a10 	vmov	r0, s16
 8017496:	f7ff fa75 	bl	8016984 <quorem>
 801749a:	4641      	mov	r1, r8
 801749c:	9002      	str	r0, [sp, #8]
 801749e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80174a2:	ee18 0a10 	vmov	r0, s16
 80174a6:	f001 f977 	bl	8018798 <__mcmp>
 80174aa:	463a      	mov	r2, r7
 80174ac:	9003      	str	r0, [sp, #12]
 80174ae:	4631      	mov	r1, r6
 80174b0:	4620      	mov	r0, r4
 80174b2:	f001 f98d 	bl	80187d0 <__mdiff>
 80174b6:	68c2      	ldr	r2, [r0, #12]
 80174b8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80174bc:	4605      	mov	r5, r0
 80174be:	bb02      	cbnz	r2, 8017502 <_dtoa_r+0xa62>
 80174c0:	4601      	mov	r1, r0
 80174c2:	ee18 0a10 	vmov	r0, s16
 80174c6:	f001 f967 	bl	8018798 <__mcmp>
 80174ca:	4602      	mov	r2, r0
 80174cc:	4629      	mov	r1, r5
 80174ce:	4620      	mov	r0, r4
 80174d0:	9207      	str	r2, [sp, #28]
 80174d2:	f000 fed5 	bl	8018280 <_Bfree>
 80174d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80174da:	ea43 0102 	orr.w	r1, r3, r2
 80174de:	9b04      	ldr	r3, [sp, #16]
 80174e0:	430b      	orrs	r3, r1
 80174e2:	464d      	mov	r5, r9
 80174e4:	d10f      	bne.n	8017506 <_dtoa_r+0xa66>
 80174e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80174ea:	d02a      	beq.n	8017542 <_dtoa_r+0xaa2>
 80174ec:	9b03      	ldr	r3, [sp, #12]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	dd02      	ble.n	80174f8 <_dtoa_r+0xa58>
 80174f2:	9b02      	ldr	r3, [sp, #8]
 80174f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80174f8:	f88b a000 	strb.w	sl, [fp]
 80174fc:	e775      	b.n	80173ea <_dtoa_r+0x94a>
 80174fe:	4638      	mov	r0, r7
 8017500:	e7ba      	b.n	8017478 <_dtoa_r+0x9d8>
 8017502:	2201      	movs	r2, #1
 8017504:	e7e2      	b.n	80174cc <_dtoa_r+0xa2c>
 8017506:	9b03      	ldr	r3, [sp, #12]
 8017508:	2b00      	cmp	r3, #0
 801750a:	db04      	blt.n	8017516 <_dtoa_r+0xa76>
 801750c:	9906      	ldr	r1, [sp, #24]
 801750e:	430b      	orrs	r3, r1
 8017510:	9904      	ldr	r1, [sp, #16]
 8017512:	430b      	orrs	r3, r1
 8017514:	d122      	bne.n	801755c <_dtoa_r+0xabc>
 8017516:	2a00      	cmp	r2, #0
 8017518:	ddee      	ble.n	80174f8 <_dtoa_r+0xa58>
 801751a:	ee18 1a10 	vmov	r1, s16
 801751e:	2201      	movs	r2, #1
 8017520:	4620      	mov	r0, r4
 8017522:	f001 f8c9 	bl	80186b8 <__lshift>
 8017526:	4631      	mov	r1, r6
 8017528:	ee08 0a10 	vmov	s16, r0
 801752c:	f001 f934 	bl	8018798 <__mcmp>
 8017530:	2800      	cmp	r0, #0
 8017532:	dc03      	bgt.n	801753c <_dtoa_r+0xa9c>
 8017534:	d1e0      	bne.n	80174f8 <_dtoa_r+0xa58>
 8017536:	f01a 0f01 	tst.w	sl, #1
 801753a:	d0dd      	beq.n	80174f8 <_dtoa_r+0xa58>
 801753c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017540:	d1d7      	bne.n	80174f2 <_dtoa_r+0xa52>
 8017542:	2339      	movs	r3, #57	; 0x39
 8017544:	f88b 3000 	strb.w	r3, [fp]
 8017548:	462b      	mov	r3, r5
 801754a:	461d      	mov	r5, r3
 801754c:	3b01      	subs	r3, #1
 801754e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017552:	2a39      	cmp	r2, #57	; 0x39
 8017554:	d071      	beq.n	801763a <_dtoa_r+0xb9a>
 8017556:	3201      	adds	r2, #1
 8017558:	701a      	strb	r2, [r3, #0]
 801755a:	e746      	b.n	80173ea <_dtoa_r+0x94a>
 801755c:	2a00      	cmp	r2, #0
 801755e:	dd07      	ble.n	8017570 <_dtoa_r+0xad0>
 8017560:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017564:	d0ed      	beq.n	8017542 <_dtoa_r+0xaa2>
 8017566:	f10a 0301 	add.w	r3, sl, #1
 801756a:	f88b 3000 	strb.w	r3, [fp]
 801756e:	e73c      	b.n	80173ea <_dtoa_r+0x94a>
 8017570:	9b05      	ldr	r3, [sp, #20]
 8017572:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017576:	4599      	cmp	r9, r3
 8017578:	d047      	beq.n	801760a <_dtoa_r+0xb6a>
 801757a:	ee18 1a10 	vmov	r1, s16
 801757e:	2300      	movs	r3, #0
 8017580:	220a      	movs	r2, #10
 8017582:	4620      	mov	r0, r4
 8017584:	f000 fe9e 	bl	80182c4 <__multadd>
 8017588:	45b8      	cmp	r8, r7
 801758a:	ee08 0a10 	vmov	s16, r0
 801758e:	f04f 0300 	mov.w	r3, #0
 8017592:	f04f 020a 	mov.w	r2, #10
 8017596:	4641      	mov	r1, r8
 8017598:	4620      	mov	r0, r4
 801759a:	d106      	bne.n	80175aa <_dtoa_r+0xb0a>
 801759c:	f000 fe92 	bl	80182c4 <__multadd>
 80175a0:	4680      	mov	r8, r0
 80175a2:	4607      	mov	r7, r0
 80175a4:	f109 0901 	add.w	r9, r9, #1
 80175a8:	e772      	b.n	8017490 <_dtoa_r+0x9f0>
 80175aa:	f000 fe8b 	bl	80182c4 <__multadd>
 80175ae:	4639      	mov	r1, r7
 80175b0:	4680      	mov	r8, r0
 80175b2:	2300      	movs	r3, #0
 80175b4:	220a      	movs	r2, #10
 80175b6:	4620      	mov	r0, r4
 80175b8:	f000 fe84 	bl	80182c4 <__multadd>
 80175bc:	4607      	mov	r7, r0
 80175be:	e7f1      	b.n	80175a4 <_dtoa_r+0xb04>
 80175c0:	9b03      	ldr	r3, [sp, #12]
 80175c2:	9302      	str	r3, [sp, #8]
 80175c4:	9d01      	ldr	r5, [sp, #4]
 80175c6:	ee18 0a10 	vmov	r0, s16
 80175ca:	4631      	mov	r1, r6
 80175cc:	f7ff f9da 	bl	8016984 <quorem>
 80175d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80175d4:	9b01      	ldr	r3, [sp, #4]
 80175d6:	f805 ab01 	strb.w	sl, [r5], #1
 80175da:	1aea      	subs	r2, r5, r3
 80175dc:	9b02      	ldr	r3, [sp, #8]
 80175de:	4293      	cmp	r3, r2
 80175e0:	dd09      	ble.n	80175f6 <_dtoa_r+0xb56>
 80175e2:	ee18 1a10 	vmov	r1, s16
 80175e6:	2300      	movs	r3, #0
 80175e8:	220a      	movs	r2, #10
 80175ea:	4620      	mov	r0, r4
 80175ec:	f000 fe6a 	bl	80182c4 <__multadd>
 80175f0:	ee08 0a10 	vmov	s16, r0
 80175f4:	e7e7      	b.n	80175c6 <_dtoa_r+0xb26>
 80175f6:	9b02      	ldr	r3, [sp, #8]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	bfc8      	it	gt
 80175fc:	461d      	movgt	r5, r3
 80175fe:	9b01      	ldr	r3, [sp, #4]
 8017600:	bfd8      	it	le
 8017602:	2501      	movle	r5, #1
 8017604:	441d      	add	r5, r3
 8017606:	f04f 0800 	mov.w	r8, #0
 801760a:	ee18 1a10 	vmov	r1, s16
 801760e:	2201      	movs	r2, #1
 8017610:	4620      	mov	r0, r4
 8017612:	f001 f851 	bl	80186b8 <__lshift>
 8017616:	4631      	mov	r1, r6
 8017618:	ee08 0a10 	vmov	s16, r0
 801761c:	f001 f8bc 	bl	8018798 <__mcmp>
 8017620:	2800      	cmp	r0, #0
 8017622:	dc91      	bgt.n	8017548 <_dtoa_r+0xaa8>
 8017624:	d102      	bne.n	801762c <_dtoa_r+0xb8c>
 8017626:	f01a 0f01 	tst.w	sl, #1
 801762a:	d18d      	bne.n	8017548 <_dtoa_r+0xaa8>
 801762c:	462b      	mov	r3, r5
 801762e:	461d      	mov	r5, r3
 8017630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017634:	2a30      	cmp	r2, #48	; 0x30
 8017636:	d0fa      	beq.n	801762e <_dtoa_r+0xb8e>
 8017638:	e6d7      	b.n	80173ea <_dtoa_r+0x94a>
 801763a:	9a01      	ldr	r2, [sp, #4]
 801763c:	429a      	cmp	r2, r3
 801763e:	d184      	bne.n	801754a <_dtoa_r+0xaaa>
 8017640:	9b00      	ldr	r3, [sp, #0]
 8017642:	3301      	adds	r3, #1
 8017644:	9300      	str	r3, [sp, #0]
 8017646:	2331      	movs	r3, #49	; 0x31
 8017648:	7013      	strb	r3, [r2, #0]
 801764a:	e6ce      	b.n	80173ea <_dtoa_r+0x94a>
 801764c:	4b09      	ldr	r3, [pc, #36]	; (8017674 <_dtoa_r+0xbd4>)
 801764e:	f7ff ba95 	b.w	8016b7c <_dtoa_r+0xdc>
 8017652:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017654:	2b00      	cmp	r3, #0
 8017656:	f47f aa6e 	bne.w	8016b36 <_dtoa_r+0x96>
 801765a:	4b07      	ldr	r3, [pc, #28]	; (8017678 <_dtoa_r+0xbd8>)
 801765c:	f7ff ba8e 	b.w	8016b7c <_dtoa_r+0xdc>
 8017660:	9b02      	ldr	r3, [sp, #8]
 8017662:	2b00      	cmp	r3, #0
 8017664:	dcae      	bgt.n	80175c4 <_dtoa_r+0xb24>
 8017666:	9b06      	ldr	r3, [sp, #24]
 8017668:	2b02      	cmp	r3, #2
 801766a:	f73f aea8 	bgt.w	80173be <_dtoa_r+0x91e>
 801766e:	e7a9      	b.n	80175c4 <_dtoa_r+0xb24>
 8017670:	0808c949 	.word	0x0808c949
 8017674:	0808c6b4 	.word	0x0808c6b4
 8017678:	0808c8e1 	.word	0x0808c8e1

0801767c <__sflush_r>:
 801767c:	898a      	ldrh	r2, [r1, #12]
 801767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017682:	4605      	mov	r5, r0
 8017684:	0710      	lsls	r0, r2, #28
 8017686:	460c      	mov	r4, r1
 8017688:	d458      	bmi.n	801773c <__sflush_r+0xc0>
 801768a:	684b      	ldr	r3, [r1, #4]
 801768c:	2b00      	cmp	r3, #0
 801768e:	dc05      	bgt.n	801769c <__sflush_r+0x20>
 8017690:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017692:	2b00      	cmp	r3, #0
 8017694:	dc02      	bgt.n	801769c <__sflush_r+0x20>
 8017696:	2000      	movs	r0, #0
 8017698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801769c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801769e:	2e00      	cmp	r6, #0
 80176a0:	d0f9      	beq.n	8017696 <__sflush_r+0x1a>
 80176a2:	2300      	movs	r3, #0
 80176a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80176a8:	682f      	ldr	r7, [r5, #0]
 80176aa:	602b      	str	r3, [r5, #0]
 80176ac:	d032      	beq.n	8017714 <__sflush_r+0x98>
 80176ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80176b0:	89a3      	ldrh	r3, [r4, #12]
 80176b2:	075a      	lsls	r2, r3, #29
 80176b4:	d505      	bpl.n	80176c2 <__sflush_r+0x46>
 80176b6:	6863      	ldr	r3, [r4, #4]
 80176b8:	1ac0      	subs	r0, r0, r3
 80176ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80176bc:	b10b      	cbz	r3, 80176c2 <__sflush_r+0x46>
 80176be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176c0:	1ac0      	subs	r0, r0, r3
 80176c2:	2300      	movs	r3, #0
 80176c4:	4602      	mov	r2, r0
 80176c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80176c8:	6a21      	ldr	r1, [r4, #32]
 80176ca:	4628      	mov	r0, r5
 80176cc:	47b0      	blx	r6
 80176ce:	1c43      	adds	r3, r0, #1
 80176d0:	89a3      	ldrh	r3, [r4, #12]
 80176d2:	d106      	bne.n	80176e2 <__sflush_r+0x66>
 80176d4:	6829      	ldr	r1, [r5, #0]
 80176d6:	291d      	cmp	r1, #29
 80176d8:	d82c      	bhi.n	8017734 <__sflush_r+0xb8>
 80176da:	4a2a      	ldr	r2, [pc, #168]	; (8017784 <__sflush_r+0x108>)
 80176dc:	40ca      	lsrs	r2, r1
 80176de:	07d6      	lsls	r6, r2, #31
 80176e0:	d528      	bpl.n	8017734 <__sflush_r+0xb8>
 80176e2:	2200      	movs	r2, #0
 80176e4:	6062      	str	r2, [r4, #4]
 80176e6:	04d9      	lsls	r1, r3, #19
 80176e8:	6922      	ldr	r2, [r4, #16]
 80176ea:	6022      	str	r2, [r4, #0]
 80176ec:	d504      	bpl.n	80176f8 <__sflush_r+0x7c>
 80176ee:	1c42      	adds	r2, r0, #1
 80176f0:	d101      	bne.n	80176f6 <__sflush_r+0x7a>
 80176f2:	682b      	ldr	r3, [r5, #0]
 80176f4:	b903      	cbnz	r3, 80176f8 <__sflush_r+0x7c>
 80176f6:	6560      	str	r0, [r4, #84]	; 0x54
 80176f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176fa:	602f      	str	r7, [r5, #0]
 80176fc:	2900      	cmp	r1, #0
 80176fe:	d0ca      	beq.n	8017696 <__sflush_r+0x1a>
 8017700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017704:	4299      	cmp	r1, r3
 8017706:	d002      	beq.n	801770e <__sflush_r+0x92>
 8017708:	4628      	mov	r0, r5
 801770a:	f7fd f943 	bl	8014994 <_free_r>
 801770e:	2000      	movs	r0, #0
 8017710:	6360      	str	r0, [r4, #52]	; 0x34
 8017712:	e7c1      	b.n	8017698 <__sflush_r+0x1c>
 8017714:	6a21      	ldr	r1, [r4, #32]
 8017716:	2301      	movs	r3, #1
 8017718:	4628      	mov	r0, r5
 801771a:	47b0      	blx	r6
 801771c:	1c41      	adds	r1, r0, #1
 801771e:	d1c7      	bne.n	80176b0 <__sflush_r+0x34>
 8017720:	682b      	ldr	r3, [r5, #0]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d0c4      	beq.n	80176b0 <__sflush_r+0x34>
 8017726:	2b1d      	cmp	r3, #29
 8017728:	d001      	beq.n	801772e <__sflush_r+0xb2>
 801772a:	2b16      	cmp	r3, #22
 801772c:	d101      	bne.n	8017732 <__sflush_r+0xb6>
 801772e:	602f      	str	r7, [r5, #0]
 8017730:	e7b1      	b.n	8017696 <__sflush_r+0x1a>
 8017732:	89a3      	ldrh	r3, [r4, #12]
 8017734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017738:	81a3      	strh	r3, [r4, #12]
 801773a:	e7ad      	b.n	8017698 <__sflush_r+0x1c>
 801773c:	690f      	ldr	r7, [r1, #16]
 801773e:	2f00      	cmp	r7, #0
 8017740:	d0a9      	beq.n	8017696 <__sflush_r+0x1a>
 8017742:	0793      	lsls	r3, r2, #30
 8017744:	680e      	ldr	r6, [r1, #0]
 8017746:	bf08      	it	eq
 8017748:	694b      	ldreq	r3, [r1, #20]
 801774a:	600f      	str	r7, [r1, #0]
 801774c:	bf18      	it	ne
 801774e:	2300      	movne	r3, #0
 8017750:	eba6 0807 	sub.w	r8, r6, r7
 8017754:	608b      	str	r3, [r1, #8]
 8017756:	f1b8 0f00 	cmp.w	r8, #0
 801775a:	dd9c      	ble.n	8017696 <__sflush_r+0x1a>
 801775c:	6a21      	ldr	r1, [r4, #32]
 801775e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017760:	4643      	mov	r3, r8
 8017762:	463a      	mov	r2, r7
 8017764:	4628      	mov	r0, r5
 8017766:	47b0      	blx	r6
 8017768:	2800      	cmp	r0, #0
 801776a:	dc06      	bgt.n	801777a <__sflush_r+0xfe>
 801776c:	89a3      	ldrh	r3, [r4, #12]
 801776e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017772:	81a3      	strh	r3, [r4, #12]
 8017774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017778:	e78e      	b.n	8017698 <__sflush_r+0x1c>
 801777a:	4407      	add	r7, r0
 801777c:	eba8 0800 	sub.w	r8, r8, r0
 8017780:	e7e9      	b.n	8017756 <__sflush_r+0xda>
 8017782:	bf00      	nop
 8017784:	20400001 	.word	0x20400001

08017788 <_fflush_r>:
 8017788:	b538      	push	{r3, r4, r5, lr}
 801778a:	690b      	ldr	r3, [r1, #16]
 801778c:	4605      	mov	r5, r0
 801778e:	460c      	mov	r4, r1
 8017790:	b913      	cbnz	r3, 8017798 <_fflush_r+0x10>
 8017792:	2500      	movs	r5, #0
 8017794:	4628      	mov	r0, r5
 8017796:	bd38      	pop	{r3, r4, r5, pc}
 8017798:	b118      	cbz	r0, 80177a2 <_fflush_r+0x1a>
 801779a:	6983      	ldr	r3, [r0, #24]
 801779c:	b90b      	cbnz	r3, 80177a2 <_fflush_r+0x1a>
 801779e:	f000 f887 	bl	80178b0 <__sinit>
 80177a2:	4b14      	ldr	r3, [pc, #80]	; (80177f4 <_fflush_r+0x6c>)
 80177a4:	429c      	cmp	r4, r3
 80177a6:	d11b      	bne.n	80177e0 <_fflush_r+0x58>
 80177a8:	686c      	ldr	r4, [r5, #4]
 80177aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d0ef      	beq.n	8017792 <_fflush_r+0xa>
 80177b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80177b4:	07d0      	lsls	r0, r2, #31
 80177b6:	d404      	bmi.n	80177c2 <_fflush_r+0x3a>
 80177b8:	0599      	lsls	r1, r3, #22
 80177ba:	d402      	bmi.n	80177c2 <_fflush_r+0x3a>
 80177bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177be:	f000 fc9a 	bl	80180f6 <__retarget_lock_acquire_recursive>
 80177c2:	4628      	mov	r0, r5
 80177c4:	4621      	mov	r1, r4
 80177c6:	f7ff ff59 	bl	801767c <__sflush_r>
 80177ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80177cc:	07da      	lsls	r2, r3, #31
 80177ce:	4605      	mov	r5, r0
 80177d0:	d4e0      	bmi.n	8017794 <_fflush_r+0xc>
 80177d2:	89a3      	ldrh	r3, [r4, #12]
 80177d4:	059b      	lsls	r3, r3, #22
 80177d6:	d4dd      	bmi.n	8017794 <_fflush_r+0xc>
 80177d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80177da:	f000 fc8d 	bl	80180f8 <__retarget_lock_release_recursive>
 80177de:	e7d9      	b.n	8017794 <_fflush_r+0xc>
 80177e0:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <_fflush_r+0x70>)
 80177e2:	429c      	cmp	r4, r3
 80177e4:	d101      	bne.n	80177ea <_fflush_r+0x62>
 80177e6:	68ac      	ldr	r4, [r5, #8]
 80177e8:	e7df      	b.n	80177aa <_fflush_r+0x22>
 80177ea:	4b04      	ldr	r3, [pc, #16]	; (80177fc <_fflush_r+0x74>)
 80177ec:	429c      	cmp	r4, r3
 80177ee:	bf08      	it	eq
 80177f0:	68ec      	ldreq	r4, [r5, #12]
 80177f2:	e7da      	b.n	80177aa <_fflush_r+0x22>
 80177f4:	0808c97c 	.word	0x0808c97c
 80177f8:	0808c99c 	.word	0x0808c99c
 80177fc:	0808c95c 	.word	0x0808c95c

08017800 <std>:
 8017800:	2300      	movs	r3, #0
 8017802:	b510      	push	{r4, lr}
 8017804:	4604      	mov	r4, r0
 8017806:	e9c0 3300 	strd	r3, r3, [r0]
 801780a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801780e:	6083      	str	r3, [r0, #8]
 8017810:	8181      	strh	r1, [r0, #12]
 8017812:	6643      	str	r3, [r0, #100]	; 0x64
 8017814:	81c2      	strh	r2, [r0, #14]
 8017816:	6183      	str	r3, [r0, #24]
 8017818:	4619      	mov	r1, r3
 801781a:	2208      	movs	r2, #8
 801781c:	305c      	adds	r0, #92	; 0x5c
 801781e:	f7fd f8b1 	bl	8014984 <memset>
 8017822:	4b05      	ldr	r3, [pc, #20]	; (8017838 <std+0x38>)
 8017824:	6263      	str	r3, [r4, #36]	; 0x24
 8017826:	4b05      	ldr	r3, [pc, #20]	; (801783c <std+0x3c>)
 8017828:	62a3      	str	r3, [r4, #40]	; 0x28
 801782a:	4b05      	ldr	r3, [pc, #20]	; (8017840 <std+0x40>)
 801782c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801782e:	4b05      	ldr	r3, [pc, #20]	; (8017844 <std+0x44>)
 8017830:	6224      	str	r4, [r4, #32]
 8017832:	6323      	str	r3, [r4, #48]	; 0x30
 8017834:	bd10      	pop	{r4, pc}
 8017836:	bf00      	nop
 8017838:	08019189 	.word	0x08019189
 801783c:	080191ab 	.word	0x080191ab
 8017840:	080191e3 	.word	0x080191e3
 8017844:	08019207 	.word	0x08019207

08017848 <_cleanup_r>:
 8017848:	4901      	ldr	r1, [pc, #4]	; (8017850 <_cleanup_r+0x8>)
 801784a:	f000 b8c1 	b.w	80179d0 <_fwalk_reent>
 801784e:	bf00      	nop
 8017850:	08017789 	.word	0x08017789

08017854 <__sfmoreglue>:
 8017854:	b570      	push	{r4, r5, r6, lr}
 8017856:	2268      	movs	r2, #104	; 0x68
 8017858:	1e4d      	subs	r5, r1, #1
 801785a:	4355      	muls	r5, r2
 801785c:	460e      	mov	r6, r1
 801785e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017862:	f7fd f903 	bl	8014a6c <_malloc_r>
 8017866:	4604      	mov	r4, r0
 8017868:	b140      	cbz	r0, 801787c <__sfmoreglue+0x28>
 801786a:	2100      	movs	r1, #0
 801786c:	e9c0 1600 	strd	r1, r6, [r0]
 8017870:	300c      	adds	r0, #12
 8017872:	60a0      	str	r0, [r4, #8]
 8017874:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017878:	f7fd f884 	bl	8014984 <memset>
 801787c:	4620      	mov	r0, r4
 801787e:	bd70      	pop	{r4, r5, r6, pc}

08017880 <__sfp_lock_acquire>:
 8017880:	4801      	ldr	r0, [pc, #4]	; (8017888 <__sfp_lock_acquire+0x8>)
 8017882:	f000 bc38 	b.w	80180f6 <__retarget_lock_acquire_recursive>
 8017886:	bf00      	nop
 8017888:	20001911 	.word	0x20001911

0801788c <__sfp_lock_release>:
 801788c:	4801      	ldr	r0, [pc, #4]	; (8017894 <__sfp_lock_release+0x8>)
 801788e:	f000 bc33 	b.w	80180f8 <__retarget_lock_release_recursive>
 8017892:	bf00      	nop
 8017894:	20001911 	.word	0x20001911

08017898 <__sinit_lock_acquire>:
 8017898:	4801      	ldr	r0, [pc, #4]	; (80178a0 <__sinit_lock_acquire+0x8>)
 801789a:	f000 bc2c 	b.w	80180f6 <__retarget_lock_acquire_recursive>
 801789e:	bf00      	nop
 80178a0:	20001912 	.word	0x20001912

080178a4 <__sinit_lock_release>:
 80178a4:	4801      	ldr	r0, [pc, #4]	; (80178ac <__sinit_lock_release+0x8>)
 80178a6:	f000 bc27 	b.w	80180f8 <__retarget_lock_release_recursive>
 80178aa:	bf00      	nop
 80178ac:	20001912 	.word	0x20001912

080178b0 <__sinit>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	4604      	mov	r4, r0
 80178b4:	f7ff fff0 	bl	8017898 <__sinit_lock_acquire>
 80178b8:	69a3      	ldr	r3, [r4, #24]
 80178ba:	b11b      	cbz	r3, 80178c4 <__sinit+0x14>
 80178bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178c0:	f7ff bff0 	b.w	80178a4 <__sinit_lock_release>
 80178c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80178c8:	6523      	str	r3, [r4, #80]	; 0x50
 80178ca:	4b13      	ldr	r3, [pc, #76]	; (8017918 <__sinit+0x68>)
 80178cc:	4a13      	ldr	r2, [pc, #76]	; (801791c <__sinit+0x6c>)
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80178d2:	42a3      	cmp	r3, r4
 80178d4:	bf04      	itt	eq
 80178d6:	2301      	moveq	r3, #1
 80178d8:	61a3      	streq	r3, [r4, #24]
 80178da:	4620      	mov	r0, r4
 80178dc:	f000 f820 	bl	8017920 <__sfp>
 80178e0:	6060      	str	r0, [r4, #4]
 80178e2:	4620      	mov	r0, r4
 80178e4:	f000 f81c 	bl	8017920 <__sfp>
 80178e8:	60a0      	str	r0, [r4, #8]
 80178ea:	4620      	mov	r0, r4
 80178ec:	f000 f818 	bl	8017920 <__sfp>
 80178f0:	2200      	movs	r2, #0
 80178f2:	60e0      	str	r0, [r4, #12]
 80178f4:	2104      	movs	r1, #4
 80178f6:	6860      	ldr	r0, [r4, #4]
 80178f8:	f7ff ff82 	bl	8017800 <std>
 80178fc:	68a0      	ldr	r0, [r4, #8]
 80178fe:	2201      	movs	r2, #1
 8017900:	2109      	movs	r1, #9
 8017902:	f7ff ff7d 	bl	8017800 <std>
 8017906:	68e0      	ldr	r0, [r4, #12]
 8017908:	2202      	movs	r2, #2
 801790a:	2112      	movs	r1, #18
 801790c:	f7ff ff78 	bl	8017800 <std>
 8017910:	2301      	movs	r3, #1
 8017912:	61a3      	str	r3, [r4, #24]
 8017914:	e7d2      	b.n	80178bc <__sinit+0xc>
 8017916:	bf00      	nop
 8017918:	0808c6a0 	.word	0x0808c6a0
 801791c:	08017849 	.word	0x08017849

08017920 <__sfp>:
 8017920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017922:	4607      	mov	r7, r0
 8017924:	f7ff ffac 	bl	8017880 <__sfp_lock_acquire>
 8017928:	4b1e      	ldr	r3, [pc, #120]	; (80179a4 <__sfp+0x84>)
 801792a:	681e      	ldr	r6, [r3, #0]
 801792c:	69b3      	ldr	r3, [r6, #24]
 801792e:	b913      	cbnz	r3, 8017936 <__sfp+0x16>
 8017930:	4630      	mov	r0, r6
 8017932:	f7ff ffbd 	bl	80178b0 <__sinit>
 8017936:	3648      	adds	r6, #72	; 0x48
 8017938:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801793c:	3b01      	subs	r3, #1
 801793e:	d503      	bpl.n	8017948 <__sfp+0x28>
 8017940:	6833      	ldr	r3, [r6, #0]
 8017942:	b30b      	cbz	r3, 8017988 <__sfp+0x68>
 8017944:	6836      	ldr	r6, [r6, #0]
 8017946:	e7f7      	b.n	8017938 <__sfp+0x18>
 8017948:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801794c:	b9d5      	cbnz	r5, 8017984 <__sfp+0x64>
 801794e:	4b16      	ldr	r3, [pc, #88]	; (80179a8 <__sfp+0x88>)
 8017950:	60e3      	str	r3, [r4, #12]
 8017952:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017956:	6665      	str	r5, [r4, #100]	; 0x64
 8017958:	f000 fbcc 	bl	80180f4 <__retarget_lock_init_recursive>
 801795c:	f7ff ff96 	bl	801788c <__sfp_lock_release>
 8017960:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017964:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017968:	6025      	str	r5, [r4, #0]
 801796a:	61a5      	str	r5, [r4, #24]
 801796c:	2208      	movs	r2, #8
 801796e:	4629      	mov	r1, r5
 8017970:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017974:	f7fd f806 	bl	8014984 <memset>
 8017978:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801797c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017980:	4620      	mov	r0, r4
 8017982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017984:	3468      	adds	r4, #104	; 0x68
 8017986:	e7d9      	b.n	801793c <__sfp+0x1c>
 8017988:	2104      	movs	r1, #4
 801798a:	4638      	mov	r0, r7
 801798c:	f7ff ff62 	bl	8017854 <__sfmoreglue>
 8017990:	4604      	mov	r4, r0
 8017992:	6030      	str	r0, [r6, #0]
 8017994:	2800      	cmp	r0, #0
 8017996:	d1d5      	bne.n	8017944 <__sfp+0x24>
 8017998:	f7ff ff78 	bl	801788c <__sfp_lock_release>
 801799c:	230c      	movs	r3, #12
 801799e:	603b      	str	r3, [r7, #0]
 80179a0:	e7ee      	b.n	8017980 <__sfp+0x60>
 80179a2:	bf00      	nop
 80179a4:	0808c6a0 	.word	0x0808c6a0
 80179a8:	ffff0001 	.word	0xffff0001

080179ac <fiprintf>:
 80179ac:	b40e      	push	{r1, r2, r3}
 80179ae:	b503      	push	{r0, r1, lr}
 80179b0:	4601      	mov	r1, r0
 80179b2:	ab03      	add	r3, sp, #12
 80179b4:	4805      	ldr	r0, [pc, #20]	; (80179cc <fiprintf+0x20>)
 80179b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ba:	6800      	ldr	r0, [r0, #0]
 80179bc:	9301      	str	r3, [sp, #4]
 80179be:	f001 faab 	bl	8018f18 <_vfiprintf_r>
 80179c2:	b002      	add	sp, #8
 80179c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80179c8:	b003      	add	sp, #12
 80179ca:	4770      	bx	lr
 80179cc:	200006dc 	.word	0x200006dc

080179d0 <_fwalk_reent>:
 80179d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80179d4:	4606      	mov	r6, r0
 80179d6:	4688      	mov	r8, r1
 80179d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80179dc:	2700      	movs	r7, #0
 80179de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179e2:	f1b9 0901 	subs.w	r9, r9, #1
 80179e6:	d505      	bpl.n	80179f4 <_fwalk_reent+0x24>
 80179e8:	6824      	ldr	r4, [r4, #0]
 80179ea:	2c00      	cmp	r4, #0
 80179ec:	d1f7      	bne.n	80179de <_fwalk_reent+0xe>
 80179ee:	4638      	mov	r0, r7
 80179f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179f4:	89ab      	ldrh	r3, [r5, #12]
 80179f6:	2b01      	cmp	r3, #1
 80179f8:	d907      	bls.n	8017a0a <_fwalk_reent+0x3a>
 80179fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179fe:	3301      	adds	r3, #1
 8017a00:	d003      	beq.n	8017a0a <_fwalk_reent+0x3a>
 8017a02:	4629      	mov	r1, r5
 8017a04:	4630      	mov	r0, r6
 8017a06:	47c0      	blx	r8
 8017a08:	4307      	orrs	r7, r0
 8017a0a:	3568      	adds	r5, #104	; 0x68
 8017a0c:	e7e9      	b.n	80179e2 <_fwalk_reent+0x12>

08017a0e <rshift>:
 8017a0e:	6903      	ldr	r3, [r0, #16]
 8017a10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017a1c:	f100 0414 	add.w	r4, r0, #20
 8017a20:	dd45      	ble.n	8017aae <rshift+0xa0>
 8017a22:	f011 011f 	ands.w	r1, r1, #31
 8017a26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017a2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017a2e:	d10c      	bne.n	8017a4a <rshift+0x3c>
 8017a30:	f100 0710 	add.w	r7, r0, #16
 8017a34:	4629      	mov	r1, r5
 8017a36:	42b1      	cmp	r1, r6
 8017a38:	d334      	bcc.n	8017aa4 <rshift+0x96>
 8017a3a:	1a9b      	subs	r3, r3, r2
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	1eea      	subs	r2, r5, #3
 8017a40:	4296      	cmp	r6, r2
 8017a42:	bf38      	it	cc
 8017a44:	2300      	movcc	r3, #0
 8017a46:	4423      	add	r3, r4
 8017a48:	e015      	b.n	8017a76 <rshift+0x68>
 8017a4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017a4e:	f1c1 0820 	rsb	r8, r1, #32
 8017a52:	40cf      	lsrs	r7, r1
 8017a54:	f105 0e04 	add.w	lr, r5, #4
 8017a58:	46a1      	mov	r9, r4
 8017a5a:	4576      	cmp	r6, lr
 8017a5c:	46f4      	mov	ip, lr
 8017a5e:	d815      	bhi.n	8017a8c <rshift+0x7e>
 8017a60:	1a9a      	subs	r2, r3, r2
 8017a62:	0092      	lsls	r2, r2, #2
 8017a64:	3a04      	subs	r2, #4
 8017a66:	3501      	adds	r5, #1
 8017a68:	42ae      	cmp	r6, r5
 8017a6a:	bf38      	it	cc
 8017a6c:	2200      	movcc	r2, #0
 8017a6e:	18a3      	adds	r3, r4, r2
 8017a70:	50a7      	str	r7, [r4, r2]
 8017a72:	b107      	cbz	r7, 8017a76 <rshift+0x68>
 8017a74:	3304      	adds	r3, #4
 8017a76:	1b1a      	subs	r2, r3, r4
 8017a78:	42a3      	cmp	r3, r4
 8017a7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017a7e:	bf08      	it	eq
 8017a80:	2300      	moveq	r3, #0
 8017a82:	6102      	str	r2, [r0, #16]
 8017a84:	bf08      	it	eq
 8017a86:	6143      	streq	r3, [r0, #20]
 8017a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a8c:	f8dc c000 	ldr.w	ip, [ip]
 8017a90:	fa0c fc08 	lsl.w	ip, ip, r8
 8017a94:	ea4c 0707 	orr.w	r7, ip, r7
 8017a98:	f849 7b04 	str.w	r7, [r9], #4
 8017a9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017aa0:	40cf      	lsrs	r7, r1
 8017aa2:	e7da      	b.n	8017a5a <rshift+0x4c>
 8017aa4:	f851 cb04 	ldr.w	ip, [r1], #4
 8017aa8:	f847 cf04 	str.w	ip, [r7, #4]!
 8017aac:	e7c3      	b.n	8017a36 <rshift+0x28>
 8017aae:	4623      	mov	r3, r4
 8017ab0:	e7e1      	b.n	8017a76 <rshift+0x68>

08017ab2 <__hexdig_fun>:
 8017ab2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017ab6:	2b09      	cmp	r3, #9
 8017ab8:	d802      	bhi.n	8017ac0 <__hexdig_fun+0xe>
 8017aba:	3820      	subs	r0, #32
 8017abc:	b2c0      	uxtb	r0, r0
 8017abe:	4770      	bx	lr
 8017ac0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017ac4:	2b05      	cmp	r3, #5
 8017ac6:	d801      	bhi.n	8017acc <__hexdig_fun+0x1a>
 8017ac8:	3847      	subs	r0, #71	; 0x47
 8017aca:	e7f7      	b.n	8017abc <__hexdig_fun+0xa>
 8017acc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017ad0:	2b05      	cmp	r3, #5
 8017ad2:	d801      	bhi.n	8017ad8 <__hexdig_fun+0x26>
 8017ad4:	3827      	subs	r0, #39	; 0x27
 8017ad6:	e7f1      	b.n	8017abc <__hexdig_fun+0xa>
 8017ad8:	2000      	movs	r0, #0
 8017ada:	4770      	bx	lr

08017adc <__gethex>:
 8017adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ae0:	ed2d 8b02 	vpush	{d8}
 8017ae4:	b089      	sub	sp, #36	; 0x24
 8017ae6:	ee08 0a10 	vmov	s16, r0
 8017aea:	9304      	str	r3, [sp, #16]
 8017aec:	4bb4      	ldr	r3, [pc, #720]	; (8017dc0 <__gethex+0x2e4>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	9301      	str	r3, [sp, #4]
 8017af2:	4618      	mov	r0, r3
 8017af4:	468b      	mov	fp, r1
 8017af6:	4690      	mov	r8, r2
 8017af8:	f7e8 fb7a 	bl	80001f0 <strlen>
 8017afc:	9b01      	ldr	r3, [sp, #4]
 8017afe:	f8db 2000 	ldr.w	r2, [fp]
 8017b02:	4403      	add	r3, r0
 8017b04:	4682      	mov	sl, r0
 8017b06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017b0a:	9305      	str	r3, [sp, #20]
 8017b0c:	1c93      	adds	r3, r2, #2
 8017b0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017b12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017b16:	32fe      	adds	r2, #254	; 0xfe
 8017b18:	18d1      	adds	r1, r2, r3
 8017b1a:	461f      	mov	r7, r3
 8017b1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017b20:	9100      	str	r1, [sp, #0]
 8017b22:	2830      	cmp	r0, #48	; 0x30
 8017b24:	d0f8      	beq.n	8017b18 <__gethex+0x3c>
 8017b26:	f7ff ffc4 	bl	8017ab2 <__hexdig_fun>
 8017b2a:	4604      	mov	r4, r0
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	d13a      	bne.n	8017ba6 <__gethex+0xca>
 8017b30:	9901      	ldr	r1, [sp, #4]
 8017b32:	4652      	mov	r2, sl
 8017b34:	4638      	mov	r0, r7
 8017b36:	f001 fb6a 	bl	801920e <strncmp>
 8017b3a:	4605      	mov	r5, r0
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d168      	bne.n	8017c12 <__gethex+0x136>
 8017b40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8017b44:	eb07 060a 	add.w	r6, r7, sl
 8017b48:	f7ff ffb3 	bl	8017ab2 <__hexdig_fun>
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	d062      	beq.n	8017c16 <__gethex+0x13a>
 8017b50:	4633      	mov	r3, r6
 8017b52:	7818      	ldrb	r0, [r3, #0]
 8017b54:	2830      	cmp	r0, #48	; 0x30
 8017b56:	461f      	mov	r7, r3
 8017b58:	f103 0301 	add.w	r3, r3, #1
 8017b5c:	d0f9      	beq.n	8017b52 <__gethex+0x76>
 8017b5e:	f7ff ffa8 	bl	8017ab2 <__hexdig_fun>
 8017b62:	2301      	movs	r3, #1
 8017b64:	fab0 f480 	clz	r4, r0
 8017b68:	0964      	lsrs	r4, r4, #5
 8017b6a:	4635      	mov	r5, r6
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	463a      	mov	r2, r7
 8017b70:	4616      	mov	r6, r2
 8017b72:	3201      	adds	r2, #1
 8017b74:	7830      	ldrb	r0, [r6, #0]
 8017b76:	f7ff ff9c 	bl	8017ab2 <__hexdig_fun>
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d1f8      	bne.n	8017b70 <__gethex+0x94>
 8017b7e:	9901      	ldr	r1, [sp, #4]
 8017b80:	4652      	mov	r2, sl
 8017b82:	4630      	mov	r0, r6
 8017b84:	f001 fb43 	bl	801920e <strncmp>
 8017b88:	b980      	cbnz	r0, 8017bac <__gethex+0xd0>
 8017b8a:	b94d      	cbnz	r5, 8017ba0 <__gethex+0xc4>
 8017b8c:	eb06 050a 	add.w	r5, r6, sl
 8017b90:	462a      	mov	r2, r5
 8017b92:	4616      	mov	r6, r2
 8017b94:	3201      	adds	r2, #1
 8017b96:	7830      	ldrb	r0, [r6, #0]
 8017b98:	f7ff ff8b 	bl	8017ab2 <__hexdig_fun>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d1f8      	bne.n	8017b92 <__gethex+0xb6>
 8017ba0:	1bad      	subs	r5, r5, r6
 8017ba2:	00ad      	lsls	r5, r5, #2
 8017ba4:	e004      	b.n	8017bb0 <__gethex+0xd4>
 8017ba6:	2400      	movs	r4, #0
 8017ba8:	4625      	mov	r5, r4
 8017baa:	e7e0      	b.n	8017b6e <__gethex+0x92>
 8017bac:	2d00      	cmp	r5, #0
 8017bae:	d1f7      	bne.n	8017ba0 <__gethex+0xc4>
 8017bb0:	7833      	ldrb	r3, [r6, #0]
 8017bb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017bb6:	2b50      	cmp	r3, #80	; 0x50
 8017bb8:	d13b      	bne.n	8017c32 <__gethex+0x156>
 8017bba:	7873      	ldrb	r3, [r6, #1]
 8017bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8017bbe:	d02c      	beq.n	8017c1a <__gethex+0x13e>
 8017bc0:	2b2d      	cmp	r3, #45	; 0x2d
 8017bc2:	d02e      	beq.n	8017c22 <__gethex+0x146>
 8017bc4:	1c71      	adds	r1, r6, #1
 8017bc6:	f04f 0900 	mov.w	r9, #0
 8017bca:	7808      	ldrb	r0, [r1, #0]
 8017bcc:	f7ff ff71 	bl	8017ab2 <__hexdig_fun>
 8017bd0:	1e43      	subs	r3, r0, #1
 8017bd2:	b2db      	uxtb	r3, r3
 8017bd4:	2b18      	cmp	r3, #24
 8017bd6:	d82c      	bhi.n	8017c32 <__gethex+0x156>
 8017bd8:	f1a0 0210 	sub.w	r2, r0, #16
 8017bdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017be0:	f7ff ff67 	bl	8017ab2 <__hexdig_fun>
 8017be4:	1e43      	subs	r3, r0, #1
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	2b18      	cmp	r3, #24
 8017bea:	d91d      	bls.n	8017c28 <__gethex+0x14c>
 8017bec:	f1b9 0f00 	cmp.w	r9, #0
 8017bf0:	d000      	beq.n	8017bf4 <__gethex+0x118>
 8017bf2:	4252      	negs	r2, r2
 8017bf4:	4415      	add	r5, r2
 8017bf6:	f8cb 1000 	str.w	r1, [fp]
 8017bfa:	b1e4      	cbz	r4, 8017c36 <__gethex+0x15a>
 8017bfc:	9b00      	ldr	r3, [sp, #0]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	bf14      	ite	ne
 8017c02:	2700      	movne	r7, #0
 8017c04:	2706      	moveq	r7, #6
 8017c06:	4638      	mov	r0, r7
 8017c08:	b009      	add	sp, #36	; 0x24
 8017c0a:	ecbd 8b02 	vpop	{d8}
 8017c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c12:	463e      	mov	r6, r7
 8017c14:	4625      	mov	r5, r4
 8017c16:	2401      	movs	r4, #1
 8017c18:	e7ca      	b.n	8017bb0 <__gethex+0xd4>
 8017c1a:	f04f 0900 	mov.w	r9, #0
 8017c1e:	1cb1      	adds	r1, r6, #2
 8017c20:	e7d3      	b.n	8017bca <__gethex+0xee>
 8017c22:	f04f 0901 	mov.w	r9, #1
 8017c26:	e7fa      	b.n	8017c1e <__gethex+0x142>
 8017c28:	230a      	movs	r3, #10
 8017c2a:	fb03 0202 	mla	r2, r3, r2, r0
 8017c2e:	3a10      	subs	r2, #16
 8017c30:	e7d4      	b.n	8017bdc <__gethex+0x100>
 8017c32:	4631      	mov	r1, r6
 8017c34:	e7df      	b.n	8017bf6 <__gethex+0x11a>
 8017c36:	1bf3      	subs	r3, r6, r7
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	4621      	mov	r1, r4
 8017c3c:	2b07      	cmp	r3, #7
 8017c3e:	dc0b      	bgt.n	8017c58 <__gethex+0x17c>
 8017c40:	ee18 0a10 	vmov	r0, s16
 8017c44:	f000 fadc 	bl	8018200 <_Balloc>
 8017c48:	4604      	mov	r4, r0
 8017c4a:	b940      	cbnz	r0, 8017c5e <__gethex+0x182>
 8017c4c:	4b5d      	ldr	r3, [pc, #372]	; (8017dc4 <__gethex+0x2e8>)
 8017c4e:	4602      	mov	r2, r0
 8017c50:	21de      	movs	r1, #222	; 0xde
 8017c52:	485d      	ldr	r0, [pc, #372]	; (8017dc8 <__gethex+0x2ec>)
 8017c54:	f7fe fe78 	bl	8016948 <__assert_func>
 8017c58:	3101      	adds	r1, #1
 8017c5a:	105b      	asrs	r3, r3, #1
 8017c5c:	e7ee      	b.n	8017c3c <__gethex+0x160>
 8017c5e:	f100 0914 	add.w	r9, r0, #20
 8017c62:	f04f 0b00 	mov.w	fp, #0
 8017c66:	f1ca 0301 	rsb	r3, sl, #1
 8017c6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8017c6e:	f8cd b000 	str.w	fp, [sp]
 8017c72:	9306      	str	r3, [sp, #24]
 8017c74:	42b7      	cmp	r7, r6
 8017c76:	d340      	bcc.n	8017cfa <__gethex+0x21e>
 8017c78:	9802      	ldr	r0, [sp, #8]
 8017c7a:	9b00      	ldr	r3, [sp, #0]
 8017c7c:	f840 3b04 	str.w	r3, [r0], #4
 8017c80:	eba0 0009 	sub.w	r0, r0, r9
 8017c84:	1080      	asrs	r0, r0, #2
 8017c86:	0146      	lsls	r6, r0, #5
 8017c88:	6120      	str	r0, [r4, #16]
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	f000 fbaa 	bl	80183e4 <__hi0bits>
 8017c90:	1a30      	subs	r0, r6, r0
 8017c92:	f8d8 6000 	ldr.w	r6, [r8]
 8017c96:	42b0      	cmp	r0, r6
 8017c98:	dd63      	ble.n	8017d62 <__gethex+0x286>
 8017c9a:	1b87      	subs	r7, r0, r6
 8017c9c:	4639      	mov	r1, r7
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f000 ff4e 	bl	8018b40 <__any_on>
 8017ca4:	4682      	mov	sl, r0
 8017ca6:	b1a8      	cbz	r0, 8017cd4 <__gethex+0x1f8>
 8017ca8:	1e7b      	subs	r3, r7, #1
 8017caa:	1159      	asrs	r1, r3, #5
 8017cac:	f003 021f 	and.w	r2, r3, #31
 8017cb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017cb4:	f04f 0a01 	mov.w	sl, #1
 8017cb8:	fa0a f202 	lsl.w	r2, sl, r2
 8017cbc:	420a      	tst	r2, r1
 8017cbe:	d009      	beq.n	8017cd4 <__gethex+0x1f8>
 8017cc0:	4553      	cmp	r3, sl
 8017cc2:	dd05      	ble.n	8017cd0 <__gethex+0x1f4>
 8017cc4:	1eb9      	subs	r1, r7, #2
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f000 ff3a 	bl	8018b40 <__any_on>
 8017ccc:	2800      	cmp	r0, #0
 8017cce:	d145      	bne.n	8017d5c <__gethex+0x280>
 8017cd0:	f04f 0a02 	mov.w	sl, #2
 8017cd4:	4639      	mov	r1, r7
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f7ff fe99 	bl	8017a0e <rshift>
 8017cdc:	443d      	add	r5, r7
 8017cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017ce2:	42ab      	cmp	r3, r5
 8017ce4:	da4c      	bge.n	8017d80 <__gethex+0x2a4>
 8017ce6:	ee18 0a10 	vmov	r0, s16
 8017cea:	4621      	mov	r1, r4
 8017cec:	f000 fac8 	bl	8018280 <_Bfree>
 8017cf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	6013      	str	r3, [r2, #0]
 8017cf6:	27a3      	movs	r7, #163	; 0xa3
 8017cf8:	e785      	b.n	8017c06 <__gethex+0x12a>
 8017cfa:	1e73      	subs	r3, r6, #1
 8017cfc:	9a05      	ldr	r2, [sp, #20]
 8017cfe:	9303      	str	r3, [sp, #12]
 8017d00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017d04:	4293      	cmp	r3, r2
 8017d06:	d019      	beq.n	8017d3c <__gethex+0x260>
 8017d08:	f1bb 0f20 	cmp.w	fp, #32
 8017d0c:	d107      	bne.n	8017d1e <__gethex+0x242>
 8017d0e:	9b02      	ldr	r3, [sp, #8]
 8017d10:	9a00      	ldr	r2, [sp, #0]
 8017d12:	f843 2b04 	str.w	r2, [r3], #4
 8017d16:	9302      	str	r3, [sp, #8]
 8017d18:	2300      	movs	r3, #0
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	469b      	mov	fp, r3
 8017d1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017d22:	f7ff fec6 	bl	8017ab2 <__hexdig_fun>
 8017d26:	9b00      	ldr	r3, [sp, #0]
 8017d28:	f000 000f 	and.w	r0, r0, #15
 8017d2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017d30:	4303      	orrs	r3, r0
 8017d32:	9300      	str	r3, [sp, #0]
 8017d34:	f10b 0b04 	add.w	fp, fp, #4
 8017d38:	9b03      	ldr	r3, [sp, #12]
 8017d3a:	e00d      	b.n	8017d58 <__gethex+0x27c>
 8017d3c:	9b03      	ldr	r3, [sp, #12]
 8017d3e:	9a06      	ldr	r2, [sp, #24]
 8017d40:	4413      	add	r3, r2
 8017d42:	42bb      	cmp	r3, r7
 8017d44:	d3e0      	bcc.n	8017d08 <__gethex+0x22c>
 8017d46:	4618      	mov	r0, r3
 8017d48:	9901      	ldr	r1, [sp, #4]
 8017d4a:	9307      	str	r3, [sp, #28]
 8017d4c:	4652      	mov	r2, sl
 8017d4e:	f001 fa5e 	bl	801920e <strncmp>
 8017d52:	9b07      	ldr	r3, [sp, #28]
 8017d54:	2800      	cmp	r0, #0
 8017d56:	d1d7      	bne.n	8017d08 <__gethex+0x22c>
 8017d58:	461e      	mov	r6, r3
 8017d5a:	e78b      	b.n	8017c74 <__gethex+0x198>
 8017d5c:	f04f 0a03 	mov.w	sl, #3
 8017d60:	e7b8      	b.n	8017cd4 <__gethex+0x1f8>
 8017d62:	da0a      	bge.n	8017d7a <__gethex+0x29e>
 8017d64:	1a37      	subs	r7, r6, r0
 8017d66:	4621      	mov	r1, r4
 8017d68:	ee18 0a10 	vmov	r0, s16
 8017d6c:	463a      	mov	r2, r7
 8017d6e:	f000 fca3 	bl	80186b8 <__lshift>
 8017d72:	1bed      	subs	r5, r5, r7
 8017d74:	4604      	mov	r4, r0
 8017d76:	f100 0914 	add.w	r9, r0, #20
 8017d7a:	f04f 0a00 	mov.w	sl, #0
 8017d7e:	e7ae      	b.n	8017cde <__gethex+0x202>
 8017d80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017d84:	42a8      	cmp	r0, r5
 8017d86:	dd72      	ble.n	8017e6e <__gethex+0x392>
 8017d88:	1b45      	subs	r5, r0, r5
 8017d8a:	42ae      	cmp	r6, r5
 8017d8c:	dc36      	bgt.n	8017dfc <__gethex+0x320>
 8017d8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d92:	2b02      	cmp	r3, #2
 8017d94:	d02a      	beq.n	8017dec <__gethex+0x310>
 8017d96:	2b03      	cmp	r3, #3
 8017d98:	d02c      	beq.n	8017df4 <__gethex+0x318>
 8017d9a:	2b01      	cmp	r3, #1
 8017d9c:	d11c      	bne.n	8017dd8 <__gethex+0x2fc>
 8017d9e:	42ae      	cmp	r6, r5
 8017da0:	d11a      	bne.n	8017dd8 <__gethex+0x2fc>
 8017da2:	2e01      	cmp	r6, #1
 8017da4:	d112      	bne.n	8017dcc <__gethex+0x2f0>
 8017da6:	9a04      	ldr	r2, [sp, #16]
 8017da8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017dac:	6013      	str	r3, [r2, #0]
 8017dae:	2301      	movs	r3, #1
 8017db0:	6123      	str	r3, [r4, #16]
 8017db2:	f8c9 3000 	str.w	r3, [r9]
 8017db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017db8:	2762      	movs	r7, #98	; 0x62
 8017dba:	601c      	str	r4, [r3, #0]
 8017dbc:	e723      	b.n	8017c06 <__gethex+0x12a>
 8017dbe:	bf00      	nop
 8017dc0:	0808ca24 	.word	0x0808ca24
 8017dc4:	0808c949 	.word	0x0808c949
 8017dc8:	0808c9bc 	.word	0x0808c9bc
 8017dcc:	1e71      	subs	r1, r6, #1
 8017dce:	4620      	mov	r0, r4
 8017dd0:	f000 feb6 	bl	8018b40 <__any_on>
 8017dd4:	2800      	cmp	r0, #0
 8017dd6:	d1e6      	bne.n	8017da6 <__gethex+0x2ca>
 8017dd8:	ee18 0a10 	vmov	r0, s16
 8017ddc:	4621      	mov	r1, r4
 8017dde:	f000 fa4f 	bl	8018280 <_Bfree>
 8017de2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017de4:	2300      	movs	r3, #0
 8017de6:	6013      	str	r3, [r2, #0]
 8017de8:	2750      	movs	r7, #80	; 0x50
 8017dea:	e70c      	b.n	8017c06 <__gethex+0x12a>
 8017dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d1f2      	bne.n	8017dd8 <__gethex+0x2fc>
 8017df2:	e7d8      	b.n	8017da6 <__gethex+0x2ca>
 8017df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	d1d5      	bne.n	8017da6 <__gethex+0x2ca>
 8017dfa:	e7ed      	b.n	8017dd8 <__gethex+0x2fc>
 8017dfc:	1e6f      	subs	r7, r5, #1
 8017dfe:	f1ba 0f00 	cmp.w	sl, #0
 8017e02:	d131      	bne.n	8017e68 <__gethex+0x38c>
 8017e04:	b127      	cbz	r7, 8017e10 <__gethex+0x334>
 8017e06:	4639      	mov	r1, r7
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f000 fe99 	bl	8018b40 <__any_on>
 8017e0e:	4682      	mov	sl, r0
 8017e10:	117b      	asrs	r3, r7, #5
 8017e12:	2101      	movs	r1, #1
 8017e14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017e18:	f007 071f 	and.w	r7, r7, #31
 8017e1c:	fa01 f707 	lsl.w	r7, r1, r7
 8017e20:	421f      	tst	r7, r3
 8017e22:	4629      	mov	r1, r5
 8017e24:	4620      	mov	r0, r4
 8017e26:	bf18      	it	ne
 8017e28:	f04a 0a02 	orrne.w	sl, sl, #2
 8017e2c:	1b76      	subs	r6, r6, r5
 8017e2e:	f7ff fdee 	bl	8017a0e <rshift>
 8017e32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017e36:	2702      	movs	r7, #2
 8017e38:	f1ba 0f00 	cmp.w	sl, #0
 8017e3c:	d048      	beq.n	8017ed0 <__gethex+0x3f4>
 8017e3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e42:	2b02      	cmp	r3, #2
 8017e44:	d015      	beq.n	8017e72 <__gethex+0x396>
 8017e46:	2b03      	cmp	r3, #3
 8017e48:	d017      	beq.n	8017e7a <__gethex+0x39e>
 8017e4a:	2b01      	cmp	r3, #1
 8017e4c:	d109      	bne.n	8017e62 <__gethex+0x386>
 8017e4e:	f01a 0f02 	tst.w	sl, #2
 8017e52:	d006      	beq.n	8017e62 <__gethex+0x386>
 8017e54:	f8d9 0000 	ldr.w	r0, [r9]
 8017e58:	ea4a 0a00 	orr.w	sl, sl, r0
 8017e5c:	f01a 0f01 	tst.w	sl, #1
 8017e60:	d10e      	bne.n	8017e80 <__gethex+0x3a4>
 8017e62:	f047 0710 	orr.w	r7, r7, #16
 8017e66:	e033      	b.n	8017ed0 <__gethex+0x3f4>
 8017e68:	f04f 0a01 	mov.w	sl, #1
 8017e6c:	e7d0      	b.n	8017e10 <__gethex+0x334>
 8017e6e:	2701      	movs	r7, #1
 8017e70:	e7e2      	b.n	8017e38 <__gethex+0x35c>
 8017e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e74:	f1c3 0301 	rsb	r3, r3, #1
 8017e78:	9315      	str	r3, [sp, #84]	; 0x54
 8017e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d0f0      	beq.n	8017e62 <__gethex+0x386>
 8017e80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017e84:	f104 0314 	add.w	r3, r4, #20
 8017e88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017e8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017e90:	f04f 0c00 	mov.w	ip, #0
 8017e94:	4618      	mov	r0, r3
 8017e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e9a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8017e9e:	d01c      	beq.n	8017eda <__gethex+0x3fe>
 8017ea0:	3201      	adds	r2, #1
 8017ea2:	6002      	str	r2, [r0, #0]
 8017ea4:	2f02      	cmp	r7, #2
 8017ea6:	f104 0314 	add.w	r3, r4, #20
 8017eaa:	d13f      	bne.n	8017f2c <__gethex+0x450>
 8017eac:	f8d8 2000 	ldr.w	r2, [r8]
 8017eb0:	3a01      	subs	r2, #1
 8017eb2:	42b2      	cmp	r2, r6
 8017eb4:	d10a      	bne.n	8017ecc <__gethex+0x3f0>
 8017eb6:	1171      	asrs	r1, r6, #5
 8017eb8:	2201      	movs	r2, #1
 8017eba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ebe:	f006 061f 	and.w	r6, r6, #31
 8017ec2:	fa02 f606 	lsl.w	r6, r2, r6
 8017ec6:	421e      	tst	r6, r3
 8017ec8:	bf18      	it	ne
 8017eca:	4617      	movne	r7, r2
 8017ecc:	f047 0720 	orr.w	r7, r7, #32
 8017ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ed2:	601c      	str	r4, [r3, #0]
 8017ed4:	9b04      	ldr	r3, [sp, #16]
 8017ed6:	601d      	str	r5, [r3, #0]
 8017ed8:	e695      	b.n	8017c06 <__gethex+0x12a>
 8017eda:	4299      	cmp	r1, r3
 8017edc:	f843 cc04 	str.w	ip, [r3, #-4]
 8017ee0:	d8d8      	bhi.n	8017e94 <__gethex+0x3b8>
 8017ee2:	68a3      	ldr	r3, [r4, #8]
 8017ee4:	459b      	cmp	fp, r3
 8017ee6:	db19      	blt.n	8017f1c <__gethex+0x440>
 8017ee8:	6861      	ldr	r1, [r4, #4]
 8017eea:	ee18 0a10 	vmov	r0, s16
 8017eee:	3101      	adds	r1, #1
 8017ef0:	f000 f986 	bl	8018200 <_Balloc>
 8017ef4:	4681      	mov	r9, r0
 8017ef6:	b918      	cbnz	r0, 8017f00 <__gethex+0x424>
 8017ef8:	4b1a      	ldr	r3, [pc, #104]	; (8017f64 <__gethex+0x488>)
 8017efa:	4602      	mov	r2, r0
 8017efc:	2184      	movs	r1, #132	; 0x84
 8017efe:	e6a8      	b.n	8017c52 <__gethex+0x176>
 8017f00:	6922      	ldr	r2, [r4, #16]
 8017f02:	3202      	adds	r2, #2
 8017f04:	f104 010c 	add.w	r1, r4, #12
 8017f08:	0092      	lsls	r2, r2, #2
 8017f0a:	300c      	adds	r0, #12
 8017f0c:	f7fc fd2c 	bl	8014968 <memcpy>
 8017f10:	4621      	mov	r1, r4
 8017f12:	ee18 0a10 	vmov	r0, s16
 8017f16:	f000 f9b3 	bl	8018280 <_Bfree>
 8017f1a:	464c      	mov	r4, r9
 8017f1c:	6923      	ldr	r3, [r4, #16]
 8017f1e:	1c5a      	adds	r2, r3, #1
 8017f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017f24:	6122      	str	r2, [r4, #16]
 8017f26:	2201      	movs	r2, #1
 8017f28:	615a      	str	r2, [r3, #20]
 8017f2a:	e7bb      	b.n	8017ea4 <__gethex+0x3c8>
 8017f2c:	6922      	ldr	r2, [r4, #16]
 8017f2e:	455a      	cmp	r2, fp
 8017f30:	dd0b      	ble.n	8017f4a <__gethex+0x46e>
 8017f32:	2101      	movs	r1, #1
 8017f34:	4620      	mov	r0, r4
 8017f36:	f7ff fd6a 	bl	8017a0e <rshift>
 8017f3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f3e:	3501      	adds	r5, #1
 8017f40:	42ab      	cmp	r3, r5
 8017f42:	f6ff aed0 	blt.w	8017ce6 <__gethex+0x20a>
 8017f46:	2701      	movs	r7, #1
 8017f48:	e7c0      	b.n	8017ecc <__gethex+0x3f0>
 8017f4a:	f016 061f 	ands.w	r6, r6, #31
 8017f4e:	d0fa      	beq.n	8017f46 <__gethex+0x46a>
 8017f50:	4453      	add	r3, sl
 8017f52:	f1c6 0620 	rsb	r6, r6, #32
 8017f56:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017f5a:	f000 fa43 	bl	80183e4 <__hi0bits>
 8017f5e:	42b0      	cmp	r0, r6
 8017f60:	dbe7      	blt.n	8017f32 <__gethex+0x456>
 8017f62:	e7f0      	b.n	8017f46 <__gethex+0x46a>
 8017f64:	0808c949 	.word	0x0808c949

08017f68 <L_shift>:
 8017f68:	f1c2 0208 	rsb	r2, r2, #8
 8017f6c:	0092      	lsls	r2, r2, #2
 8017f6e:	b570      	push	{r4, r5, r6, lr}
 8017f70:	f1c2 0620 	rsb	r6, r2, #32
 8017f74:	6843      	ldr	r3, [r0, #4]
 8017f76:	6804      	ldr	r4, [r0, #0]
 8017f78:	fa03 f506 	lsl.w	r5, r3, r6
 8017f7c:	432c      	orrs	r4, r5
 8017f7e:	40d3      	lsrs	r3, r2
 8017f80:	6004      	str	r4, [r0, #0]
 8017f82:	f840 3f04 	str.w	r3, [r0, #4]!
 8017f86:	4288      	cmp	r0, r1
 8017f88:	d3f4      	bcc.n	8017f74 <L_shift+0xc>
 8017f8a:	bd70      	pop	{r4, r5, r6, pc}

08017f8c <__match>:
 8017f8c:	b530      	push	{r4, r5, lr}
 8017f8e:	6803      	ldr	r3, [r0, #0]
 8017f90:	3301      	adds	r3, #1
 8017f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f96:	b914      	cbnz	r4, 8017f9e <__match+0x12>
 8017f98:	6003      	str	r3, [r0, #0]
 8017f9a:	2001      	movs	r0, #1
 8017f9c:	bd30      	pop	{r4, r5, pc}
 8017f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017fa6:	2d19      	cmp	r5, #25
 8017fa8:	bf98      	it	ls
 8017faa:	3220      	addls	r2, #32
 8017fac:	42a2      	cmp	r2, r4
 8017fae:	d0f0      	beq.n	8017f92 <__match+0x6>
 8017fb0:	2000      	movs	r0, #0
 8017fb2:	e7f3      	b.n	8017f9c <__match+0x10>

08017fb4 <__hexnan>:
 8017fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb8:	680b      	ldr	r3, [r1, #0]
 8017fba:	115e      	asrs	r6, r3, #5
 8017fbc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017fc0:	f013 031f 	ands.w	r3, r3, #31
 8017fc4:	b087      	sub	sp, #28
 8017fc6:	bf18      	it	ne
 8017fc8:	3604      	addne	r6, #4
 8017fca:	2500      	movs	r5, #0
 8017fcc:	1f37      	subs	r7, r6, #4
 8017fce:	4690      	mov	r8, r2
 8017fd0:	6802      	ldr	r2, [r0, #0]
 8017fd2:	9301      	str	r3, [sp, #4]
 8017fd4:	4682      	mov	sl, r0
 8017fd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8017fda:	46b9      	mov	r9, r7
 8017fdc:	463c      	mov	r4, r7
 8017fde:	9502      	str	r5, [sp, #8]
 8017fe0:	46ab      	mov	fp, r5
 8017fe2:	7851      	ldrb	r1, [r2, #1]
 8017fe4:	1c53      	adds	r3, r2, #1
 8017fe6:	9303      	str	r3, [sp, #12]
 8017fe8:	b341      	cbz	r1, 801803c <__hexnan+0x88>
 8017fea:	4608      	mov	r0, r1
 8017fec:	9205      	str	r2, [sp, #20]
 8017fee:	9104      	str	r1, [sp, #16]
 8017ff0:	f7ff fd5f 	bl	8017ab2 <__hexdig_fun>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	d14f      	bne.n	8018098 <__hexnan+0xe4>
 8017ff8:	9904      	ldr	r1, [sp, #16]
 8017ffa:	9a05      	ldr	r2, [sp, #20]
 8017ffc:	2920      	cmp	r1, #32
 8017ffe:	d818      	bhi.n	8018032 <__hexnan+0x7e>
 8018000:	9b02      	ldr	r3, [sp, #8]
 8018002:	459b      	cmp	fp, r3
 8018004:	dd13      	ble.n	801802e <__hexnan+0x7a>
 8018006:	454c      	cmp	r4, r9
 8018008:	d206      	bcs.n	8018018 <__hexnan+0x64>
 801800a:	2d07      	cmp	r5, #7
 801800c:	dc04      	bgt.n	8018018 <__hexnan+0x64>
 801800e:	462a      	mov	r2, r5
 8018010:	4649      	mov	r1, r9
 8018012:	4620      	mov	r0, r4
 8018014:	f7ff ffa8 	bl	8017f68 <L_shift>
 8018018:	4544      	cmp	r4, r8
 801801a:	d950      	bls.n	80180be <__hexnan+0x10a>
 801801c:	2300      	movs	r3, #0
 801801e:	f1a4 0904 	sub.w	r9, r4, #4
 8018022:	f844 3c04 	str.w	r3, [r4, #-4]
 8018026:	f8cd b008 	str.w	fp, [sp, #8]
 801802a:	464c      	mov	r4, r9
 801802c:	461d      	mov	r5, r3
 801802e:	9a03      	ldr	r2, [sp, #12]
 8018030:	e7d7      	b.n	8017fe2 <__hexnan+0x2e>
 8018032:	2929      	cmp	r1, #41	; 0x29
 8018034:	d156      	bne.n	80180e4 <__hexnan+0x130>
 8018036:	3202      	adds	r2, #2
 8018038:	f8ca 2000 	str.w	r2, [sl]
 801803c:	f1bb 0f00 	cmp.w	fp, #0
 8018040:	d050      	beq.n	80180e4 <__hexnan+0x130>
 8018042:	454c      	cmp	r4, r9
 8018044:	d206      	bcs.n	8018054 <__hexnan+0xa0>
 8018046:	2d07      	cmp	r5, #7
 8018048:	dc04      	bgt.n	8018054 <__hexnan+0xa0>
 801804a:	462a      	mov	r2, r5
 801804c:	4649      	mov	r1, r9
 801804e:	4620      	mov	r0, r4
 8018050:	f7ff ff8a 	bl	8017f68 <L_shift>
 8018054:	4544      	cmp	r4, r8
 8018056:	d934      	bls.n	80180c2 <__hexnan+0x10e>
 8018058:	f1a8 0204 	sub.w	r2, r8, #4
 801805c:	4623      	mov	r3, r4
 801805e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018062:	f842 1f04 	str.w	r1, [r2, #4]!
 8018066:	429f      	cmp	r7, r3
 8018068:	d2f9      	bcs.n	801805e <__hexnan+0xaa>
 801806a:	1b3b      	subs	r3, r7, r4
 801806c:	f023 0303 	bic.w	r3, r3, #3
 8018070:	3304      	adds	r3, #4
 8018072:	3401      	adds	r4, #1
 8018074:	3e03      	subs	r6, #3
 8018076:	42b4      	cmp	r4, r6
 8018078:	bf88      	it	hi
 801807a:	2304      	movhi	r3, #4
 801807c:	4443      	add	r3, r8
 801807e:	2200      	movs	r2, #0
 8018080:	f843 2b04 	str.w	r2, [r3], #4
 8018084:	429f      	cmp	r7, r3
 8018086:	d2fb      	bcs.n	8018080 <__hexnan+0xcc>
 8018088:	683b      	ldr	r3, [r7, #0]
 801808a:	b91b      	cbnz	r3, 8018094 <__hexnan+0xe0>
 801808c:	4547      	cmp	r7, r8
 801808e:	d127      	bne.n	80180e0 <__hexnan+0x12c>
 8018090:	2301      	movs	r3, #1
 8018092:	603b      	str	r3, [r7, #0]
 8018094:	2005      	movs	r0, #5
 8018096:	e026      	b.n	80180e6 <__hexnan+0x132>
 8018098:	3501      	adds	r5, #1
 801809a:	2d08      	cmp	r5, #8
 801809c:	f10b 0b01 	add.w	fp, fp, #1
 80180a0:	dd06      	ble.n	80180b0 <__hexnan+0xfc>
 80180a2:	4544      	cmp	r4, r8
 80180a4:	d9c3      	bls.n	801802e <__hexnan+0x7a>
 80180a6:	2300      	movs	r3, #0
 80180a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80180ac:	2501      	movs	r5, #1
 80180ae:	3c04      	subs	r4, #4
 80180b0:	6822      	ldr	r2, [r4, #0]
 80180b2:	f000 000f 	and.w	r0, r0, #15
 80180b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80180ba:	6022      	str	r2, [r4, #0]
 80180bc:	e7b7      	b.n	801802e <__hexnan+0x7a>
 80180be:	2508      	movs	r5, #8
 80180c0:	e7b5      	b.n	801802e <__hexnan+0x7a>
 80180c2:	9b01      	ldr	r3, [sp, #4]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d0df      	beq.n	8018088 <__hexnan+0xd4>
 80180c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80180cc:	f1c3 0320 	rsb	r3, r3, #32
 80180d0:	fa22 f303 	lsr.w	r3, r2, r3
 80180d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80180d8:	401a      	ands	r2, r3
 80180da:	f846 2c04 	str.w	r2, [r6, #-4]
 80180de:	e7d3      	b.n	8018088 <__hexnan+0xd4>
 80180e0:	3f04      	subs	r7, #4
 80180e2:	e7d1      	b.n	8018088 <__hexnan+0xd4>
 80180e4:	2004      	movs	r0, #4
 80180e6:	b007      	add	sp, #28
 80180e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080180ec <_localeconv_r>:
 80180ec:	4800      	ldr	r0, [pc, #0]	; (80180f0 <_localeconv_r+0x4>)
 80180ee:	4770      	bx	lr
 80180f0:	20000834 	.word	0x20000834

080180f4 <__retarget_lock_init_recursive>:
 80180f4:	4770      	bx	lr

080180f6 <__retarget_lock_acquire_recursive>:
 80180f6:	4770      	bx	lr

080180f8 <__retarget_lock_release_recursive>:
 80180f8:	4770      	bx	lr

080180fa <__swhatbuf_r>:
 80180fa:	b570      	push	{r4, r5, r6, lr}
 80180fc:	460e      	mov	r6, r1
 80180fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018102:	2900      	cmp	r1, #0
 8018104:	b096      	sub	sp, #88	; 0x58
 8018106:	4614      	mov	r4, r2
 8018108:	461d      	mov	r5, r3
 801810a:	da08      	bge.n	801811e <__swhatbuf_r+0x24>
 801810c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018110:	2200      	movs	r2, #0
 8018112:	602a      	str	r2, [r5, #0]
 8018114:	061a      	lsls	r2, r3, #24
 8018116:	d410      	bmi.n	801813a <__swhatbuf_r+0x40>
 8018118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801811c:	e00e      	b.n	801813c <__swhatbuf_r+0x42>
 801811e:	466a      	mov	r2, sp
 8018120:	f001 f8c0 	bl	80192a4 <_fstat_r>
 8018124:	2800      	cmp	r0, #0
 8018126:	dbf1      	blt.n	801810c <__swhatbuf_r+0x12>
 8018128:	9a01      	ldr	r2, [sp, #4]
 801812a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801812e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018132:	425a      	negs	r2, r3
 8018134:	415a      	adcs	r2, r3
 8018136:	602a      	str	r2, [r5, #0]
 8018138:	e7ee      	b.n	8018118 <__swhatbuf_r+0x1e>
 801813a:	2340      	movs	r3, #64	; 0x40
 801813c:	2000      	movs	r0, #0
 801813e:	6023      	str	r3, [r4, #0]
 8018140:	b016      	add	sp, #88	; 0x58
 8018142:	bd70      	pop	{r4, r5, r6, pc}

08018144 <__smakebuf_r>:
 8018144:	898b      	ldrh	r3, [r1, #12]
 8018146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018148:	079d      	lsls	r5, r3, #30
 801814a:	4606      	mov	r6, r0
 801814c:	460c      	mov	r4, r1
 801814e:	d507      	bpl.n	8018160 <__smakebuf_r+0x1c>
 8018150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018154:	6023      	str	r3, [r4, #0]
 8018156:	6123      	str	r3, [r4, #16]
 8018158:	2301      	movs	r3, #1
 801815a:	6163      	str	r3, [r4, #20]
 801815c:	b002      	add	sp, #8
 801815e:	bd70      	pop	{r4, r5, r6, pc}
 8018160:	ab01      	add	r3, sp, #4
 8018162:	466a      	mov	r2, sp
 8018164:	f7ff ffc9 	bl	80180fa <__swhatbuf_r>
 8018168:	9900      	ldr	r1, [sp, #0]
 801816a:	4605      	mov	r5, r0
 801816c:	4630      	mov	r0, r6
 801816e:	f7fc fc7d 	bl	8014a6c <_malloc_r>
 8018172:	b948      	cbnz	r0, 8018188 <__smakebuf_r+0x44>
 8018174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018178:	059a      	lsls	r2, r3, #22
 801817a:	d4ef      	bmi.n	801815c <__smakebuf_r+0x18>
 801817c:	f023 0303 	bic.w	r3, r3, #3
 8018180:	f043 0302 	orr.w	r3, r3, #2
 8018184:	81a3      	strh	r3, [r4, #12]
 8018186:	e7e3      	b.n	8018150 <__smakebuf_r+0xc>
 8018188:	4b0d      	ldr	r3, [pc, #52]	; (80181c0 <__smakebuf_r+0x7c>)
 801818a:	62b3      	str	r3, [r6, #40]	; 0x28
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	6020      	str	r0, [r4, #0]
 8018190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018194:	81a3      	strh	r3, [r4, #12]
 8018196:	9b00      	ldr	r3, [sp, #0]
 8018198:	6163      	str	r3, [r4, #20]
 801819a:	9b01      	ldr	r3, [sp, #4]
 801819c:	6120      	str	r0, [r4, #16]
 801819e:	b15b      	cbz	r3, 80181b8 <__smakebuf_r+0x74>
 80181a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181a4:	4630      	mov	r0, r6
 80181a6:	f001 f88f 	bl	80192c8 <_isatty_r>
 80181aa:	b128      	cbz	r0, 80181b8 <__smakebuf_r+0x74>
 80181ac:	89a3      	ldrh	r3, [r4, #12]
 80181ae:	f023 0303 	bic.w	r3, r3, #3
 80181b2:	f043 0301 	orr.w	r3, r3, #1
 80181b6:	81a3      	strh	r3, [r4, #12]
 80181b8:	89a0      	ldrh	r0, [r4, #12]
 80181ba:	4305      	orrs	r5, r0
 80181bc:	81a5      	strh	r5, [r4, #12]
 80181be:	e7cd      	b.n	801815c <__smakebuf_r+0x18>
 80181c0:	08017849 	.word	0x08017849

080181c4 <__ascii_mbtowc>:
 80181c4:	b082      	sub	sp, #8
 80181c6:	b901      	cbnz	r1, 80181ca <__ascii_mbtowc+0x6>
 80181c8:	a901      	add	r1, sp, #4
 80181ca:	b142      	cbz	r2, 80181de <__ascii_mbtowc+0x1a>
 80181cc:	b14b      	cbz	r3, 80181e2 <__ascii_mbtowc+0x1e>
 80181ce:	7813      	ldrb	r3, [r2, #0]
 80181d0:	600b      	str	r3, [r1, #0]
 80181d2:	7812      	ldrb	r2, [r2, #0]
 80181d4:	1e10      	subs	r0, r2, #0
 80181d6:	bf18      	it	ne
 80181d8:	2001      	movne	r0, #1
 80181da:	b002      	add	sp, #8
 80181dc:	4770      	bx	lr
 80181de:	4610      	mov	r0, r2
 80181e0:	e7fb      	b.n	80181da <__ascii_mbtowc+0x16>
 80181e2:	f06f 0001 	mvn.w	r0, #1
 80181e6:	e7f8      	b.n	80181da <__ascii_mbtowc+0x16>

080181e8 <__malloc_lock>:
 80181e8:	4801      	ldr	r0, [pc, #4]	; (80181f0 <__malloc_lock+0x8>)
 80181ea:	f7ff bf84 	b.w	80180f6 <__retarget_lock_acquire_recursive>
 80181ee:	bf00      	nop
 80181f0:	20001910 	.word	0x20001910

080181f4 <__malloc_unlock>:
 80181f4:	4801      	ldr	r0, [pc, #4]	; (80181fc <__malloc_unlock+0x8>)
 80181f6:	f7ff bf7f 	b.w	80180f8 <__retarget_lock_release_recursive>
 80181fa:	bf00      	nop
 80181fc:	20001910 	.word	0x20001910

08018200 <_Balloc>:
 8018200:	b570      	push	{r4, r5, r6, lr}
 8018202:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018204:	4604      	mov	r4, r0
 8018206:	460d      	mov	r5, r1
 8018208:	b976      	cbnz	r6, 8018228 <_Balloc+0x28>
 801820a:	2010      	movs	r0, #16
 801820c:	f7fc fb9c 	bl	8014948 <malloc>
 8018210:	4602      	mov	r2, r0
 8018212:	6260      	str	r0, [r4, #36]	; 0x24
 8018214:	b920      	cbnz	r0, 8018220 <_Balloc+0x20>
 8018216:	4b18      	ldr	r3, [pc, #96]	; (8018278 <_Balloc+0x78>)
 8018218:	4818      	ldr	r0, [pc, #96]	; (801827c <_Balloc+0x7c>)
 801821a:	2166      	movs	r1, #102	; 0x66
 801821c:	f7fe fb94 	bl	8016948 <__assert_func>
 8018220:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018224:	6006      	str	r6, [r0, #0]
 8018226:	60c6      	str	r6, [r0, #12]
 8018228:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801822a:	68f3      	ldr	r3, [r6, #12]
 801822c:	b183      	cbz	r3, 8018250 <_Balloc+0x50>
 801822e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018230:	68db      	ldr	r3, [r3, #12]
 8018232:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018236:	b9b8      	cbnz	r0, 8018268 <_Balloc+0x68>
 8018238:	2101      	movs	r1, #1
 801823a:	fa01 f605 	lsl.w	r6, r1, r5
 801823e:	1d72      	adds	r2, r6, #5
 8018240:	0092      	lsls	r2, r2, #2
 8018242:	4620      	mov	r0, r4
 8018244:	f000 fc9d 	bl	8018b82 <_calloc_r>
 8018248:	b160      	cbz	r0, 8018264 <_Balloc+0x64>
 801824a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801824e:	e00e      	b.n	801826e <_Balloc+0x6e>
 8018250:	2221      	movs	r2, #33	; 0x21
 8018252:	2104      	movs	r1, #4
 8018254:	4620      	mov	r0, r4
 8018256:	f000 fc94 	bl	8018b82 <_calloc_r>
 801825a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801825c:	60f0      	str	r0, [r6, #12]
 801825e:	68db      	ldr	r3, [r3, #12]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d1e4      	bne.n	801822e <_Balloc+0x2e>
 8018264:	2000      	movs	r0, #0
 8018266:	bd70      	pop	{r4, r5, r6, pc}
 8018268:	6802      	ldr	r2, [r0, #0]
 801826a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801826e:	2300      	movs	r3, #0
 8018270:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018274:	e7f7      	b.n	8018266 <_Balloc+0x66>
 8018276:	bf00      	nop
 8018278:	0808c730 	.word	0x0808c730
 801827c:	0808ca38 	.word	0x0808ca38

08018280 <_Bfree>:
 8018280:	b570      	push	{r4, r5, r6, lr}
 8018282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018284:	4605      	mov	r5, r0
 8018286:	460c      	mov	r4, r1
 8018288:	b976      	cbnz	r6, 80182a8 <_Bfree+0x28>
 801828a:	2010      	movs	r0, #16
 801828c:	f7fc fb5c 	bl	8014948 <malloc>
 8018290:	4602      	mov	r2, r0
 8018292:	6268      	str	r0, [r5, #36]	; 0x24
 8018294:	b920      	cbnz	r0, 80182a0 <_Bfree+0x20>
 8018296:	4b09      	ldr	r3, [pc, #36]	; (80182bc <_Bfree+0x3c>)
 8018298:	4809      	ldr	r0, [pc, #36]	; (80182c0 <_Bfree+0x40>)
 801829a:	218a      	movs	r1, #138	; 0x8a
 801829c:	f7fe fb54 	bl	8016948 <__assert_func>
 80182a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80182a4:	6006      	str	r6, [r0, #0]
 80182a6:	60c6      	str	r6, [r0, #12]
 80182a8:	b13c      	cbz	r4, 80182ba <_Bfree+0x3a>
 80182aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80182ac:	6862      	ldr	r2, [r4, #4]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80182b4:	6021      	str	r1, [r4, #0]
 80182b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80182ba:	bd70      	pop	{r4, r5, r6, pc}
 80182bc:	0808c730 	.word	0x0808c730
 80182c0:	0808ca38 	.word	0x0808ca38

080182c4 <__multadd>:
 80182c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182c8:	690d      	ldr	r5, [r1, #16]
 80182ca:	4607      	mov	r7, r0
 80182cc:	460c      	mov	r4, r1
 80182ce:	461e      	mov	r6, r3
 80182d0:	f101 0c14 	add.w	ip, r1, #20
 80182d4:	2000      	movs	r0, #0
 80182d6:	f8dc 3000 	ldr.w	r3, [ip]
 80182da:	b299      	uxth	r1, r3
 80182dc:	fb02 6101 	mla	r1, r2, r1, r6
 80182e0:	0c1e      	lsrs	r6, r3, #16
 80182e2:	0c0b      	lsrs	r3, r1, #16
 80182e4:	fb02 3306 	mla	r3, r2, r6, r3
 80182e8:	b289      	uxth	r1, r1
 80182ea:	3001      	adds	r0, #1
 80182ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80182f0:	4285      	cmp	r5, r0
 80182f2:	f84c 1b04 	str.w	r1, [ip], #4
 80182f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80182fa:	dcec      	bgt.n	80182d6 <__multadd+0x12>
 80182fc:	b30e      	cbz	r6, 8018342 <__multadd+0x7e>
 80182fe:	68a3      	ldr	r3, [r4, #8]
 8018300:	42ab      	cmp	r3, r5
 8018302:	dc19      	bgt.n	8018338 <__multadd+0x74>
 8018304:	6861      	ldr	r1, [r4, #4]
 8018306:	4638      	mov	r0, r7
 8018308:	3101      	adds	r1, #1
 801830a:	f7ff ff79 	bl	8018200 <_Balloc>
 801830e:	4680      	mov	r8, r0
 8018310:	b928      	cbnz	r0, 801831e <__multadd+0x5a>
 8018312:	4602      	mov	r2, r0
 8018314:	4b0c      	ldr	r3, [pc, #48]	; (8018348 <__multadd+0x84>)
 8018316:	480d      	ldr	r0, [pc, #52]	; (801834c <__multadd+0x88>)
 8018318:	21b5      	movs	r1, #181	; 0xb5
 801831a:	f7fe fb15 	bl	8016948 <__assert_func>
 801831e:	6922      	ldr	r2, [r4, #16]
 8018320:	3202      	adds	r2, #2
 8018322:	f104 010c 	add.w	r1, r4, #12
 8018326:	0092      	lsls	r2, r2, #2
 8018328:	300c      	adds	r0, #12
 801832a:	f7fc fb1d 	bl	8014968 <memcpy>
 801832e:	4621      	mov	r1, r4
 8018330:	4638      	mov	r0, r7
 8018332:	f7ff ffa5 	bl	8018280 <_Bfree>
 8018336:	4644      	mov	r4, r8
 8018338:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801833c:	3501      	adds	r5, #1
 801833e:	615e      	str	r6, [r3, #20]
 8018340:	6125      	str	r5, [r4, #16]
 8018342:	4620      	mov	r0, r4
 8018344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018348:	0808c949 	.word	0x0808c949
 801834c:	0808ca38 	.word	0x0808ca38

08018350 <__s2b>:
 8018350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018354:	460c      	mov	r4, r1
 8018356:	4615      	mov	r5, r2
 8018358:	461f      	mov	r7, r3
 801835a:	2209      	movs	r2, #9
 801835c:	3308      	adds	r3, #8
 801835e:	4606      	mov	r6, r0
 8018360:	fb93 f3f2 	sdiv	r3, r3, r2
 8018364:	2100      	movs	r1, #0
 8018366:	2201      	movs	r2, #1
 8018368:	429a      	cmp	r2, r3
 801836a:	db09      	blt.n	8018380 <__s2b+0x30>
 801836c:	4630      	mov	r0, r6
 801836e:	f7ff ff47 	bl	8018200 <_Balloc>
 8018372:	b940      	cbnz	r0, 8018386 <__s2b+0x36>
 8018374:	4602      	mov	r2, r0
 8018376:	4b19      	ldr	r3, [pc, #100]	; (80183dc <__s2b+0x8c>)
 8018378:	4819      	ldr	r0, [pc, #100]	; (80183e0 <__s2b+0x90>)
 801837a:	21ce      	movs	r1, #206	; 0xce
 801837c:	f7fe fae4 	bl	8016948 <__assert_func>
 8018380:	0052      	lsls	r2, r2, #1
 8018382:	3101      	adds	r1, #1
 8018384:	e7f0      	b.n	8018368 <__s2b+0x18>
 8018386:	9b08      	ldr	r3, [sp, #32]
 8018388:	6143      	str	r3, [r0, #20]
 801838a:	2d09      	cmp	r5, #9
 801838c:	f04f 0301 	mov.w	r3, #1
 8018390:	6103      	str	r3, [r0, #16]
 8018392:	dd16      	ble.n	80183c2 <__s2b+0x72>
 8018394:	f104 0909 	add.w	r9, r4, #9
 8018398:	46c8      	mov	r8, r9
 801839a:	442c      	add	r4, r5
 801839c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80183a0:	4601      	mov	r1, r0
 80183a2:	3b30      	subs	r3, #48	; 0x30
 80183a4:	220a      	movs	r2, #10
 80183a6:	4630      	mov	r0, r6
 80183a8:	f7ff ff8c 	bl	80182c4 <__multadd>
 80183ac:	45a0      	cmp	r8, r4
 80183ae:	d1f5      	bne.n	801839c <__s2b+0x4c>
 80183b0:	f1a5 0408 	sub.w	r4, r5, #8
 80183b4:	444c      	add	r4, r9
 80183b6:	1b2d      	subs	r5, r5, r4
 80183b8:	1963      	adds	r3, r4, r5
 80183ba:	42bb      	cmp	r3, r7
 80183bc:	db04      	blt.n	80183c8 <__s2b+0x78>
 80183be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183c2:	340a      	adds	r4, #10
 80183c4:	2509      	movs	r5, #9
 80183c6:	e7f6      	b.n	80183b6 <__s2b+0x66>
 80183c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80183cc:	4601      	mov	r1, r0
 80183ce:	3b30      	subs	r3, #48	; 0x30
 80183d0:	220a      	movs	r2, #10
 80183d2:	4630      	mov	r0, r6
 80183d4:	f7ff ff76 	bl	80182c4 <__multadd>
 80183d8:	e7ee      	b.n	80183b8 <__s2b+0x68>
 80183da:	bf00      	nop
 80183dc:	0808c949 	.word	0x0808c949
 80183e0:	0808ca38 	.word	0x0808ca38

080183e4 <__hi0bits>:
 80183e4:	0c03      	lsrs	r3, r0, #16
 80183e6:	041b      	lsls	r3, r3, #16
 80183e8:	b9d3      	cbnz	r3, 8018420 <__hi0bits+0x3c>
 80183ea:	0400      	lsls	r0, r0, #16
 80183ec:	2310      	movs	r3, #16
 80183ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80183f2:	bf04      	itt	eq
 80183f4:	0200      	lsleq	r0, r0, #8
 80183f6:	3308      	addeq	r3, #8
 80183f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80183fc:	bf04      	itt	eq
 80183fe:	0100      	lsleq	r0, r0, #4
 8018400:	3304      	addeq	r3, #4
 8018402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018406:	bf04      	itt	eq
 8018408:	0080      	lsleq	r0, r0, #2
 801840a:	3302      	addeq	r3, #2
 801840c:	2800      	cmp	r0, #0
 801840e:	db05      	blt.n	801841c <__hi0bits+0x38>
 8018410:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018414:	f103 0301 	add.w	r3, r3, #1
 8018418:	bf08      	it	eq
 801841a:	2320      	moveq	r3, #32
 801841c:	4618      	mov	r0, r3
 801841e:	4770      	bx	lr
 8018420:	2300      	movs	r3, #0
 8018422:	e7e4      	b.n	80183ee <__hi0bits+0xa>

08018424 <__lo0bits>:
 8018424:	6803      	ldr	r3, [r0, #0]
 8018426:	f013 0207 	ands.w	r2, r3, #7
 801842a:	4601      	mov	r1, r0
 801842c:	d00b      	beq.n	8018446 <__lo0bits+0x22>
 801842e:	07da      	lsls	r2, r3, #31
 8018430:	d423      	bmi.n	801847a <__lo0bits+0x56>
 8018432:	0798      	lsls	r0, r3, #30
 8018434:	bf49      	itett	mi
 8018436:	085b      	lsrmi	r3, r3, #1
 8018438:	089b      	lsrpl	r3, r3, #2
 801843a:	2001      	movmi	r0, #1
 801843c:	600b      	strmi	r3, [r1, #0]
 801843e:	bf5c      	itt	pl
 8018440:	600b      	strpl	r3, [r1, #0]
 8018442:	2002      	movpl	r0, #2
 8018444:	4770      	bx	lr
 8018446:	b298      	uxth	r0, r3
 8018448:	b9a8      	cbnz	r0, 8018476 <__lo0bits+0x52>
 801844a:	0c1b      	lsrs	r3, r3, #16
 801844c:	2010      	movs	r0, #16
 801844e:	b2da      	uxtb	r2, r3
 8018450:	b90a      	cbnz	r2, 8018456 <__lo0bits+0x32>
 8018452:	3008      	adds	r0, #8
 8018454:	0a1b      	lsrs	r3, r3, #8
 8018456:	071a      	lsls	r2, r3, #28
 8018458:	bf04      	itt	eq
 801845a:	091b      	lsreq	r3, r3, #4
 801845c:	3004      	addeq	r0, #4
 801845e:	079a      	lsls	r2, r3, #30
 8018460:	bf04      	itt	eq
 8018462:	089b      	lsreq	r3, r3, #2
 8018464:	3002      	addeq	r0, #2
 8018466:	07da      	lsls	r2, r3, #31
 8018468:	d403      	bmi.n	8018472 <__lo0bits+0x4e>
 801846a:	085b      	lsrs	r3, r3, #1
 801846c:	f100 0001 	add.w	r0, r0, #1
 8018470:	d005      	beq.n	801847e <__lo0bits+0x5a>
 8018472:	600b      	str	r3, [r1, #0]
 8018474:	4770      	bx	lr
 8018476:	4610      	mov	r0, r2
 8018478:	e7e9      	b.n	801844e <__lo0bits+0x2a>
 801847a:	2000      	movs	r0, #0
 801847c:	4770      	bx	lr
 801847e:	2020      	movs	r0, #32
 8018480:	4770      	bx	lr
	...

08018484 <__i2b>:
 8018484:	b510      	push	{r4, lr}
 8018486:	460c      	mov	r4, r1
 8018488:	2101      	movs	r1, #1
 801848a:	f7ff feb9 	bl	8018200 <_Balloc>
 801848e:	4602      	mov	r2, r0
 8018490:	b928      	cbnz	r0, 801849e <__i2b+0x1a>
 8018492:	4b05      	ldr	r3, [pc, #20]	; (80184a8 <__i2b+0x24>)
 8018494:	4805      	ldr	r0, [pc, #20]	; (80184ac <__i2b+0x28>)
 8018496:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801849a:	f7fe fa55 	bl	8016948 <__assert_func>
 801849e:	2301      	movs	r3, #1
 80184a0:	6144      	str	r4, [r0, #20]
 80184a2:	6103      	str	r3, [r0, #16]
 80184a4:	bd10      	pop	{r4, pc}
 80184a6:	bf00      	nop
 80184a8:	0808c949 	.word	0x0808c949
 80184ac:	0808ca38 	.word	0x0808ca38

080184b0 <__multiply>:
 80184b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b4:	4691      	mov	r9, r2
 80184b6:	690a      	ldr	r2, [r1, #16]
 80184b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80184bc:	429a      	cmp	r2, r3
 80184be:	bfb8      	it	lt
 80184c0:	460b      	movlt	r3, r1
 80184c2:	460c      	mov	r4, r1
 80184c4:	bfbc      	itt	lt
 80184c6:	464c      	movlt	r4, r9
 80184c8:	4699      	movlt	r9, r3
 80184ca:	6927      	ldr	r7, [r4, #16]
 80184cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80184d0:	68a3      	ldr	r3, [r4, #8]
 80184d2:	6861      	ldr	r1, [r4, #4]
 80184d4:	eb07 060a 	add.w	r6, r7, sl
 80184d8:	42b3      	cmp	r3, r6
 80184da:	b085      	sub	sp, #20
 80184dc:	bfb8      	it	lt
 80184de:	3101      	addlt	r1, #1
 80184e0:	f7ff fe8e 	bl	8018200 <_Balloc>
 80184e4:	b930      	cbnz	r0, 80184f4 <__multiply+0x44>
 80184e6:	4602      	mov	r2, r0
 80184e8:	4b44      	ldr	r3, [pc, #272]	; (80185fc <__multiply+0x14c>)
 80184ea:	4845      	ldr	r0, [pc, #276]	; (8018600 <__multiply+0x150>)
 80184ec:	f240 115d 	movw	r1, #349	; 0x15d
 80184f0:	f7fe fa2a 	bl	8016948 <__assert_func>
 80184f4:	f100 0514 	add.w	r5, r0, #20
 80184f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80184fc:	462b      	mov	r3, r5
 80184fe:	2200      	movs	r2, #0
 8018500:	4543      	cmp	r3, r8
 8018502:	d321      	bcc.n	8018548 <__multiply+0x98>
 8018504:	f104 0314 	add.w	r3, r4, #20
 8018508:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801850c:	f109 0314 	add.w	r3, r9, #20
 8018510:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018514:	9202      	str	r2, [sp, #8]
 8018516:	1b3a      	subs	r2, r7, r4
 8018518:	3a15      	subs	r2, #21
 801851a:	f022 0203 	bic.w	r2, r2, #3
 801851e:	3204      	adds	r2, #4
 8018520:	f104 0115 	add.w	r1, r4, #21
 8018524:	428f      	cmp	r7, r1
 8018526:	bf38      	it	cc
 8018528:	2204      	movcc	r2, #4
 801852a:	9201      	str	r2, [sp, #4]
 801852c:	9a02      	ldr	r2, [sp, #8]
 801852e:	9303      	str	r3, [sp, #12]
 8018530:	429a      	cmp	r2, r3
 8018532:	d80c      	bhi.n	801854e <__multiply+0x9e>
 8018534:	2e00      	cmp	r6, #0
 8018536:	dd03      	ble.n	8018540 <__multiply+0x90>
 8018538:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801853c:	2b00      	cmp	r3, #0
 801853e:	d05a      	beq.n	80185f6 <__multiply+0x146>
 8018540:	6106      	str	r6, [r0, #16]
 8018542:	b005      	add	sp, #20
 8018544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018548:	f843 2b04 	str.w	r2, [r3], #4
 801854c:	e7d8      	b.n	8018500 <__multiply+0x50>
 801854e:	f8b3 a000 	ldrh.w	sl, [r3]
 8018552:	f1ba 0f00 	cmp.w	sl, #0
 8018556:	d024      	beq.n	80185a2 <__multiply+0xf2>
 8018558:	f104 0e14 	add.w	lr, r4, #20
 801855c:	46a9      	mov	r9, r5
 801855e:	f04f 0c00 	mov.w	ip, #0
 8018562:	f85e 2b04 	ldr.w	r2, [lr], #4
 8018566:	f8d9 1000 	ldr.w	r1, [r9]
 801856a:	fa1f fb82 	uxth.w	fp, r2
 801856e:	b289      	uxth	r1, r1
 8018570:	fb0a 110b 	mla	r1, sl, fp, r1
 8018574:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8018578:	f8d9 2000 	ldr.w	r2, [r9]
 801857c:	4461      	add	r1, ip
 801857e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8018582:	fb0a c20b 	mla	r2, sl, fp, ip
 8018586:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801858a:	b289      	uxth	r1, r1
 801858c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018590:	4577      	cmp	r7, lr
 8018592:	f849 1b04 	str.w	r1, [r9], #4
 8018596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801859a:	d8e2      	bhi.n	8018562 <__multiply+0xb2>
 801859c:	9a01      	ldr	r2, [sp, #4]
 801859e:	f845 c002 	str.w	ip, [r5, r2]
 80185a2:	9a03      	ldr	r2, [sp, #12]
 80185a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80185a8:	3304      	adds	r3, #4
 80185aa:	f1b9 0f00 	cmp.w	r9, #0
 80185ae:	d020      	beq.n	80185f2 <__multiply+0x142>
 80185b0:	6829      	ldr	r1, [r5, #0]
 80185b2:	f104 0c14 	add.w	ip, r4, #20
 80185b6:	46ae      	mov	lr, r5
 80185b8:	f04f 0a00 	mov.w	sl, #0
 80185bc:	f8bc b000 	ldrh.w	fp, [ip]
 80185c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80185c4:	fb09 220b 	mla	r2, r9, fp, r2
 80185c8:	4492      	add	sl, r2
 80185ca:	b289      	uxth	r1, r1
 80185cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80185d0:	f84e 1b04 	str.w	r1, [lr], #4
 80185d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80185d8:	f8be 1000 	ldrh.w	r1, [lr]
 80185dc:	0c12      	lsrs	r2, r2, #16
 80185de:	fb09 1102 	mla	r1, r9, r2, r1
 80185e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80185e6:	4567      	cmp	r7, ip
 80185e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80185ec:	d8e6      	bhi.n	80185bc <__multiply+0x10c>
 80185ee:	9a01      	ldr	r2, [sp, #4]
 80185f0:	50a9      	str	r1, [r5, r2]
 80185f2:	3504      	adds	r5, #4
 80185f4:	e79a      	b.n	801852c <__multiply+0x7c>
 80185f6:	3e01      	subs	r6, #1
 80185f8:	e79c      	b.n	8018534 <__multiply+0x84>
 80185fa:	bf00      	nop
 80185fc:	0808c949 	.word	0x0808c949
 8018600:	0808ca38 	.word	0x0808ca38

08018604 <__pow5mult>:
 8018604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018608:	4615      	mov	r5, r2
 801860a:	f012 0203 	ands.w	r2, r2, #3
 801860e:	4606      	mov	r6, r0
 8018610:	460f      	mov	r7, r1
 8018612:	d007      	beq.n	8018624 <__pow5mult+0x20>
 8018614:	4c25      	ldr	r4, [pc, #148]	; (80186ac <__pow5mult+0xa8>)
 8018616:	3a01      	subs	r2, #1
 8018618:	2300      	movs	r3, #0
 801861a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801861e:	f7ff fe51 	bl	80182c4 <__multadd>
 8018622:	4607      	mov	r7, r0
 8018624:	10ad      	asrs	r5, r5, #2
 8018626:	d03d      	beq.n	80186a4 <__pow5mult+0xa0>
 8018628:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801862a:	b97c      	cbnz	r4, 801864c <__pow5mult+0x48>
 801862c:	2010      	movs	r0, #16
 801862e:	f7fc f98b 	bl	8014948 <malloc>
 8018632:	4602      	mov	r2, r0
 8018634:	6270      	str	r0, [r6, #36]	; 0x24
 8018636:	b928      	cbnz	r0, 8018644 <__pow5mult+0x40>
 8018638:	4b1d      	ldr	r3, [pc, #116]	; (80186b0 <__pow5mult+0xac>)
 801863a:	481e      	ldr	r0, [pc, #120]	; (80186b4 <__pow5mult+0xb0>)
 801863c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018640:	f7fe f982 	bl	8016948 <__assert_func>
 8018644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018648:	6004      	str	r4, [r0, #0]
 801864a:	60c4      	str	r4, [r0, #12]
 801864c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018654:	b94c      	cbnz	r4, 801866a <__pow5mult+0x66>
 8018656:	f240 2171 	movw	r1, #625	; 0x271
 801865a:	4630      	mov	r0, r6
 801865c:	f7ff ff12 	bl	8018484 <__i2b>
 8018660:	2300      	movs	r3, #0
 8018662:	f8c8 0008 	str.w	r0, [r8, #8]
 8018666:	4604      	mov	r4, r0
 8018668:	6003      	str	r3, [r0, #0]
 801866a:	f04f 0900 	mov.w	r9, #0
 801866e:	07eb      	lsls	r3, r5, #31
 8018670:	d50a      	bpl.n	8018688 <__pow5mult+0x84>
 8018672:	4639      	mov	r1, r7
 8018674:	4622      	mov	r2, r4
 8018676:	4630      	mov	r0, r6
 8018678:	f7ff ff1a 	bl	80184b0 <__multiply>
 801867c:	4639      	mov	r1, r7
 801867e:	4680      	mov	r8, r0
 8018680:	4630      	mov	r0, r6
 8018682:	f7ff fdfd 	bl	8018280 <_Bfree>
 8018686:	4647      	mov	r7, r8
 8018688:	106d      	asrs	r5, r5, #1
 801868a:	d00b      	beq.n	80186a4 <__pow5mult+0xa0>
 801868c:	6820      	ldr	r0, [r4, #0]
 801868e:	b938      	cbnz	r0, 80186a0 <__pow5mult+0x9c>
 8018690:	4622      	mov	r2, r4
 8018692:	4621      	mov	r1, r4
 8018694:	4630      	mov	r0, r6
 8018696:	f7ff ff0b 	bl	80184b0 <__multiply>
 801869a:	6020      	str	r0, [r4, #0]
 801869c:	f8c0 9000 	str.w	r9, [r0]
 80186a0:	4604      	mov	r4, r0
 80186a2:	e7e4      	b.n	801866e <__pow5mult+0x6a>
 80186a4:	4638      	mov	r0, r7
 80186a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186aa:	bf00      	nop
 80186ac:	0808cb88 	.word	0x0808cb88
 80186b0:	0808c730 	.word	0x0808c730
 80186b4:	0808ca38 	.word	0x0808ca38

080186b8 <__lshift>:
 80186b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186bc:	460c      	mov	r4, r1
 80186be:	6849      	ldr	r1, [r1, #4]
 80186c0:	6923      	ldr	r3, [r4, #16]
 80186c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80186c6:	68a3      	ldr	r3, [r4, #8]
 80186c8:	4607      	mov	r7, r0
 80186ca:	4691      	mov	r9, r2
 80186cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80186d0:	f108 0601 	add.w	r6, r8, #1
 80186d4:	42b3      	cmp	r3, r6
 80186d6:	db0b      	blt.n	80186f0 <__lshift+0x38>
 80186d8:	4638      	mov	r0, r7
 80186da:	f7ff fd91 	bl	8018200 <_Balloc>
 80186de:	4605      	mov	r5, r0
 80186e0:	b948      	cbnz	r0, 80186f6 <__lshift+0x3e>
 80186e2:	4602      	mov	r2, r0
 80186e4:	4b2a      	ldr	r3, [pc, #168]	; (8018790 <__lshift+0xd8>)
 80186e6:	482b      	ldr	r0, [pc, #172]	; (8018794 <__lshift+0xdc>)
 80186e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80186ec:	f7fe f92c 	bl	8016948 <__assert_func>
 80186f0:	3101      	adds	r1, #1
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	e7ee      	b.n	80186d4 <__lshift+0x1c>
 80186f6:	2300      	movs	r3, #0
 80186f8:	f100 0114 	add.w	r1, r0, #20
 80186fc:	f100 0210 	add.w	r2, r0, #16
 8018700:	4618      	mov	r0, r3
 8018702:	4553      	cmp	r3, sl
 8018704:	db37      	blt.n	8018776 <__lshift+0xbe>
 8018706:	6920      	ldr	r0, [r4, #16]
 8018708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801870c:	f104 0314 	add.w	r3, r4, #20
 8018710:	f019 091f 	ands.w	r9, r9, #31
 8018714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018718:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801871c:	d02f      	beq.n	801877e <__lshift+0xc6>
 801871e:	f1c9 0e20 	rsb	lr, r9, #32
 8018722:	468a      	mov	sl, r1
 8018724:	f04f 0c00 	mov.w	ip, #0
 8018728:	681a      	ldr	r2, [r3, #0]
 801872a:	fa02 f209 	lsl.w	r2, r2, r9
 801872e:	ea42 020c 	orr.w	r2, r2, ip
 8018732:	f84a 2b04 	str.w	r2, [sl], #4
 8018736:	f853 2b04 	ldr.w	r2, [r3], #4
 801873a:	4298      	cmp	r0, r3
 801873c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018740:	d8f2      	bhi.n	8018728 <__lshift+0x70>
 8018742:	1b03      	subs	r3, r0, r4
 8018744:	3b15      	subs	r3, #21
 8018746:	f023 0303 	bic.w	r3, r3, #3
 801874a:	3304      	adds	r3, #4
 801874c:	f104 0215 	add.w	r2, r4, #21
 8018750:	4290      	cmp	r0, r2
 8018752:	bf38      	it	cc
 8018754:	2304      	movcc	r3, #4
 8018756:	f841 c003 	str.w	ip, [r1, r3]
 801875a:	f1bc 0f00 	cmp.w	ip, #0
 801875e:	d001      	beq.n	8018764 <__lshift+0xac>
 8018760:	f108 0602 	add.w	r6, r8, #2
 8018764:	3e01      	subs	r6, #1
 8018766:	4638      	mov	r0, r7
 8018768:	612e      	str	r6, [r5, #16]
 801876a:	4621      	mov	r1, r4
 801876c:	f7ff fd88 	bl	8018280 <_Bfree>
 8018770:	4628      	mov	r0, r5
 8018772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018776:	f842 0f04 	str.w	r0, [r2, #4]!
 801877a:	3301      	adds	r3, #1
 801877c:	e7c1      	b.n	8018702 <__lshift+0x4a>
 801877e:	3904      	subs	r1, #4
 8018780:	f853 2b04 	ldr.w	r2, [r3], #4
 8018784:	f841 2f04 	str.w	r2, [r1, #4]!
 8018788:	4298      	cmp	r0, r3
 801878a:	d8f9      	bhi.n	8018780 <__lshift+0xc8>
 801878c:	e7ea      	b.n	8018764 <__lshift+0xac>
 801878e:	bf00      	nop
 8018790:	0808c949 	.word	0x0808c949
 8018794:	0808ca38 	.word	0x0808ca38

08018798 <__mcmp>:
 8018798:	b530      	push	{r4, r5, lr}
 801879a:	6902      	ldr	r2, [r0, #16]
 801879c:	690c      	ldr	r4, [r1, #16]
 801879e:	1b12      	subs	r2, r2, r4
 80187a0:	d10e      	bne.n	80187c0 <__mcmp+0x28>
 80187a2:	f100 0314 	add.w	r3, r0, #20
 80187a6:	3114      	adds	r1, #20
 80187a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80187ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80187b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80187b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80187b8:	42a5      	cmp	r5, r4
 80187ba:	d003      	beq.n	80187c4 <__mcmp+0x2c>
 80187bc:	d305      	bcc.n	80187ca <__mcmp+0x32>
 80187be:	2201      	movs	r2, #1
 80187c0:	4610      	mov	r0, r2
 80187c2:	bd30      	pop	{r4, r5, pc}
 80187c4:	4283      	cmp	r3, r0
 80187c6:	d3f3      	bcc.n	80187b0 <__mcmp+0x18>
 80187c8:	e7fa      	b.n	80187c0 <__mcmp+0x28>
 80187ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187ce:	e7f7      	b.n	80187c0 <__mcmp+0x28>

080187d0 <__mdiff>:
 80187d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d4:	460c      	mov	r4, r1
 80187d6:	4606      	mov	r6, r0
 80187d8:	4611      	mov	r1, r2
 80187da:	4620      	mov	r0, r4
 80187dc:	4690      	mov	r8, r2
 80187de:	f7ff ffdb 	bl	8018798 <__mcmp>
 80187e2:	1e05      	subs	r5, r0, #0
 80187e4:	d110      	bne.n	8018808 <__mdiff+0x38>
 80187e6:	4629      	mov	r1, r5
 80187e8:	4630      	mov	r0, r6
 80187ea:	f7ff fd09 	bl	8018200 <_Balloc>
 80187ee:	b930      	cbnz	r0, 80187fe <__mdiff+0x2e>
 80187f0:	4b3a      	ldr	r3, [pc, #232]	; (80188dc <__mdiff+0x10c>)
 80187f2:	4602      	mov	r2, r0
 80187f4:	f240 2132 	movw	r1, #562	; 0x232
 80187f8:	4839      	ldr	r0, [pc, #228]	; (80188e0 <__mdiff+0x110>)
 80187fa:	f7fe f8a5 	bl	8016948 <__assert_func>
 80187fe:	2301      	movs	r3, #1
 8018800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018808:	bfa4      	itt	ge
 801880a:	4643      	movge	r3, r8
 801880c:	46a0      	movge	r8, r4
 801880e:	4630      	mov	r0, r6
 8018810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018814:	bfa6      	itte	ge
 8018816:	461c      	movge	r4, r3
 8018818:	2500      	movge	r5, #0
 801881a:	2501      	movlt	r5, #1
 801881c:	f7ff fcf0 	bl	8018200 <_Balloc>
 8018820:	b920      	cbnz	r0, 801882c <__mdiff+0x5c>
 8018822:	4b2e      	ldr	r3, [pc, #184]	; (80188dc <__mdiff+0x10c>)
 8018824:	4602      	mov	r2, r0
 8018826:	f44f 7110 	mov.w	r1, #576	; 0x240
 801882a:	e7e5      	b.n	80187f8 <__mdiff+0x28>
 801882c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018830:	6926      	ldr	r6, [r4, #16]
 8018832:	60c5      	str	r5, [r0, #12]
 8018834:	f104 0914 	add.w	r9, r4, #20
 8018838:	f108 0514 	add.w	r5, r8, #20
 801883c:	f100 0e14 	add.w	lr, r0, #20
 8018840:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8018844:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018848:	f108 0210 	add.w	r2, r8, #16
 801884c:	46f2      	mov	sl, lr
 801884e:	2100      	movs	r1, #0
 8018850:	f859 3b04 	ldr.w	r3, [r9], #4
 8018854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018858:	fa1f f883 	uxth.w	r8, r3
 801885c:	fa11 f18b 	uxtah	r1, r1, fp
 8018860:	0c1b      	lsrs	r3, r3, #16
 8018862:	eba1 0808 	sub.w	r8, r1, r8
 8018866:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801886a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801886e:	fa1f f888 	uxth.w	r8, r8
 8018872:	1419      	asrs	r1, r3, #16
 8018874:	454e      	cmp	r6, r9
 8018876:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801887a:	f84a 3b04 	str.w	r3, [sl], #4
 801887e:	d8e7      	bhi.n	8018850 <__mdiff+0x80>
 8018880:	1b33      	subs	r3, r6, r4
 8018882:	3b15      	subs	r3, #21
 8018884:	f023 0303 	bic.w	r3, r3, #3
 8018888:	3304      	adds	r3, #4
 801888a:	3415      	adds	r4, #21
 801888c:	42a6      	cmp	r6, r4
 801888e:	bf38      	it	cc
 8018890:	2304      	movcc	r3, #4
 8018892:	441d      	add	r5, r3
 8018894:	4473      	add	r3, lr
 8018896:	469e      	mov	lr, r3
 8018898:	462e      	mov	r6, r5
 801889a:	4566      	cmp	r6, ip
 801889c:	d30e      	bcc.n	80188bc <__mdiff+0xec>
 801889e:	f10c 0203 	add.w	r2, ip, #3
 80188a2:	1b52      	subs	r2, r2, r5
 80188a4:	f022 0203 	bic.w	r2, r2, #3
 80188a8:	3d03      	subs	r5, #3
 80188aa:	45ac      	cmp	ip, r5
 80188ac:	bf38      	it	cc
 80188ae:	2200      	movcc	r2, #0
 80188b0:	441a      	add	r2, r3
 80188b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80188b6:	b17b      	cbz	r3, 80188d8 <__mdiff+0x108>
 80188b8:	6107      	str	r7, [r0, #16]
 80188ba:	e7a3      	b.n	8018804 <__mdiff+0x34>
 80188bc:	f856 8b04 	ldr.w	r8, [r6], #4
 80188c0:	fa11 f288 	uxtah	r2, r1, r8
 80188c4:	1414      	asrs	r4, r2, #16
 80188c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80188ca:	b292      	uxth	r2, r2
 80188cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80188d0:	f84e 2b04 	str.w	r2, [lr], #4
 80188d4:	1421      	asrs	r1, r4, #16
 80188d6:	e7e0      	b.n	801889a <__mdiff+0xca>
 80188d8:	3f01      	subs	r7, #1
 80188da:	e7ea      	b.n	80188b2 <__mdiff+0xe2>
 80188dc:	0808c949 	.word	0x0808c949
 80188e0:	0808ca38 	.word	0x0808ca38

080188e4 <__ulp>:
 80188e4:	b082      	sub	sp, #8
 80188e6:	ed8d 0b00 	vstr	d0, [sp]
 80188ea:	9b01      	ldr	r3, [sp, #4]
 80188ec:	4912      	ldr	r1, [pc, #72]	; (8018938 <__ulp+0x54>)
 80188ee:	4019      	ands	r1, r3
 80188f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80188f4:	2900      	cmp	r1, #0
 80188f6:	dd05      	ble.n	8018904 <__ulp+0x20>
 80188f8:	2200      	movs	r2, #0
 80188fa:	460b      	mov	r3, r1
 80188fc:	ec43 2b10 	vmov	d0, r2, r3
 8018900:	b002      	add	sp, #8
 8018902:	4770      	bx	lr
 8018904:	4249      	negs	r1, r1
 8018906:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801890a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801890e:	f04f 0200 	mov.w	r2, #0
 8018912:	f04f 0300 	mov.w	r3, #0
 8018916:	da04      	bge.n	8018922 <__ulp+0x3e>
 8018918:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801891c:	fa41 f300 	asr.w	r3, r1, r0
 8018920:	e7ec      	b.n	80188fc <__ulp+0x18>
 8018922:	f1a0 0114 	sub.w	r1, r0, #20
 8018926:	291e      	cmp	r1, #30
 8018928:	bfda      	itte	le
 801892a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801892e:	fa20 f101 	lsrle.w	r1, r0, r1
 8018932:	2101      	movgt	r1, #1
 8018934:	460a      	mov	r2, r1
 8018936:	e7e1      	b.n	80188fc <__ulp+0x18>
 8018938:	7ff00000 	.word	0x7ff00000

0801893c <__b2d>:
 801893c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801893e:	6905      	ldr	r5, [r0, #16]
 8018940:	f100 0714 	add.w	r7, r0, #20
 8018944:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018948:	1f2e      	subs	r6, r5, #4
 801894a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801894e:	4620      	mov	r0, r4
 8018950:	f7ff fd48 	bl	80183e4 <__hi0bits>
 8018954:	f1c0 0320 	rsb	r3, r0, #32
 8018958:	280a      	cmp	r0, #10
 801895a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80189d8 <__b2d+0x9c>
 801895e:	600b      	str	r3, [r1, #0]
 8018960:	dc14      	bgt.n	801898c <__b2d+0x50>
 8018962:	f1c0 0e0b 	rsb	lr, r0, #11
 8018966:	fa24 f10e 	lsr.w	r1, r4, lr
 801896a:	42b7      	cmp	r7, r6
 801896c:	ea41 030c 	orr.w	r3, r1, ip
 8018970:	bf34      	ite	cc
 8018972:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018976:	2100      	movcs	r1, #0
 8018978:	3015      	adds	r0, #21
 801897a:	fa04 f000 	lsl.w	r0, r4, r0
 801897e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018982:	ea40 0201 	orr.w	r2, r0, r1
 8018986:	ec43 2b10 	vmov	d0, r2, r3
 801898a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801898c:	42b7      	cmp	r7, r6
 801898e:	bf3a      	itte	cc
 8018990:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018994:	f1a5 0608 	subcc.w	r6, r5, #8
 8018998:	2100      	movcs	r1, #0
 801899a:	380b      	subs	r0, #11
 801899c:	d017      	beq.n	80189ce <__b2d+0x92>
 801899e:	f1c0 0c20 	rsb	ip, r0, #32
 80189a2:	fa04 f500 	lsl.w	r5, r4, r0
 80189a6:	42be      	cmp	r6, r7
 80189a8:	fa21 f40c 	lsr.w	r4, r1, ip
 80189ac:	ea45 0504 	orr.w	r5, r5, r4
 80189b0:	bf8c      	ite	hi
 80189b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80189b6:	2400      	movls	r4, #0
 80189b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80189bc:	fa01 f000 	lsl.w	r0, r1, r0
 80189c0:	fa24 f40c 	lsr.w	r4, r4, ip
 80189c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80189c8:	ea40 0204 	orr.w	r2, r0, r4
 80189cc:	e7db      	b.n	8018986 <__b2d+0x4a>
 80189ce:	ea44 030c 	orr.w	r3, r4, ip
 80189d2:	460a      	mov	r2, r1
 80189d4:	e7d7      	b.n	8018986 <__b2d+0x4a>
 80189d6:	bf00      	nop
 80189d8:	3ff00000 	.word	0x3ff00000

080189dc <__d2b>:
 80189dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80189e0:	4689      	mov	r9, r1
 80189e2:	2101      	movs	r1, #1
 80189e4:	ec57 6b10 	vmov	r6, r7, d0
 80189e8:	4690      	mov	r8, r2
 80189ea:	f7ff fc09 	bl	8018200 <_Balloc>
 80189ee:	4604      	mov	r4, r0
 80189f0:	b930      	cbnz	r0, 8018a00 <__d2b+0x24>
 80189f2:	4602      	mov	r2, r0
 80189f4:	4b25      	ldr	r3, [pc, #148]	; (8018a8c <__d2b+0xb0>)
 80189f6:	4826      	ldr	r0, [pc, #152]	; (8018a90 <__d2b+0xb4>)
 80189f8:	f240 310a 	movw	r1, #778	; 0x30a
 80189fc:	f7fd ffa4 	bl	8016948 <__assert_func>
 8018a00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018a04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018a08:	bb35      	cbnz	r5, 8018a58 <__d2b+0x7c>
 8018a0a:	2e00      	cmp	r6, #0
 8018a0c:	9301      	str	r3, [sp, #4]
 8018a0e:	d028      	beq.n	8018a62 <__d2b+0x86>
 8018a10:	4668      	mov	r0, sp
 8018a12:	9600      	str	r6, [sp, #0]
 8018a14:	f7ff fd06 	bl	8018424 <__lo0bits>
 8018a18:	9900      	ldr	r1, [sp, #0]
 8018a1a:	b300      	cbz	r0, 8018a5e <__d2b+0x82>
 8018a1c:	9a01      	ldr	r2, [sp, #4]
 8018a1e:	f1c0 0320 	rsb	r3, r0, #32
 8018a22:	fa02 f303 	lsl.w	r3, r2, r3
 8018a26:	430b      	orrs	r3, r1
 8018a28:	40c2      	lsrs	r2, r0
 8018a2a:	6163      	str	r3, [r4, #20]
 8018a2c:	9201      	str	r2, [sp, #4]
 8018a2e:	9b01      	ldr	r3, [sp, #4]
 8018a30:	61a3      	str	r3, [r4, #24]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	bf14      	ite	ne
 8018a36:	2202      	movne	r2, #2
 8018a38:	2201      	moveq	r2, #1
 8018a3a:	6122      	str	r2, [r4, #16]
 8018a3c:	b1d5      	cbz	r5, 8018a74 <__d2b+0x98>
 8018a3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018a42:	4405      	add	r5, r0
 8018a44:	f8c9 5000 	str.w	r5, [r9]
 8018a48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018a4c:	f8c8 0000 	str.w	r0, [r8]
 8018a50:	4620      	mov	r0, r4
 8018a52:	b003      	add	sp, #12
 8018a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018a5c:	e7d5      	b.n	8018a0a <__d2b+0x2e>
 8018a5e:	6161      	str	r1, [r4, #20]
 8018a60:	e7e5      	b.n	8018a2e <__d2b+0x52>
 8018a62:	a801      	add	r0, sp, #4
 8018a64:	f7ff fcde 	bl	8018424 <__lo0bits>
 8018a68:	9b01      	ldr	r3, [sp, #4]
 8018a6a:	6163      	str	r3, [r4, #20]
 8018a6c:	2201      	movs	r2, #1
 8018a6e:	6122      	str	r2, [r4, #16]
 8018a70:	3020      	adds	r0, #32
 8018a72:	e7e3      	b.n	8018a3c <__d2b+0x60>
 8018a74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018a78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018a7c:	f8c9 0000 	str.w	r0, [r9]
 8018a80:	6918      	ldr	r0, [r3, #16]
 8018a82:	f7ff fcaf 	bl	80183e4 <__hi0bits>
 8018a86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018a8a:	e7df      	b.n	8018a4c <__d2b+0x70>
 8018a8c:	0808c949 	.word	0x0808c949
 8018a90:	0808ca38 	.word	0x0808ca38

08018a94 <__ratio>:
 8018a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a98:	4688      	mov	r8, r1
 8018a9a:	4669      	mov	r1, sp
 8018a9c:	4681      	mov	r9, r0
 8018a9e:	f7ff ff4d 	bl	801893c <__b2d>
 8018aa2:	a901      	add	r1, sp, #4
 8018aa4:	4640      	mov	r0, r8
 8018aa6:	ec55 4b10 	vmov	r4, r5, d0
 8018aaa:	f7ff ff47 	bl	801893c <__b2d>
 8018aae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ab2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ab6:	eba3 0c02 	sub.w	ip, r3, r2
 8018aba:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018abe:	1a9b      	subs	r3, r3, r2
 8018ac0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018ac4:	ec51 0b10 	vmov	r0, r1, d0
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	bfd6      	itet	le
 8018acc:	460a      	movle	r2, r1
 8018ace:	462a      	movgt	r2, r5
 8018ad0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018ad4:	468b      	mov	fp, r1
 8018ad6:	462f      	mov	r7, r5
 8018ad8:	bfd4      	ite	le
 8018ada:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018ade:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	ee10 2a10 	vmov	r2, s0
 8018ae8:	465b      	mov	r3, fp
 8018aea:	4639      	mov	r1, r7
 8018aec:	f7e7 febe 	bl	800086c <__aeabi_ddiv>
 8018af0:	ec41 0b10 	vmov	d0, r0, r1
 8018af4:	b003      	add	sp, #12
 8018af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018afa <__copybits>:
 8018afa:	3901      	subs	r1, #1
 8018afc:	b570      	push	{r4, r5, r6, lr}
 8018afe:	1149      	asrs	r1, r1, #5
 8018b00:	6914      	ldr	r4, [r2, #16]
 8018b02:	3101      	adds	r1, #1
 8018b04:	f102 0314 	add.w	r3, r2, #20
 8018b08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018b0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018b10:	1f05      	subs	r5, r0, #4
 8018b12:	42a3      	cmp	r3, r4
 8018b14:	d30c      	bcc.n	8018b30 <__copybits+0x36>
 8018b16:	1aa3      	subs	r3, r4, r2
 8018b18:	3b11      	subs	r3, #17
 8018b1a:	f023 0303 	bic.w	r3, r3, #3
 8018b1e:	3211      	adds	r2, #17
 8018b20:	42a2      	cmp	r2, r4
 8018b22:	bf88      	it	hi
 8018b24:	2300      	movhi	r3, #0
 8018b26:	4418      	add	r0, r3
 8018b28:	2300      	movs	r3, #0
 8018b2a:	4288      	cmp	r0, r1
 8018b2c:	d305      	bcc.n	8018b3a <__copybits+0x40>
 8018b2e:	bd70      	pop	{r4, r5, r6, pc}
 8018b30:	f853 6b04 	ldr.w	r6, [r3], #4
 8018b34:	f845 6f04 	str.w	r6, [r5, #4]!
 8018b38:	e7eb      	b.n	8018b12 <__copybits+0x18>
 8018b3a:	f840 3b04 	str.w	r3, [r0], #4
 8018b3e:	e7f4      	b.n	8018b2a <__copybits+0x30>

08018b40 <__any_on>:
 8018b40:	f100 0214 	add.w	r2, r0, #20
 8018b44:	6900      	ldr	r0, [r0, #16]
 8018b46:	114b      	asrs	r3, r1, #5
 8018b48:	4298      	cmp	r0, r3
 8018b4a:	b510      	push	{r4, lr}
 8018b4c:	db11      	blt.n	8018b72 <__any_on+0x32>
 8018b4e:	dd0a      	ble.n	8018b66 <__any_on+0x26>
 8018b50:	f011 011f 	ands.w	r1, r1, #31
 8018b54:	d007      	beq.n	8018b66 <__any_on+0x26>
 8018b56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018b5a:	fa24 f001 	lsr.w	r0, r4, r1
 8018b5e:	fa00 f101 	lsl.w	r1, r0, r1
 8018b62:	428c      	cmp	r4, r1
 8018b64:	d10b      	bne.n	8018b7e <__any_on+0x3e>
 8018b66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018b6a:	4293      	cmp	r3, r2
 8018b6c:	d803      	bhi.n	8018b76 <__any_on+0x36>
 8018b6e:	2000      	movs	r0, #0
 8018b70:	bd10      	pop	{r4, pc}
 8018b72:	4603      	mov	r3, r0
 8018b74:	e7f7      	b.n	8018b66 <__any_on+0x26>
 8018b76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018b7a:	2900      	cmp	r1, #0
 8018b7c:	d0f5      	beq.n	8018b6a <__any_on+0x2a>
 8018b7e:	2001      	movs	r0, #1
 8018b80:	e7f6      	b.n	8018b70 <__any_on+0x30>

08018b82 <_calloc_r>:
 8018b82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018b84:	fba1 2402 	umull	r2, r4, r1, r2
 8018b88:	b94c      	cbnz	r4, 8018b9e <_calloc_r+0x1c>
 8018b8a:	4611      	mov	r1, r2
 8018b8c:	9201      	str	r2, [sp, #4]
 8018b8e:	f7fb ff6d 	bl	8014a6c <_malloc_r>
 8018b92:	9a01      	ldr	r2, [sp, #4]
 8018b94:	4605      	mov	r5, r0
 8018b96:	b930      	cbnz	r0, 8018ba6 <_calloc_r+0x24>
 8018b98:	4628      	mov	r0, r5
 8018b9a:	b003      	add	sp, #12
 8018b9c:	bd30      	pop	{r4, r5, pc}
 8018b9e:	220c      	movs	r2, #12
 8018ba0:	6002      	str	r2, [r0, #0]
 8018ba2:	2500      	movs	r5, #0
 8018ba4:	e7f8      	b.n	8018b98 <_calloc_r+0x16>
 8018ba6:	4621      	mov	r1, r4
 8018ba8:	f7fb feec 	bl	8014984 <memset>
 8018bac:	e7f4      	b.n	8018b98 <_calloc_r+0x16>

08018bae <_realloc_r>:
 8018bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bb2:	4680      	mov	r8, r0
 8018bb4:	4614      	mov	r4, r2
 8018bb6:	460e      	mov	r6, r1
 8018bb8:	b921      	cbnz	r1, 8018bc4 <_realloc_r+0x16>
 8018bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018bbe:	4611      	mov	r1, r2
 8018bc0:	f7fb bf54 	b.w	8014a6c <_malloc_r>
 8018bc4:	b92a      	cbnz	r2, 8018bd2 <_realloc_r+0x24>
 8018bc6:	f7fb fee5 	bl	8014994 <_free_r>
 8018bca:	4625      	mov	r5, r4
 8018bcc:	4628      	mov	r0, r5
 8018bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bd2:	f000 fbb5 	bl	8019340 <_malloc_usable_size_r>
 8018bd6:	4284      	cmp	r4, r0
 8018bd8:	4607      	mov	r7, r0
 8018bda:	d802      	bhi.n	8018be2 <_realloc_r+0x34>
 8018bdc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018be0:	d812      	bhi.n	8018c08 <_realloc_r+0x5a>
 8018be2:	4621      	mov	r1, r4
 8018be4:	4640      	mov	r0, r8
 8018be6:	f7fb ff41 	bl	8014a6c <_malloc_r>
 8018bea:	4605      	mov	r5, r0
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d0ed      	beq.n	8018bcc <_realloc_r+0x1e>
 8018bf0:	42bc      	cmp	r4, r7
 8018bf2:	4622      	mov	r2, r4
 8018bf4:	4631      	mov	r1, r6
 8018bf6:	bf28      	it	cs
 8018bf8:	463a      	movcs	r2, r7
 8018bfa:	f7fb feb5 	bl	8014968 <memcpy>
 8018bfe:	4631      	mov	r1, r6
 8018c00:	4640      	mov	r0, r8
 8018c02:	f7fb fec7 	bl	8014994 <_free_r>
 8018c06:	e7e1      	b.n	8018bcc <_realloc_r+0x1e>
 8018c08:	4635      	mov	r5, r6
 8018c0a:	e7df      	b.n	8018bcc <_realloc_r+0x1e>

08018c0c <__ssputs_r>:
 8018c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c10:	688e      	ldr	r6, [r1, #8]
 8018c12:	429e      	cmp	r6, r3
 8018c14:	4682      	mov	sl, r0
 8018c16:	460c      	mov	r4, r1
 8018c18:	4690      	mov	r8, r2
 8018c1a:	461f      	mov	r7, r3
 8018c1c:	d838      	bhi.n	8018c90 <__ssputs_r+0x84>
 8018c1e:	898a      	ldrh	r2, [r1, #12]
 8018c20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018c24:	d032      	beq.n	8018c8c <__ssputs_r+0x80>
 8018c26:	6825      	ldr	r5, [r4, #0]
 8018c28:	6909      	ldr	r1, [r1, #16]
 8018c2a:	eba5 0901 	sub.w	r9, r5, r1
 8018c2e:	6965      	ldr	r5, [r4, #20]
 8018c30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018c38:	3301      	adds	r3, #1
 8018c3a:	444b      	add	r3, r9
 8018c3c:	106d      	asrs	r5, r5, #1
 8018c3e:	429d      	cmp	r5, r3
 8018c40:	bf38      	it	cc
 8018c42:	461d      	movcc	r5, r3
 8018c44:	0553      	lsls	r3, r2, #21
 8018c46:	d531      	bpl.n	8018cac <__ssputs_r+0xa0>
 8018c48:	4629      	mov	r1, r5
 8018c4a:	f7fb ff0f 	bl	8014a6c <_malloc_r>
 8018c4e:	4606      	mov	r6, r0
 8018c50:	b950      	cbnz	r0, 8018c68 <__ssputs_r+0x5c>
 8018c52:	230c      	movs	r3, #12
 8018c54:	f8ca 3000 	str.w	r3, [sl]
 8018c58:	89a3      	ldrh	r3, [r4, #12]
 8018c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c5e:	81a3      	strh	r3, [r4, #12]
 8018c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c68:	6921      	ldr	r1, [r4, #16]
 8018c6a:	464a      	mov	r2, r9
 8018c6c:	f7fb fe7c 	bl	8014968 <memcpy>
 8018c70:	89a3      	ldrh	r3, [r4, #12]
 8018c72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c7a:	81a3      	strh	r3, [r4, #12]
 8018c7c:	6126      	str	r6, [r4, #16]
 8018c7e:	6165      	str	r5, [r4, #20]
 8018c80:	444e      	add	r6, r9
 8018c82:	eba5 0509 	sub.w	r5, r5, r9
 8018c86:	6026      	str	r6, [r4, #0]
 8018c88:	60a5      	str	r5, [r4, #8]
 8018c8a:	463e      	mov	r6, r7
 8018c8c:	42be      	cmp	r6, r7
 8018c8e:	d900      	bls.n	8018c92 <__ssputs_r+0x86>
 8018c90:	463e      	mov	r6, r7
 8018c92:	6820      	ldr	r0, [r4, #0]
 8018c94:	4632      	mov	r2, r6
 8018c96:	4641      	mov	r1, r8
 8018c98:	f000 fb38 	bl	801930c <memmove>
 8018c9c:	68a3      	ldr	r3, [r4, #8]
 8018c9e:	1b9b      	subs	r3, r3, r6
 8018ca0:	60a3      	str	r3, [r4, #8]
 8018ca2:	6823      	ldr	r3, [r4, #0]
 8018ca4:	4433      	add	r3, r6
 8018ca6:	6023      	str	r3, [r4, #0]
 8018ca8:	2000      	movs	r0, #0
 8018caa:	e7db      	b.n	8018c64 <__ssputs_r+0x58>
 8018cac:	462a      	mov	r2, r5
 8018cae:	f7ff ff7e 	bl	8018bae <_realloc_r>
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	d1e1      	bne.n	8018c7c <__ssputs_r+0x70>
 8018cb8:	6921      	ldr	r1, [r4, #16]
 8018cba:	4650      	mov	r0, sl
 8018cbc:	f7fb fe6a 	bl	8014994 <_free_r>
 8018cc0:	e7c7      	b.n	8018c52 <__ssputs_r+0x46>
	...

08018cc4 <_svfiprintf_r>:
 8018cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc8:	4698      	mov	r8, r3
 8018cca:	898b      	ldrh	r3, [r1, #12]
 8018ccc:	061b      	lsls	r3, r3, #24
 8018cce:	b09d      	sub	sp, #116	; 0x74
 8018cd0:	4607      	mov	r7, r0
 8018cd2:	460d      	mov	r5, r1
 8018cd4:	4614      	mov	r4, r2
 8018cd6:	d50e      	bpl.n	8018cf6 <_svfiprintf_r+0x32>
 8018cd8:	690b      	ldr	r3, [r1, #16]
 8018cda:	b963      	cbnz	r3, 8018cf6 <_svfiprintf_r+0x32>
 8018cdc:	2140      	movs	r1, #64	; 0x40
 8018cde:	f7fb fec5 	bl	8014a6c <_malloc_r>
 8018ce2:	6028      	str	r0, [r5, #0]
 8018ce4:	6128      	str	r0, [r5, #16]
 8018ce6:	b920      	cbnz	r0, 8018cf2 <_svfiprintf_r+0x2e>
 8018ce8:	230c      	movs	r3, #12
 8018cea:	603b      	str	r3, [r7, #0]
 8018cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cf0:	e0d1      	b.n	8018e96 <_svfiprintf_r+0x1d2>
 8018cf2:	2340      	movs	r3, #64	; 0x40
 8018cf4:	616b      	str	r3, [r5, #20]
 8018cf6:	2300      	movs	r3, #0
 8018cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8018cfa:	2320      	movs	r3, #32
 8018cfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8018d04:	2330      	movs	r3, #48	; 0x30
 8018d06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018eb0 <_svfiprintf_r+0x1ec>
 8018d0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018d0e:	f04f 0901 	mov.w	r9, #1
 8018d12:	4623      	mov	r3, r4
 8018d14:	469a      	mov	sl, r3
 8018d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d1a:	b10a      	cbz	r2, 8018d20 <_svfiprintf_r+0x5c>
 8018d1c:	2a25      	cmp	r2, #37	; 0x25
 8018d1e:	d1f9      	bne.n	8018d14 <_svfiprintf_r+0x50>
 8018d20:	ebba 0b04 	subs.w	fp, sl, r4
 8018d24:	d00b      	beq.n	8018d3e <_svfiprintf_r+0x7a>
 8018d26:	465b      	mov	r3, fp
 8018d28:	4622      	mov	r2, r4
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	4638      	mov	r0, r7
 8018d2e:	f7ff ff6d 	bl	8018c0c <__ssputs_r>
 8018d32:	3001      	adds	r0, #1
 8018d34:	f000 80aa 	beq.w	8018e8c <_svfiprintf_r+0x1c8>
 8018d38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d3a:	445a      	add	r2, fp
 8018d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8018d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	f000 80a2 	beq.w	8018e8c <_svfiprintf_r+0x1c8>
 8018d48:	2300      	movs	r3, #0
 8018d4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d52:	f10a 0a01 	add.w	sl, sl, #1
 8018d56:	9304      	str	r3, [sp, #16]
 8018d58:	9307      	str	r3, [sp, #28]
 8018d5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d5e:	931a      	str	r3, [sp, #104]	; 0x68
 8018d60:	4654      	mov	r4, sl
 8018d62:	2205      	movs	r2, #5
 8018d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d68:	4851      	ldr	r0, [pc, #324]	; (8018eb0 <_svfiprintf_r+0x1ec>)
 8018d6a:	f7e7 fa49 	bl	8000200 <memchr>
 8018d6e:	9a04      	ldr	r2, [sp, #16]
 8018d70:	b9d8      	cbnz	r0, 8018daa <_svfiprintf_r+0xe6>
 8018d72:	06d0      	lsls	r0, r2, #27
 8018d74:	bf44      	itt	mi
 8018d76:	2320      	movmi	r3, #32
 8018d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d7c:	0711      	lsls	r1, r2, #28
 8018d7e:	bf44      	itt	mi
 8018d80:	232b      	movmi	r3, #43	; 0x2b
 8018d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d86:	f89a 3000 	ldrb.w	r3, [sl]
 8018d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8018d8c:	d015      	beq.n	8018dba <_svfiprintf_r+0xf6>
 8018d8e:	9a07      	ldr	r2, [sp, #28]
 8018d90:	4654      	mov	r4, sl
 8018d92:	2000      	movs	r0, #0
 8018d94:	f04f 0c0a 	mov.w	ip, #10
 8018d98:	4621      	mov	r1, r4
 8018d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d9e:	3b30      	subs	r3, #48	; 0x30
 8018da0:	2b09      	cmp	r3, #9
 8018da2:	d94e      	bls.n	8018e42 <_svfiprintf_r+0x17e>
 8018da4:	b1b0      	cbz	r0, 8018dd4 <_svfiprintf_r+0x110>
 8018da6:	9207      	str	r2, [sp, #28]
 8018da8:	e014      	b.n	8018dd4 <_svfiprintf_r+0x110>
 8018daa:	eba0 0308 	sub.w	r3, r0, r8
 8018dae:	fa09 f303 	lsl.w	r3, r9, r3
 8018db2:	4313      	orrs	r3, r2
 8018db4:	9304      	str	r3, [sp, #16]
 8018db6:	46a2      	mov	sl, r4
 8018db8:	e7d2      	b.n	8018d60 <_svfiprintf_r+0x9c>
 8018dba:	9b03      	ldr	r3, [sp, #12]
 8018dbc:	1d19      	adds	r1, r3, #4
 8018dbe:	681b      	ldr	r3, [r3, #0]
 8018dc0:	9103      	str	r1, [sp, #12]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	bfbb      	ittet	lt
 8018dc6:	425b      	neglt	r3, r3
 8018dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8018dcc:	9307      	strge	r3, [sp, #28]
 8018dce:	9307      	strlt	r3, [sp, #28]
 8018dd0:	bfb8      	it	lt
 8018dd2:	9204      	strlt	r2, [sp, #16]
 8018dd4:	7823      	ldrb	r3, [r4, #0]
 8018dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8018dd8:	d10c      	bne.n	8018df4 <_svfiprintf_r+0x130>
 8018dda:	7863      	ldrb	r3, [r4, #1]
 8018ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8018dde:	d135      	bne.n	8018e4c <_svfiprintf_r+0x188>
 8018de0:	9b03      	ldr	r3, [sp, #12]
 8018de2:	1d1a      	adds	r2, r3, #4
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	9203      	str	r2, [sp, #12]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	bfb8      	it	lt
 8018dec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018df0:	3402      	adds	r4, #2
 8018df2:	9305      	str	r3, [sp, #20]
 8018df4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018ec0 <_svfiprintf_r+0x1fc>
 8018df8:	7821      	ldrb	r1, [r4, #0]
 8018dfa:	2203      	movs	r2, #3
 8018dfc:	4650      	mov	r0, sl
 8018dfe:	f7e7 f9ff 	bl	8000200 <memchr>
 8018e02:	b140      	cbz	r0, 8018e16 <_svfiprintf_r+0x152>
 8018e04:	2340      	movs	r3, #64	; 0x40
 8018e06:	eba0 000a 	sub.w	r0, r0, sl
 8018e0a:	fa03 f000 	lsl.w	r0, r3, r0
 8018e0e:	9b04      	ldr	r3, [sp, #16]
 8018e10:	4303      	orrs	r3, r0
 8018e12:	3401      	adds	r4, #1
 8018e14:	9304      	str	r3, [sp, #16]
 8018e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e1a:	4826      	ldr	r0, [pc, #152]	; (8018eb4 <_svfiprintf_r+0x1f0>)
 8018e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e20:	2206      	movs	r2, #6
 8018e22:	f7e7 f9ed 	bl	8000200 <memchr>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d038      	beq.n	8018e9c <_svfiprintf_r+0x1d8>
 8018e2a:	4b23      	ldr	r3, [pc, #140]	; (8018eb8 <_svfiprintf_r+0x1f4>)
 8018e2c:	bb1b      	cbnz	r3, 8018e76 <_svfiprintf_r+0x1b2>
 8018e2e:	9b03      	ldr	r3, [sp, #12]
 8018e30:	3307      	adds	r3, #7
 8018e32:	f023 0307 	bic.w	r3, r3, #7
 8018e36:	3308      	adds	r3, #8
 8018e38:	9303      	str	r3, [sp, #12]
 8018e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e3c:	4433      	add	r3, r6
 8018e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8018e40:	e767      	b.n	8018d12 <_svfiprintf_r+0x4e>
 8018e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e46:	460c      	mov	r4, r1
 8018e48:	2001      	movs	r0, #1
 8018e4a:	e7a5      	b.n	8018d98 <_svfiprintf_r+0xd4>
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	3401      	adds	r4, #1
 8018e50:	9305      	str	r3, [sp, #20]
 8018e52:	4619      	mov	r1, r3
 8018e54:	f04f 0c0a 	mov.w	ip, #10
 8018e58:	4620      	mov	r0, r4
 8018e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e5e:	3a30      	subs	r2, #48	; 0x30
 8018e60:	2a09      	cmp	r2, #9
 8018e62:	d903      	bls.n	8018e6c <_svfiprintf_r+0x1a8>
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d0c5      	beq.n	8018df4 <_svfiprintf_r+0x130>
 8018e68:	9105      	str	r1, [sp, #20]
 8018e6a:	e7c3      	b.n	8018df4 <_svfiprintf_r+0x130>
 8018e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e70:	4604      	mov	r4, r0
 8018e72:	2301      	movs	r3, #1
 8018e74:	e7f0      	b.n	8018e58 <_svfiprintf_r+0x194>
 8018e76:	ab03      	add	r3, sp, #12
 8018e78:	9300      	str	r3, [sp, #0]
 8018e7a:	462a      	mov	r2, r5
 8018e7c:	4b0f      	ldr	r3, [pc, #60]	; (8018ebc <_svfiprintf_r+0x1f8>)
 8018e7e:	a904      	add	r1, sp, #16
 8018e80:	4638      	mov	r0, r7
 8018e82:	f7fb ff07 	bl	8014c94 <_printf_float>
 8018e86:	1c42      	adds	r2, r0, #1
 8018e88:	4606      	mov	r6, r0
 8018e8a:	d1d6      	bne.n	8018e3a <_svfiprintf_r+0x176>
 8018e8c:	89ab      	ldrh	r3, [r5, #12]
 8018e8e:	065b      	lsls	r3, r3, #25
 8018e90:	f53f af2c 	bmi.w	8018cec <_svfiprintf_r+0x28>
 8018e94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e96:	b01d      	add	sp, #116	; 0x74
 8018e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e9c:	ab03      	add	r3, sp, #12
 8018e9e:	9300      	str	r3, [sp, #0]
 8018ea0:	462a      	mov	r2, r5
 8018ea2:	4b06      	ldr	r3, [pc, #24]	; (8018ebc <_svfiprintf_r+0x1f8>)
 8018ea4:	a904      	add	r1, sp, #16
 8018ea6:	4638      	mov	r0, r7
 8018ea8:	f7fc f998 	bl	80151dc <_printf_i>
 8018eac:	e7eb      	b.n	8018e86 <_svfiprintf_r+0x1c2>
 8018eae:	bf00      	nop
 8018eb0:	0808cb94 	.word	0x0808cb94
 8018eb4:	0808cb9e 	.word	0x0808cb9e
 8018eb8:	08014c95 	.word	0x08014c95
 8018ebc:	08018c0d 	.word	0x08018c0d
 8018ec0:	0808cb9a 	.word	0x0808cb9a

08018ec4 <__sfputc_r>:
 8018ec4:	6893      	ldr	r3, [r2, #8]
 8018ec6:	3b01      	subs	r3, #1
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	b410      	push	{r4}
 8018ecc:	6093      	str	r3, [r2, #8]
 8018ece:	da08      	bge.n	8018ee2 <__sfputc_r+0x1e>
 8018ed0:	6994      	ldr	r4, [r2, #24]
 8018ed2:	42a3      	cmp	r3, r4
 8018ed4:	db01      	blt.n	8018eda <__sfputc_r+0x16>
 8018ed6:	290a      	cmp	r1, #10
 8018ed8:	d103      	bne.n	8018ee2 <__sfputc_r+0x1e>
 8018eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ede:	f7fd bc73 	b.w	80167c8 <__swbuf_r>
 8018ee2:	6813      	ldr	r3, [r2, #0]
 8018ee4:	1c58      	adds	r0, r3, #1
 8018ee6:	6010      	str	r0, [r2, #0]
 8018ee8:	7019      	strb	r1, [r3, #0]
 8018eea:	4608      	mov	r0, r1
 8018eec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ef0:	4770      	bx	lr

08018ef2 <__sfputs_r>:
 8018ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef4:	4606      	mov	r6, r0
 8018ef6:	460f      	mov	r7, r1
 8018ef8:	4614      	mov	r4, r2
 8018efa:	18d5      	adds	r5, r2, r3
 8018efc:	42ac      	cmp	r4, r5
 8018efe:	d101      	bne.n	8018f04 <__sfputs_r+0x12>
 8018f00:	2000      	movs	r0, #0
 8018f02:	e007      	b.n	8018f14 <__sfputs_r+0x22>
 8018f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f08:	463a      	mov	r2, r7
 8018f0a:	4630      	mov	r0, r6
 8018f0c:	f7ff ffda 	bl	8018ec4 <__sfputc_r>
 8018f10:	1c43      	adds	r3, r0, #1
 8018f12:	d1f3      	bne.n	8018efc <__sfputs_r+0xa>
 8018f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018f18 <_vfiprintf_r>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	460d      	mov	r5, r1
 8018f1e:	b09d      	sub	sp, #116	; 0x74
 8018f20:	4614      	mov	r4, r2
 8018f22:	4698      	mov	r8, r3
 8018f24:	4606      	mov	r6, r0
 8018f26:	b118      	cbz	r0, 8018f30 <_vfiprintf_r+0x18>
 8018f28:	6983      	ldr	r3, [r0, #24]
 8018f2a:	b90b      	cbnz	r3, 8018f30 <_vfiprintf_r+0x18>
 8018f2c:	f7fe fcc0 	bl	80178b0 <__sinit>
 8018f30:	4b89      	ldr	r3, [pc, #548]	; (8019158 <_vfiprintf_r+0x240>)
 8018f32:	429d      	cmp	r5, r3
 8018f34:	d11b      	bne.n	8018f6e <_vfiprintf_r+0x56>
 8018f36:	6875      	ldr	r5, [r6, #4]
 8018f38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f3a:	07d9      	lsls	r1, r3, #31
 8018f3c:	d405      	bmi.n	8018f4a <_vfiprintf_r+0x32>
 8018f3e:	89ab      	ldrh	r3, [r5, #12]
 8018f40:	059a      	lsls	r2, r3, #22
 8018f42:	d402      	bmi.n	8018f4a <_vfiprintf_r+0x32>
 8018f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f46:	f7ff f8d6 	bl	80180f6 <__retarget_lock_acquire_recursive>
 8018f4a:	89ab      	ldrh	r3, [r5, #12]
 8018f4c:	071b      	lsls	r3, r3, #28
 8018f4e:	d501      	bpl.n	8018f54 <_vfiprintf_r+0x3c>
 8018f50:	692b      	ldr	r3, [r5, #16]
 8018f52:	b9eb      	cbnz	r3, 8018f90 <_vfiprintf_r+0x78>
 8018f54:	4629      	mov	r1, r5
 8018f56:	4630      	mov	r0, r6
 8018f58:	f7fd fc88 	bl	801686c <__swsetup_r>
 8018f5c:	b1c0      	cbz	r0, 8018f90 <_vfiprintf_r+0x78>
 8018f5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018f60:	07dc      	lsls	r4, r3, #31
 8018f62:	d50e      	bpl.n	8018f82 <_vfiprintf_r+0x6a>
 8018f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f68:	b01d      	add	sp, #116	; 0x74
 8018f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f6e:	4b7b      	ldr	r3, [pc, #492]	; (801915c <_vfiprintf_r+0x244>)
 8018f70:	429d      	cmp	r5, r3
 8018f72:	d101      	bne.n	8018f78 <_vfiprintf_r+0x60>
 8018f74:	68b5      	ldr	r5, [r6, #8]
 8018f76:	e7df      	b.n	8018f38 <_vfiprintf_r+0x20>
 8018f78:	4b79      	ldr	r3, [pc, #484]	; (8019160 <_vfiprintf_r+0x248>)
 8018f7a:	429d      	cmp	r5, r3
 8018f7c:	bf08      	it	eq
 8018f7e:	68f5      	ldreq	r5, [r6, #12]
 8018f80:	e7da      	b.n	8018f38 <_vfiprintf_r+0x20>
 8018f82:	89ab      	ldrh	r3, [r5, #12]
 8018f84:	0598      	lsls	r0, r3, #22
 8018f86:	d4ed      	bmi.n	8018f64 <_vfiprintf_r+0x4c>
 8018f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018f8a:	f7ff f8b5 	bl	80180f8 <__retarget_lock_release_recursive>
 8018f8e:	e7e9      	b.n	8018f64 <_vfiprintf_r+0x4c>
 8018f90:	2300      	movs	r3, #0
 8018f92:	9309      	str	r3, [sp, #36]	; 0x24
 8018f94:	2320      	movs	r3, #32
 8018f96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018f9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018f9e:	2330      	movs	r3, #48	; 0x30
 8018fa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019164 <_vfiprintf_r+0x24c>
 8018fa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018fa8:	f04f 0901 	mov.w	r9, #1
 8018fac:	4623      	mov	r3, r4
 8018fae:	469a      	mov	sl, r3
 8018fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fb4:	b10a      	cbz	r2, 8018fba <_vfiprintf_r+0xa2>
 8018fb6:	2a25      	cmp	r2, #37	; 0x25
 8018fb8:	d1f9      	bne.n	8018fae <_vfiprintf_r+0x96>
 8018fba:	ebba 0b04 	subs.w	fp, sl, r4
 8018fbe:	d00b      	beq.n	8018fd8 <_vfiprintf_r+0xc0>
 8018fc0:	465b      	mov	r3, fp
 8018fc2:	4622      	mov	r2, r4
 8018fc4:	4629      	mov	r1, r5
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f7ff ff93 	bl	8018ef2 <__sfputs_r>
 8018fcc:	3001      	adds	r0, #1
 8018fce:	f000 80aa 	beq.w	8019126 <_vfiprintf_r+0x20e>
 8018fd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018fd4:	445a      	add	r2, fp
 8018fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8018fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	f000 80a2 	beq.w	8019126 <_vfiprintf_r+0x20e>
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018fec:	f10a 0a01 	add.w	sl, sl, #1
 8018ff0:	9304      	str	r3, [sp, #16]
 8018ff2:	9307      	str	r3, [sp, #28]
 8018ff4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ff8:	931a      	str	r3, [sp, #104]	; 0x68
 8018ffa:	4654      	mov	r4, sl
 8018ffc:	2205      	movs	r2, #5
 8018ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019002:	4858      	ldr	r0, [pc, #352]	; (8019164 <_vfiprintf_r+0x24c>)
 8019004:	f7e7 f8fc 	bl	8000200 <memchr>
 8019008:	9a04      	ldr	r2, [sp, #16]
 801900a:	b9d8      	cbnz	r0, 8019044 <_vfiprintf_r+0x12c>
 801900c:	06d1      	lsls	r1, r2, #27
 801900e:	bf44      	itt	mi
 8019010:	2320      	movmi	r3, #32
 8019012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019016:	0713      	lsls	r3, r2, #28
 8019018:	bf44      	itt	mi
 801901a:	232b      	movmi	r3, #43	; 0x2b
 801901c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019020:	f89a 3000 	ldrb.w	r3, [sl]
 8019024:	2b2a      	cmp	r3, #42	; 0x2a
 8019026:	d015      	beq.n	8019054 <_vfiprintf_r+0x13c>
 8019028:	9a07      	ldr	r2, [sp, #28]
 801902a:	4654      	mov	r4, sl
 801902c:	2000      	movs	r0, #0
 801902e:	f04f 0c0a 	mov.w	ip, #10
 8019032:	4621      	mov	r1, r4
 8019034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019038:	3b30      	subs	r3, #48	; 0x30
 801903a:	2b09      	cmp	r3, #9
 801903c:	d94e      	bls.n	80190dc <_vfiprintf_r+0x1c4>
 801903e:	b1b0      	cbz	r0, 801906e <_vfiprintf_r+0x156>
 8019040:	9207      	str	r2, [sp, #28]
 8019042:	e014      	b.n	801906e <_vfiprintf_r+0x156>
 8019044:	eba0 0308 	sub.w	r3, r0, r8
 8019048:	fa09 f303 	lsl.w	r3, r9, r3
 801904c:	4313      	orrs	r3, r2
 801904e:	9304      	str	r3, [sp, #16]
 8019050:	46a2      	mov	sl, r4
 8019052:	e7d2      	b.n	8018ffa <_vfiprintf_r+0xe2>
 8019054:	9b03      	ldr	r3, [sp, #12]
 8019056:	1d19      	adds	r1, r3, #4
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	9103      	str	r1, [sp, #12]
 801905c:	2b00      	cmp	r3, #0
 801905e:	bfbb      	ittet	lt
 8019060:	425b      	neglt	r3, r3
 8019062:	f042 0202 	orrlt.w	r2, r2, #2
 8019066:	9307      	strge	r3, [sp, #28]
 8019068:	9307      	strlt	r3, [sp, #28]
 801906a:	bfb8      	it	lt
 801906c:	9204      	strlt	r2, [sp, #16]
 801906e:	7823      	ldrb	r3, [r4, #0]
 8019070:	2b2e      	cmp	r3, #46	; 0x2e
 8019072:	d10c      	bne.n	801908e <_vfiprintf_r+0x176>
 8019074:	7863      	ldrb	r3, [r4, #1]
 8019076:	2b2a      	cmp	r3, #42	; 0x2a
 8019078:	d135      	bne.n	80190e6 <_vfiprintf_r+0x1ce>
 801907a:	9b03      	ldr	r3, [sp, #12]
 801907c:	1d1a      	adds	r2, r3, #4
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	9203      	str	r2, [sp, #12]
 8019082:	2b00      	cmp	r3, #0
 8019084:	bfb8      	it	lt
 8019086:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801908a:	3402      	adds	r4, #2
 801908c:	9305      	str	r3, [sp, #20]
 801908e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019174 <_vfiprintf_r+0x25c>
 8019092:	7821      	ldrb	r1, [r4, #0]
 8019094:	2203      	movs	r2, #3
 8019096:	4650      	mov	r0, sl
 8019098:	f7e7 f8b2 	bl	8000200 <memchr>
 801909c:	b140      	cbz	r0, 80190b0 <_vfiprintf_r+0x198>
 801909e:	2340      	movs	r3, #64	; 0x40
 80190a0:	eba0 000a 	sub.w	r0, r0, sl
 80190a4:	fa03 f000 	lsl.w	r0, r3, r0
 80190a8:	9b04      	ldr	r3, [sp, #16]
 80190aa:	4303      	orrs	r3, r0
 80190ac:	3401      	adds	r4, #1
 80190ae:	9304      	str	r3, [sp, #16]
 80190b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190b4:	482c      	ldr	r0, [pc, #176]	; (8019168 <_vfiprintf_r+0x250>)
 80190b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80190ba:	2206      	movs	r2, #6
 80190bc:	f7e7 f8a0 	bl	8000200 <memchr>
 80190c0:	2800      	cmp	r0, #0
 80190c2:	d03f      	beq.n	8019144 <_vfiprintf_r+0x22c>
 80190c4:	4b29      	ldr	r3, [pc, #164]	; (801916c <_vfiprintf_r+0x254>)
 80190c6:	bb1b      	cbnz	r3, 8019110 <_vfiprintf_r+0x1f8>
 80190c8:	9b03      	ldr	r3, [sp, #12]
 80190ca:	3307      	adds	r3, #7
 80190cc:	f023 0307 	bic.w	r3, r3, #7
 80190d0:	3308      	adds	r3, #8
 80190d2:	9303      	str	r3, [sp, #12]
 80190d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d6:	443b      	add	r3, r7
 80190d8:	9309      	str	r3, [sp, #36]	; 0x24
 80190da:	e767      	b.n	8018fac <_vfiprintf_r+0x94>
 80190dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80190e0:	460c      	mov	r4, r1
 80190e2:	2001      	movs	r0, #1
 80190e4:	e7a5      	b.n	8019032 <_vfiprintf_r+0x11a>
 80190e6:	2300      	movs	r3, #0
 80190e8:	3401      	adds	r4, #1
 80190ea:	9305      	str	r3, [sp, #20]
 80190ec:	4619      	mov	r1, r3
 80190ee:	f04f 0c0a 	mov.w	ip, #10
 80190f2:	4620      	mov	r0, r4
 80190f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190f8:	3a30      	subs	r2, #48	; 0x30
 80190fa:	2a09      	cmp	r2, #9
 80190fc:	d903      	bls.n	8019106 <_vfiprintf_r+0x1ee>
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d0c5      	beq.n	801908e <_vfiprintf_r+0x176>
 8019102:	9105      	str	r1, [sp, #20]
 8019104:	e7c3      	b.n	801908e <_vfiprintf_r+0x176>
 8019106:	fb0c 2101 	mla	r1, ip, r1, r2
 801910a:	4604      	mov	r4, r0
 801910c:	2301      	movs	r3, #1
 801910e:	e7f0      	b.n	80190f2 <_vfiprintf_r+0x1da>
 8019110:	ab03      	add	r3, sp, #12
 8019112:	9300      	str	r3, [sp, #0]
 8019114:	462a      	mov	r2, r5
 8019116:	4b16      	ldr	r3, [pc, #88]	; (8019170 <_vfiprintf_r+0x258>)
 8019118:	a904      	add	r1, sp, #16
 801911a:	4630      	mov	r0, r6
 801911c:	f7fb fdba 	bl	8014c94 <_printf_float>
 8019120:	4607      	mov	r7, r0
 8019122:	1c78      	adds	r0, r7, #1
 8019124:	d1d6      	bne.n	80190d4 <_vfiprintf_r+0x1bc>
 8019126:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019128:	07d9      	lsls	r1, r3, #31
 801912a:	d405      	bmi.n	8019138 <_vfiprintf_r+0x220>
 801912c:	89ab      	ldrh	r3, [r5, #12]
 801912e:	059a      	lsls	r2, r3, #22
 8019130:	d402      	bmi.n	8019138 <_vfiprintf_r+0x220>
 8019132:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019134:	f7fe ffe0 	bl	80180f8 <__retarget_lock_release_recursive>
 8019138:	89ab      	ldrh	r3, [r5, #12]
 801913a:	065b      	lsls	r3, r3, #25
 801913c:	f53f af12 	bmi.w	8018f64 <_vfiprintf_r+0x4c>
 8019140:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019142:	e711      	b.n	8018f68 <_vfiprintf_r+0x50>
 8019144:	ab03      	add	r3, sp, #12
 8019146:	9300      	str	r3, [sp, #0]
 8019148:	462a      	mov	r2, r5
 801914a:	4b09      	ldr	r3, [pc, #36]	; (8019170 <_vfiprintf_r+0x258>)
 801914c:	a904      	add	r1, sp, #16
 801914e:	4630      	mov	r0, r6
 8019150:	f7fc f844 	bl	80151dc <_printf_i>
 8019154:	e7e4      	b.n	8019120 <_vfiprintf_r+0x208>
 8019156:	bf00      	nop
 8019158:	0808c97c 	.word	0x0808c97c
 801915c:	0808c99c 	.word	0x0808c99c
 8019160:	0808c95c 	.word	0x0808c95c
 8019164:	0808cb94 	.word	0x0808cb94
 8019168:	0808cb9e 	.word	0x0808cb9e
 801916c:	08014c95 	.word	0x08014c95
 8019170:	08018ef3 	.word	0x08018ef3
 8019174:	0808cb9a 	.word	0x0808cb9a

08019178 <nan>:
 8019178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019180 <nan+0x8>
 801917c:	4770      	bx	lr
 801917e:	bf00      	nop
 8019180:	00000000 	.word	0x00000000
 8019184:	7ff80000 	.word	0x7ff80000

08019188 <__sread>:
 8019188:	b510      	push	{r4, lr}
 801918a:	460c      	mov	r4, r1
 801918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019190:	f000 f8de 	bl	8019350 <_read_r>
 8019194:	2800      	cmp	r0, #0
 8019196:	bfab      	itete	ge
 8019198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801919a:	89a3      	ldrhlt	r3, [r4, #12]
 801919c:	181b      	addge	r3, r3, r0
 801919e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80191a2:	bfac      	ite	ge
 80191a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80191a6:	81a3      	strhlt	r3, [r4, #12]
 80191a8:	bd10      	pop	{r4, pc}

080191aa <__swrite>:
 80191aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191ae:	461f      	mov	r7, r3
 80191b0:	898b      	ldrh	r3, [r1, #12]
 80191b2:	05db      	lsls	r3, r3, #23
 80191b4:	4605      	mov	r5, r0
 80191b6:	460c      	mov	r4, r1
 80191b8:	4616      	mov	r6, r2
 80191ba:	d505      	bpl.n	80191c8 <__swrite+0x1e>
 80191bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191c0:	2302      	movs	r3, #2
 80191c2:	2200      	movs	r2, #0
 80191c4:	f000 f890 	bl	80192e8 <_lseek_r>
 80191c8:	89a3      	ldrh	r3, [r4, #12]
 80191ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80191ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80191d2:	81a3      	strh	r3, [r4, #12]
 80191d4:	4632      	mov	r2, r6
 80191d6:	463b      	mov	r3, r7
 80191d8:	4628      	mov	r0, r5
 80191da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191de:	f000 b837 	b.w	8019250 <_write_r>

080191e2 <__sseek>:
 80191e2:	b510      	push	{r4, lr}
 80191e4:	460c      	mov	r4, r1
 80191e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191ea:	f000 f87d 	bl	80192e8 <_lseek_r>
 80191ee:	1c43      	adds	r3, r0, #1
 80191f0:	89a3      	ldrh	r3, [r4, #12]
 80191f2:	bf15      	itete	ne
 80191f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80191f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80191fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80191fe:	81a3      	strheq	r3, [r4, #12]
 8019200:	bf18      	it	ne
 8019202:	81a3      	strhne	r3, [r4, #12]
 8019204:	bd10      	pop	{r4, pc}

08019206 <__sclose>:
 8019206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801920a:	f000 b83b 	b.w	8019284 <_close_r>

0801920e <strncmp>:
 801920e:	b510      	push	{r4, lr}
 8019210:	b17a      	cbz	r2, 8019232 <strncmp+0x24>
 8019212:	4603      	mov	r3, r0
 8019214:	3901      	subs	r1, #1
 8019216:	1884      	adds	r4, r0, r2
 8019218:	f813 0b01 	ldrb.w	r0, [r3], #1
 801921c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019220:	4290      	cmp	r0, r2
 8019222:	d101      	bne.n	8019228 <strncmp+0x1a>
 8019224:	42a3      	cmp	r3, r4
 8019226:	d101      	bne.n	801922c <strncmp+0x1e>
 8019228:	1a80      	subs	r0, r0, r2
 801922a:	bd10      	pop	{r4, pc}
 801922c:	2800      	cmp	r0, #0
 801922e:	d1f3      	bne.n	8019218 <strncmp+0xa>
 8019230:	e7fa      	b.n	8019228 <strncmp+0x1a>
 8019232:	4610      	mov	r0, r2
 8019234:	e7f9      	b.n	801922a <strncmp+0x1c>

08019236 <__ascii_wctomb>:
 8019236:	b149      	cbz	r1, 801924c <__ascii_wctomb+0x16>
 8019238:	2aff      	cmp	r2, #255	; 0xff
 801923a:	bf85      	ittet	hi
 801923c:	238a      	movhi	r3, #138	; 0x8a
 801923e:	6003      	strhi	r3, [r0, #0]
 8019240:	700a      	strbls	r2, [r1, #0]
 8019242:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019246:	bf98      	it	ls
 8019248:	2001      	movls	r0, #1
 801924a:	4770      	bx	lr
 801924c:	4608      	mov	r0, r1
 801924e:	4770      	bx	lr

08019250 <_write_r>:
 8019250:	b538      	push	{r3, r4, r5, lr}
 8019252:	4d07      	ldr	r5, [pc, #28]	; (8019270 <_write_r+0x20>)
 8019254:	4604      	mov	r4, r0
 8019256:	4608      	mov	r0, r1
 8019258:	4611      	mov	r1, r2
 801925a:	2200      	movs	r2, #0
 801925c:	602a      	str	r2, [r5, #0]
 801925e:	461a      	mov	r2, r3
 8019260:	f7e9 fc2a 	bl	8002ab8 <_write>
 8019264:	1c43      	adds	r3, r0, #1
 8019266:	d102      	bne.n	801926e <_write_r+0x1e>
 8019268:	682b      	ldr	r3, [r5, #0]
 801926a:	b103      	cbz	r3, 801926e <_write_r+0x1e>
 801926c:	6023      	str	r3, [r4, #0]
 801926e:	bd38      	pop	{r3, r4, r5, pc}
 8019270:	20001914 	.word	0x20001914

08019274 <abort>:
 8019274:	b508      	push	{r3, lr}
 8019276:	2006      	movs	r0, #6
 8019278:	f000 f8a4 	bl	80193c4 <raise>
 801927c:	2001      	movs	r0, #1
 801927e:	f7e9 fb02 	bl	8002886 <_exit>
	...

08019284 <_close_r>:
 8019284:	b538      	push	{r3, r4, r5, lr}
 8019286:	4d06      	ldr	r5, [pc, #24]	; (80192a0 <_close_r+0x1c>)
 8019288:	2300      	movs	r3, #0
 801928a:	4604      	mov	r4, r0
 801928c:	4608      	mov	r0, r1
 801928e:	602b      	str	r3, [r5, #0]
 8019290:	f7e9 fb20 	bl	80028d4 <_close>
 8019294:	1c43      	adds	r3, r0, #1
 8019296:	d102      	bne.n	801929e <_close_r+0x1a>
 8019298:	682b      	ldr	r3, [r5, #0]
 801929a:	b103      	cbz	r3, 801929e <_close_r+0x1a>
 801929c:	6023      	str	r3, [r4, #0]
 801929e:	bd38      	pop	{r3, r4, r5, pc}
 80192a0:	20001914 	.word	0x20001914

080192a4 <_fstat_r>:
 80192a4:	b538      	push	{r3, r4, r5, lr}
 80192a6:	4d07      	ldr	r5, [pc, #28]	; (80192c4 <_fstat_r+0x20>)
 80192a8:	2300      	movs	r3, #0
 80192aa:	4604      	mov	r4, r0
 80192ac:	4608      	mov	r0, r1
 80192ae:	4611      	mov	r1, r2
 80192b0:	602b      	str	r3, [r5, #0]
 80192b2:	f7e9 fb1b 	bl	80028ec <_fstat>
 80192b6:	1c43      	adds	r3, r0, #1
 80192b8:	d102      	bne.n	80192c0 <_fstat_r+0x1c>
 80192ba:	682b      	ldr	r3, [r5, #0]
 80192bc:	b103      	cbz	r3, 80192c0 <_fstat_r+0x1c>
 80192be:	6023      	str	r3, [r4, #0]
 80192c0:	bd38      	pop	{r3, r4, r5, pc}
 80192c2:	bf00      	nop
 80192c4:	20001914 	.word	0x20001914

080192c8 <_isatty_r>:
 80192c8:	b538      	push	{r3, r4, r5, lr}
 80192ca:	4d06      	ldr	r5, [pc, #24]	; (80192e4 <_isatty_r+0x1c>)
 80192cc:	2300      	movs	r3, #0
 80192ce:	4604      	mov	r4, r0
 80192d0:	4608      	mov	r0, r1
 80192d2:	602b      	str	r3, [r5, #0]
 80192d4:	f7e9 fb1a 	bl	800290c <_isatty>
 80192d8:	1c43      	adds	r3, r0, #1
 80192da:	d102      	bne.n	80192e2 <_isatty_r+0x1a>
 80192dc:	682b      	ldr	r3, [r5, #0]
 80192de:	b103      	cbz	r3, 80192e2 <_isatty_r+0x1a>
 80192e0:	6023      	str	r3, [r4, #0]
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	20001914 	.word	0x20001914

080192e8 <_lseek_r>:
 80192e8:	b538      	push	{r3, r4, r5, lr}
 80192ea:	4d07      	ldr	r5, [pc, #28]	; (8019308 <_lseek_r+0x20>)
 80192ec:	4604      	mov	r4, r0
 80192ee:	4608      	mov	r0, r1
 80192f0:	4611      	mov	r1, r2
 80192f2:	2200      	movs	r2, #0
 80192f4:	602a      	str	r2, [r5, #0]
 80192f6:	461a      	mov	r2, r3
 80192f8:	f7e9 fb13 	bl	8002922 <_lseek>
 80192fc:	1c43      	adds	r3, r0, #1
 80192fe:	d102      	bne.n	8019306 <_lseek_r+0x1e>
 8019300:	682b      	ldr	r3, [r5, #0]
 8019302:	b103      	cbz	r3, 8019306 <_lseek_r+0x1e>
 8019304:	6023      	str	r3, [r4, #0]
 8019306:	bd38      	pop	{r3, r4, r5, pc}
 8019308:	20001914 	.word	0x20001914

0801930c <memmove>:
 801930c:	4288      	cmp	r0, r1
 801930e:	b510      	push	{r4, lr}
 8019310:	eb01 0402 	add.w	r4, r1, r2
 8019314:	d902      	bls.n	801931c <memmove+0x10>
 8019316:	4284      	cmp	r4, r0
 8019318:	4623      	mov	r3, r4
 801931a:	d807      	bhi.n	801932c <memmove+0x20>
 801931c:	1e43      	subs	r3, r0, #1
 801931e:	42a1      	cmp	r1, r4
 8019320:	d008      	beq.n	8019334 <memmove+0x28>
 8019322:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019326:	f803 2f01 	strb.w	r2, [r3, #1]!
 801932a:	e7f8      	b.n	801931e <memmove+0x12>
 801932c:	4402      	add	r2, r0
 801932e:	4601      	mov	r1, r0
 8019330:	428a      	cmp	r2, r1
 8019332:	d100      	bne.n	8019336 <memmove+0x2a>
 8019334:	bd10      	pop	{r4, pc}
 8019336:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801933a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801933e:	e7f7      	b.n	8019330 <memmove+0x24>

08019340 <_malloc_usable_size_r>:
 8019340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019344:	1f18      	subs	r0, r3, #4
 8019346:	2b00      	cmp	r3, #0
 8019348:	bfbc      	itt	lt
 801934a:	580b      	ldrlt	r3, [r1, r0]
 801934c:	18c0      	addlt	r0, r0, r3
 801934e:	4770      	bx	lr

08019350 <_read_r>:
 8019350:	b538      	push	{r3, r4, r5, lr}
 8019352:	4d07      	ldr	r5, [pc, #28]	; (8019370 <_read_r+0x20>)
 8019354:	4604      	mov	r4, r0
 8019356:	4608      	mov	r0, r1
 8019358:	4611      	mov	r1, r2
 801935a:	2200      	movs	r2, #0
 801935c:	602a      	str	r2, [r5, #0]
 801935e:	461a      	mov	r2, r3
 8019360:	f7e9 fa9b 	bl	800289a <_read>
 8019364:	1c43      	adds	r3, r0, #1
 8019366:	d102      	bne.n	801936e <_read_r+0x1e>
 8019368:	682b      	ldr	r3, [r5, #0]
 801936a:	b103      	cbz	r3, 801936e <_read_r+0x1e>
 801936c:	6023      	str	r3, [r4, #0]
 801936e:	bd38      	pop	{r3, r4, r5, pc}
 8019370:	20001914 	.word	0x20001914

08019374 <_raise_r>:
 8019374:	291f      	cmp	r1, #31
 8019376:	b538      	push	{r3, r4, r5, lr}
 8019378:	4604      	mov	r4, r0
 801937a:	460d      	mov	r5, r1
 801937c:	d904      	bls.n	8019388 <_raise_r+0x14>
 801937e:	2316      	movs	r3, #22
 8019380:	6003      	str	r3, [r0, #0]
 8019382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019386:	bd38      	pop	{r3, r4, r5, pc}
 8019388:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801938a:	b112      	cbz	r2, 8019392 <_raise_r+0x1e>
 801938c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019390:	b94b      	cbnz	r3, 80193a6 <_raise_r+0x32>
 8019392:	4620      	mov	r0, r4
 8019394:	f000 f830 	bl	80193f8 <_getpid_r>
 8019398:	462a      	mov	r2, r5
 801939a:	4601      	mov	r1, r0
 801939c:	4620      	mov	r0, r4
 801939e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193a2:	f000 b817 	b.w	80193d4 <_kill_r>
 80193a6:	2b01      	cmp	r3, #1
 80193a8:	d00a      	beq.n	80193c0 <_raise_r+0x4c>
 80193aa:	1c59      	adds	r1, r3, #1
 80193ac:	d103      	bne.n	80193b6 <_raise_r+0x42>
 80193ae:	2316      	movs	r3, #22
 80193b0:	6003      	str	r3, [r0, #0]
 80193b2:	2001      	movs	r0, #1
 80193b4:	e7e7      	b.n	8019386 <_raise_r+0x12>
 80193b6:	2400      	movs	r4, #0
 80193b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80193bc:	4628      	mov	r0, r5
 80193be:	4798      	blx	r3
 80193c0:	2000      	movs	r0, #0
 80193c2:	e7e0      	b.n	8019386 <_raise_r+0x12>

080193c4 <raise>:
 80193c4:	4b02      	ldr	r3, [pc, #8]	; (80193d0 <raise+0xc>)
 80193c6:	4601      	mov	r1, r0
 80193c8:	6818      	ldr	r0, [r3, #0]
 80193ca:	f7ff bfd3 	b.w	8019374 <_raise_r>
 80193ce:	bf00      	nop
 80193d0:	200006dc 	.word	0x200006dc

080193d4 <_kill_r>:
 80193d4:	b538      	push	{r3, r4, r5, lr}
 80193d6:	4d07      	ldr	r5, [pc, #28]	; (80193f4 <_kill_r+0x20>)
 80193d8:	2300      	movs	r3, #0
 80193da:	4604      	mov	r4, r0
 80193dc:	4608      	mov	r0, r1
 80193de:	4611      	mov	r1, r2
 80193e0:	602b      	str	r3, [r5, #0]
 80193e2:	f7e9 fa40 	bl	8002866 <_kill>
 80193e6:	1c43      	adds	r3, r0, #1
 80193e8:	d102      	bne.n	80193f0 <_kill_r+0x1c>
 80193ea:	682b      	ldr	r3, [r5, #0]
 80193ec:	b103      	cbz	r3, 80193f0 <_kill_r+0x1c>
 80193ee:	6023      	str	r3, [r4, #0]
 80193f0:	bd38      	pop	{r3, r4, r5, pc}
 80193f2:	bf00      	nop
 80193f4:	20001914 	.word	0x20001914

080193f8 <_getpid_r>:
 80193f8:	f7e9 ba2d 	b.w	8002856 <_getpid>

080193fc <expf>:
 80193fc:	b508      	push	{r3, lr}
 80193fe:	ed2d 8b02 	vpush	{d8}
 8019402:	eef0 8a40 	vmov.f32	s17, s0
 8019406:	f000 f82f 	bl	8019468 <__ieee754_expf>
 801940a:	eeb0 8a40 	vmov.f32	s16, s0
 801940e:	eeb0 0a68 	vmov.f32	s0, s17
 8019412:	f000 f919 	bl	8019648 <finitef>
 8019416:	b160      	cbz	r0, 8019432 <expf+0x36>
 8019418:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8019458 <expf+0x5c>
 801941c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019424:	dd0a      	ble.n	801943c <expf+0x40>
 8019426:	f7fb fa65 	bl	80148f4 <__errno>
 801942a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 801945c <expf+0x60>
 801942e:	2322      	movs	r3, #34	; 0x22
 8019430:	6003      	str	r3, [r0, #0]
 8019432:	eeb0 0a48 	vmov.f32	s0, s16
 8019436:	ecbd 8b02 	vpop	{d8}
 801943a:	bd08      	pop	{r3, pc}
 801943c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019460 <expf+0x64>
 8019440:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019448:	d5f3      	bpl.n	8019432 <expf+0x36>
 801944a:	f7fb fa53 	bl	80148f4 <__errno>
 801944e:	2322      	movs	r3, #34	; 0x22
 8019450:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8019464 <expf+0x68>
 8019454:	6003      	str	r3, [r0, #0]
 8019456:	e7ec      	b.n	8019432 <expf+0x36>
 8019458:	42b17180 	.word	0x42b17180
 801945c:	7f800000 	.word	0x7f800000
 8019460:	c2cff1b5 	.word	0xc2cff1b5
 8019464:	00000000 	.word	0x00000000

08019468 <__ieee754_expf>:
 8019468:	ee10 2a10 	vmov	r2, s0
 801946c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019470:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019474:	d902      	bls.n	801947c <__ieee754_expf+0x14>
 8019476:	ee30 0a00 	vadd.f32	s0, s0, s0
 801947a:	4770      	bx	lr
 801947c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019480:	d106      	bne.n	8019490 <__ieee754_expf+0x28>
 8019482:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80195bc <__ieee754_expf+0x154>
 8019486:	2b00      	cmp	r3, #0
 8019488:	bf18      	it	ne
 801948a:	eeb0 0a67 	vmovne.f32	s0, s15
 801948e:	4770      	bx	lr
 8019490:	484b      	ldr	r0, [pc, #300]	; (80195c0 <__ieee754_expf+0x158>)
 8019492:	4282      	cmp	r2, r0
 8019494:	dd02      	ble.n	801949c <__ieee754_expf+0x34>
 8019496:	2000      	movs	r0, #0
 8019498:	f000 b8d0 	b.w	801963c <__math_oflowf>
 801949c:	2a00      	cmp	r2, #0
 801949e:	da05      	bge.n	80194ac <__ieee754_expf+0x44>
 80194a0:	4a48      	ldr	r2, [pc, #288]	; (80195c4 <__ieee754_expf+0x15c>)
 80194a2:	4291      	cmp	r1, r2
 80194a4:	d902      	bls.n	80194ac <__ieee754_expf+0x44>
 80194a6:	2000      	movs	r0, #0
 80194a8:	f000 b8c2 	b.w	8019630 <__math_uflowf>
 80194ac:	4a46      	ldr	r2, [pc, #280]	; (80195c8 <__ieee754_expf+0x160>)
 80194ae:	4291      	cmp	r1, r2
 80194b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80194b4:	d952      	bls.n	801955c <__ieee754_expf+0xf4>
 80194b6:	4a45      	ldr	r2, [pc, #276]	; (80195cc <__ieee754_expf+0x164>)
 80194b8:	4291      	cmp	r1, r2
 80194ba:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80194be:	d834      	bhi.n	801952a <__ieee754_expf+0xc2>
 80194c0:	4943      	ldr	r1, [pc, #268]	; (80195d0 <__ieee754_expf+0x168>)
 80194c2:	4411      	add	r1, r2
 80194c4:	ed91 7a00 	vldr	s14, [r1]
 80194c8:	4942      	ldr	r1, [pc, #264]	; (80195d4 <__ieee754_expf+0x16c>)
 80194ca:	440a      	add	r2, r1
 80194cc:	edd2 7a00 	vldr	s15, [r2]
 80194d0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80194d4:	f1c3 0201 	rsb	r2, r3, #1
 80194d8:	1ad2      	subs	r2, r2, r3
 80194da:	ee37 0a67 	vsub.f32	s0, s14, s15
 80194de:	ee20 6a00 	vmul.f32	s12, s0, s0
 80194e2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80195d8 <__ieee754_expf+0x170>
 80194e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80195dc <__ieee754_expf+0x174>
 80194ea:	eee6 6a05 	vfma.f32	s13, s12, s10
 80194ee:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80195e0 <__ieee754_expf+0x178>
 80194f2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80194f6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80195e4 <__ieee754_expf+0x17c>
 80194fa:	eee5 6a06 	vfma.f32	s13, s10, s12
 80194fe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80195e8 <__ieee754_expf+0x180>
 8019502:	eea6 5a86 	vfma.f32	s10, s13, s12
 8019506:	eef0 6a40 	vmov.f32	s13, s0
 801950a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801950e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8019512:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019516:	bb92      	cbnz	r2, 801957e <__ieee754_expf+0x116>
 8019518:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801951c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019520:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019524:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019528:	4770      	bx	lr
 801952a:	4b30      	ldr	r3, [pc, #192]	; (80195ec <__ieee754_expf+0x184>)
 801952c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80195f0 <__ieee754_expf+0x188>
 8019530:	eddf 6a30 	vldr	s13, [pc, #192]	; 80195f4 <__ieee754_expf+0x18c>
 8019534:	4413      	add	r3, r2
 8019536:	edd3 7a00 	vldr	s15, [r3]
 801953a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801953e:	eeb0 7a40 	vmov.f32	s14, s0
 8019542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019546:	ee17 2a90 	vmov	r2, s15
 801954a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801954e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8019552:	eddf 6a29 	vldr	s13, [pc, #164]	; 80195f8 <__ieee754_expf+0x190>
 8019556:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801955a:	e7be      	b.n	80194da <__ieee754_expf+0x72>
 801955c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8019560:	d20b      	bcs.n	801957a <__ieee754_expf+0x112>
 8019562:	eddf 6a26 	vldr	s13, [pc, #152]	; 80195fc <__ieee754_expf+0x194>
 8019566:	ee70 6a26 	vadd.f32	s13, s0, s13
 801956a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801956e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019572:	dd02      	ble.n	801957a <__ieee754_expf+0x112>
 8019574:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019578:	4770      	bx	lr
 801957a:	2200      	movs	r2, #0
 801957c:	e7af      	b.n	80194de <__ieee754_expf+0x76>
 801957e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8019582:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019586:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801958a:	bfb8      	it	lt
 801958c:	3264      	addlt	r2, #100	; 0x64
 801958e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019592:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019596:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801959a:	ee17 3a90 	vmov	r3, s15
 801959e:	bfab      	itete	ge
 80195a0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80195a4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80195a8:	ee00 3a10 	vmovge	s0, r3
 80195ac:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019600 <__ieee754_expf+0x198>
 80195b0:	bfbc      	itt	lt
 80195b2:	ee00 3a10 	vmovlt	s0, r3
 80195b6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80195ba:	4770      	bx	lr
 80195bc:	00000000 	.word	0x00000000
 80195c0:	42b17217 	.word	0x42b17217
 80195c4:	42cff1b5 	.word	0x42cff1b5
 80195c8:	3eb17218 	.word	0x3eb17218
 80195cc:	3f851591 	.word	0x3f851591
 80195d0:	0808cbb0 	.word	0x0808cbb0
 80195d4:	0808cbb8 	.word	0x0808cbb8
 80195d8:	3331bb4c 	.word	0x3331bb4c
 80195dc:	b5ddea0e 	.word	0xb5ddea0e
 80195e0:	388ab355 	.word	0x388ab355
 80195e4:	bb360b61 	.word	0xbb360b61
 80195e8:	3e2aaaab 	.word	0x3e2aaaab
 80195ec:	0808cba8 	.word	0x0808cba8
 80195f0:	3fb8aa3b 	.word	0x3fb8aa3b
 80195f4:	3f317180 	.word	0x3f317180
 80195f8:	3717f7d1 	.word	0x3717f7d1
 80195fc:	7149f2ca 	.word	0x7149f2ca
 8019600:	0d800000 	.word	0x0d800000

08019604 <with_errnof>:
 8019604:	b513      	push	{r0, r1, r4, lr}
 8019606:	4604      	mov	r4, r0
 8019608:	ed8d 0a01 	vstr	s0, [sp, #4]
 801960c:	f7fb f972 	bl	80148f4 <__errno>
 8019610:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019614:	6004      	str	r4, [r0, #0]
 8019616:	b002      	add	sp, #8
 8019618:	bd10      	pop	{r4, pc}

0801961a <xflowf>:
 801961a:	b130      	cbz	r0, 801962a <xflowf+0x10>
 801961c:	eef1 7a40 	vneg.f32	s15, s0
 8019620:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019624:	2022      	movs	r0, #34	; 0x22
 8019626:	f7ff bfed 	b.w	8019604 <with_errnof>
 801962a:	eef0 7a40 	vmov.f32	s15, s0
 801962e:	e7f7      	b.n	8019620 <xflowf+0x6>

08019630 <__math_uflowf>:
 8019630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019638 <__math_uflowf+0x8>
 8019634:	f7ff bff1 	b.w	801961a <xflowf>
 8019638:	10000000 	.word	0x10000000

0801963c <__math_oflowf>:
 801963c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019644 <__math_oflowf+0x8>
 8019640:	f7ff bfeb 	b.w	801961a <xflowf>
 8019644:	70000000 	.word	0x70000000

08019648 <finitef>:
 8019648:	b082      	sub	sp, #8
 801964a:	ed8d 0a01 	vstr	s0, [sp, #4]
 801964e:	9801      	ldr	r0, [sp, #4]
 8019650:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019654:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019658:	bfac      	ite	ge
 801965a:	2000      	movge	r0, #0
 801965c:	2001      	movlt	r0, #1
 801965e:	b002      	add	sp, #8
 8019660:	4770      	bx	lr
	...

08019664 <_init>:
 8019664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019666:	bf00      	nop
 8019668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801966a:	bc08      	pop	{r3}
 801966c:	469e      	mov	lr, r3
 801966e:	4770      	bx	lr

08019670 <_fini>:
 8019670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019672:	bf00      	nop
 8019674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019676:	bc08      	pop	{r3}
 8019678:	469e      	mov	lr, r3
 801967a:	4770      	bx	lr
