
STM32_microbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019214  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012920  080193c8  080193c8  000293c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bce8  0802bce8  00050a80  2**0
                  CONTENTS
  4 .ARM          00000008  0802bce8  0802bce8  0003bce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bcf0  0802bcf0  00050a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bcf0  0802bcf0  0003bcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bcf4  0802bcf4  0003bcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000268  10000000  0802bcf8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000a80  20000000  0802bf60  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001088  20000a80  0802c9e0  00050a80  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001b08  0802c9e0  00051b08  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050a80  2**0
                  CONTENTS, READONLY
 13 .debug_info   000317fa  00000000  00000000  00050ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007612  00000000  00000000  000822aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025c0  00000000  00000000  000898c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002240  00000000  00000000  0008be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031598  00000000  00000000  0008e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033b51  00000000  00000000  000bf658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb5fd  00000000  00000000  000f31a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cb  00000000  00000000  001ee7a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b268  00000000  00000000  001ee874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a80 	.word	0x20000a80
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080193ac 	.word	0x080193ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000a84 	.word	0x20000a84
 80001ec:	080193ac 	.word	0x080193ac

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_CRC_Init+0x20>)
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <MX_CRC_Init+0x24>)
 8001020:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_CRC_Init+0x20>)
 8001024:	f003 f94e 	bl	80042c4 <HAL_CRC_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800102e:	f001 fa73 	bl	8002518 <Error_Handler>
  }

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000a9c 	.word	0x20000a9c
 800103c:	40023000 	.word	0x40023000

08001040 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <HAL_CRC_MspInit+0x3c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_CRC_MspInit+0x40>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a09      	ldr	r2, [pc, #36]	; (8001080 <HAL_CRC_MspInit+0x40>)
 800105c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <HAL_CRC_MspInit+0x40>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023000 	.word	0x40023000
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_DMA2D_MspInit+0x48>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d115      	bne.n	80010c2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 80010a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_DMA2D_MspInit+0x4c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2105      	movs	r1, #5
 80010b6:	205a      	movs	r0, #90	; 0x5a
 80010b8:	f003 f8da 	bl	8004270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010bc:	205a      	movs	r0, #90	; 0x5a
 80010be:	f003 f8f3 	bl	80042a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	4002b000 	.word	0x4002b000
 80010d0:	40023800 	.word	0x40023800

080010d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	; 0x38
 80010d8:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
 80010ee:	4b84      	ldr	r3, [pc, #528]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a83      	ldr	r2, [pc, #524]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b81      	ldr	r3, [pc, #516]	; (8001300 <MX_GPIO_Init+0x22c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	623b      	str	r3, [r7, #32]
 8001104:	6a3b      	ldr	r3, [r7, #32]
__HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <MX_GPIO_Init+0x22c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a7c      	ldr	r2, [pc, #496]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b7a      	ldr	r3, [pc, #488]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
__HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a75      	ldr	r2, [pc, #468]	; (8001300 <MX_GPIO_Init+0x22c>)
 800112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b73      	ldr	r3, [pc, #460]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	61bb      	str	r3, [r7, #24]
 800113c:	69bb      	ldr	r3, [r7, #24]
__HAL_RCC_GPIOA_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b6c      	ldr	r3, [pc, #432]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	697b      	ldr	r3, [r7, #20]
__HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b68      	ldr	r3, [pc, #416]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a67      	ldr	r2, [pc, #412]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b65      	ldr	r3, [pc, #404]	; (8001300 <MX_GPIO_Init+0x22c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
__HAL_RCC_GPIOG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b61      	ldr	r3, [pc, #388]	; (8001300 <MX_GPIO_Init+0x22c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a60      	ldr	r2, [pc, #384]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b5a      	ldr	r3, [pc, #360]	; (8001300 <MX_GPIO_Init+0x22c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a59      	ldr	r2, [pc, #356]	; (8001300 <MX_GPIO_Init+0x22c>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b57      	ldr	r3, [pc, #348]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b53      	ldr	r3, [pc, #332]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a52      	ldr	r2, [pc, #328]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b50      	ldr	r3, [pc, #320]	; (8001300 <MX_GPIO_Init+0x22c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2116      	movs	r1, #22
 80011ce:	484d      	ldr	r0, [pc, #308]	; (8001304 <MX_GPIO_Init+0x230>)
 80011d0:	f004 f8a6 	bl	8005320 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	484b      	ldr	r0, [pc, #300]	; (8001308 <MX_GPIO_Init+0x234>)
 80011da:	f004 f8a1 	bl	8005320 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011e4:	4849      	ldr	r0, [pc, #292]	; (800130c <MX_GPIO_Init+0x238>)
 80011e6:	f004 f89b 	bl	8005320 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011f0:	4847      	ldr	r0, [pc, #284]	; (8001310 <MX_GPIO_Init+0x23c>)
 80011f2:	f004 f895 	bl	8005320 <HAL_GPIO_WritePin>

/*Configure GPIO pins : PCPin PCPin PCPin */
GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80011f6:	2316      	movs	r3, #22
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	483d      	ldr	r0, [pc, #244]	; (8001304 <MX_GPIO_Init+0x230>)
 800120e:	f003 fdcf 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pins : PAPin PAPin PAPin PAPin */
GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001212:	f248 0307 	movw	r3, #32775	; 0x8007
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001218:	4b3e      	ldr	r3, [pc, #248]	; (8001314 <MX_GPIO_Init+0x240>)
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	4838      	ldr	r0, [pc, #224]	; (8001308 <MX_GPIO_Init+0x234>)
 8001228:	f003 fdc2 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = ACP_RST_Pin;
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001230:	2301      	movs	r3, #1
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	4619      	mov	r1, r3
 8001242:	4831      	ldr	r0, [pc, #196]	; (8001308 <MX_GPIO_Init+0x234>)
 8001244:	f003 fdb4 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001248:	2320      	movs	r3, #32
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800124c:	4b31      	ldr	r3, [pc, #196]	; (8001314 <MX_GPIO_Init+0x240>)
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	482a      	ldr	r0, [pc, #168]	; (8001304 <MX_GPIO_Init+0x230>)
 800125c:	f003 fda8 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = BOOT1_Pin;
 8001260:	2304      	movs	r3, #4
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	4829      	ldr	r0, [pc, #164]	; (8001318 <MX_GPIO_Init+0x244>)
 8001274:	f003 fd9c 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pin : PtPin */
GPIO_InitStruct.Pin = TE_Pin;
 8001278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127e:	2300      	movs	r3, #0
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	481f      	ldr	r0, [pc, #124]	; (800130c <MX_GPIO_Init+0x238>)
 800128e:	f003 fd8f 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pins : PDPin PDPin */
GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001292:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4818      	ldr	r0, [pc, #96]	; (800130c <MX_GPIO_Init+0x238>)
 80012ac:	f003 fd80 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pins : PGPin PGPin */
GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80012b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_GPIO_Init+0x23c>)
 80012ca:	f003 fd71 	bl	8004db0 <HAL_GPIO_Init>

/*Configure GPIO pin : PA0 */
GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d2:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_GPIO_Init+0x248>)
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <MX_GPIO_Init+0x234>)
 80012e2:	f003 fd65 	bl	8004db0 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	2006      	movs	r0, #6
 80012ec:	f002 ffc0 	bl	8004270 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012f0:	2006      	movs	r0, #6
 80012f2:	f002 ffd9 	bl	80042a8 <HAL_NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3738      	adds	r7, #56	; 0x38
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40020800 	.word	0x40020800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021800 	.word	0x40021800
 8001314:	10120000 	.word	0x10120000
 8001318:	40020400 	.word	0x40020400
 800131c:	10110000 	.word	0x10110000

08001320 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <MX_I2C3_Init+0x74>)
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <MX_I2C3_Init+0x78>)
 8001328:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_I2C3_Init+0x74>)
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <MX_I2C3_Init+0x7c>)
 800132e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_I2C3_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_I2C3_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_I2C3_Init+0x74>)
 800133e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001342:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_I2C3_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C3_Init+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_I2C3_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C3_Init+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_I2C3_Init+0x74>)
 800135e:	f005 fd0f 	bl	8006d80 <HAL_I2C_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001368:	f001 f8d6 	bl	8002518 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800136c:	2100      	movs	r1, #0
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <MX_I2C3_Init+0x74>)
 8001370:	f005 fe4a 	bl	8007008 <HAL_I2CEx_ConfigAnalogFilter>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800137a:	f001 f8cd 	bl	8002518 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800137e:	2100      	movs	r1, #0
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_I2C3_Init+0x74>)
 8001382:	f005 fe7d 	bl	8007080 <HAL_I2CEx_ConfigDigitalFilter>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800138c:	f001 f8c4 	bl	8002518 <Error_Handler>
  }

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000ae4 	.word	0x20000ae4
 8001398:	40005c00 	.word	0x40005c00
 800139c:	000186a0 	.word	0x000186a0

080013a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a29      	ldr	r2, [pc, #164]	; (8001464 <HAL_I2C_MspInit+0xc4>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d14b      	bne.n	800145a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b25      	ldr	r3, [pc, #148]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a20      	ldr	r2, [pc, #128]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800140c:	2304      	movs	r3, #4
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4815      	ldr	r0, [pc, #84]	; (800146c <HAL_I2C_MspInit+0xcc>)
 8001418:	f003 fcca 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800142e:	2304      	movs	r3, #4
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480d      	ldr	r0, [pc, #52]	; (8001470 <HAL_I2C_MspInit+0xd0>)
 800143a:	f003 fcb9 	bl	8004db0 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_I2C_MspInit+0xc8>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005c00 	.word	0x40005c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08e      	sub	sp, #56	; 0x38
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7b      	ldr	r2, [pc, #492]	; (8001680 <HAL_LTDC_MspInit+0x20c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	f040 80f0 	bne.w	8001678 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
 800149c:	4b79      	ldr	r3, [pc, #484]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	4a78      	ldr	r2, [pc, #480]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a6:	6453      	str	r3, [r2, #68]	; 0x44
 80014a8:	4b76      	ldr	r3, [pc, #472]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014be:	f043 0320 	orr.w	r3, r3, #32
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	6313      	str	r3, [r2, #48]	; 0x30
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	4b64      	ldr	r3, [pc, #400]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a63      	ldr	r2, [pc, #396]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b61      	ldr	r3, [pc, #388]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b56      	ldr	r3, [pc, #344]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a55      	ldr	r2, [pc, #340]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	4b4f      	ldr	r3, [pc, #316]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	4a4e      	ldr	r2, [pc, #312]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6313      	str	r3, [r2, #48]	; 0x30
 8001550:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_LTDC_MspInit+0x210>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800155c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800156e:	230e      	movs	r3, #14
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4843      	ldr	r0, [pc, #268]	; (8001688 <HAL_LTDC_MspInit+0x214>)
 800157a:	f003 fc19 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800157e:	f641 0358 	movw	r3, #6232	; 0x1858
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001590:	230e      	movs	r3, #14
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <HAL_LTDC_MspInit+0x218>)
 800159c:	f003 fc08 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015a0:	2303      	movs	r3, #3
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015b0:	2309      	movs	r3, #9
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4835      	ldr	r0, [pc, #212]	; (8001690 <HAL_LTDC_MspInit+0x21c>)
 80015bc:	f003 fbf8 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80015c0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015d2:	230e      	movs	r3, #14
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	482c      	ldr	r0, [pc, #176]	; (8001690 <HAL_LTDC_MspInit+0x21c>)
 80015de:	f003 fbe7 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80015e2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015f4:	230e      	movs	r3, #14
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <HAL_LTDC_MspInit+0x220>)
 8001600:	f003 fbd6 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001604:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001612:	2300      	movs	r3, #0
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001616:	230e      	movs	r3, #14
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161e:	4619      	mov	r1, r3
 8001620:	481d      	ldr	r0, [pc, #116]	; (8001698 <HAL_LTDC_MspInit+0x224>)
 8001622:	f003 fbc5 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001626:	2348      	movs	r3, #72	; 0x48
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001636:	230e      	movs	r3, #14
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4816      	ldr	r0, [pc, #88]	; (800169c <HAL_LTDC_MspInit+0x228>)
 8001642:	f003 fbb5 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001658:	2309      	movs	r3, #9
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <HAL_LTDC_MspInit+0x220>)
 8001664:	f003 fba4 	bl	8004db0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2105      	movs	r1, #5
 800166c:	2058      	movs	r0, #88	; 0x58
 800166e:	f002 fdff 	bl	8004270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001672:	2058      	movs	r0, #88	; 0x58
 8001674:	f002 fe18 	bl	80042a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	3738      	adds	r7, #56	; 0x38
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40016800 	.word	0x40016800
 8001684:	40023800 	.word	0x40023800
 8001688:	40021400 	.word	0x40021400
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40021800 	.word	0x40021800
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00

080016a0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	f5ad 4d21 	sub.w	sp, sp, #41216	; 0xa100
 80016a6:	b0b2      	sub	sp, #200	; 0xc8
 80016a8:	af00      	add	r7, sp, #0
  FIL file;
  UINT br;
  uint32_t Tinf1;
  uint32_t Tinf2;
  uint32_t nn_inference_time;
  uint32_t tot_inference_time = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80016b0:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 80016b4:	6013      	str	r3, [r2, #0]
  // Specify classes
  const char* classes_folders[] = {"false", "true"};
 80016b6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80016ba:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 80016be:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 80016c2:	4abe      	ldr	r2, [pc, #760]	; (80019bc <main+0x31c>)
 80016c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c8:	e883 0003 	stmia.w	r3, {r0, r1}
  char* csv_line[SERIES_LENGTH + 2];
  char* X_test_str[SERIES_LENGTH * CHANNELS];
  double X_test[SERIES_LENGTH * CHANNELS];
  float y_prob[2];
  int y_pred;
  int y_true = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80016d2:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 80016d6:	6013      	str	r3, [r2, #0]
  int sample = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80016de:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80016e2:	6013      	str	r3, [r2, #0]
  int tn = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80016ea:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80016ee:	6013      	str	r3, [r2, #0]
  int fp = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80016f6:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 80016fa:	6013      	str	r3, [r2, #0]
  int fn = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001702:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8001706:	6013      	str	r3, [r2, #0]
  int tp = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800170e:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001712:	6013      	str	r3, [r2, #0]
  int done = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800171a:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 800171e:	6013      	str	r3, [r2, #0]
  // Buffers used to store input and output tensors
  AI_ALIGNED(4) ai_i8 in_data[AI_NETWORK_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_NETWORK_OUT_1_SIZE_BYTES];

  // Pointer to the model
  ai_handle network = AI_HANDLE_NULL;
 8001720:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001724:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

  // Initialize wrapper structs that hold pointers to data and info about the data (tensor height, width, channels)
  ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800172c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001730:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001734:	4aa2      	ldr	r2, [pc, #648]	; (80019c0 <main+0x320>)
 8001736:	461c      	mov	r4, r3
 8001738:	4615      	mov	r5, r2
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001742:	e884 0003 	stmia.w	r4, {r0, r1}
  ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8001746:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800174a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800174e:	4a9d      	ldr	r2, [pc, #628]	; (80019c4 <main+0x324>)
 8001750:	461c      	mov	r4, r3
 8001752:	4615      	mov	r5, r2
 8001754:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001758:	e895 0003 	ldmia.w	r5, {r0, r1}
 800175c:	e884 0003 	stmia.w	r4, {r0, r1}

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
 8001760:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001764:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001768:	4a97      	ldr	r2, [pc, #604]	; (80019c8 <main+0x328>)
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001770:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001774:	2201      	movs	r2, #1
 8001776:	809a      	strh	r2, [r3, #4]
 8001778:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800177c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001780:	2201      	movs	r2, #1
 8001782:	80da      	strh	r2, [r3, #6]
 8001784:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001788:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800178c:	2201      	movs	r2, #1
 800178e:	811a      	strh	r2, [r3, #8]
 8001790:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001794:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001798:	f24f 52bc 	movw	r2, #62908	; 0xf5bc
 800179c:	60da      	str	r2, [r3, #12]
		  AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800179e:	f010 fd49 	bl	8012234 <ai_network_data_weights_get>
 80017a2:	4602      	mov	r2, r0
  ai_network_params ai_params = {
 80017a4:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017a8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017b2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017b6:	2200      	movs	r2, #0
 80017b8:	615a      	str	r2, [r3, #20]
 80017ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017c2:	4a82      	ldr	r2, [pc, #520]	; (80019cc <main+0x32c>)
 80017c4:	619a      	str	r2, [r3, #24]
 80017c6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017ca:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017ce:	2201      	movs	r2, #1
 80017d0:	839a      	strh	r2, [r3, #28]
 80017d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017da:	2201      	movs	r2, #1
 80017dc:	83da      	strh	r2, [r3, #30]
 80017de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017e2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017e6:	2201      	movs	r2, #1
 80017e8:	841a      	strh	r2, [r3, #32]
 80017ea:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80017f2:	f243 5220 	movw	r2, #13600	; 0x3520
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
 80017f8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80017fc:	f5a3 72e2 	sub.w	r2, r3, #452	; 0x1c4
 8001800:	f607 63c8 	addw	r3, r7, #3784	; 0xec8
 8001804:	3b48      	subs	r3, #72	; 0x48
 8001806:	6293      	str	r3, [r2, #40]	; 0x28
 8001808:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800180c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
		  AI_NETWORK_DATA_ACTIVATIONS(activations)
  };

  // Set pointers wrapper structs to data buffers
  ai_input[0].n_batches = 1;
 8001814:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001818:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800181c:	2201      	movs	r2, #1
 800181e:	809a      	strh	r2, [r3, #4]
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001820:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001824:	f5a3 72be 	sub.w	r2, r3, #380	; 0x17c
 8001828:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800182c:	3b58      	subs	r3, #88	; 0x58
 800182e:	6113      	str	r3, [r2, #16]
  ai_output[0].n_batches = 1;
 8001830:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001834:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001838:	2201      	movs	r2, #1
 800183a:	809a      	strh	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800183c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001840:	f5a3 72ca 	sub.w	r2, r3, #404	; 0x194
 8001844:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001848:	3b60      	subs	r3, #96	; 0x60
 800184a:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800184c:	f002 fbf2 	bl	8004034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001850:	f000 fda8 	bl	80023a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001854:	f7ff fc3e 	bl	80010d4 <MX_GPIO_Init>
  MX_CRC_Init();
 8001858:	f7ff fbde 	bl	8001018 <MX_CRC_Init>
  MX_SPI5_Init();
 800185c:	f000 fe64 	bl	8002528 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001860:	f001 f8aa 	bl	80029b8 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8001864:	f010 f80a 	bl	801187c <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001868:	f009 fd6e 	bl	800b348 <MX_FATFS_Init>
  MX_I2C3_Init();
 800186c:	f7ff fd58 	bl	8001320 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  // Start
  sprintf(buf, "LCD config");
 8001870:	4957      	ldr	r1, [pc, #348]	; (80019d0 <main+0x330>)
 8001872:	4858      	ldr	r0, [pc, #352]	; (80019d4 <main+0x334>)
 8001874:	f013 ff16 	bl	80156a4 <siprintf>
  LCD_Config();
 8001878:	f000 fe16 	bl	80024a8 <LCD_Config>
  sprintf(buf, "LCD config OK");
 800187c:	4956      	ldr	r1, [pc, #344]	; (80019d8 <main+0x338>)
 800187e:	4855      	ldr	r0, [pc, #340]	; (80019d4 <main+0x334>)
 8001880:	f013 ff10 	bl	80156a4 <siprintf>
  BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"STM32F429I-DISC1");
 8001884:	4955      	ldr	r1, [pc, #340]	; (80019dc <main+0x33c>)
 8001886:	2000      	movs	r0, #0
 8001888:	f001 ff9a 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(1,(uint8_t*)"Microbox");
 800188c:	4954      	ldr	r1, [pc, #336]	; (80019e0 <main+0x340>)
 800188e:	2001      	movs	r0, #1
 8001890:	f001 ff96 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(2,(uint8_t*)"From USB Flash Disk");
 8001894:	4953      	ldr	r1, [pc, #332]	; (80019e4 <main+0x344>)
 8001896:	2002      	movs	r0, #2
 8001898:	f001 ff92 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
  HAL_Delay(2000);
 800189c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018a0:	f002 fc0a 	bl	80040b8 <HAL_Delay>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80018a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018a8:	f001 fdfc 	bl	80034a4 <BSP_LCD_Clear>

  // Create instance of neural network
  ai_err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80018ac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018b0:	3b64      	subs	r3, #100	; 0x64
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f010 fc57 	bl	8012168 <ai_network_create>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80018c0:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80018c4:	6013      	str	r3, [r2, #0]
  if (ai_err.type != AI_ERROR_NONE)
 80018c6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80018ca:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <main+0x23e>
  {
	  sprintf(buf, "Error: could not create NN instance");
 80018d4:	4944      	ldr	r1, [pc, #272]	; (80019e8 <main+0x348>)
 80018d6:	483f      	ldr	r0, [pc, #252]	; (80019d4 <main+0x334>)
 80018d8:	f013 fee4 	bl	80156a4 <siprintf>
	  while(1);
 80018dc:	e7fe      	b.n	80018dc <main+0x23c>
  }

  // Initialize neural network
  if (!ai_network_init(network, &ai_params))
 80018de:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80018e2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018ec:	3bc4      	subs	r3, #196	; 0xc4
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f010 fc4f 	bl	8012194 <ai_network_init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f083 0301 	eor.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <main+0x26c>
  {
	  sprintf(buf, "Error: could not initialize NN");
 8001902:	493a      	ldr	r1, [pc, #232]	; (80019ec <main+0x34c>)
 8001904:	4833      	ldr	r0, [pc, #204]	; (80019d4 <main+0x334>)
 8001906:	f013 fecd 	bl	80156a4 <siprintf>
	  while(1);
 800190a:	e7fe      	b.n	800190a <main+0x26a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
	MX_USB_HOST_Process();
 800190c:	f00f ffdc 	bl	80118c8 <MX_USB_HOST_Process>

	/* USER CODE BEGIN 3 */
	// Handler of application state
	switch(Appli_state){
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <main+0x350>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b03      	cmp	r3, #3
 8001916:	f000 84d6 	beq.w	80022c6 <main+0xc26>
 800191a:	2b03      	cmp	r3, #3
 800191c:	f300 8528 	bgt.w	8002370 <main+0xcd0>
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 84c7 	beq.w	80022b4 <main+0xc14>
 8001926:	2b02      	cmp	r3, #2
 8001928:	f040 8522 	bne.w	8002370 <main+0xcd0>
		case APPLICATION_READY:
			sprintf(buf, "READY");
 800192c:	4931      	ldr	r1, [pc, #196]	; (80019f4 <main+0x354>)
 800192e:	4829      	ldr	r0, [pc, #164]	; (80019d4 <main+0x334>)
 8001930:	f013 feb8 	bl	80156a4 <siprintf>

			// Fill input buffer if there are still series to classify
			if (y_true<2)
 8001934:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001938:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	f300 83c4 	bgt.w	80020cc <main+0xa2c>
			{
				sprintf(buf, "Test: %d/%d    ", sample, N_SAMPLES);
 8001944:	f240 1381 	movw	r3, #385	; 0x181
 8001948:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800194c:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	4929      	ldr	r1, [pc, #164]	; (80019f8 <main+0x358>)
 8001954:	481f      	ldr	r0, [pc, #124]	; (80019d4 <main+0x334>)
 8001956:	f013 fea5 	bl	80156a4 <siprintf>
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)buf);
 800195a:	491e      	ldr	r1, [pc, #120]	; (80019d4 <main+0x334>)
 800195c:	2000      	movs	r0, #0
 800195e:	f001 ff2f 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
        // For all the folders
				for (int folders=0;folders<2;folders++)
 8001962:	2300      	movs	r3, #0
 8001964:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001968:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e38e      	b.n	800208e <main+0x9ee>
				{
					sprintf(folder,"/microbox/%s", classes_folders[folders]);
 8001970:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001974:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001978:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 800197c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001980:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001984:	6812      	ldr	r2, [r2, #0]
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	461a      	mov	r2, r3
 800198c:	491b      	ldr	r1, [pc, #108]	; (80019fc <main+0x35c>)
 800198e:	481c      	ldr	r0, [pc, #112]	; (8001a00 <main+0x360>)
 8001990:	f013 fe88 	bl	80156a4 <siprintf>
          // If folder found, check for file, open it, read it, and close it
					if (f_chdir(folder)==FR_OK)
 8001994:	481a      	ldr	r0, [pc, #104]	; (8001a00 <main+0x360>)
 8001996:	f00f fce8 	bl	801136a <f_chdir>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 8360 	bne.w	8002062 <main+0x9c2>
					{
						res = f_findfirst(&dir, &fno, "","*.csv");
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <main+0x364>)
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <main+0x368>)
 80019a6:	4919      	ldr	r1, [pc, #100]	; (8001a0c <main+0x36c>)
 80019a8:	4819      	ldr	r0, [pc, #100]	; (8001a10 <main+0x370>)
 80019aa:	f00f fe26 	bl	80115fa <f_findfirst>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80019b4:	f102 02c7 	add.w	r2, r2, #199	; 0xc7
 80019b8:	7013      	strb	r3, [r2, #0]
						while ((res == FR_OK) && (fno.fname[0]))
 80019ba:	e339      	b.n	8002030 <main+0x990>
 80019bc:	080195ec 	.word	0x080195ec
 80019c0:	080195f4 	.word	0x080195f4
 80019c4:	0801960c 	.word	0x0801960c
 80019c8:	40040440 	.word	0x40040440
 80019cc:	00040440 	.word	0x00040440
 80019d0:	080193d8 	.word	0x080193d8
 80019d4:	1000015c 	.word	0x1000015c
 80019d8:	080193e4 	.word	0x080193e4
 80019dc:	080193f4 	.word	0x080193f4
 80019e0:	08019408 	.word	0x08019408
 80019e4:	08019414 	.word	0x08019414
 80019e8:	08019428 	.word	0x08019428
 80019ec:	0801944c 	.word	0x0801944c
 80019f0:	20001764 	.word	0x20001764
 80019f4:	0801946c 	.word	0x0801946c
 80019f8:	08019474 	.word	0x08019474
 80019fc:	08019484 	.word	0x08019484
 8001a00:	10000150 	.word	0x10000150
 8001a04:	08019494 	.word	0x08019494
 8001a08:	0801949c 	.word	0x0801949c
 8001a0c:	10000038 	.word	0x10000038
 8001a10:	10000000 	.word	0x10000000
						{
							sprintf(buf, "Open file %s", fno.fname);
 8001a14:	4acd      	ldr	r2, [pc, #820]	; (8001d4c <main+0x6ac>)
 8001a16:	49ce      	ldr	r1, [pc, #824]	; (8001d50 <main+0x6b0>)
 8001a18:	48ce      	ldr	r0, [pc, #824]	; (8001d54 <main+0x6b4>)
 8001a1a:	f013 fe43 	bl	80156a4 <siprintf>
							if (f_open(&file, fno.fname, FA_READ) != FR_OK)
 8001a1e:	f507 431f 	add.w	r3, r7, #40704	; 0x9f00
 8001a22:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001a26:	2201      	movs	r2, #1
 8001a28:	49c8      	ldr	r1, [pc, #800]	; (8001d4c <main+0x6ac>)
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00f f8f8 	bl	8010c20 <f_open>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <main+0x39e>
							{
								sprintf(buf, "Open file error");
 8001a36:	49c8      	ldr	r1, [pc, #800]	; (8001d58 <main+0x6b8>)
 8001a38:	48c6      	ldr	r0, [pc, #792]	; (8001d54 <main+0x6b4>)
 8001a3a:	f013 fe33 	bl	80156a4 <siprintf>
							}
							f_read(&file, &csv_full, BTR, &br);
 8001a3e:	f507 431f 	add.w	r3, r7, #40704	; 0x9f00
 8001a42:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001a46:	f507 41e5 	add.w	r1, r7, #29312	; 0x7280
 8001a4a:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8001a4e:	3934      	subs	r1, #52	; 0x34
 8001a50:	f507 401f 	add.w	r0, r7, #40704	; 0x9f00
 8001a54:	f100 0038 	add.w	r0, r0, #56	; 0x38
 8001a58:	f642 4296 	movw	r2, #11414	; 0x2c96
 8001a5c:	f00f fa9e 	bl	8010f9c <f_read>
							if (br!=BTR)
 8001a60:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001a64:	f103 03c8 	add.w	r3, r3, #200	; 0xc8
 8001a68:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f642 4296 	movw	r2, #11414	; 0x2c96
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d003      	beq.n	8001a7e <main+0x3de>
							{
								sprintf(buf, "Read file error");
 8001a76:	49b9      	ldr	r1, [pc, #740]	; (8001d5c <main+0x6bc>)
 8001a78:	48b6      	ldr	r0, [pc, #728]	; (8001d54 <main+0x6b4>)
 8001a7a:	f013 fe13 	bl	80156a4 <siprintf>
							}
							f_close (&file);
 8001a7e:	f507 431f 	add.w	r3, r7, #40704	; 0x9f00
 8001a82:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001a86:	4618      	mov	r0, r3
 8001a88:	f00f fc45 	bl	8011316 <f_close>
              // Divide the file read into tokens, first lines, then values
							int j = 0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001a92:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001a96:	6013      	str	r3, [r2, #0]
							char* token = strtok(csv_full, "\r\n");
 8001a98:	f507 43e5 	add.w	r3, r7, #29312	; 0x7280
 8001a9c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001aa0:	3b34      	subs	r3, #52	; 0x34
 8001aa2:	49af      	ldr	r1, [pc, #700]	; (8001d60 <main+0x6c0>)
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f014 fc53 	bl	8016350 <strtok>
 8001aaa:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001aae:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001ab2:	6018      	str	r0, [r3, #0]
							while( token != NULL )
 8001ab4:	e025      	b.n	8001b02 <main+0x462>
							{
								csv_line[j]=token;
 8001ab6:	f507 43e3 	add.w	r3, r7, #29056	; 0x7180
 8001aba:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001abe:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001ac2:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001ac6:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8001ad0:	f101 0194 	add.w	r1, r1, #148	; 0x94
 8001ad4:	6809      	ldr	r1, [r1, #0]
 8001ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
								j ++;
 8001ada:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ade:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001aea:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001aee:	6013      	str	r3, [r2, #0]
								token = strtok(NULL, "\r\n");
 8001af0:	499b      	ldr	r1, [pc, #620]	; (8001d60 <main+0x6c0>)
 8001af2:	2000      	movs	r0, #0
 8001af4:	f014 fc2c 	bl	8016350 <strtok>
 8001af8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001afc:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001b00:	6018      	str	r0, [r3, #0]
							while( token != NULL )
 8001b02:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001b06:	f103 0394 	add.w	r3, r3, #148	; 0x94
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1d2      	bne.n	8001ab6 <main+0x416>
							}
							int k = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001b16:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001b1a:	6013      	str	r3, [r2, #0]
							for (int i = 1;i<SERIES_LENGTH + 1;i++)
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001b22:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e04e      	b.n	8001bc8 <main+0x528>
							{
								char* token2 = strtok(csv_line[i], ",");
 8001b2a:	f507 43e3 	add.w	r3, r7, #29056	; 0x7180
 8001b2e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001b32:	f5a3 737b 	sub.w	r3, r3, #1004	; 0x3ec
 8001b36:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001b3a:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	4987      	ldr	r1, [pc, #540]	; (8001d64 <main+0x6c4>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f014 fc02 	bl	8016350 <strtok>
 8001b4c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001b50:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001b54:	6018      	str	r0, [r3, #0]
								while( token2 != NULL )
 8001b56:	e025      	b.n	8001ba4 <main+0x504>
								{
									X_test_str[k]=token2;
 8001b58:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8001b5c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b64:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001b68:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	f507 4121 	add.w	r1, r7, #41216	; 0xa100
 8001b72:	f101 0188 	add.w	r1, r1, #136	; 0x88
 8001b76:	6809      	ldr	r1, [r1, #0]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									k ++;
 8001b7c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001b80:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	3301      	adds	r3, #1
 8001b88:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001b8c:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001b90:	6013      	str	r3, [r2, #0]
									token2 = strtok(NULL, ",");
 8001b92:	4974      	ldr	r1, [pc, #464]	; (8001d64 <main+0x6c4>)
 8001b94:	2000      	movs	r0, #0
 8001b96:	f014 fbdb 	bl	8016350 <strtok>
 8001b9a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001b9e:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001ba2:	6018      	str	r0, [r3, #0]
								while( token2 != NULL )
 8001ba4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ba8:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1d2      	bne.n	8001b58 <main+0x4b8>
							for (int i = 1;i<SERIES_LENGTH + 1;i++)
 8001bb2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001bb6:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001bc2:	f102 028c 	add.w	r2, r2, #140	; 0x8c
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001bcc:	f103 038c 	add.w	r3, r3, #140	; 0x8c
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bd6:	dda8      	ble.n	8001b2a <main+0x48a>
								}
							}
              // Convert values to double
							for (int i = 0;i<SERIES_LENGTH*CHANNELS;i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001bde:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e02e      	b.n	8001c44 <main+0x5a4>
							{
								X_test[i] = strtod(X_test_str[i], NULL);
 8001be6:	f507 43c3 	add.w	r3, r7, #24960	; 0x6180
 8001bea:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001bee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf2:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001bf6:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f014 fb98 	bl	8016338 <strtod>
 8001c08:	eeb0 7a40 	vmov.f32	s14, s0
 8001c0c:	eef0 7a60 	vmov.f32	s15, s1
 8001c10:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001c14:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001c18:	f5a3 6262 	sub.w	r2, r3, #3616	; 0xe20
 8001c1c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001c20:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	ed83 7b00 	vstr	d7, [r3]
							for (int i = 0;i<SERIES_LENGTH*CHANNELS;i++)
 8001c2e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001c32:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001c3e:	f102 0284 	add.w	r2, r2, #132	; 0x84
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001c48:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001c52:	dbc8      	blt.n	8001be6 <main+0x546>
							}
              // Fill input buffer for neural network
							for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001c5a:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e027      	b.n	8001cb2 <main+0x612>
							{
								((ai_float *)in_data)[i] = (ai_float)X_test[i];
 8001c62:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001c66:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001c6a:	f5a3 6262 	sub.w	r2, r3, #3616	; 0xe20
 8001c6e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001c72:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c80:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001c84:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	009a      	lsls	r2, r3, #2
 8001c8c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c90:	3b58      	subs	r3, #88	; 0x58
 8001c92:	189c      	adds	r4, r3, r2
 8001c94:	f7fe ffb8 	bl	8000c08 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	6023      	str	r3, [r4, #0]
							for (uint32_t i = 0; i < AI_NETWORK_IN_1_SIZE; i++)
 8001c9c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ca0:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001cac:	f102 0280 	add.w	r2, r2, #128	; 0x80
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001cb6:	f103 0380 	add.w	r3, r3, #128	; 0x80
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001cc0:	d3cf      	bcc.n	8001c62 <main+0x5c2>
							}

							// Perform inference
							Tinf1 = HAL_GetTick();
 8001cc2:	f002 f9ed 	bl	80040a0 <HAL_GetTick>
 8001cc6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001cca:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001cce:	6018      	str	r0, [r3, #0]
							nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8001cd0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001cd4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001cde:	3a94      	subs	r2, #148	; 0x94
 8001ce0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ce4:	3b7c      	subs	r3, #124	; 0x7c
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f010 fa93 	bl	8012212 <ai_network_run>
 8001cec:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001cf0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001cf4:	6018      	str	r0, [r3, #0]
							if (nbatch != 1)
 8001cf6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001cfa:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d003      	beq.n	8001d0c <main+0x66c>
							{
								sprintf(buf, "Error: could not run inference");
 8001d04:	4918      	ldr	r1, [pc, #96]	; (8001d68 <main+0x6c8>)
 8001d06:	4813      	ldr	r0, [pc, #76]	; (8001d54 <main+0x6b4>)
 8001d08:	f013 fccc 	bl	80156a4 <siprintf>
							}
							Tinf2 = HAL_GetTick();
 8001d0c:	f002 f9c8 	bl	80040a0 <HAL_GetTick>
 8001d10:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d14:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d18:	6018      	str	r0, [r3, #0]
              // Compute inference time
							nn_inference_time = ((Tinf2>Tinf1)?(Tinf2-Tinf1):((1<<24)-Tinf1+Tinf2));
 8001d1a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d1e:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d28:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d91c      	bls.n	8001d6c <main+0x6cc>
 8001d32:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d36:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d40:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	e01d      	b.n	8001d86 <main+0x6e6>
 8001d4a:	bf00      	nop
 8001d4c:	1000004e 	.word	0x1000004e
 8001d50:	080194a0 	.word	0x080194a0
 8001d54:	1000015c 	.word	0x1000015c
 8001d58:	080194b0 	.word	0x080194b0
 8001d5c:	080194c0 	.word	0x080194c0
 8001d60:	080194d0 	.word	0x080194d0
 8001d64:	080194d4 	.word	0x080194d4
 8001d68:	080194d8 	.word	0x080194d8
 8001d6c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d70:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d7a:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001d86:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001d8a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001d8e:	6013      	str	r3, [r2, #0]
							tot_inference_time = tot_inference_time + nn_inference_time;
 8001d90:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d94:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001d9e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001daa:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
 8001dae:	6013      	str	r3, [r2, #0]

							// Read output of neural network
							y_prob[0] = ((float *)out_data)[0];
 8001db0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001db4:	3b60      	subs	r3, #96	; 0x60
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001dbc:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001dc0:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001dc4:	601a      	str	r2, [r3, #0]
							y_prob[1] = ((float *)out_data)[1];
 8001dc6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001dca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001dd4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001dd8:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001ddc:	605a      	str	r2, [r3, #4]

							// Make prediction
							if (y_prob[0] > y_prob[1])
 8001dde:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001de2:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001de6:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	f507 43a3 	add.w	r3, r7, #20864	; 0x5180
 8001df2:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001df6:	f6a3 6328 	subw	r3, r3, #3624	; 0xe28
 8001dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e06:	dd06      	ble.n	8001e16 <main+0x776>
							{
								y_pred = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001e0e:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	e005      	b.n	8001e22 <main+0x782>
							}
							else
							{
								y_pred = 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001e1c:	f102 02bc 	add.w	r2, r2, #188	; 0xbc
 8001e20:	6013      	str	r3, [r2, #0]
							}

							// Count tn, fp, fn, tp
							if ((y_pred == y_true) && (y_true == 0))
 8001e22:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e26:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e30:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d112      	bne.n	8001e60 <main+0x7c0>
 8001e3a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e3e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <main+0x7c0>
							{
								tn ++;
 8001e48:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e4c:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001e58:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	e048      	b.n	8001ef2 <main+0x852>
							}
							else if ((y_pred == y_true) && (y_true == 1))
 8001e60:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e64:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e6e:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d112      	bne.n	8001e9e <main+0x7fe>
 8001e78:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e7c:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d10b      	bne.n	8001e9e <main+0x7fe>
							{
								tp ++;
 8001e86:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001e8a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001e96:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e029      	b.n	8001ef2 <main+0x852>
							}
							else if ((y_pred != y_true) && (y_true == 0))
 8001e9e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ea2:	f103 03bc 	add.w	r3, r3, #188	; 0xbc
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001eac:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d012      	beq.n	8001edc <main+0x83c>
 8001eb6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001eba:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <main+0x83c>
							{
								fp ++;
 8001ec4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ec8:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001ed4:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e00a      	b.n	8001ef2 <main+0x852>
							}
							else
							{
								fn ++;
 8001edc:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ee0:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001eec:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8001ef0:	6013      	str	r3, [r2, #0]
							}

							// Print metrics and inference time (milliseconds)
							sample ++;
 8001ef2:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001ef6:	f103 03b4 	add.w	r3, r3, #180	; 0xb4
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001f02:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001f06:	6013      	str	r3, [r2, #0]
							sprintf(buf, "Test: %d/%d    ", sample, N_SAMPLES);
 8001f08:	f240 1381 	movw	r3, #385	; 0x181
 8001f0c:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8001f10:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	4962      	ldr	r1, [pc, #392]	; (80020a0 <main+0xa00>)
 8001f18:	4862      	ldr	r0, [pc, #392]	; (80020a4 <main+0xa04>)
 8001f1a:	f013 fbc3 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(0,(uint8_t*)buf);
 8001f1e:	4961      	ldr	r1, [pc, #388]	; (80020a4 <main+0xa04>)
 8001f20:	2000      	movs	r0, #0
 8001f22:	f001 fc4d 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "Accuracy: %f", (float)(tn + tp)/(float)(tn + tp + fn + fp));
 8001f26:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f2a:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f34:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f44:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f48:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f52:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	441a      	add	r2, r3
 8001f5a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f5e:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	441a      	add	r2, r3
 8001f66:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f6a:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4413      	add	r3, r2
 8001f72:	ee07 3a90 	vmov	s15, r3
 8001f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f7e:	ee16 0a90 	vmov	r0, s13
 8001f82:	f7fe faf1 	bl	8000568 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4947      	ldr	r1, [pc, #284]	; (80020a8 <main+0xa08>)
 8001f8c:	4845      	ldr	r0, [pc, #276]	; (80020a4 <main+0xa04>)
 8001f8e:	f013 fb89 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(2,(uint8_t*)buf);
 8001f92:	4944      	ldr	r1, [pc, #272]	; (80020a4 <main+0xa04>)
 8001f94:	2002      	movs	r0, #2
 8001f96:	f001 fc13 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "Inf. time: %ldms", nn_inference_time);
 8001f9a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001f9e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4941      	ldr	r1, [pc, #260]	; (80020ac <main+0xa0c>)
 8001fa6:	483f      	ldr	r0, [pc, #252]	; (80020a4 <main+0xa04>)
 8001fa8:	f013 fb7c 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buf);
 8001fac:	493d      	ldr	r1, [pc, #244]	; (80020a4 <main+0xa04>)
 8001fae:	2004      	movs	r0, #4
 8001fb0:	f001 fc06 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "True negatives: %d", tn);
 8001fb4:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001fb8:	f103 03b0 	add.w	r3, r3, #176	; 0xb0
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	493c      	ldr	r1, [pc, #240]	; (80020b0 <main+0xa10>)
 8001fc0:	4838      	ldr	r0, [pc, #224]	; (80020a4 <main+0xa04>)
 8001fc2:	f013 fb6f 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(6,(uint8_t*)buf);
 8001fc6:	4937      	ldr	r1, [pc, #220]	; (80020a4 <main+0xa04>)
 8001fc8:	2006      	movs	r0, #6
 8001fca:	f001 fbf9 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "False positives: %d", fp);
 8001fce:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001fd2:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4936      	ldr	r1, [pc, #216]	; (80020b4 <main+0xa14>)
 8001fda:	4832      	ldr	r0, [pc, #200]	; (80020a4 <main+0xa04>)
 8001fdc:	f013 fb62 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(7,(uint8_t*)buf);
 8001fe0:	4930      	ldr	r1, [pc, #192]	; (80020a4 <main+0xa04>)
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f001 fbec 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "False negatives: %d", fn);
 8001fe8:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8001fec:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4931      	ldr	r1, [pc, #196]	; (80020b8 <main+0xa18>)
 8001ff4:	482b      	ldr	r0, [pc, #172]	; (80020a4 <main+0xa04>)
 8001ff6:	f013 fb55 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(8,(uint8_t*)buf);
 8001ffa:	492a      	ldr	r1, [pc, #168]	; (80020a4 <main+0xa04>)
 8001ffc:	2008      	movs	r0, #8
 8001ffe:	f001 fbdf 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
							sprintf(buf, "True positives: %d", tp);
 8002002:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002006:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	492b      	ldr	r1, [pc, #172]	; (80020bc <main+0xa1c>)
 800200e:	4825      	ldr	r0, [pc, #148]	; (80020a4 <main+0xa04>)
 8002010:	f013 fb48 	bl	80156a4 <siprintf>
							BSP_LCD_DisplayStringAtLine(9,(uint8_t*)buf);
 8002014:	4923      	ldr	r1, [pc, #140]	; (80020a4 <main+0xa04>)
 8002016:	2009      	movs	r0, #9
 8002018:	f001 fbd2 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>

							res = f_findnext(&dir,&fno);
 800201c:	4928      	ldr	r1, [pc, #160]	; (80020c0 <main+0xa20>)
 800201e:	4829      	ldr	r0, [pc, #164]	; (80020c4 <main+0xa24>)
 8002020:	f00f fac3 	bl	80115aa <f_findnext>
 8002024:	4603      	mov	r3, r0
 8002026:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800202a:	f102 02c7 	add.w	r2, r2, #199	; 0xc7
 800202e:	7013      	strb	r3, [r2, #0]
						while ((res == FR_OK) && (fno.fname[0]))
 8002030:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002034:	f103 03c7 	add.w	r3, r3, #199	; 0xc7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <main+0x9a8>
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <main+0xa20>)
 8002040:	7d9b      	ldrb	r3, [r3, #22]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f47f ace6 	bne.w	8001a14 <main+0x374>
						}
						f_closedir(&dir);
 8002048:	481e      	ldr	r0, [pc, #120]	; (80020c4 <main+0xa24>)
 800204a:	f00f fa4b 	bl	80114e4 <f_closedir>
						sprintf(buf, "Finished %d",res);
 800204e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002052:	f103 03c7 	add.w	r3, r3, #199	; 0xc7
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	491b      	ldr	r1, [pc, #108]	; (80020c8 <main+0xa28>)
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <main+0xa04>)
 800205e:	f013 fb21 	bl	80156a4 <siprintf>
					}
					y_true ++;
 8002062:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002066:	f103 03b8 	add.w	r3, r3, #184	; 0xb8
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3301      	adds	r3, #1
 800206e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8002072:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 8002076:	6013      	str	r3, [r2, #0]
				for (int folders=0;folders<2;folders++)
 8002078:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800207c:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8002088:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002092:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	f77f ac69 	ble.w	8001970 <main+0x2d0>
				sprintf(buf, "Recall: %f", (float)tp/(float)(tp+fn));
				BSP_LCD_DisplayStringAtLine(12,(uint8_t*)buf);
				sprintf(buf, "F1-score: %f", 2*(float)tp/(float)(tp+fp)*(float)tp/(float)(tp+fn)/((float)tp/(float)(tp+fp)+(float)tp/(float)(tp+fn)));
				BSP_LCD_DisplayStringAtLine(13,(uint8_t*)buf);
			}
		break;
 800209e:	e16b      	b.n	8002378 <main+0xcd8>
 80020a0:	08019474 	.word	0x08019474
 80020a4:	1000015c 	.word	0x1000015c
 80020a8:	080194f8 	.word	0x080194f8
 80020ac:	08019508 	.word	0x08019508
 80020b0:	0801951c 	.word	0x0801951c
 80020b4:	08019530 	.word	0x08019530
 80020b8:	08019544 	.word	0x08019544
 80020bc:	08019558 	.word	0x08019558
 80020c0:	10000038 	.word	0x10000038
 80020c4:	10000000 	.word	0x10000000
 80020c8:	0801956c 	.word	0x0801956c
				done = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80020d2:	f102 02a0 	add.w	r2, r2, #160	; 0xa0
 80020d6:	6013      	str	r3, [r2, #0]
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Test done      ");
 80020d8:	49a8      	ldr	r1, [pc, #672]	; (800237c <main+0xcdc>)
 80020da:	2000      	movs	r0, #0
 80020dc:	f001 fb70 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Tot. time: %.3fs", (float)(tot_inference_time)/1000);
 80020e0:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80020e4:	f103 03c0 	add.w	r3, r3, #192	; 0xc0
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f2:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8002380 <main+0xce0>
 80020f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020fa:	ee16 0a90 	vmov	r0, s13
 80020fe:	f7fe fa33 	bl	8000568 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	499f      	ldr	r1, [pc, #636]	; (8002384 <main+0xce4>)
 8002108:	489f      	ldr	r0, [pc, #636]	; (8002388 <main+0xce8>)
 800210a:	f013 facb 	bl	80156a4 <siprintf>
				BSP_LCD_DisplayStringAtLine(4,(uint8_t*)buf);
 800210e:	499e      	ldr	r1, [pc, #632]	; (8002388 <main+0xce8>)
 8002110:	2004      	movs	r0, #4
 8002112:	f001 fb55 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Precision: %f", (float)tp/(float)(tp+fp));
 8002116:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800211a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	ee07 3a90 	vmov	s15, r3
 8002124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002128:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800212c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002136:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4413      	add	r3, r2
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800214a:	ee16 0a90 	vmov	r0, s13
 800214e:	f7fe fa0b 	bl	8000568 <__aeabi_f2d>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	498d      	ldr	r1, [pc, #564]	; (800238c <main+0xcec>)
 8002158:	488b      	ldr	r0, [pc, #556]	; (8002388 <main+0xce8>)
 800215a:	f013 faa3 	bl	80156a4 <siprintf>
				BSP_LCD_DisplayStringAtLine(11,(uint8_t*)buf);
 800215e:	498a      	ldr	r1, [pc, #552]	; (8002388 <main+0xce8>)
 8002160:	200b      	movs	r0, #11
 8002162:	f001 fb2d 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "Recall: %f", (float)tp/(float)(tp+fn));
 8002166:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800216a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002178:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800217c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002186:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4413      	add	r3, r2
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002196:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800219a:	ee16 0a90 	vmov	r0, s13
 800219e:	f7fe f9e3 	bl	8000568 <__aeabi_f2d>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	497a      	ldr	r1, [pc, #488]	; (8002390 <main+0xcf0>)
 80021a8:	4877      	ldr	r0, [pc, #476]	; (8002388 <main+0xce8>)
 80021aa:	f013 fa7b 	bl	80156a4 <siprintf>
				BSP_LCD_DisplayStringAtLine(12,(uint8_t*)buf);
 80021ae:	4976      	ldr	r1, [pc, #472]	; (8002388 <main+0xce8>)
 80021b0:	200c      	movs	r0, #12
 80021b2:	f001 fb05 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
				sprintf(buf, "F1-score: %f", 2*(float)tp/(float)(tp+fp)*(float)tp/(float)(tp+fn)/((float)tp/(float)(tp+fp)+(float)tp/(float)(tp+fn)));
 80021b6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80021ba:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80021cc:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80021d0:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80021da:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4413      	add	r3, r2
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ee:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80021f2:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002200:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002204:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002208:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002212:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002226:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800222a:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	ee07 3a90 	vmov	s15, r3
 8002234:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002238:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800223c:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002246:	f103 03ac 	add.w	r3, r3, #172	; 0xac
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4413      	add	r3, r2
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002256:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800225a:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800225e:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800226c:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002270:	f103 03a4 	add.w	r3, r3, #164	; 0xa4
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800227a:	f103 03a8 	add.w	r3, r3, #168	; 0xa8
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800228a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800228e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002292:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002296:	ee16 0a90 	vmov	r0, s13
 800229a:	f7fe f965 	bl	8000568 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	493c      	ldr	r1, [pc, #240]	; (8002394 <main+0xcf4>)
 80022a4:	4838      	ldr	r0, [pc, #224]	; (8002388 <main+0xce8>)
 80022a6:	f013 f9fd 	bl	80156a4 <siprintf>
				BSP_LCD_DisplayStringAtLine(13,(uint8_t*)buf);
 80022aa:	4937      	ldr	r1, [pc, #220]	; (8002388 <main+0xce8>)
 80022ac:	200d      	movs	r0, #13
 80022ae:	f001 fa87 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
		break;
 80022b2:	e061      	b.n	8002378 <main+0xcd8>
		case APPLICATION_IDLE:
			sprintf(buf, "IDLE");
 80022b4:	4938      	ldr	r1, [pc, #224]	; (8002398 <main+0xcf8>)
 80022b6:	4834      	ldr	r0, [pc, #208]	; (8002388 <main+0xce8>)
 80022b8:	f013 f9f4 	bl	80156a4 <siprintf>
      // Application is ready but there's no USB connected
			BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Waiting for USB");
 80022bc:	4937      	ldr	r1, [pc, #220]	; (800239c <main+0xcfc>)
 80022be:	2000      	movs	r0, #0
 80022c0:	f001 fa7e 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
		break;
 80022c4:	e058      	b.n	8002378 <main+0xcd8>
		case APPLICATION_DISCONNECT:
			sprintf(buf, "DISCONNECT");
 80022c6:	4936      	ldr	r1, [pc, #216]	; (80023a0 <main+0xd00>)
 80022c8:	482f      	ldr	r0, [pc, #188]	; (8002388 <main+0xce8>)
 80022ca:	f013 f9eb 	bl	80156a4 <siprintf>

			// If test is not finished while USB is disconnected, reset variables
			if (done == 0)
 80022ce:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 80022d2:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d14c      	bne.n	8002376 <main+0xcd6>
			{
				y_true = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80022e2:	f102 02b8 	add.w	r2, r2, #184	; 0xb8
 80022e6:	6013      	str	r3, [r2, #0]
				sample = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80022ee:	f102 02b4 	add.w	r2, r2, #180	; 0xb4
 80022f2:	6013      	str	r3, [r2, #0]
				tn = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 80022fa:	f102 02b0 	add.w	r2, r2, #176	; 0xb0
 80022fe:	6013      	str	r3, [r2, #0]
				fp = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8002306:	f102 02ac 	add.w	r2, r2, #172	; 0xac
 800230a:	6013      	str	r3, [r2, #0]
				fn = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8002312:	f102 02a8 	add.w	r2, r2, #168	; 0xa8
 8002316:	6013      	str	r3, [r2, #0]
				tp = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800231e:	f102 02a4 	add.w	r2, r2, #164	; 0xa4
 8002322:	6013      	str	r3, [r2, #0]
				for (int i=2;i<10;i++)
 8002324:	2302      	movs	r3, #2
 8002326:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 800232a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	e012      	b.n	8002358 <main+0xcb8>
				{
					BSP_LCD_ClearStringLine(i);
 8002332:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002336:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f001 f8d9 	bl	80034f4 <BSP_LCD_ClearStringLine>
				for (int i=2;i<10;i++)
 8002342:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 8002346:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3301      	adds	r3, #1
 800234e:	f507 4221 	add.w	r2, r7, #41216	; 0xa100
 8002352:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	f507 4321 	add.w	r3, r7, #41216	; 0xa100
 800235c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b09      	cmp	r3, #9
 8002364:	dde5      	ble.n	8002332 <main+0xc92>
				}
				BSP_LCD_DisplayStringAtLine(0,(uint8_t*)"Waiting for USB");
 8002366:	490d      	ldr	r1, [pc, #52]	; (800239c <main+0xcfc>)
 8002368:	2000      	movs	r0, #0
 800236a:	f001 fa29 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
			}
		break;
 800236e:	e002      	b.n	8002376 <main+0xcd6>
		default:
		break;
 8002370:	bf00      	nop
 8002372:	f7ff bacb 	b.w	800190c <main+0x26c>
		break;
 8002376:	bf00      	nop
	MX_USB_HOST_Process();
 8002378:	f7ff bac8 	b.w	800190c <main+0x26c>
 800237c:	08019578 	.word	0x08019578
 8002380:	447a0000 	.word	0x447a0000
 8002384:	08019588 	.word	0x08019588
 8002388:	1000015c 	.word	0x1000015c
 800238c:	0801959c 	.word	0x0801959c
 8002390:	080195ac 	.word	0x080195ac
 8002394:	080195b8 	.word	0x080195b8
 8002398:	080195c8 	.word	0x080195c8
 800239c:	080195d0 	.word	0x080195d0
 80023a0:	080195e0 	.word	0x080195e0

080023a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0a0      	sub	sp, #128	; 0x80
 80023a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ae:	2230      	movs	r2, #48	; 0x30
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f012 f988 	bl	80146c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2230      	movs	r2, #48	; 0x30
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f012 f979 	bl	80146c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <SystemClock_Config+0xfc>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <SystemClock_Config+0xfc>)
 80023e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <SystemClock_Config+0xfc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b2b      	ldr	r3, [pc, #172]	; (80024a4 <SystemClock_Config+0x100>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <SystemClock_Config+0x100>)
 80023fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b28      	ldr	r3, [pc, #160]	; (80024a4 <SystemClock_Config+0x100>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800240e:	2301      	movs	r3, #1
 8002410:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002416:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002418:	2302      	movs	r3, #2
 800241a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002420:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002422:	2304      	movs	r3, #4
 8002424:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002426:	23a8      	movs	r3, #168	; 0xa8
 8002428:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800242a:	2302      	movs	r3, #2
 800242c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800242e:	2307      	movs	r3, #7
 8002430:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002436:	4618      	mov	r0, r3
 8002438:	f005 fa2a 	bl	8007890 <HAL_RCC_OscConfig>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002442:	f000 f869 	bl	8002518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002446:	230f      	movs	r3, #15
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800244a:	2302      	movs	r3, #2
 800244c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244e:	2300      	movs	r3, #0
 8002450:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002452:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002456:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800245e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002462:	2105      	movs	r1, #5
 8002464:	4618      	mov	r0, r3
 8002466:	f005 fc81 	bl	8007d6c <HAL_RCC_ClockConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002470:	f000 f852 	bl	8002518 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002474:	2308      	movs	r3, #8
 8002476:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002478:	2332      	movs	r3, #50	; 0x32
 800247a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800247c:	2302      	movs	r3, #2
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002480:	2300      	movs	r3, #0
 8002482:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	4618      	mov	r0, r3
 800248a:	f005 fec1 	bl	8008210 <HAL_RCCEx_PeriphCLKConfig>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002494:	f000 f840 	bl	8002518 <Error_Handler>
  }
}
 8002498:	bf00      	nop
 800249a:	3780      	adds	r7, #128	; 0x80
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <LCD_Config>:

/* USER CODE BEGIN 4 */
static void LCD_Config(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	/* Initialize the LCD */
	BSP_LCD_Init();
 80024ac:	f000 fe90 	bl	80031d0 <BSP_LCD_Init>

	/* Background Layer Initialization */
	BSP_LCD_LayerDefaultInit(0, LCD_BUFFER);
 80024b0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80024b4:	2000      	movs	r0, #0
 80024b6:	f000 ff0d 	bl	80032d4 <BSP_LCD_LayerDefaultInit>

	/* Set Foreground Layer */
	BSP_LCD_SelectLayer(0);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f000 ff6e 	bl	800339c <BSP_LCD_SelectLayer>

	/* Enable the LCD */
	BSP_LCD_DisplayOn();
 80024c0:	f001 f9f0 	bl	80038a4 <BSP_LCD_DisplayOn>

	/* Clear the LCD Background layer */
	BSP_LCD_SetTransparency(0,255);
 80024c4:	21ff      	movs	r1, #255	; 0xff
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 ff78 	bl	80033bc <BSP_LCD_SetTransparency>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80024cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80024d0:	f000 ffe8 	bl	80034a4 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font16);
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <LCD_Config+0x48>)
 80024d6:	f000 ffb5 	bl	8003444 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80024da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024de:	f000 ff7f 	bl	80033e0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80024e2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80024e6:	f000 ff93 	bl	8003410 <BSP_LCD_SetBackColor>
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000004c 	.word	0x2000004c

080024f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002506:	f001 fdb7 	bl	8004078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40001000 	.word	0x40001000

08002518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800252c:	4b17      	ldr	r3, [pc, #92]	; (800258c <MX_SPI5_Init+0x64>)
 800252e:	4a18      	ldr	r2, [pc, #96]	; (8002590 <MX_SPI5_Init+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <MX_SPI5_Init+0x64>)
 8002534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002538:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <MX_SPI5_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <MX_SPI5_Init+0x64>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <MX_SPI5_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800254c:	4b0f      	ldr	r3, [pc, #60]	; (800258c <MX_SPI5_Init+0x64>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002552:	4b0e      	ldr	r3, [pc, #56]	; (800258c <MX_SPI5_Init+0x64>)
 8002554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002558:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800255a:	4b0c      	ldr	r3, [pc, #48]	; (800258c <MX_SPI5_Init+0x64>)
 800255c:	2218      	movs	r2, #24
 800255e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <MX_SPI5_Init+0x64>)
 8002562:	2200      	movs	r2, #0
 8002564:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <MX_SPI5_Init+0x64>)
 8002568:	2200      	movs	r2, #0
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <MX_SPI5_Init+0x64>)
 800256e:	2200      	movs	r2, #0
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_SPI5_Init+0x64>)
 8002574:	220a      	movs	r2, #10
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <MX_SPI5_Init+0x64>)
 800257a:	f006 f892 	bl	80086a2 <HAL_SPI_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002584:	f7ff ffc8 	bl	8002518 <Error_Handler>
  }

}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000be0 	.word	0x20000be0
 8002590:	40015000 	.word	0x40015000

08002594 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_SPI_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12c      	bne.n	8002610 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b11      	ldr	r3, [pc, #68]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a10      	ldr	r2, [pc, #64]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b0e      	ldr	r3, [pc, #56]	; (800261c <HAL_SPI_MspInit+0x88>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80025ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2300      	movs	r3, #0
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002600:	2305      	movs	r3, #5
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <HAL_SPI_MspInit+0x8c>)
 800260c:	f002 fbd0 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	; 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40015000 	.word	0x40015000
 800261c:	40023800 	.word	0x40023800
 8002620:	40021400 	.word	0x40021400

08002624 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_SPI_MspDeInit+0x30>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10a      	bne.n	800264c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_SPI_MspDeInit+0x34>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_SPI_MspDeInit+0x34>)
 800263c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002640:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002642:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <HAL_SPI_MspDeInit+0x38>)
 8002648:	f002 fd5e 	bl	8005108 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40015000 	.word	0x40015000
 8002658:	40023800 	.word	0x40023800
 800265c:	40021400 	.word	0x40021400

08002660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_MspInit+0x54>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <HAL_MspInit+0x54>)
 8002670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_MspInit+0x54>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_MspInit+0x54>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <HAL_MspInit+0x54>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6413      	str	r3, [r2, #64]	; 0x40
 8002692:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_MspInit+0x54>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	210f      	movs	r1, #15
 80026a2:	f06f 0001 	mvn.w	r0, #1
 80026a6:	f001 fde3 	bl	8004270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	2036      	movs	r0, #54	; 0x36
 80026ce:	f001 fdcf 	bl	8004270 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026d2:	2036      	movs	r0, #54	; 0x36
 80026d4:	f001 fde8 	bl	80042a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <HAL_InitTick+0xa4>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_InitTick+0xa4>)
 80026e2:	f043 0310 	orr.w	r3, r3, #16
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_InitTick+0xa4>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026f4:	f107 0210 	add.w	r2, r7, #16
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 fd54 	bl	80081ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002704:	f005 fd2a 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8002708:	4603      	mov	r3, r0
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <HAL_InitTick+0xa8>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9b      	lsrs	r3, r3, #18
 8002718:	3b01      	subs	r3, #1
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_InitTick+0xac>)
 800271e:	4a12      	ldr	r2, [pc, #72]	; (8002768 <HAL_InitTick+0xb0>)
 8002720:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_InitTick+0xac>)
 8002724:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002728:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800272a:	4a0e      	ldr	r2, [pc, #56]	; (8002764 <HAL_InitTick+0xac>)
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002730:	4b0c      	ldr	r3, [pc, #48]	; (8002764 <HAL_InitTick+0xac>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002736:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_InitTick+0xac>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800273c:	4809      	ldr	r0, [pc, #36]	; (8002764 <HAL_InitTick+0xac>)
 800273e:	f006 fd3b 	bl	80091b8 <HAL_TIM_Base_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <HAL_InitTick+0xac>)
 800274a:	f006 fd6a 	bl	8009222 <HAL_TIM_Base_Start_IT>
 800274e:	4603      	mov	r3, r0
 8002750:	e000      	b.n	8002754 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3730      	adds	r7, #48	; 0x30
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	431bde83 	.word	0x431bde83
 8002764:	20000c38 	.word	0x20000c38
 8002768:	40001000 	.word	0x40001000

0800276c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	BSP_LCD_DisplayStringAtLine(19,(uint8_t*)"HARD FAULT");
 8002780:	4902      	ldr	r1, [pc, #8]	; (800278c <HardFault_Handler+0x10>)
 8002782:	2013      	movs	r0, #19
 8002784:	f001 f81c 	bl	80037c0 <BSP_LCD_DisplayStringAtLine>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <HardFault_Handler+0xc>
 800278a:	bf00      	nop
 800278c:	08019624 	.word	0x08019624

08002790 <MemManage_Handler>:
}
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	e7fe      	b.n	8002794 <MemManage_Handler+0x4>

08002796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002796:	b480      	push	{r7}
 8002798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279a:	e7fe      	b.n	800279a <BusFault_Handler+0x4>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a0:	e7fe      	b.n	80027a0 <UsageFault_Handler+0x4>

080027a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <TIM6_DAC_IRQHandler+0x10>)
 80027e2:	f006 fd42 	bl	800926a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000c38 	.word	0x20000c38

080027f0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80027f4:	4802      	ldr	r0, [pc, #8]	; (8002800 <OTG_HS_IRQHandler+0x10>)
 80027f6:	f003 f85f 	bl	80058b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20001768 	.word	0x20001768

08002804 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <LTDC_IRQHandler+0x10>)
 800280a:	f004 fd49 	bl	80072a0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000b38 	.word	0x20000b38

08002818 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <DMA2D_IRQHandler+0x10>)
 800281e:	f002 f888 	bl	8004932 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000aa4 	.word	0x20000aa4

0800282c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002830:	2001      	movs	r0, #1
 8002832:	f002 fd8f 	bl	8005354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}

0800283a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
	return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_kill>:

int _kill(int pid, int sig)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002854:	f011 fef0 	bl	8014638 <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	2216      	movs	r2, #22
 800285c:	601a      	str	r2, [r3, #0]
	return -1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_exit>:

void _exit (int status)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002872:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ffe7 	bl	800284a <_kill>
	while (1) {}		/* Make sure we hang here */
 800287c:	e7fe      	b.n	800287c <_exit+0x12>

0800287e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	e00a      	b.n	80028a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002890:	f3af 8000 	nop.w
 8002894:	4601      	mov	r1, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	60ba      	str	r2, [r7, #8]
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	3301      	adds	r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	dbf0      	blt.n	8002890 <_read+0x12>
	}

return len;
 80028ae:	687b      	ldr	r3, [r7, #4]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	return -1;
 80028c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028e0:	605a      	str	r2, [r3, #4]
	return 0;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <_isatty>:

int _isatty(int file)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
	return 1;
 80028f8:	2301      	movs	r3, #1
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
	return 0;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <_sbrk+0x5c>)
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <_sbrk+0x60>)
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002934:	4b13      	ldr	r3, [pc, #76]	; (8002984 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <_sbrk+0x64>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <_sbrk+0x68>)
 8002940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <_sbrk+0x64>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	429a      	cmp	r2, r3
 800294e:	d207      	bcs.n	8002960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002950:	f011 fe72 	bl	8014638 <__errno>
 8002954:	4603      	mov	r3, r0
 8002956:	220c      	movs	r2, #12
 8002958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800295a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295e:	e009      	b.n	8002974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <_sbrk+0x64>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	4a05      	ldr	r2, [pc, #20]	; (8002984 <_sbrk+0x64>)
 8002970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002972:	68fb      	ldr	r3, [r7, #12]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20030000 	.word	0x20030000
 8002980:	00000800 	.word	0x00000800
 8002984:	20000c78 	.word	0x20000c78
 8002988:	20001b08 	.word	0x20001b08

0800298c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <SystemInit+0x28>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <SystemInit+0x28>)
 8002998:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800299c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <SystemInit+0x28>)
 80029a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029a6:	609a      	str	r2, [r3, #8]
#endif
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_USART1_UART_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_USART1_UART_Init+0x4c>)
 80029f0:	f006 fe20 	bl	8009634 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80029fa:	f7ff fd8d 	bl	8002518 <Error_Handler>
  }

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000c7c 	.word	0x20000c7c
 8002a08:	40011000 	.word	0x40011000

08002a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <HAL_UART_MspInit+0x84>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d12c      	bne.n	8002a88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a17      	ldr	r2, [pc, #92]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a38:	f043 0310 	orr.w	r3, r3, #16
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_UART_MspInit+0x88>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	4619      	mov	r1, r3
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <HAL_UART_MspInit+0x8c>)
 8002a84:	f002 f994 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40011000 	.word	0x40011000
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40020000 	.word	0x40020000

08002a9c <_write>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len){
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)ptr,len,1000);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4804      	ldr	r0, [pc, #16]	; (8002ac4 <_write+0x28>)
 8002ab4:	f006 fe0b 	bl	80096ce <HAL_UART_Transmit>

	return len;
 8002ab8:	687b      	ldr	r3, [r7, #4]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000c7c 	.word	0x20000c7c

08002ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002acc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002ace:	e003      	b.n	8002ad8 <LoopCopyDataInit>

08002ad0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002ad2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ad4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ad6:	3104      	adds	r1, #4

08002ad8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ad8:	480b      	ldr	r0, [pc, #44]	; (8002b08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002adc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ade:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ae0:	d3f6      	bcc.n	8002ad0 <CopyDataInit>
  ldr  r2, =_sbss
 8002ae2:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ae4:	e002      	b.n	8002aec <LoopFillZerobss>

08002ae6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ae6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ae8:	f842 3b04 	str.w	r3, [r2], #4

08002aec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002af0:	d3f9      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002af2:	f7ff ff4b 	bl	800298c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af6:	f011 fda5 	bl	8014644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002afa:	f7fe fdd1 	bl	80016a0 <main>
  bx  lr    
 8002afe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b04:	0802bf60 	.word	0x0802bf60
  ldr  r0, =_sdata
 8002b08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b0c:	20000a80 	.word	0x20000a80
  ldr  r2, =_sbss
 8002b10:	20000a80 	.word	0x20000a80
  ldr  r3, = _ebss
 8002b14:	20001b08 	.word	0x20001b08

08002b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b18:	e7fe      	b.n	8002b18 <ADC_IRQHandler>

08002b1a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002b1e:	f000 fa5d 	bl	8002fdc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002b22:	20ca      	movs	r0, #202	; 0xca
 8002b24:	f000 f95d 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002b28:	20c3      	movs	r0, #195	; 0xc3
 8002b2a:	f000 f967 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002b2e:	2008      	movs	r0, #8
 8002b30:	f000 f964 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002b34:	2050      	movs	r0, #80	; 0x50
 8002b36:	f000 f961 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002b3a:	20cf      	movs	r0, #207	; 0xcf
 8002b3c:	f000 f951 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f000 f95b 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002b46:	20c1      	movs	r0, #193	; 0xc1
 8002b48:	f000 f958 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002b4c:	2030      	movs	r0, #48	; 0x30
 8002b4e:	f000 f955 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002b52:	20ed      	movs	r0, #237	; 0xed
 8002b54:	f000 f945 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002b58:	2064      	movs	r0, #100	; 0x64
 8002b5a:	f000 f94f 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f000 f94c 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002b64:	2012      	movs	r0, #18
 8002b66:	f000 f949 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002b6a:	2081      	movs	r0, #129	; 0x81
 8002b6c:	f000 f946 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002b70:	20e8      	movs	r0, #232	; 0xe8
 8002b72:	f000 f936 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002b76:	2085      	movs	r0, #133	; 0x85
 8002b78:	f000 f940 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f000 f93d 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002b82:	2078      	movs	r0, #120	; 0x78
 8002b84:	f000 f93a 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002b88:	20cb      	movs	r0, #203	; 0xcb
 8002b8a:	f000 f92a 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002b8e:	2039      	movs	r0, #57	; 0x39
 8002b90:	f000 f934 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002b94:	202c      	movs	r0, #44	; 0x2c
 8002b96:	f000 f931 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	f000 f92e 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002ba0:	2034      	movs	r0, #52	; 0x34
 8002ba2:	f000 f92b 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f000 f928 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002bac:	20f7      	movs	r0, #247	; 0xf7
 8002bae:	f000 f918 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002bb2:	2020      	movs	r0, #32
 8002bb4:	f000 f922 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002bb8:	20ea      	movs	r0, #234	; 0xea
 8002bba:	f000 f912 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f91c 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 f919 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002bca:	20b1      	movs	r0, #177	; 0xb1
 8002bcc:	f000 f909 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f000 f913 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002bd6:	201b      	movs	r0, #27
 8002bd8:	f000 f910 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002bdc:	20b6      	movs	r0, #182	; 0xb6
 8002bde:	f000 f900 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002be2:	200a      	movs	r0, #10
 8002be4:	f000 f90a 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002be8:	20a2      	movs	r0, #162	; 0xa2
 8002bea:	f000 f907 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002bee:	20c0      	movs	r0, #192	; 0xc0
 8002bf0:	f000 f8f7 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002bf4:	2010      	movs	r0, #16
 8002bf6:	f000 f901 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002bfa:	20c1      	movs	r0, #193	; 0xc1
 8002bfc:	f000 f8f1 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002c00:	2010      	movs	r0, #16
 8002c02:	f000 f8fb 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002c06:	20c5      	movs	r0, #197	; 0xc5
 8002c08:	f000 f8eb 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002c0c:	2045      	movs	r0, #69	; 0x45
 8002c0e:	f000 f8f5 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002c12:	2015      	movs	r0, #21
 8002c14:	f000 f8f2 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002c18:	20c7      	movs	r0, #199	; 0xc7
 8002c1a:	f000 f8e2 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002c1e:	2090      	movs	r0, #144	; 0x90
 8002c20:	f000 f8ec 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002c24:	2036      	movs	r0, #54	; 0x36
 8002c26:	f000 f8dc 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002c2a:	20c8      	movs	r0, #200	; 0xc8
 8002c2c:	f000 f8e6 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002c30:	20f2      	movs	r0, #242	; 0xf2
 8002c32:	f000 f8d6 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f000 f8e0 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002c3c:	20b0      	movs	r0, #176	; 0xb0
 8002c3e:	f000 f8d0 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002c42:	20c2      	movs	r0, #194	; 0xc2
 8002c44:	f000 f8da 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002c48:	20b6      	movs	r0, #182	; 0xb6
 8002c4a:	f000 f8ca 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002c4e:	200a      	movs	r0, #10
 8002c50:	f000 f8d4 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002c54:	20a7      	movs	r0, #167	; 0xa7
 8002c56:	f000 f8d1 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002c5a:	2027      	movs	r0, #39	; 0x27
 8002c5c:	f000 f8ce 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002c60:	2004      	movs	r0, #4
 8002c62:	f000 f8cb 	bl	8002dfc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002c66:	202a      	movs	r0, #42	; 0x2a
 8002c68:	f000 f8bb 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 f8c5 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f000 f8c2 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f000 f8bf 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002c7e:	20ef      	movs	r0, #239	; 0xef
 8002c80:	f000 f8bc 	bl	8002dfc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002c84:	202b      	movs	r0, #43	; 0x2b
 8002c86:	f000 f8ac 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f000 f8b6 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f000 f8b3 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002c96:	2001      	movs	r0, #1
 8002c98:	f000 f8b0 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002c9c:	203f      	movs	r0, #63	; 0x3f
 8002c9e:	f000 f8ad 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002ca2:	20f6      	movs	r0, #246	; 0xf6
 8002ca4:	f000 f89d 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f000 f8a7 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f000 f8a4 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002cb4:	2006      	movs	r0, #6
 8002cb6:	f000 f8a1 	bl	8002dfc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002cba:	202c      	movs	r0, #44	; 0x2c
 8002cbc:	f000 f891 	bl	8002de2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002cc0:	20c8      	movs	r0, #200	; 0xc8
 8002cc2:	f000 fa79 	bl	80031b8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002cc6:	2026      	movs	r0, #38	; 0x26
 8002cc8:	f000 f88b 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f000 f895 	bl	8002dfc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002cd2:	20e0      	movs	r0, #224	; 0xe0
 8002cd4:	f000 f885 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002cd8:	200f      	movs	r0, #15
 8002cda:	f000 f88f 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002cde:	2029      	movs	r0, #41	; 0x29
 8002ce0:	f000 f88c 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002ce4:	2024      	movs	r0, #36	; 0x24
 8002ce6:	f000 f889 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002cea:	200c      	movs	r0, #12
 8002cec:	f000 f886 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002cf0:	200e      	movs	r0, #14
 8002cf2:	f000 f883 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002cf6:	2009      	movs	r0, #9
 8002cf8:	f000 f880 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002cfc:	204e      	movs	r0, #78	; 0x4e
 8002cfe:	f000 f87d 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002d02:	2078      	movs	r0, #120	; 0x78
 8002d04:	f000 f87a 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002d08:	203c      	movs	r0, #60	; 0x3c
 8002d0a:	f000 f877 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002d0e:	2009      	movs	r0, #9
 8002d10:	f000 f874 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002d14:	2013      	movs	r0, #19
 8002d16:	f000 f871 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d1a:	2005      	movs	r0, #5
 8002d1c:	f000 f86e 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002d20:	2017      	movs	r0, #23
 8002d22:	f000 f86b 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d26:	2011      	movs	r0, #17
 8002d28:	f000 f868 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f000 f865 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002d32:	20e1      	movs	r0, #225	; 0xe1
 8002d34:	f000 f855 	bl	8002de2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f000 f85f 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002d3e:	2016      	movs	r0, #22
 8002d40:	f000 f85c 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002d44:	201b      	movs	r0, #27
 8002d46:	f000 f859 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002d4a:	2004      	movs	r0, #4
 8002d4c:	f000 f856 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002d50:	2011      	movs	r0, #17
 8002d52:	f000 f853 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002d56:	2007      	movs	r0, #7
 8002d58:	f000 f850 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002d5c:	2031      	movs	r0, #49	; 0x31
 8002d5e:	f000 f84d 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002d62:	2033      	movs	r0, #51	; 0x33
 8002d64:	f000 f84a 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002d68:	2042      	movs	r0, #66	; 0x42
 8002d6a:	f000 f847 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002d6e:	2005      	movs	r0, #5
 8002d70:	f000 f844 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002d74:	200c      	movs	r0, #12
 8002d76:	f000 f841 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002d7a:	200a      	movs	r0, #10
 8002d7c:	f000 f83e 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002d80:	2028      	movs	r0, #40	; 0x28
 8002d82:	f000 f83b 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002d86:	202f      	movs	r0, #47	; 0x2f
 8002d88:	f000 f838 	bl	8002dfc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002d8c:	200f      	movs	r0, #15
 8002d8e:	f000 f835 	bl	8002dfc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002d92:	2011      	movs	r0, #17
 8002d94:	f000 f825 	bl	8002de2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002d98:	20c8      	movs	r0, #200	; 0xc8
 8002d9a:	f000 fa0d 	bl	80031b8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002d9e:	2029      	movs	r0, #41	; 0x29
 8002da0:	f000 f81f 	bl	8002de2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002da4:	202c      	movs	r0, #44	; 0x2c
 8002da6:	f000 f81c 	bl	8002de2 <ili9341_WriteReg>
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}

08002dae <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002db2:	f000 f913 	bl	8002fdc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002db6:	2103      	movs	r1, #3
 8002db8:	20d3      	movs	r0, #211	; 0xd3
 8002dba:	f000 f82c 	bl	8002e16 <ili9341_ReadData>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b29b      	uxth	r3, r3
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002dca:	2029      	movs	r0, #41	; 0x29
 8002dcc:	f000 f809 	bl	8002de2 <ili9341_WriteReg>
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002dd8:	2028      	movs	r0, #40	; 0x28
 8002dda:	f000 f802 	bl	8002de2 <ili9341_WriteReg>
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f98e 	bl	8003110 <LCD_IO_WriteReg>
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 f95f 	bl	80030cc <LCD_IO_WriteData>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	460a      	mov	r2, r1
 8002e20:	80fb      	strh	r3, [r7, #6]
 8002e22:	4613      	mov	r3, r2
 8002e24:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002e26:	797a      	ldrb	r2, [r7, #5]
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f991 	bl	8003154 <LCD_IO_ReadData>
 8002e32:	4603      	mov	r3, r0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002e40:	23f0      	movs	r3, #240	; 0xf0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002e50:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002e64:	4819      	ldr	r0, [pc, #100]	; (8002ecc <SPIx_Init+0x6c>)
 8002e66:	f006 f887 	bl	8008f78 <HAL_SPI_GetState>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d12b      	bne.n	8002ec8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002e70:	4b16      	ldr	r3, [pc, #88]	; (8002ecc <SPIx_Init+0x6c>)
 8002e72:	4a17      	ldr	r2, [pc, #92]	; (8002ed0 <SPIx_Init+0x70>)
 8002e74:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e76:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <SPIx_Init+0x6c>)
 8002e78:	2218      	movs	r2, #24
 8002e7a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <SPIx_Init+0x6c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002e82:	4b12      	ldr	r3, [pc, #72]	; (8002ecc <SPIx_Init+0x6c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002e88:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <SPIx_Init+0x6c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <SPIx_Init+0x6c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <SPIx_Init+0x6c>)
 8002e96:	2207      	movs	r2, #7
 8002e98:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <SPIx_Init+0x6c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <SPIx_Init+0x6c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <SPIx_Init+0x6c>)
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <SPIx_Init+0x6c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <SPIx_Init+0x6c>)
 8002eb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002eba:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <SPIx_Init+0x6c>)
 8002ebe:	f000 f853 	bl	8002f68 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002ec2:	4802      	ldr	r0, [pc, #8]	; (8002ecc <SPIx_Init+0x6c>)
 8002ec4:	f005 fbed 	bl	80086a2 <HAL_SPI_Init>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000cbc 	.word	0x20000cbc
 8002ed0:	40015000 	.word	0x40015000

08002ed4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <SPIx_Read+0x38>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f107 0108 	add.w	r1, r7, #8
 8002eee:	4808      	ldr	r0, [pc, #32]	; (8002f10 <SPIx_Read+0x3c>)
 8002ef0:	f005 fd97 	bl	8008a22 <HAL_SPI_Receive>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002efe:	f000 f827 	bl	8002f50 <SPIx_Error>
  }
  
  return readvalue;
 8002f02:	68bb      	ldr	r3, [r7, #8]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	2000003c 	.word	0x2000003c
 8002f10:	20000cbc 	.word	0x20000cbc

08002f14 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <SPIx_Write+0x34>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1db9      	adds	r1, r7, #6
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4808      	ldr	r0, [pc, #32]	; (8002f4c <SPIx_Write+0x38>)
 8002f2c:	f005 fc45 	bl	80087ba <HAL_SPI_Transmit>
 8002f30:	4603      	mov	r3, r0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f3a:	f000 f809 	bl	8002f50 <SPIx_Error>
  }
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	2000003c 	.word	0x2000003c
 8002f4c:	20000cbc 	.word	0x20000cbc

08002f50 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f54:	4803      	ldr	r0, [pc, #12]	; (8002f64 <SPIx_Error+0x14>)
 8002f56:	f005 fc08 	bl	800876a <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002f5a:	f7ff ff81 	bl	8002e60 <SPIx_Init>
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000cbc 	.word	0x20000cbc

08002f68 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002f70:	2300      	movs	r3, #0
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f96:	f043 0320 	orr.w	r3, r3, #32
 8002f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <SPIx_MspInit+0x6c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002fa8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002fba:	2305      	movs	r3, #5
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <SPIx_MspInit+0x70>)
 8002fc6:	f001 fef3 	bl	8004db0 <HAL_GPIO_Init>
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40021400 	.word	0x40021400

08002fdc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002fe2:	4b36      	ldr	r3, [pc, #216]	; (80030bc <LCD_IO_Init+0xe0>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d164      	bne.n	80030b4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <LCD_IO_Init+0xe0>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <LCD_IO_Init+0xe4>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4a31      	ldr	r2, [pc, #196]	; (80030c0 <LCD_IO_Init+0xe4>)
 8002ffa:	f043 0308 	orr.w	r3, r3, #8
 8002ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <LCD_IO_Init+0xe4>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800300c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003010:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003012:	2301      	movs	r3, #1
 8003014:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	4827      	ldr	r0, [pc, #156]	; (80030c4 <LCD_IO_Init+0xe8>)
 8003026:	f001 fec3 	bl	8004db0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <LCD_IO_Init+0xe4>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <LCD_IO_Init+0xe4>)
 8003034:	f043 0308 	orr.w	r3, r3, #8
 8003038:	6313      	str	r3, [r2, #48]	; 0x30
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <LCD_IO_Init+0xe4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003054:	2302      	movs	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4619      	mov	r1, r3
 800305e:	4819      	ldr	r0, [pc, #100]	; (80030c4 <LCD_IO_Init+0xe8>)
 8003060:	f001 fea6 	bl	8004db0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003064:	2300      	movs	r3, #0
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <LCD_IO_Init+0xe4>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4a14      	ldr	r2, [pc, #80]	; (80030c0 <LCD_IO_Init+0xe4>)
 800306e:	f043 0304 	orr.w	r3, r3, #4
 8003072:	6313      	str	r3, [r2, #48]	; 0x30
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <LCD_IO_Init+0xe4>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003080:	2304      	movs	r3, #4
 8003082:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800308c:	2302      	movs	r3, #2
 800308e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003090:	f107 030c 	add.w	r3, r7, #12
 8003094:	4619      	mov	r1, r3
 8003096:	480c      	ldr	r0, [pc, #48]	; (80030c8 <LCD_IO_Init+0xec>)
 8003098:	f001 fe8a 	bl	8004db0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800309c:	2200      	movs	r2, #0
 800309e:	2104      	movs	r1, #4
 80030a0:	4809      	ldr	r0, [pc, #36]	; (80030c8 <LCD_IO_Init+0xec>)
 80030a2:	f002 f93d 	bl	8005320 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80030a6:	2201      	movs	r2, #1
 80030a8:	2104      	movs	r1, #4
 80030aa:	4807      	ldr	r0, [pc, #28]	; (80030c8 <LCD_IO_Init+0xec>)
 80030ac:	f002 f938 	bl	8005320 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80030b0:	f7ff fed6 	bl	8002e60 <SPIx_Init>
  }
}
 80030b4:	bf00      	nop
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000d14 	.word	0x20000d14
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40020800 	.word	0x40020800

080030cc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030dc:	480a      	ldr	r0, [pc, #40]	; (8003108 <LCD_IO_WriteData+0x3c>)
 80030de:	f002 f91f 	bl	8005320 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80030e2:	2200      	movs	r2, #0
 80030e4:	2104      	movs	r1, #4
 80030e6:	4809      	ldr	r0, [pc, #36]	; (800310c <LCD_IO_WriteData+0x40>)
 80030e8:	f002 f91a 	bl	8005320 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff10 	bl	8002f14 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80030f4:	2201      	movs	r2, #1
 80030f6:	2104      	movs	r1, #4
 80030f8:	4804      	ldr	r0, [pc, #16]	; (800310c <LCD_IO_WriteData+0x40>)
 80030fa:	f002 f911 	bl	8005320 <HAL_GPIO_WritePin>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40020c00 	.word	0x40020c00
 800310c:	40020800 	.word	0x40020800

08003110 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800311a:	2200      	movs	r2, #0
 800311c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003120:	480a      	ldr	r0, [pc, #40]	; (800314c <LCD_IO_WriteReg+0x3c>)
 8003122:	f002 f8fd 	bl	8005320 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003126:	2200      	movs	r2, #0
 8003128:	2104      	movs	r1, #4
 800312a:	4809      	ldr	r0, [pc, #36]	; (8003150 <LCD_IO_WriteReg+0x40>)
 800312c:	f002 f8f8 	bl	8005320 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	b29b      	uxth	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff feed 	bl	8002f14 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800313a:	2201      	movs	r2, #1
 800313c:	2104      	movs	r1, #4
 800313e:	4804      	ldr	r0, [pc, #16]	; (8003150 <LCD_IO_WriteReg+0x40>)
 8003140:	f002 f8ee 	bl	8005320 <HAL_GPIO_WritePin>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40020c00 	.word	0x40020c00
 8003150:	40020800 	.word	0x40020800

08003154 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	460a      	mov	r2, r1
 800315e:	80fb      	strh	r3, [r7, #6]
 8003160:	4613      	mov	r3, r2
 8003162:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003168:	2200      	movs	r2, #0
 800316a:	2104      	movs	r1, #4
 800316c:	4810      	ldr	r0, [pc, #64]	; (80031b0 <LCD_IO_ReadData+0x5c>)
 800316e:	f002 f8d7 	bl	8005320 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003172:	2200      	movs	r2, #0
 8003174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003178:	480e      	ldr	r0, [pc, #56]	; (80031b4 <LCD_IO_ReadData+0x60>)
 800317a:	f002 f8d1 	bl	8005320 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fec7 	bl	8002f14 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003186:	797b      	ldrb	r3, [r7, #5]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fea3 	bl	8002ed4 <SPIx_Read>
 800318e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003196:	4807      	ldr	r0, [pc, #28]	; (80031b4 <LCD_IO_ReadData+0x60>)
 8003198:	f002 f8c2 	bl	8005320 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800319c:	2201      	movs	r2, #1
 800319e:	2104      	movs	r1, #4
 80031a0:	4803      	ldr	r0, [pc, #12]	; (80031b0 <LCD_IO_ReadData+0x5c>)
 80031a2:	f002 f8bd 	bl	8005320 <HAL_GPIO_WritePin>
  
  return readvalue;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40020800 	.word	0x40020800
 80031b4:	40020c00 	.word	0x40020c00

080031b8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 ff79 	bl	80040b8 <HAL_Delay>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <BSP_LCD_Init+0xbc>)
 80031d6:	4a2e      	ldr	r2, [pc, #184]	; (8003290 <BSP_LCD_Init+0xc0>)
 80031d8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <BSP_LCD_Init+0xbc>)
 80031dc:	2209      	movs	r2, #9
 80031de:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80031e0:	4b2a      	ldr	r3, [pc, #168]	; (800328c <BSP_LCD_Init+0xbc>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <BSP_LCD_Init+0xbc>)
 80031e8:	221d      	movs	r2, #29
 80031ea:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80031ec:	4b27      	ldr	r3, [pc, #156]	; (800328c <BSP_LCD_Init+0xbc>)
 80031ee:	2203      	movs	r2, #3
 80031f0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80031f2:	4b26      	ldr	r3, [pc, #152]	; (800328c <BSP_LCD_Init+0xbc>)
 80031f4:	f240 120d 	movw	r2, #269	; 0x10d
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80031fa:	4b24      	ldr	r3, [pc, #144]	; (800328c <BSP_LCD_Init+0xbc>)
 80031fc:	f240 1243 	movw	r2, #323	; 0x143
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <BSP_LCD_Init+0xbc>)
 8003204:	f240 1217 	movw	r2, #279	; 0x117
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <BSP_LCD_Init+0xbc>)
 800320c:	f240 1247 	movw	r2, #327	; 0x147
 8003210:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <BSP_LCD_Init+0xbc>)
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800321a:	4b1c      	ldr	r3, [pc, #112]	; (800328c <BSP_LCD_Init+0xbc>)
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8003222:	4b1a      	ldr	r3, [pc, #104]	; (800328c <BSP_LCD_Init+0xbc>)
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800322a:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <BSP_LCD_Init+0xc4>)
 800322c:	2208      	movs	r2, #8
 800322e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003230:	4b18      	ldr	r3, [pc, #96]	; (8003294 <BSP_LCD_Init+0xc4>)
 8003232:	22c0      	movs	r2, #192	; 0xc0
 8003234:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <BSP_LCD_Init+0xc4>)
 8003238:	2204      	movs	r2, #4
 800323a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <BSP_LCD_Init+0xc4>)
 800323e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003244:	4813      	ldr	r0, [pc, #76]	; (8003294 <BSP_LCD_Init+0xc4>)
 8003246:	f004 ffe3 	bl	8008210 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <BSP_LCD_Init+0xbc>)
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <BSP_LCD_Init+0xbc>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <BSP_LCD_Init+0xbc>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <BSP_LCD_Init+0xbc>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003262:	f000 fb2f 	bl	80038c4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003266:	4809      	ldr	r0, [pc, #36]	; (800328c <BSP_LCD_Init+0xbc>)
 8003268:	f003 ff4a 	bl	8007100 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <BSP_LCD_Init+0xc8>)
 800326e:	4a0b      	ldr	r2, [pc, #44]	; (800329c <BSP_LCD_Init+0xcc>)
 8003270:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <BSP_LCD_Init+0xc8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800327a:	f000 fd11 	bl	8003ca0 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800327e:	4808      	ldr	r0, [pc, #32]	; (80032a0 <BSP_LCD_Init+0xd0>)
 8003280:	f000 f8e0 	bl	8003444 <BSP_LCD_SetFont>

  return LCD_OK;
 8003284:	2300      	movs	r3, #0
}  
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000d18 	.word	0x20000d18
 8003290:	40016800 	.word	0x40016800
 8003294:	20000e00 	.word	0x20000e00
 8003298:	20000e4c 	.word	0x20000e4c
 800329c:	20000004 	.word	0x20000004
 80032a0:	20000054 	.word	0x20000054

080032a4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <BSP_LCD_GetXSize+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	4798      	blx	r3
 80032b0:	4603      	mov	r3, r0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20000e4c 	.word	0x20000e4c

080032bc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <BSP_LCD_GetYSize+0x14>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	4798      	blx	r3
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20000e4c 	.word	0x20000e4c

080032d4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b090      	sub	sp, #64	; 0x40
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	6039      	str	r1, [r7, #0]
 80032de:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80032e4:	f7ff ffde 	bl	80032a4 <BSP_LCD_GetXSize>
 80032e8:	4603      	mov	r3, r0
 80032ea:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80032f0:	f7ff ffe4 	bl	80032bc <BSP_LCD_GetYSize>
 80032f4:	4603      	mov	r3, r0
 80032f6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003300:	23ff      	movs	r3, #255	; 0xff
 8003302:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800331a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800331e:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003320:	2307      	movs	r3, #7
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003324:	f7ff ffbe 	bl	80032a4 <BSP_LCD_GetXSize>
 8003328:	4603      	mov	r3, r0
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800332c:	f7ff ffc6 	bl	80032bc <BSP_LCD_GetYSize>
 8003330:	4603      	mov	r3, r0
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	4619      	mov	r1, r3
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <BSP_LCD_LayerDefaultInit+0xbc>)
 800333e:	f004 f871 	bl	8007424 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	4913      	ldr	r1, [pc, #76]	; (8003394 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3304      	adds	r3, #4
 8003352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003356:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003358:	88fa      	ldrh	r2, [r7, #6]
 800335a:	490e      	ldr	r1, [pc, #56]	; (8003394 <BSP_LCD_LayerDefaultInit+0xc0>)
 800335c:	4613      	mov	r3, r2
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3308      	adds	r3, #8
 8003368:	4a0b      	ldr	r2, [pc, #44]	; (8003398 <BSP_LCD_LayerDefaultInit+0xc4>)
 800336a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800336c:	88fa      	ldrh	r2, [r7, #6]
 800336e:	4909      	ldr	r1, [pc, #36]	; (8003394 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800337e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003382:	f004 f88d 	bl	80074a0 <HAL_LTDC_EnableDither>
}
 8003386:	bf00      	nop
 8003388:	3740      	adds	r7, #64	; 0x40
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000d18 	.word	0x20000d18
 8003394:	20000e34 	.word	0x20000e34
 8003398:	20000054 	.word	0x20000054

0800339c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <BSP_LCD_SelectLayer+0x1c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000e30 	.word	0x20000e30

080033bc <BSP_LCD_SetTransparency>:
  * @param  LayerIndex: the Layer foreground or background.
  * @param  Transparency: the Transparency, 
  *    This parameter must range from 0x00 to 0xFF.
  */
void BSP_LCD_SetTransparency(uint32_t LayerIndex, uint8_t Transparency)
{     
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  HAL_LTDC_SetAlpha(&LtdcHandler, Transparency, LayerIndex);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4619      	mov	r1, r3
 80033ce:	4803      	ldr	r0, [pc, #12]	; (80033dc <BSP_LCD_SetTransparency+0x20>)
 80033d0:	f004 f890 	bl	80074f4 <HAL_LTDC_SetAlpha>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000d18 	.word	0x20000d18

080033e0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80033e8:	4b07      	ldr	r3, [pc, #28]	; (8003408 <BSP_LCD_SetTextColor+0x28>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <BSP_LCD_SetTextColor+0x2c>)
 80033ee:	4613      	mov	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20000e30 	.word	0x20000e30
 800340c:	20000e34 	.word	0x20000e34

08003410 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <BSP_LCD_SetBackColor+0x2c>)
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4908      	ldr	r1, [pc, #32]	; (8003440 <BSP_LCD_SetBackColor+0x30>)
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	3304      	adds	r3, #4
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	601a      	str	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	20000e30 	.word	0x20000e30
 8003440:	20000e34 	.word	0x20000e34

08003444 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 800344c:	4b08      	ldr	r3, [pc, #32]	; (8003470 <BSP_LCD_SetFont+0x2c>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4908      	ldr	r1, [pc, #32]	; (8003474 <BSP_LCD_SetFont+0x30>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3308      	adds	r3, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000e30 	.word	0x20000e30
 8003474:	20000e34 	.word	0x20000e34

08003478 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800347c:	4b07      	ldr	r3, [pc, #28]	; (800349c <BSP_LCD_GetFont+0x24>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <BSP_LCD_GetFont+0x28>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3308      	adds	r3, #8
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000e30 	.word	0x20000e30
 80034a0:	20000e34 	.word	0x20000e34

080034a4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80034a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <BSP_LCD_Clear+0x48>)
 80034ae:	681c      	ldr	r4, [r3, #0]
 80034b0:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <BSP_LCD_Clear+0x48>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <BSP_LCD_Clear+0x4c>)
 80034b6:	2134      	movs	r1, #52	; 0x34
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461e      	mov	r6, r3
 80034c4:	f7ff feee 	bl	80032a4 <BSP_LCD_GetXSize>
 80034c8:	4605      	mov	r5, r0
 80034ca:	f7ff fef7 	bl	80032bc <BSP_LCD_GetYSize>
 80034ce:	4602      	mov	r2, r0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	2300      	movs	r3, #0
 80034d6:	9300      	str	r3, [sp, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	462a      	mov	r2, r5
 80034dc:	4631      	mov	r1, r6
 80034de:	4620      	mov	r0, r4
 80034e0:	f000 fba6 	bl	8003c30 <FillBuffer>
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ec:	20000e30 	.word	0x20000e30
 80034f0:	20000d18 	.word	0x20000d18

080034f4 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	492d      	ldr	r1, [pc, #180]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	4b27      	ldr	r3, [pc, #156]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4827      	ldr	r0, [pc, #156]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 800351a:	460b      	mov	r3, r1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	440b      	add	r3, r1
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3304      	adds	r3, #4
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	4823      	ldr	r0, [pc, #140]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	491f      	ldr	r1, [pc, #124]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3308      	adds	r3, #8
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	88da      	ldrh	r2, [r3, #6]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	b29b      	uxth	r3, r3
 8003550:	fb12 f303 	smulbb	r3, r2, r3
 8003554:	b29c      	uxth	r4, r3
 8003556:	f7ff fea5 	bl	80032a4 <BSP_LCD_GetXSize>
 800355a:	4603      	mov	r3, r0
 800355c:	b299      	uxth	r1, r3
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	4815      	ldr	r0, [pc, #84]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4403      	add	r3, r0
 800356e:	3308      	adds	r3, #8
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	88db      	ldrh	r3, [r3, #6]
 8003574:	460a      	mov	r2, r1
 8003576:	4621      	mov	r1, r4
 8003578:	2000      	movs	r0, #0
 800357a:	f000 f939 	bl	80037f0 <BSP_LCD_FillRect>
  
  DrawProp[ActiveLayer].TextColor = colorbackup;
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	490d      	ldr	r1, [pc, #52]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <BSP_LCD_ClearStringLine+0xc0>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4908      	ldr	r1, [pc, #32]	; (80035b8 <BSP_LCD_ClearStringLine+0xc4>)
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff1b 	bl	80033e0 <BSP_LCD_SetTextColor>
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000e30 	.word	0x20000e30
 80035b8:	20000e34 	.word	0x20000e34

080035bc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80035bc:	b590      	push	{r4, r7, lr}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	80fb      	strh	r3, [r7, #6]
 80035c6:	460b      	mov	r3, r1
 80035c8:	80bb      	strh	r3, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	491b      	ldr	r1, [pc, #108]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3308      	adds	r3, #8
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	4c14      	ldr	r4, [pc, #80]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4423      	add	r3, r4
 80035fa:	3308      	adds	r3, #8
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003600:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003604:	4b0d      	ldr	r3, [pc, #52]	; (800363c <BSP_LCD_DisplayChar+0x80>)
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <BSP_LCD_DisplayChar+0x84>)
 800360a:	4613      	mov	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	4413      	add	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4423      	add	r3, r4
 8003614:	3308      	adds	r3, #8
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	889b      	ldrh	r3, [r3, #4]
 800361a:	3307      	adds	r3, #7
 800361c:	2b00      	cmp	r3, #0
 800361e:	da00      	bge.n	8003622 <BSP_LCD_DisplayChar+0x66>
 8003620:	3307      	adds	r3, #7
 8003622:	10db      	asrs	r3, r3, #3
 8003624:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003628:	18ca      	adds	r2, r1, r3
 800362a:	88b9      	ldrh	r1, [r7, #4]
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fa44 	bl	8003abc <DrawChar>
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bd90      	pop	{r4, r7, pc}
 800363c:	20000e30 	.word	0x20000e30
 8003640:	20000e34 	.word	0x20000e34

08003644 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60ba      	str	r2, [r7, #8]
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	81fb      	strh	r3, [r7, #14]
 8003652:	460b      	mov	r3, r1
 8003654:	81bb      	strh	r3, [r7, #12]
 8003656:	4613      	mov	r3, r2
 8003658:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800365a:	2301      	movs	r3, #1
 800365c:	83fb      	strh	r3, [r7, #30]
 800365e:	2300      	movs	r3, #0
 8003660:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800366e:	e002      	b.n	8003676 <BSP_LCD_DisplayStringAt+0x32>
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	3301      	adds	r3, #1
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	617a      	str	r2, [r7, #20]
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f6      	bne.n	8003670 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003682:	f7ff fe0f 	bl	80032a4 <BSP_LCD_GetXSize>
 8003686:	4601      	mov	r1, r0
 8003688:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	484b      	ldr	r0, [pc, #300]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4403      	add	r3, r0
 8003698:	3308      	adds	r3, #8
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	889b      	ldrh	r3, [r3, #4]
 800369e:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a2:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80036a4:	79fb      	ldrb	r3, [r7, #7]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d01c      	beq.n	80036e4 <BSP_LCD_DisplayStringAt+0xa0>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	dc33      	bgt.n	8003716 <BSP_LCD_DisplayStringAt+0xd2>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <BSP_LCD_DisplayStringAt+0x74>
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d019      	beq.n	80036ea <BSP_LCD_DisplayStringAt+0xa6>
 80036b6:	e02e      	b.n	8003716 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	1ad1      	subs	r1, r2, r3
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	483e      	ldr	r0, [pc, #248]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4403      	add	r3, r0
 80036ce:	3308      	adds	r3, #8
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	889b      	ldrh	r3, [r3, #4]
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	4413      	add	r3, r2
 80036e0:	83fb      	strh	r3, [r7, #30]
      break;
 80036e2:	e01b      	b.n	800371c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	83fb      	strh	r3, [r7, #30]
      break;
 80036e8:	e018      	b.n	800371c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	b299      	uxth	r1, r3
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4831      	ldr	r0, [pc, #196]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 80036f8:	4613      	mov	r3, r2
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4403      	add	r3, r0
 8003702:	3308      	adds	r3, #8
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	889b      	ldrh	r3, [r3, #4]
 8003708:	fb11 f303 	smulbb	r3, r1, r3
 800370c:	b29a      	uxth	r2, r3
 800370e:	89fb      	ldrh	r3, [r7, #14]
 8003710:	4413      	add	r3, r2
 8003712:	83fb      	strh	r3, [r7, #30]
      break;
 8003714:	e002      	b.n	800371c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003716:	89fb      	ldrh	r3, [r7, #14]
 8003718:	83fb      	strh	r3, [r7, #30]
      break;
 800371a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800371c:	e01a      	b.n	8003754 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	89b9      	ldrh	r1, [r7, #12]
 8003724:	8bfb      	ldrh	r3, [r7, #30]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff ff48 	bl	80035bc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800372c:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4922      	ldr	r1, [pc, #136]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3308      	adds	r3, #8
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	889a      	ldrh	r2, [r3, #4]
 8003742:	8bfb      	ldrh	r3, [r7, #30]
 8003744:	4413      	add	r3, r2
 8003746:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3301      	adds	r3, #1
 800374c:	60bb      	str	r3, [r7, #8]
    i++;
 800374e:	8bbb      	ldrh	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2dc      	uxtb	r4, r3
 8003762:	f7ff fd9f 	bl	80032a4 <BSP_LCD_GetXSize>
 8003766:	8bb9      	ldrh	r1, [r7, #28]
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4d13      	ldr	r5, [pc, #76]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	442b      	add	r3, r5
 8003778:	3308      	adds	r3, #8
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	889b      	ldrh	r3, [r3, #4]
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	1ac3      	subs	r3, r0, r3
 8003784:	b299      	uxth	r1, r3
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <BSP_LCD_DisplayStringAt+0x174>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	480c      	ldr	r0, [pc, #48]	; (80037bc <BSP_LCD_DisplayStringAt+0x178>)
 800378c:	4613      	mov	r3, r2
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4403      	add	r3, r0
 8003796:	3308      	adds	r3, #8
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	889b      	ldrh	r3, [r3, #4]
 800379c:	4299      	cmp	r1, r3
 800379e:	bf2c      	ite	cs
 80037a0:	2301      	movcs	r3, #1
 80037a2:	2300      	movcc	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4023      	ands	r3, r4
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1b7      	bne.n	800371e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	3720      	adds	r7, #32
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bdb0      	pop	{r4, r5, r7, pc}
 80037b8:	20000e30 	.word	0x20000e30
 80037bc:	20000e34 	.word	0x20000e34

080037c0 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	6039      	str	r1, [r7, #0]
 80037ca:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80037cc:	f7ff fe54 	bl	8003478 <BSP_LCD_GetFont>
 80037d0:	4603      	mov	r3, r0
 80037d2:	88db      	ldrh	r3, [r3, #6]
 80037d4:	88fa      	ldrh	r2, [r7, #6]
 80037d6:	fb12 f303 	smulbb	r3, r2, r3
 80037da:	b299      	uxth	r1, r3
 80037dc:	2303      	movs	r3, #3
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7ff ff2f 	bl	8003644 <BSP_LCD_DisplayStringAt>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	b086      	sub	sp, #24
 80037f6:	af02      	add	r7, sp, #8
 80037f8:	4604      	mov	r4, r0
 80037fa:	4608      	mov	r0, r1
 80037fc:	4611      	mov	r1, r2
 80037fe:	461a      	mov	r2, r3
 8003800:	4623      	mov	r3, r4
 8003802:	80fb      	strh	r3, [r7, #6]
 8003804:	4603      	mov	r3, r0
 8003806:	80bb      	strh	r3, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
 800380c:	4613      	mov	r3, r2
 800380e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003814:	4b20      	ldr	r3, [pc, #128]	; (8003898 <BSP_LCD_FillRect+0xa8>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4920      	ldr	r1, [pc, #128]	; (800389c <BSP_LCD_FillRect+0xac>)
 800381a:	4613      	mov	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fdda 	bl	80033e0 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <BSP_LCD_FillRect+0xa8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <BSP_LCD_FillRect+0xb0>)
 8003832:	2134      	movs	r1, #52	; 0x34
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	335c      	adds	r3, #92	; 0x5c
 800383c:	681c      	ldr	r4, [r3, #0]
 800383e:	f7ff fd31 	bl	80032a4 <BSP_LCD_GetXSize>
 8003842:	4602      	mov	r2, r0
 8003844:	88bb      	ldrh	r3, [r7, #4]
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4423      	add	r3, r4
 8003852:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <BSP_LCD_FillRect+0xa8>)
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	68fd      	ldr	r5, [r7, #12]
 800385a:	887e      	ldrh	r6, [r7, #2]
 800385c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003860:	f7ff fd20 	bl	80032a4 <BSP_LCD_GetXSize>
 8003864:	4602      	mov	r2, r0
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	1ad1      	subs	r1, r2, r3
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <BSP_LCD_FillRect+0xa8>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	480b      	ldr	r0, [pc, #44]	; (800389c <BSP_LCD_FillRect+0xac>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4403      	add	r3, r0
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	9100      	str	r1, [sp, #0]
 8003880:	4643      	mov	r3, r8
 8003882:	4632      	mov	r2, r6
 8003884:	4629      	mov	r1, r5
 8003886:	4620      	mov	r0, r4
 8003888:	f000 f9d2 	bl	8003c30 <FillBuffer>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003896:	bf00      	nop
 8003898:	20000e30 	.word	0x20000e30
 800389c:	20000e34 	.word	0x20000e34
 80038a0:	20000d18 	.word	0x20000d18

080038a4 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <BSP_LCD_DisplayOn+0x1c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <BSP_LCD_DisplayOn+0x1c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4798      	blx	r3
  }
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000e4c 	.word	0x20000e4c

080038c4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	; 0x38
 80038c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	4b61      	ldr	r3, [pc, #388]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	4a60      	ldr	r2, [pc, #384]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038d8:	6453      	str	r3, [r2, #68]	; 0x44
 80038da:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e2:	623b      	str	r3, [r7, #32]
 80038e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	4b5a      	ldr	r3, [pc, #360]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	61bb      	str	r3, [r7, #24]
 8003906:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	61bb      	str	r3, [r7, #24]
 800391c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	4b4c      	ldr	r3, [pc, #304]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	4a4b      	ldr	r2, [pc, #300]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003928:	f043 0302 	orr.w	r3, r3, #2
 800392c:	6313      	str	r3, [r2, #48]	; 0x30
 800392e:	4b49      	ldr	r3, [pc, #292]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	4b45      	ldr	r3, [pc, #276]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	4a44      	ldr	r2, [pc, #272]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6313      	str	r3, [r2, #48]	; 0x30
 800394a:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003960:	f043 0308 	orr.w	r3, r3, #8
 8003964:	6313      	str	r3, [r2, #48]	; 0x30
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4a36      	ldr	r2, [pc, #216]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	6313      	str	r3, [r2, #48]	; 0x30
 8003982:	4b34      	ldr	r3, [pc, #208]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	4b30      	ldr	r3, [pc, #192]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <BSP_LCD_MspInit+0x190>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80039aa:	f641 0358 	movw	r3, #6232	; 0x1858
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80039b8:	2302      	movs	r3, #2
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80039bc:	230e      	movs	r3, #14
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80039c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c4:	4619      	mov	r1, r3
 80039c6:	4824      	ldr	r0, [pc, #144]	; (8003a58 <BSP_LCD_MspInit+0x194>)
 80039c8:	f001 f9f2 	bl	8004db0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80039cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80039d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d6:	4619      	mov	r1, r3
 80039d8:	4820      	ldr	r0, [pc, #128]	; (8003a5c <BSP_LCD_MspInit+0x198>)
 80039da:	f001 f9e9 	bl	8004db0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80039de:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80039e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039e8:	4619      	mov	r1, r3
 80039ea:	481d      	ldr	r0, [pc, #116]	; (8003a60 <BSP_LCD_MspInit+0x19c>)
 80039ec:	f001 f9e0 	bl	8004db0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80039f0:	2348      	movs	r3, #72	; 0x48
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	4619      	mov	r1, r3
 80039fa:	481a      	ldr	r0, [pc, #104]	; (8003a64 <BSP_LCD_MspInit+0x1a0>)
 80039fc:	f001 f9d8 	bl	8004db0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4816      	ldr	r0, [pc, #88]	; (8003a68 <BSP_LCD_MspInit+0x1a4>)
 8003a0e:	f001 f9cf 	bl	8004db0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003a12:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4813      	ldr	r0, [pc, #76]	; (8003a6c <BSP_LCD_MspInit+0x1a8>)
 8003a20:	f001 f9c6 	bl	8004db0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003a24:	2303      	movs	r3, #3
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003a28:	2309      	movs	r3, #9
 8003a2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a30:	4619      	mov	r1, r3
 8003a32:	480a      	ldr	r0, [pc, #40]	; (8003a5c <BSP_LCD_MspInit+0x198>)
 8003a34:	f001 f9bc 	bl	8004db0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003a38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a42:	4619      	mov	r1, r3
 8003a44:	4809      	ldr	r0, [pc, #36]	; (8003a6c <BSP_LCD_MspInit+0x1a8>)
 8003a46:	f001 f9b3 	bl	8004db0 <HAL_GPIO_Init>
}
 8003a4a:	bf00      	nop
 8003a4c:	3738      	adds	r7, #56	; 0x38
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40021400 	.word	0x40021400
 8003a6c:	40021800 	.word	0x40021800

08003a70 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	603a      	str	r2, [r7, #0]
 8003a7a:	80fb      	strh	r3, [r7, #6]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003a80:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <BSP_LCD_DrawPixel+0x44>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <BSP_LCD_DrawPixel+0x48>)
 8003a86:	2134      	movs	r1, #52	; 0x34
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	335c      	adds	r3, #92	; 0x5c
 8003a90:	681c      	ldr	r4, [r3, #0]
 8003a92:	88bd      	ldrh	r5, [r7, #4]
 8003a94:	f7ff fc06 	bl	80032a4 <BSP_LCD_GetXSize>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	fb03 f205 	mul.w	r2, r3, r5
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4423      	add	r3, r4
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab4:	20000e30 	.word	0x20000e30
 8003ab8:	20000d18 	.word	0x20000d18

08003abc <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	603a      	str	r2, [r7, #0]
 8003ac6:	80fb      	strh	r3, [r7, #6]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <DrawChar+0x16c>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4953      	ldr	r1, [pc, #332]	; (8003c2c <DrawChar+0x170>)
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	3308      	adds	r3, #8
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	88db      	ldrh	r3, [r3, #6]
 8003aee:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <DrawChar+0x16c>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	494d      	ldr	r1, [pc, #308]	; (8003c2c <DrawChar+0x170>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3308      	adds	r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	889b      	ldrh	r3, [r3, #4]
 8003b06:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003b08:	8a3b      	ldrh	r3, [r7, #16]
 8003b0a:	3307      	adds	r3, #7
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da00      	bge.n	8003b12 <DrawChar+0x56>
 8003b10:	3307      	adds	r3, #7
 8003b12:	10db      	asrs	r3, r3, #3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	8a3b      	ldrh	r3, [r7, #16]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e076      	b.n	8003c16 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003b28:	8a3b      	ldrh	r3, [r7, #16]
 8003b2a:	3307      	adds	r3, #7
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	da00      	bge.n	8003b32 <DrawChar+0x76>
 8003b30:	3307      	adds	r3, #7
 8003b32:	10db      	asrs	r3, r3, #3
 8003b34:	461a      	mov	r2, r3
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003b42:	8a3b      	ldrh	r3, [r7, #16]
 8003b44:	3307      	adds	r3, #7
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	da00      	bge.n	8003b4c <DrawChar+0x90>
 8003b4a:	3307      	adds	r3, #7
 8003b4c:	10db      	asrs	r3, r3, #3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d002      	beq.n	8003b58 <DrawChar+0x9c>
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d004      	beq.n	8003b60 <DrawChar+0xa4>
 8003b56:	e00c      	b.n	8003b72 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
      break;
 8003b5e:	e016      	b.n	8003b8e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	3201      	adds	r2, #1
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
      break;
 8003b70:	e00d      	b.n	8003b8e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	041a      	lsls	r2, r3, #16
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	4313      	orrs	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	3202      	adds	r2, #2
 8003b86:	7812      	ldrb	r2, [r2, #0]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
      break;
 8003b8c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e036      	b.n	8003c02 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003b94:	8a3a      	ldrh	r2, [r7, #16]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	b298      	uxth	r0, r3
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <DrawChar+0x16c>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	491b      	ldr	r1, [pc, #108]	; (8003c2c <DrawChar+0x170>)
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	88bb      	ldrh	r3, [r7, #4]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7ff ff4e 	bl	8003a70 <BSP_LCD_DrawPixel>
 8003bd4:	e012      	b.n	8003bfc <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	4413      	add	r3, r2
 8003bde:	b298      	uxth	r0, r3
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <DrawChar+0x16c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4911      	ldr	r1, [pc, #68]	; (8003c2c <DrawChar+0x170>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7ff ff3a 	bl	8003a70 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	8a3b      	ldrh	r3, [r7, #16]
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3c4      	bcc.n	8003b94 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	8a7b      	ldrh	r3, [r7, #18]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d384      	bcc.n	8003b28 <DrawChar+0x6c>
  }
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	3720      	adds	r7, #32
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000e30 	.word	0x20000e30
 8003c2c:	20000e34 	.word	0x20000e34

08003c30 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003c3e:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <FillBuffer+0x68>)
 8003c40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c44:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003c46:	4b14      	ldr	r3, [pc, #80]	; (8003c98 <FillBuffer+0x68>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003c4c:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <FillBuffer+0x68>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <FillBuffer+0x68>)
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <FillBuffer+0x6c>)
 8003c56:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003c58:	480f      	ldr	r0, [pc, #60]	; (8003c98 <FillBuffer+0x68>)
 8003c5a:	f000 fd0d 	bl	8004678 <HAL_DMA2D_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d115      	bne.n	8003c90 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	480c      	ldr	r0, [pc, #48]	; (8003c98 <FillBuffer+0x68>)
 8003c68:	f000 ff74 	bl	8004b54 <HAL_DMA2D_ConfigLayer>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	4806      	ldr	r0, [pc, #24]	; (8003c98 <FillBuffer+0x68>)
 8003c7e:	f000 fd44 	bl	800470a <HAL_DMA2D_Start>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003c88:	210a      	movs	r1, #10
 8003c8a:	4803      	ldr	r0, [pc, #12]	; (8003c98 <FillBuffer+0x68>)
 8003c8c:	f000 fd68 	bl	8004760 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000dc0 	.word	0x20000dc0
 8003c9c:	4002b000 	.word	0x4002b000

08003ca0 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003ca4:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <BSP_SDRAM_Init+0xb0>)
 8003ca8:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003caa:	4b2a      	ldr	r3, [pc, #168]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cac:	2202      	movs	r2, #2
 8003cae:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003cb0:	4b28      	ldr	r3, [pc, #160]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cb2:	2207      	movs	r2, #7
 8003cb4:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cb8:	2204      	movs	r2, #4
 8003cba:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003cbc:	4b25      	ldr	r3, [pc, #148]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003cc2:	4b24      	ldr	r3, [pc, #144]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cca:	2202      	movs	r2, #2
 8003ccc:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003cda:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003ce2:	2204      	movs	r2, #4
 8003ce4:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003ce6:	4b19      	ldr	r3, [pc, #100]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003ce8:	2210      	movs	r2, #16
 8003cea:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003cf2:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003cf4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003cf8:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d06:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003d16:	2100      	movs	r1, #0
 8003d18:	480c      	ldr	r0, [pc, #48]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003d1a:	f000 f87f 	bl	8003e1c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003d1e:	490d      	ldr	r1, [pc, #52]	; (8003d54 <BSP_SDRAM_Init+0xb4>)
 8003d20:	480a      	ldr	r0, [pc, #40]	; (8003d4c <BSP_SDRAM_Init+0xac>)
 8003d22:	f004 fc35 	bl	8008590 <HAL_SDRAM_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <BSP_SDRAM_Init+0xb8>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	e002      	b.n	8003d3a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003d34:	4b08      	ldr	r3, [pc, #32]	; (8003d58 <BSP_SDRAM_Init+0xb8>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003d3a:	f240 506a 	movw	r0, #1386	; 0x56a
 8003d3e:	f000 f80d 	bl	8003d5c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003d42:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <BSP_SDRAM_Init+0xb8>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000e50 	.word	0x20000e50
 8003d50:	a0000140 	.word	0xa0000140
 8003d54:	20000e84 	.word	0x20000e84
 8003d58:	20000040 	.word	0x20000040

08003d5c <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003d68:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d70:	2208      	movs	r2, #8
 8003d72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d84:	4923      	ldr	r1, [pc, #140]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d86:	4824      	ldr	r0, [pc, #144]	; (8003e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d88:	f004 fc40 	bl	800860c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	f000 f993 	bl	80040b8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d94:	2202      	movs	r2, #2
 8003d96:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d9a:	2208      	movs	r2, #8
 8003d9c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dae:	4919      	ldr	r1, [pc, #100]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db0:	4819      	ldr	r0, [pc, #100]	; (8003e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003db2:	f004 fc2b 	bl	800860c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db8:	2203      	movs	r2, #3
 8003dba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dd2:	4910      	ldr	r1, [pc, #64]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dd4:	4810      	ldr	r0, [pc, #64]	; (8003e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003dd6:	f004 fc19 	bl	800860c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003dda:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003dde:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003de2:	2204      	movs	r2, #4
 8003de4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003de8:	2208      	movs	r2, #8
 8003dea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003dec:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4a07      	ldr	r2, [pc, #28]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003df6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dfc:	4905      	ldr	r1, [pc, #20]	; (8003e14 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dfe:	4806      	ldr	r0, [pc, #24]	; (8003e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e00:	f004 fc04 	bl	800860c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4804      	ldr	r0, [pc, #16]	; (8003e18 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e08:	f004 fc2b 	bl	8008662 <HAL_SDRAM_ProgramRefreshRate>
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000ea0 	.word	0x20000ea0
 8003e18:	20000e50 	.word	0x20000e50

08003e1c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b090      	sub	sp, #64	; 0x40
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 80ec 	beq.w	8004006 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e2e:	2300      	movs	r3, #0
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e32:	4b77      	ldr	r3, [pc, #476]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	4a76      	ldr	r2, [pc, #472]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6393      	str	r3, [r2, #56]	; 0x38
 8003e3e:	4b74      	ldr	r3, [pc, #464]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e48:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	4b70      	ldr	r3, [pc, #448]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a6f      	ldr	r2, [pc, #444]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e66:	2300      	movs	r3, #0
 8003e68:	623b      	str	r3, [r7, #32]
 8003e6a:	4b69      	ldr	r3, [pc, #420]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a68      	ldr	r2, [pc, #416]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b66      	ldr	r3, [pc, #408]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	623b      	str	r3, [r7, #32]
 8003e80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	4b62      	ldr	r3, [pc, #392]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a61      	ldr	r2, [pc, #388]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b5f      	ldr	r3, [pc, #380]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b58      	ldr	r3, [pc, #352]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	4b54      	ldr	r3, [pc, #336]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a53      	ldr	r2, [pc, #332]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b51      	ldr	r3, [pc, #324]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	4b4d      	ldr	r3, [pc, #308]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a4c      	ldr	r2, [pc, #304]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ee0:	f043 0320 	orr.w	r3, r3, #32
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b4a      	ldr	r3, [pc, #296]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	4b46      	ldr	r3, [pc, #280]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	4a45      	ldr	r2, [pc, #276]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f00:	6313      	str	r3, [r2, #48]	; 0x30
 8003f02:	4b43      	ldr	r3, [pc, #268]	; (8004010 <BSP_SDRAM_MspInit+0x1f4>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003f12:	2302      	movs	r3, #2
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003f1e:	2360      	movs	r3, #96	; 0x60
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f26:	4619      	mov	r1, r3
 8003f28:	483a      	ldr	r0, [pc, #232]	; (8004014 <BSP_SDRAM_MspInit+0x1f8>)
 8003f2a:	f000 ff41 	bl	8004db0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003f2e:	2301      	movs	r3, #1
 8003f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f36:	4619      	mov	r1, r3
 8003f38:	4837      	ldr	r0, [pc, #220]	; (8004018 <BSP_SDRAM_MspInit+0x1fc>)
 8003f3a:	f000 ff39 	bl	8004db0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003f3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f42:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003f44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4834      	ldr	r0, [pc, #208]	; (800401c <BSP_SDRAM_MspInit+0x200>)
 8003f4c:	f000 ff30 	bl	8004db0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003f50:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4830      	ldr	r0, [pc, #192]	; (8004020 <BSP_SDRAM_MspInit+0x204>)
 8003f5e:	f000 ff27 	bl	8004db0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003f62:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003f68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	482d      	ldr	r0, [pc, #180]	; (8004024 <BSP_SDRAM_MspInit+0x208>)
 8003f70:	f000 ff1e 	bl	8004db0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003f74:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4829      	ldr	r0, [pc, #164]	; (8004028 <BSP_SDRAM_MspInit+0x20c>)
 8003f82:	f000 ff15 	bl	8004db0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003f86:	4b29      	ldr	r3, [pc, #164]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f8c:	4b27      	ldr	r3, [pc, #156]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003f8e:	2280      	movs	r2, #128	; 0x80
 8003f90:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f98:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003f9a:	4b24      	ldr	r3, [pc, #144]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fa0:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fa8:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fb0:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003fb8:	4b1c      	ldr	r3, [pc, #112]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fbe:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003fc6:	4b19      	ldr	r3, [pc, #100]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fc8:	2203      	movs	r2, #3
 8003fca:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003fd2:	4b16      	ldr	r3, [pc, #88]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003fd8:	4b14      	ldr	r3, [pc, #80]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <BSP_SDRAM_MspInit+0x214>)
 8003fdc:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a12      	ldr	r2, [pc, #72]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fe4:	4a11      	ldr	r2, [pc, #68]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003fea:	4810      	ldr	r0, [pc, #64]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003fec:	f000 fa34 	bl	8004458 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003ff0:	480e      	ldr	r0, [pc, #56]	; (800402c <BSP_SDRAM_MspInit+0x210>)
 8003ff2:	f000 f983 	bl	80042fc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	210f      	movs	r1, #15
 8003ffa:	2038      	movs	r0, #56	; 0x38
 8003ffc:	f000 f938 	bl	8004270 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004000:	2038      	movs	r0, #56	; 0x38
 8004002:	f000 f951 	bl	80042a8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004006:	bf00      	nop
 8004008:	3740      	adds	r7, #64	; 0x40
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40021400 	.word	0x40021400
 8004028:	40021800 	.word	0x40021800
 800402c:	20000eb0 	.word	0x20000eb0
 8004030:	40026410 	.word	0x40026410

08004034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_Init+0x40>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <HAL_Init+0x40>)
 800403e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <HAL_Init+0x40>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0a      	ldr	r2, [pc, #40]	; (8004074 <HAL_Init+0x40>)
 800404a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	4b08      	ldr	r3, [pc, #32]	; (8004074 <HAL_Init+0x40>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	; (8004074 <HAL_Init+0x40>)
 8004056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800405a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405c:	2003      	movs	r0, #3
 800405e:	f000 f8fc 	bl	800425a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004062:	2000      	movs	r0, #0
 8004064:	f7fe fb28 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004068:	f7fe fafa 	bl	8002660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00

08004078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_IncTick+0x20>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_IncTick+0x24>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4413      	add	r3, r2
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <HAL_IncTick+0x24>)
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000048 	.word	0x20000048
 800409c:	20000f10 	.word	0x20000f10

080040a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTick;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_GetTick+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000f10 	.word	0x20000f10

080040b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7ff ffee 	bl	80040a0 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040d0:	d005      	beq.n	80040de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040d2:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <HAL_Delay+0x44>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80040de:	bf00      	nop
 80040e0:	f7ff ffde 	bl	80040a0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d8f7      	bhi.n	80040e0 <HAL_Delay+0x28>
  {
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000048 	.word	0x20000048

08004100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004110:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800411c:	4013      	ands	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800412c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004132:	4a04      	ldr	r2, [pc, #16]	; (8004144 <__NVIC_SetPriorityGrouping+0x44>)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	60d3      	str	r3, [r2, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	e000ed00 	.word	0xe000ed00

08004148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <__NVIC_GetPriorityGrouping+0x18>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	0a1b      	lsrs	r3, r3, #8
 8004152:	f003 0307 	and.w	r3, r3, #7
}
 8004156:	4618      	mov	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	2b00      	cmp	r3, #0
 8004174:	db0b      	blt.n	800418e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4907      	ldr	r1, [pc, #28]	; (800419c <__NVIC_EnableIRQ+0x38>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	2001      	movs	r0, #1
 8004186:	fa00 f202 	lsl.w	r2, r0, r2
 800418a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000e100 	.word	0xe000e100

080041a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	db0a      	blt.n	80041ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	490c      	ldr	r1, [pc, #48]	; (80041ec <__NVIC_SetPriority+0x4c>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	0112      	lsls	r2, r2, #4
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	440b      	add	r3, r1
 80041c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c8:	e00a      	b.n	80041e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	4908      	ldr	r1, [pc, #32]	; (80041f0 <__NVIC_SetPriority+0x50>)
 80041d0:	79fb      	ldrb	r3, [r7, #7]
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	3b04      	subs	r3, #4
 80041d8:	0112      	lsls	r2, r2, #4
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	440b      	add	r3, r1
 80041de:	761a      	strb	r2, [r3, #24]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000e100 	.word	0xe000e100
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f1c3 0307 	rsb	r3, r3, #7
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf28      	it	cs
 8004212:	2304      	movcs	r3, #4
 8004214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3304      	adds	r3, #4
 800421a:	2b06      	cmp	r3, #6
 800421c:	d902      	bls.n	8004224 <NVIC_EncodePriority+0x30>
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	3b03      	subs	r3, #3
 8004222:	e000      	b.n	8004226 <NVIC_EncodePriority+0x32>
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	401a      	ands	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800423c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	43d9      	mvns	r1, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	4313      	orrs	r3, r2
         );
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ff4c 	bl	8004100 <__NVIC_SetPriorityGrouping>
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004282:	f7ff ff61 	bl	8004148 <__NVIC_GetPriorityGrouping>
 8004286:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68b9      	ldr	r1, [r7, #8]
 800428c:	6978      	ldr	r0, [r7, #20]
 800428e:	f7ff ffb1 	bl	80041f4 <NVIC_EncodePriority>
 8004292:	4602      	mov	r2, r0
 8004294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004298:	4611      	mov	r1, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff ff80 	bl	80041a0 <__NVIC_SetPriority>
}
 80042a0:	bf00      	nop
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ff54 	bl	8004164 <__NVIC_EnableIRQ>
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00e      	b.n	80042f4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	795b      	ldrb	r3, [r3, #5]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d105      	bne.n	80042ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc feaa 	bl	8001040 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004308:	f7ff feca 	bl	80040a0 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e099      	b.n	800444c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0201 	bic.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004338:	e00f      	b.n	800435a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800433a:	f7ff feb1 	bl	80040a0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b05      	cmp	r3, #5
 8004346:	d908      	bls.n	800435a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2203      	movs	r2, #3
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e078      	b.n	800444c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e8      	bne.n	800433a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <HAL_DMA_Init+0x158>)
 8004374:	4013      	ands	r3, r2
 8004376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d107      	bne.n	80043c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d117      	bne.n	800441e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00e      	beq.n	800441e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f8bd 	bl	8004580 <DMA_CheckFifoParam>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2240      	movs	r2, #64	; 0x40
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800441a:	2301      	movs	r3, #1
 800441c:	e016      	b.n	800444c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f874 	bl	8004514 <DMA_CalcBaseAndBitshift>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3718      	adds	r7, #24
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	f010803f 	.word	0xf010803f

08004458 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e050      	b.n	800450c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d101      	bne.n	800447a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004476:	2302      	movs	r3, #2
 8004478:	e048      	b.n	800450c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2221      	movs	r2, #33	; 0x21
 80044b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f82a 	bl	8004514 <DMA_CalcBaseAndBitshift>
 80044c0:	4603      	mov	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	223f      	movs	r2, #63	; 0x3f
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3b10      	subs	r3, #16
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <DMA_CalcBaseAndBitshift+0x64>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <DMA_CalcBaseAndBitshift+0x68>)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d909      	bls.n	8004556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
 8004554:	e007      	b.n	8004566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	aaaaaaab 	.word	0xaaaaaaab
 800457c:	080196ec 	.word	0x080196ec

08004580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d11f      	bne.n	80045da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d856      	bhi.n	800464e <DMA_CheckFifoParam+0xce>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <DMA_CheckFifoParam+0x28>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045cb 	.word	0x080045cb
 80045b0:	080045b9 	.word	0x080045b9
 80045b4:	0800464f 	.word	0x0800464f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d046      	beq.n	8004652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e043      	b.n	8004652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d2:	d140      	bne.n	8004656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e03d      	b.n	8004656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e2:	d121      	bne.n	8004628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d837      	bhi.n	800465a <DMA_CheckFifoParam+0xda>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <DMA_CheckFifoParam+0x70>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004607 	.word	0x08004607
 80045f8:	08004601 	.word	0x08004601
 80045fc:	08004619 	.word	0x08004619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      break;
 8004604:	e030      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d025      	beq.n	800465e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004616:	e022      	b.n	800465e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004620:	d11f      	bne.n	8004662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004626:	e01c      	b.n	8004662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d903      	bls.n	8004636 <DMA_CheckFifoParam+0xb6>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b03      	cmp	r3, #3
 8004632:	d003      	beq.n	800463c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004634:	e018      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
      break;
 800463a:	e015      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e00b      	b.n	8004666 <DMA_CheckFifoParam+0xe6>
      break;
 800464e:	bf00      	nop
 8004650:	e00a      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e008      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
 8004658:	e006      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e004      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;   
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
    }
  } 
  
  return status; 
 8004668:	7bfb      	ldrb	r3, [r7, #15]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e03b      	b.n	8004702 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fc fcf0 	bl	8001084 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	430a      	orrs	r2, r1
 80046c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	f023 0107 	bic.w	r1, r3, #7
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80046e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68d1      	ldr	r1, [r2, #12]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b086      	sub	sp, #24
 800470e:	af02      	add	r7, sp, #8
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_DMA2D_Start+0x1c>
 8004722:	2302      	movs	r3, #2
 8004724:	e018      	b.n	8004758 <HAL_DMA2D_Start+0x4e>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fa99 	bl	8004c78 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d056      	beq.n	800482a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800477c:	f7ff fc90 	bl	80040a0 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004782:	e04b      	b.n	800481c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	f043 0202 	orr.w	r2, r3, #2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	f043 0201 	orr.w	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2221      	movs	r2, #33	; 0x21
 80047c8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2204      	movs	r2, #4
 80047ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e0a5      	b.n	800492a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e4:	d01a      	beq.n	800481c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80047e6:	f7ff fc5b 	bl	80040a0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d302      	bcc.n	80047fc <HAL_DMA2D_PollForTransfer+0x9c>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10f      	bne.n	800481c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	f043 0220 	orr.w	r2, r3, #32
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e086      	b.n	800492a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0ac      	beq.n	8004784 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d061      	beq.n	8004910 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800484c:	f7ff fc28 	bl	80040a0 <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004852:	e056      	b.n	8004902 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004862:	2b00      	cmp	r3, #0
 8004864:	d02e      	beq.n	80048c4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004874:	f043 0204 	orr.w	r2, r3, #4
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	f043 0202 	orr.w	r2, r3, #2
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	f043 0201 	orr.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2229      	movs	r2, #41	; 0x29
 80048ae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2204      	movs	r2, #4
 80048b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e032      	b.n	800492a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ca:	d01a      	beq.n	8004902 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80048cc:	f7ff fbe8 	bl	80040a0 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <HAL_DMA2D_PollForTransfer+0x182>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10f      	bne.n	8004902 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2203      	movs	r2, #3
 80048f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e013      	b.n	800492a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0a1      	beq.n	8004854 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2212      	movs	r2, #18
 8004916:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b084      	sub	sp, #16
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d026      	beq.n	80049a2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d021      	beq.n	80049a2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800496c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2201      	movs	r2, #1
 8004980:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2204      	movs	r2, #4
 8004986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d026      	beq.n	80049fa <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d021      	beq.n	80049fa <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2220      	movs	r2, #32
 80049cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	f043 0202 	orr.w	r2, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2204      	movs	r2, #4
 80049de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d026      	beq.n	8004a52 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d021      	beq.n	8004a52 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2208      	movs	r2, #8
 8004a24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2204      	movs	r2, #4
 8004a36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d013      	beq.n	8004a84 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f853 	bl	8004b2a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d024      	beq.n	8004ad8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d01f      	beq.n	8004ad8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2202      	movs	r2, #2
 8004aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d01f      	beq.n	8004b22 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004afa:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2210      	movs	r2, #16
 8004b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f80e 	bl	8004b3e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
	...

08004b54 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d101      	bne.n	8004b74 <HAL_DMA2D_ConfigLayer+0x20>
 8004b70:	2302      	movs	r3, #2
 8004b72:	e079      	b.n	8004c68 <HAL_DMA2D_ConfigLayer+0x114>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	3318      	adds	r3, #24
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	041b      	lsls	r3, r3, #16
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004b9e:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <HAL_DMA2D_ConfigLayer+0x120>)
 8004ba0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b0a      	cmp	r3, #10
 8004ba8:	d003      	beq.n	8004bb2 <HAL_DMA2D_ConfigLayer+0x5e>
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b09      	cmp	r3, #9
 8004bb0:	d107      	bne.n	8004bc2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	e005      	b.n	8004bce <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	061b      	lsls	r3, r3, #24
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d120      	bne.n	8004c16 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	ea02 0103 	and.w	r1, r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b0a      	cmp	r3, #10
 8004bfc:	d003      	beq.n	8004c06 <HAL_DMA2D_ConfigLayer+0xb2>
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	d127      	bne.n	8004c56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c12:	629a      	str	r2, [r3, #40]	; 0x28
 8004c14:	e01f      	b.n	8004c56 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	ea02 0103 	and.w	r1, r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	6812      	ldr	r2, [r2, #0]
 8004c36:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b0a      	cmp	r3, #10
 8004c3e:	d003      	beq.n	8004c48 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b09      	cmp	r3, #9
 8004c46:	d106      	bne.n	8004c56 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	68da      	ldr	r2, [r3, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c54:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	ff03000f 	.word	0xff03000f

08004c78 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b08b      	sub	sp, #44	; 0x2c
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	041a      	lsls	r2, r3, #16
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	431a      	orrs	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb0:	d174      	bne.n	8004d9c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cc0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004cc8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d108      	bne.n	8004cea <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce8:	e053      	b.n	8004d92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d106      	bne.n	8004d00 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	e048      	b.n	8004d92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d111      	bne.n	8004d2c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	0cdb      	lsrs	r3, r3, #19
 8004d0c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	0a9b      	lsrs	r3, r3, #10
 8004d12:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	08db      	lsrs	r3, r3, #3
 8004d18:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	02db      	lsls	r3, r3, #11
 8004d22:	4313      	orrs	r3, r2
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e032      	b.n	8004d92 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d117      	bne.n	8004d64 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	0fdb      	lsrs	r3, r3, #31
 8004d38:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	0cdb      	lsrs	r3, r3, #19
 8004d3e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	0adb      	lsrs	r3, r3, #11
 8004d44:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	029b      	lsls	r3, r3, #10
 8004d54:	431a      	orrs	r2, r3
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	03db      	lsls	r3, r3, #15
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	627b      	str	r3, [r7, #36]	; 0x24
 8004d62:	e016      	b.n	8004d92 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	0f1b      	lsrs	r3, r3, #28
 8004d68:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	0d1b      	lsrs	r3, r3, #20
 8004d6e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	0b1b      	lsrs	r3, r3, #12
 8004d74:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	011a      	lsls	r2, r3, #4
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	431a      	orrs	r2, r3
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d98:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004d9a:	e003      	b.n	8004da4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	60da      	str	r2, [r3, #12]
}
 8004da4:	bf00      	nop
 8004da6:	372c      	adds	r7, #44	; 0x2c
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
 8004dca:	e177      	b.n	80050bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dcc:	2201      	movs	r2, #1
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	f040 8166 	bne.w	80050b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00b      	beq.n	8004e0a <HAL_GPIO_Init+0x5a>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d007      	beq.n	8004e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dfe:	2b11      	cmp	r3, #17
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b12      	cmp	r3, #18
 8004e08:	d130      	bne.n	8004e6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	2203      	movs	r2, #3
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e40:	2201      	movs	r2, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	091b      	lsrs	r3, r3, #4
 8004e56:	f003 0201 	and.w	r2, r3, #1
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	2203      	movs	r2, #3
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d003      	beq.n	8004eac <HAL_GPIO_Init+0xfc>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b12      	cmp	r3, #18
 8004eaa:	d123      	bne.n	8004ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	08da      	lsrs	r2, r3, #3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3208      	adds	r2, #8
 8004eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	220f      	movs	r2, #15
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0307 	and.w	r3, r3, #7
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	08da      	lsrs	r2, r3, #3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3208      	adds	r2, #8
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	2203      	movs	r2, #3
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	4013      	ands	r3, r2
 8004f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 0203 	and.w	r2, r3, #3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80c0 	beq.w	80050b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	4b66      	ldr	r3, [pc, #408]	; (80050d4 <HAL_GPIO_Init+0x324>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	4a65      	ldr	r2, [pc, #404]	; (80050d4 <HAL_GPIO_Init+0x324>)
 8004f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f44:	6453      	str	r3, [r2, #68]	; 0x44
 8004f46:	4b63      	ldr	r3, [pc, #396]	; (80050d4 <HAL_GPIO_Init+0x324>)
 8004f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f52:	4a61      	ldr	r2, [pc, #388]	; (80050d8 <HAL_GPIO_Init+0x328>)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	089b      	lsrs	r3, r3, #2
 8004f58:	3302      	adds	r3, #2
 8004f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	220f      	movs	r2, #15
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4013      	ands	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a58      	ldr	r2, [pc, #352]	; (80050dc <HAL_GPIO_Init+0x32c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d037      	beq.n	8004fee <HAL_GPIO_Init+0x23e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a57      	ldr	r2, [pc, #348]	; (80050e0 <HAL_GPIO_Init+0x330>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d031      	beq.n	8004fea <HAL_GPIO_Init+0x23a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a56      	ldr	r2, [pc, #344]	; (80050e4 <HAL_GPIO_Init+0x334>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02b      	beq.n	8004fe6 <HAL_GPIO_Init+0x236>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a55      	ldr	r2, [pc, #340]	; (80050e8 <HAL_GPIO_Init+0x338>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d025      	beq.n	8004fe2 <HAL_GPIO_Init+0x232>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a54      	ldr	r2, [pc, #336]	; (80050ec <HAL_GPIO_Init+0x33c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <HAL_GPIO_Init+0x22e>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a53      	ldr	r2, [pc, #332]	; (80050f0 <HAL_GPIO_Init+0x340>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d019      	beq.n	8004fda <HAL_GPIO_Init+0x22a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	; (80050f4 <HAL_GPIO_Init+0x344>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <HAL_GPIO_Init+0x226>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a51      	ldr	r2, [pc, #324]	; (80050f8 <HAL_GPIO_Init+0x348>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00d      	beq.n	8004fd2 <HAL_GPIO_Init+0x222>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a50      	ldr	r2, [pc, #320]	; (80050fc <HAL_GPIO_Init+0x34c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <HAL_GPIO_Init+0x21e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a4f      	ldr	r2, [pc, #316]	; (8005100 <HAL_GPIO_Init+0x350>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d101      	bne.n	8004fca <HAL_GPIO_Init+0x21a>
 8004fc6:	2309      	movs	r3, #9
 8004fc8:	e012      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fca:	230a      	movs	r3, #10
 8004fcc:	e010      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fce:	2308      	movs	r3, #8
 8004fd0:	e00e      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	e00c      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fd6:	2306      	movs	r3, #6
 8004fd8:	e00a      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fda:	2305      	movs	r3, #5
 8004fdc:	e008      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fde:	2304      	movs	r3, #4
 8004fe0:	e006      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e004      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e002      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fea:	2301      	movs	r3, #1
 8004fec:	e000      	b.n	8004ff0 <HAL_GPIO_Init+0x240>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	69fa      	ldr	r2, [r7, #28]
 8004ff2:	f002 0203 	and.w	r2, r2, #3
 8004ff6:	0092      	lsls	r2, r2, #2
 8004ff8:	4093      	lsls	r3, r2
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005000:	4935      	ldr	r1, [pc, #212]	; (80050d8 <HAL_GPIO_Init+0x328>)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	089b      	lsrs	r3, r3, #2
 8005006:	3302      	adds	r3, #2
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <HAL_GPIO_Init+0x354>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005032:	4a34      	ldr	r2, [pc, #208]	; (8005104 <HAL_GPIO_Init+0x354>)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005038:	4b32      	ldr	r3, [pc, #200]	; (8005104 <HAL_GPIO_Init+0x354>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	43db      	mvns	r3, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4013      	ands	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800505c:	4a29      	ldr	r2, [pc, #164]	; (8005104 <HAL_GPIO_Init+0x354>)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005062:	4b28      	ldr	r3, [pc, #160]	; (8005104 <HAL_GPIO_Init+0x354>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	43db      	mvns	r3, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4013      	ands	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005086:	4a1f      	ldr	r2, [pc, #124]	; (8005104 <HAL_GPIO_Init+0x354>)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HAL_GPIO_Init+0x354>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050b0:	4a14      	ldr	r2, [pc, #80]	; (8005104 <HAL_GPIO_Init+0x354>)
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	f67f ae84 	bls.w	8004dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	3724      	adds	r7, #36	; 0x24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40013800 	.word	0x40013800
 80050dc:	40020000 	.word	0x40020000
 80050e0:	40020400 	.word	0x40020400
 80050e4:	40020800 	.word	0x40020800
 80050e8:	40020c00 	.word	0x40020c00
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40021400 	.word	0x40021400
 80050f4:	40021800 	.word	0x40021800
 80050f8:	40021c00 	.word	0x40021c00
 80050fc:	40022000 	.word	0x40022000
 8005100:	40022400 	.word	0x40022400
 8005104:	40013c00 	.word	0x40013c00

08005108 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e0d9      	b.n	80052d8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005124:	2201      	movs	r2, #1
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	f040 80c9 	bne.w	80052d2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005140:	4a6b      	ldr	r2, [pc, #428]	; (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	3302      	adds	r3, #2
 8005148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800514c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	220f      	movs	r2, #15
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a63      	ldr	r2, [pc, #396]	; (80052f4 <HAL_GPIO_DeInit+0x1ec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d037      	beq.n	80051da <HAL_GPIO_DeInit+0xd2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a62      	ldr	r2, [pc, #392]	; (80052f8 <HAL_GPIO_DeInit+0x1f0>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d031      	beq.n	80051d6 <HAL_GPIO_DeInit+0xce>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a61      	ldr	r2, [pc, #388]	; (80052fc <HAL_GPIO_DeInit+0x1f4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d02b      	beq.n	80051d2 <HAL_GPIO_DeInit+0xca>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a60      	ldr	r2, [pc, #384]	; (8005300 <HAL_GPIO_DeInit+0x1f8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d025      	beq.n	80051ce <HAL_GPIO_DeInit+0xc6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a5f      	ldr	r2, [pc, #380]	; (8005304 <HAL_GPIO_DeInit+0x1fc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d01f      	beq.n	80051ca <HAL_GPIO_DeInit+0xc2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a5e      	ldr	r2, [pc, #376]	; (8005308 <HAL_GPIO_DeInit+0x200>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d019      	beq.n	80051c6 <HAL_GPIO_DeInit+0xbe>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a5d      	ldr	r2, [pc, #372]	; (800530c <HAL_GPIO_DeInit+0x204>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_GPIO_DeInit+0xba>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a5c      	ldr	r2, [pc, #368]	; (8005310 <HAL_GPIO_DeInit+0x208>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00d      	beq.n	80051be <HAL_GPIO_DeInit+0xb6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a5b      	ldr	r2, [pc, #364]	; (8005314 <HAL_GPIO_DeInit+0x20c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d007      	beq.n	80051ba <HAL_GPIO_DeInit+0xb2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a5a      	ldr	r2, [pc, #360]	; (8005318 <HAL_GPIO_DeInit+0x210>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_GPIO_DeInit+0xae>
 80051b2:	2309      	movs	r3, #9
 80051b4:	e012      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051b6:	230a      	movs	r3, #10
 80051b8:	e010      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ba:	2308      	movs	r3, #8
 80051bc:	e00e      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051be:	2307      	movs	r3, #7
 80051c0:	e00c      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051c2:	2306      	movs	r3, #6
 80051c4:	e00a      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051c6:	2305      	movs	r3, #5
 80051c8:	e008      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ca:	2304      	movs	r3, #4
 80051cc:	e006      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051ce:	2303      	movs	r3, #3
 80051d0:	e004      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051d2:	2302      	movs	r3, #2
 80051d4:	e002      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <HAL_GPIO_DeInit+0xd4>
 80051da:	2300      	movs	r3, #0
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	f002 0203 	and.w	r2, r2, #3
 80051e2:	0092      	lsls	r2, r2, #2
 80051e4:	4093      	lsls	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d132      	bne.n	8005252 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80051ec:	4b4b      	ldr	r3, [pc, #300]	; (800531c <HAL_GPIO_DeInit+0x214>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	43db      	mvns	r3, r3
 80051f4:	4949      	ldr	r1, [pc, #292]	; (800531c <HAL_GPIO_DeInit+0x214>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80051fa:	4b48      	ldr	r3, [pc, #288]	; (800531c <HAL_GPIO_DeInit+0x214>)
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	43db      	mvns	r3, r3
 8005202:	4946      	ldr	r1, [pc, #280]	; (800531c <HAL_GPIO_DeInit+0x214>)
 8005204:	4013      	ands	r3, r2
 8005206:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005208:	4b44      	ldr	r3, [pc, #272]	; (800531c <HAL_GPIO_DeInit+0x214>)
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	43db      	mvns	r3, r3
 8005210:	4942      	ldr	r1, [pc, #264]	; (800531c <HAL_GPIO_DeInit+0x214>)
 8005212:	4013      	ands	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005216:	4b41      	ldr	r3, [pc, #260]	; (800531c <HAL_GPIO_DeInit+0x214>)
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	43db      	mvns	r3, r3
 800521e:	493f      	ldr	r1, [pc, #252]	; (800531c <HAL_GPIO_DeInit+0x214>)
 8005220:	4013      	ands	r3, r2
 8005222:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005234:	4a2e      	ldr	r2, [pc, #184]	; (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	089b      	lsrs	r3, r3, #2
 800523a:	3302      	adds	r3, #2
 800523c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	43da      	mvns	r2, r3
 8005244:	482a      	ldr	r0, [pc, #168]	; (80052f0 <HAL_GPIO_DeInit+0x1e8>)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	400a      	ands	r2, r1
 800524c:	3302      	adds	r3, #2
 800524e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	2103      	movs	r1, #3
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	08da      	lsrs	r2, r3, #3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3208      	adds	r2, #8
 8005270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f003 0307 	and.w	r3, r3, #7
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	08d2      	lsrs	r2, r2, #3
 8005288:	4019      	ands	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3208      	adds	r2, #8
 800528e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	2103      	movs	r1, #3
 800529c:	fa01 f303 	lsl.w	r3, r1, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	401a      	ands	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	2101      	movs	r1, #1
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	fa01 f303 	lsl.w	r3, r1, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	401a      	ands	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	2103      	movs	r1, #3
 80052c6:	fa01 f303 	lsl.w	r3, r1, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	401a      	ands	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3301      	adds	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	2b0f      	cmp	r3, #15
 80052dc:	f67f af22 	bls.w	8005124 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40020000 	.word	0x40020000
 80052f8:	40020400 	.word	0x40020400
 80052fc:	40020800 	.word	0x40020800
 8005300:	40020c00 	.word	0x40020c00
 8005304:	40021000 	.word	0x40021000
 8005308:	40021400 	.word	0x40021400
 800530c:	40021800 	.word	0x40021800
 8005310:	40021c00 	.word	0x40021c00
 8005314:	40022000 	.word	0x40022000
 8005318:	40022400 	.word	0x40022400
 800531c:	40013c00 	.word	0x40013c00

08005320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
 800532c:	4613      	mov	r3, r2
 800532e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005330:	787b      	ldrb	r3, [r7, #1]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005336:	887a      	ldrh	r2, [r7, #2]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800533c:	e003      	b.n	8005346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	041a      	lsls	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	4618      	mov	r0, r3
 8005374:	f000 f806 	bl	8005384 <HAL_GPIO_EXTI_Callback>
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40013c00 	.word	0x40013c00

08005384 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800539a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539c:	b08f      	sub	sp, #60	; 0x3c
 800539e:	af0a      	add	r7, sp, #40	; 0x28
 80053a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e054      	b.n	8005456 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f00c fada 	bl	8011980 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2203      	movs	r2, #3
 80053d0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f005 f8d3 	bl	800a596 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	687e      	ldr	r6, [r7, #4]
 80053f8:	466d      	mov	r5, sp
 80053fa:	f106 0410 	add.w	r4, r6, #16
 80053fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800540a:	e885 0003 	stmia.w	r5, {r0, r1}
 800540e:	1d33      	adds	r3, r6, #4
 8005410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005412:	6838      	ldr	r0, [r7, #0]
 8005414:	f005 f84d 	bl	800a4b2 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2101      	movs	r1, #1
 800541e:	4618      	mov	r0, r3
 8005420:	f005 f8ca 	bl	800a5b8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	687e      	ldr	r6, [r7, #4]
 800542c:	466d      	mov	r5, sp
 800542e:	f106 0410 	add.w	r4, r6, #16
 8005432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800543a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800543e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005442:	1d33      	adds	r3, r6, #4
 8005444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005446:	6838      	ldr	r0, [r7, #0]
 8005448:	f005 f9dc 	bl	800a804 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800545e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800545e:	b590      	push	{r4, r7, lr}
 8005460:	b089      	sub	sp, #36	; 0x24
 8005462:	af04      	add	r7, sp, #16
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	4608      	mov	r0, r1
 8005468:	4611      	mov	r1, r2
 800546a:	461a      	mov	r2, r3
 800546c:	4603      	mov	r3, r0
 800546e:	70fb      	strb	r3, [r7, #3]
 8005470:	460b      	mov	r3, r1
 8005472:	70bb      	strb	r3, [r7, #2]
 8005474:	4613      	mov	r3, r2
 8005476:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800547e:	2b01      	cmp	r3, #1
 8005480:	d101      	bne.n	8005486 <HAL_HCD_HC_Init+0x28>
 8005482:	2302      	movs	r3, #2
 8005484:	e07f      	b.n	8005586 <HAL_HCD_HC_Init+0x128>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	440b      	add	r3, r1
 800549c:	333d      	adds	r3, #61	; 0x3d
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80054a2:	78fa      	ldrb	r2, [r7, #3]
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	440b      	add	r3, r1
 80054b0:	3338      	adds	r3, #56	; 0x38
 80054b2:	787a      	ldrb	r2, [r7, #1]
 80054b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	440b      	add	r3, r1
 80054c4:	3340      	adds	r3, #64	; 0x40
 80054c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80054c8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	440b      	add	r3, r1
 80054d8:	3339      	adds	r3, #57	; 0x39
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	440b      	add	r3, r1
 80054ec:	333f      	adds	r3, #63	; 0x3f
 80054ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80054f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	78bb      	ldrb	r3, [r7, #2]
 80054f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fc:	b2d8      	uxtb	r0, r3
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	333a      	adds	r3, #58	; 0x3a
 800550c:	4602      	mov	r2, r0
 800550e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005510:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005514:	2b00      	cmp	r3, #0
 8005516:	da0a      	bge.n	800552e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	440b      	add	r3, r1
 8005526:	333b      	adds	r3, #59	; 0x3b
 8005528:	2201      	movs	r2, #1
 800552a:	701a      	strb	r2, [r3, #0]
 800552c:	e009      	b.n	8005542 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	440b      	add	r3, r1
 800553c:	333b      	adds	r3, #59	; 0x3b
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	440b      	add	r3, r1
 8005550:	333c      	adds	r3, #60	; 0x3c
 8005552:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005556:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	787c      	ldrb	r4, [r7, #1]
 800555e:	78ba      	ldrb	r2, [r7, #2]
 8005560:	78f9      	ldrb	r1, [r7, #3]
 8005562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005564:	9302      	str	r3, [sp, #8]
 8005566:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4623      	mov	r3, r4
 8005574:	f005 fac8 	bl	800ab08 <USB_HC_Init>
 8005578:	4603      	mov	r3, r0
 800557a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bd90      	pop	{r4, r7, pc}

0800558e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
 8005596:	460b      	mov	r3, r1
 8005598:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_HCD_HC_Halt+0x1e>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e00f      	b.n	80055cc <HAL_HCD_HC_Halt+0x3e>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	4611      	mov	r1, r2
 80055bc:	4618      	mov	r0, r3
 80055be:	f005 fd02 	bl	800afc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	461a      	mov	r2, r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	70fb      	strb	r3, [r7, #3]
 80055e6:	460b      	mov	r3, r1
 80055e8:	70bb      	strb	r3, [r7, #2]
 80055ea:	4613      	mov	r3, r2
 80055ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80055ee:	78fa      	ldrb	r2, [r7, #3]
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	440b      	add	r3, r1
 80055fc:	333b      	adds	r3, #59	; 0x3b
 80055fe:	78ba      	ldrb	r2, [r7, #2]
 8005600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005602:	78fa      	ldrb	r2, [r7, #3]
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	440b      	add	r3, r1
 8005610:	333f      	adds	r3, #63	; 0x3f
 8005612:	787a      	ldrb	r2, [r7, #1]
 8005614:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005616:	7c3b      	ldrb	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d114      	bne.n	8005646 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	3342      	adds	r3, #66	; 0x42
 800562c:	2203      	movs	r2, #3
 800562e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	440b      	add	r3, r1
 800563e:	333d      	adds	r3, #61	; 0x3d
 8005640:	7f3a      	ldrb	r2, [r7, #28]
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	e009      	b.n	800565a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	440b      	add	r3, r1
 8005654:	3342      	adds	r3, #66	; 0x42
 8005656:	2202      	movs	r2, #2
 8005658:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800565a:	787b      	ldrb	r3, [r7, #1]
 800565c:	2b03      	cmp	r3, #3
 800565e:	f200 80d6 	bhi.w	800580e <HAL_HCD_HC_SubmitRequest+0x23a>
 8005662:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005668:	08005679 	.word	0x08005679
 800566c:	080057f9 	.word	0x080057f9
 8005670:	080056e5 	.word	0x080056e5
 8005674:	0800576f 	.word	0x0800576f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005678:	7c3b      	ldrb	r3, [r7, #16]
 800567a:	2b01      	cmp	r3, #1
 800567c:	f040 80c9 	bne.w	8005812 <HAL_HCD_HC_SubmitRequest+0x23e>
 8005680:	78bb      	ldrb	r3, [r7, #2]
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 80c5 	bne.w	8005812 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005688:	8b3b      	ldrh	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800568e:	78fa      	ldrb	r2, [r7, #3]
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	440b      	add	r3, r1
 800569c:	3351      	adds	r3, #81	; 0x51
 800569e:	2201      	movs	r2, #1
 80056a0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	440b      	add	r3, r1
 80056b0:	3351      	adds	r3, #81	; 0x51
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	440b      	add	r3, r1
 80056c6:	3342      	adds	r3, #66	; 0x42
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80056cc:	e0a1      	b.n	8005812 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	440b      	add	r3, r1
 80056dc:	3342      	adds	r3, #66	; 0x42
 80056de:	2202      	movs	r2, #2
 80056e0:	701a      	strb	r2, [r3, #0]
      break;
 80056e2:	e096      	b.n	8005812 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80056e4:	78bb      	ldrb	r3, [r7, #2]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d120      	bne.n	800572c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056ea:	78fa      	ldrb	r2, [r7, #3]
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	4613      	mov	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	440b      	add	r3, r1
 80056f8:	3351      	adds	r3, #81	; 0x51
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	440b      	add	r3, r1
 800570e:	3342      	adds	r3, #66	; 0x42
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005714:	e07e      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005716:	78fa      	ldrb	r2, [r7, #3]
 8005718:	6879      	ldr	r1, [r7, #4]
 800571a:	4613      	mov	r3, r2
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	440b      	add	r3, r1
 8005724:	3342      	adds	r3, #66	; 0x42
 8005726:	2202      	movs	r2, #2
 8005728:	701a      	strb	r2, [r3, #0]
      break;
 800572a:	e073      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800572c:	78fa      	ldrb	r2, [r7, #3]
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	440b      	add	r3, r1
 800573a:	3350      	adds	r3, #80	; 0x50
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005742:	78fa      	ldrb	r2, [r7, #3]
 8005744:	6879      	ldr	r1, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	440b      	add	r3, r1
 8005750:	3342      	adds	r3, #66	; 0x42
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e05d      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005758:	78fa      	ldrb	r2, [r7, #3]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	4613      	mov	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	4413      	add	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	440b      	add	r3, r1
 8005766:	3342      	adds	r3, #66	; 0x42
 8005768:	2202      	movs	r2, #2
 800576a:	701a      	strb	r2, [r3, #0]
      break;
 800576c:	e052      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800576e:	78bb      	ldrb	r3, [r7, #2]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d120      	bne.n	80057b6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	3351      	adds	r3, #81	; 0x51
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	440b      	add	r3, r1
 8005798:	3342      	adds	r3, #66	; 0x42
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800579e:	e039      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	440b      	add	r3, r1
 80057ae:	3342      	adds	r3, #66	; 0x42
 80057b0:	2202      	movs	r2, #2
 80057b2:	701a      	strb	r2, [r3, #0]
      break;
 80057b4:	e02e      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	6879      	ldr	r1, [r7, #4]
 80057ba:	4613      	mov	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	440b      	add	r3, r1
 80057c4:	3350      	adds	r3, #80	; 0x50
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	3342      	adds	r3, #66	; 0x42
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
      break;
 80057e0:	e018      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	440b      	add	r3, r1
 80057f0:	3342      	adds	r3, #66	; 0x42
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]
      break;
 80057f6:	e00d      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	3342      	adds	r3, #66	; 0x42
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]
      break;
 800580c:	e002      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800580e:	bf00      	nop
 8005810:	e000      	b.n	8005814 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005812:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	440b      	add	r3, r1
 8005822:	3344      	adds	r3, #68	; 0x44
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	8b39      	ldrh	r1, [r7, #24]
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4403      	add	r3, r0
 8005838:	3348      	adds	r3, #72	; 0x48
 800583a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800583c:	78fa      	ldrb	r2, [r7, #3]
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	335c      	adds	r3, #92	; 0x5c
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	334c      	adds	r3, #76	; 0x4c
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005864:	78fa      	ldrb	r2, [r7, #3]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	3339      	adds	r3, #57	; 0x39
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	335d      	adds	r3, #93	; 0x5d
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	3338      	adds	r3, #56	; 0x38
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	18d1      	adds	r1, r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	f005 fa38 	bl	800ad1c <USB_HC_StartXfer>
 80058ac:	4603      	mov	r3, r0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f004 ff55 	bl	800a77e <USB_GetMode>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	f040 80ef 	bne.w	8005aba <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f004 ff39 	bl	800a758 <USB_ReadInterrupts>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80e5 	beq.w	8005ab8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 ff30 	bl	800a758 <USB_ReadInterrupts>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005902:	d104      	bne.n	800590e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800590c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f004 ff20 	bl	800a758 <USB_ReadInterrupts>
 8005918:	4603      	mov	r3, r0
 800591a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005922:	d104      	bne.n	800592e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800592c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4618      	mov	r0, r3
 8005934:	f004 ff10 	bl	800a758 <USB_ReadInterrupts>
 8005938:	4603      	mov	r3, r0
 800593a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800593e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005942:	d104      	bne.n	800594e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800594c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f004 ff00 	bl	800a758 <USB_ReadInterrupts>
 8005958:	4603      	mov	r3, r0
 800595a:	f003 0302 	and.w	r3, r3, #2
 800595e:	2b02      	cmp	r3, #2
 8005960:	d103      	bne.n	800596a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2202      	movs	r2, #2
 8005968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f004 fef2 	bl	800a758 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800597a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800597e:	d115      	bne.n	80059ac <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005988:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d108      	bne.n	80059ac <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f00c f86a 	bl	8011a74 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2101      	movs	r1, #1
 80059a6:	4618      	mov	r0, r3
 80059a8:	f004 ffe8 	bl	800a97c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f004 fed1 	bl	800a758 <USB_ReadInterrupts>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059c0:	d102      	bne.n	80059c8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f001 f968 	bl	8006c98 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fec3 	bl	800a758 <USB_ReadInterrupts>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d106      	bne.n	80059ea <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f00c f82d 	bl	8011a3c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2208      	movs	r2, #8
 80059e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 feb2 	bl	800a758 <USB_ReadInterrupts>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fe:	d138      	bne.n	8005a72 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f005 facd 	bl	800afa4 <USB_HC_ReadInterrupt>
 8005a0a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e025      	b.n	8005a5e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 030f 	and.w	r3, r3, #15
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d018      	beq.n	8005a58 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a3c:	d106      	bne.n	8005a4c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8cf 	bl	8005be8 <HCD_HC_IN_IRQHandler>
 8005a4a:	e005      	b.n	8005a58 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fcfd 	bl	8006452 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d3d4      	bcc.n	8005a12 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005a70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f004 fe6e 	bl	800a758 <USB_ReadInterrupts>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d101      	bne.n	8005a8a <HAL_HCD_IRQHandler+0x1d2>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_HCD_IRQHandler+0x1d4>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d014      	beq.n	8005aba <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0210 	bic.w	r2, r2, #16
 8005a9e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 f84b 	bl	8006b3c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699a      	ldr	r2, [r3, #24]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0210 	orr.w	r2, r2, #16
 8005ab4:	619a      	str	r2, [r3, #24]
 8005ab6:	e000      	b.n	8005aba <HAL_HCD_IRQHandler+0x202>
      return;
 8005ab8:	bf00      	nop
    }
  }
}
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d101      	bne.n	8005ad6 <HAL_HCD_Start+0x16>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e013      	b.n	8005afe <HAL_HCD_Start+0x3e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 fd46 	bl	800a574 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2101      	movs	r1, #1
 8005aee:	4618      	mov	r0, r3
 8005af0:	f004 ffa8 	bl	800aa44 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_HCD_Stop+0x16>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e00d      	b.n	8005b38 <HAL_HCD_Stop+0x32>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f005 fb87 	bl	800b23c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f004 ff4f 	bl	800a9f0 <USB_ResetPort>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	460b      	mov	r3, r1
 8005b66:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	335c      	adds	r3, #92	; 0x5c
 8005b78:	781b      	ldrb	r3, [r3, #0]
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	440b      	add	r3, r1
 8005ba0:	334c      	adds	r3, #76	; 0x4c
 8005ba2:	681b      	ldr	r3, [r3, #0]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f004 ff91 	bl	800aae4 <USB_GetCurrentFrame>
 8005bc2:	4603      	mov	r3, r0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 ff6c 	bl	800aab6 <USB_GetHostSpeed>
 8005bde:	4603      	mov	r3, r0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d119      	bne.n	8005c4c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c24:	461a      	mov	r2, r3
 8005c26:	2304      	movs	r3, #4
 8005c28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c44:	f043 0302 	orr.w	r3, r3, #2
 8005c48:	60d3      	str	r3, [r2, #12]
 8005c4a:	e0ce      	b.n	8005dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c62:	d12c      	bne.n	8005cbe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	461a      	mov	r2, r3
 8005c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	440b      	add	r3, r1
 8005c86:	335d      	adds	r3, #93	; 0x5d
 8005c88:	2207      	movs	r2, #7
 8005c8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f005 f985 	bl	800afc6 <USB_HC_Halt>
 8005cbc:	e095      	b.n	8005dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d109      	bne.n	8005ce8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	2320      	movs	r3, #32
 8005ce4:	6093      	str	r3, [r2, #8]
 8005ce6:	e080      	b.n	8005dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b08      	cmp	r3, #8
 8005cfc:	d134      	bne.n	8005d68 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d18:	f043 0302 	orr.w	r3, r3, #2
 8005d1c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	440b      	add	r3, r1
 8005d2c:	335d      	adds	r3, #93	; 0x5d
 8005d2e:	2205      	movs	r2, #5
 8005d30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	015a      	lsls	r2, r3, #5
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2310      	movs	r3, #16
 8005d42:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d50:	461a      	mov	r2, r3
 8005d52:	2308      	movs	r3, #8
 8005d54:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f005 f930 	bl	800afc6 <USB_HC_Halt>
 8005d66:	e040      	b.n	8005dea <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d7e:	d134      	bne.n	8005dea <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	0151      	lsls	r1, r2, #5
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	440a      	add	r2, r1
 8005d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9a:	f043 0302 	orr.w	r3, r3, #2
 8005d9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f005 f90b 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	2310      	movs	r3, #16
 8005dc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	4413      	add	r3, r2
 8005dcc:	00db      	lsls	r3, r3, #3
 8005dce:	440b      	add	r3, r1
 8005dd0:	335d      	adds	r3, #93	; 0x5d
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	461a      	mov	r2, r3
 8005de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005de8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d122      	bne.n	8005e48 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f005 f8ca 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e44:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005e46:	e300      	b.n	800644a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	f040 80fd 	bne.w	800605a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d01b      	beq.n	8005ea0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	3348      	adds	r3, #72	; 0x48
 8005e78:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	0159      	lsls	r1, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	440b      	add	r3, r1
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e8c:	1ad1      	subs	r1, r2, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	4613      	mov	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4403      	add	r3, r0
 8005e9c:	334c      	adds	r3, #76	; 0x4c
 8005e9e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	440b      	add	r3, r1
 8005eae:	335d      	adds	r3, #93	; 0x5d
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	440b      	add	r3, r1
 8005ec2:	3358      	adds	r3, #88	; 0x58
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	440b      	add	r3, r1
 8005ee8:	333f      	adds	r3, #63	; 0x3f
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00a      	beq.n	8005f06 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	440b      	add	r3, r1
 8005efe:	333f      	adds	r3, #63	; 0x3f
 8005f00:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d121      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	4611      	mov	r1, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f005 f848 	bl	800afc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	461a      	mov	r2, r3
 8005f44:	2310      	movs	r3, #16
 8005f46:	6093      	str	r3, [r2, #8]
 8005f48:	e070      	b.n	800602c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	440b      	add	r3, r1
 8005f58:	333f      	adds	r3, #63	; 0x3f
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d12a      	bne.n	8005fb6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	0151      	lsls	r1, r2, #5
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	440a      	add	r2, r1
 8005f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f7e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	440b      	add	r3, r1
 8005f8e:	335c      	adds	r3, #92	; 0x5c
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	b2d8      	uxtb	r0, r3
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	4413      	add	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	440b      	add	r3, r1
 8005fa6:	335c      	adds	r3, #92	; 0x5c
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	4601      	mov	r1, r0
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f00b fd6e 	bl	8011a90 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005fb4:	e03a      	b.n	800602c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005fb6:	6879      	ldr	r1, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	440b      	add	r3, r1
 8005fc4:	333f      	adds	r3, #63	; 0x3f
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d12f      	bne.n	800602c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	440b      	add	r3, r1
 8005fda:	335c      	adds	r3, #92	; 0x5c
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	440b      	add	r3, r1
 8005fee:	3350      	adds	r3, #80	; 0x50
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	f083 0301 	eor.w	r3, r3, #1
 8005ff6:	b2d8      	uxtb	r0, r3
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	00db      	lsls	r3, r3, #3
 8006004:	440b      	add	r3, r1
 8006006:	3350      	adds	r3, #80	; 0x50
 8006008:	4602      	mov	r2, r0
 800600a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	b2d8      	uxtb	r0, r3
 8006010:	6879      	ldr	r1, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	00db      	lsls	r3, r3, #3
 800601c:	440b      	add	r3, r1
 800601e:	335c      	adds	r3, #92	; 0x5c
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	4601      	mov	r1, r0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f00b fd32 	bl	8011a90 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	440b      	add	r3, r1
 800603a:	3350      	adds	r3, #80	; 0x50
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f083 0301 	eor.w	r3, r3, #1
 8006042:	b2d8      	uxtb	r0, r3
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	440b      	add	r3, r1
 8006052:	3350      	adds	r3, #80	; 0x50
 8006054:	4602      	mov	r2, r0
 8006056:	701a      	strb	r2, [r3, #0]
}
 8006058:	e1f7      	b.n	800644a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	4413      	add	r3, r2
 8006062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	f040 811a 	bne.w	80062a6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f023 0302 	bic.w	r3, r3, #2
 8006090:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006092:	6879      	ldr	r1, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	440b      	add	r3, r1
 80060a0:	335d      	adds	r3, #93	; 0x5d
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d10a      	bne.n	80060be <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	440b      	add	r3, r1
 80060b6:	335c      	adds	r3, #92	; 0x5c
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	e0d9      	b.n	8006272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	440b      	add	r3, r1
 80060cc:	335d      	adds	r3, #93	; 0x5d
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d10a      	bne.n	80060ea <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	440b      	add	r3, r1
 80060e2:	335c      	adds	r3, #92	; 0x5c
 80060e4:	2205      	movs	r2, #5
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e0c3      	b.n	8006272 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	335d      	adds	r3, #93	; 0x5d
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d00a      	beq.n	8006116 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	440b      	add	r3, r1
 800610e:	335d      	adds	r3, #93	; 0x5d
 8006110:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006112:	2b08      	cmp	r3, #8
 8006114:	d156      	bne.n	80061c4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	3358      	adds	r3, #88	; 0x58
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	1c59      	adds	r1, r3, #1
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	4403      	add	r3, r0
 8006138:	3358      	adds	r3, #88	; 0x58
 800613a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	440b      	add	r3, r1
 800614a:	3358      	adds	r3, #88	; 0x58
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b03      	cmp	r3, #3
 8006150:	d914      	bls.n	800617c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006152:	6879      	ldr	r1, [r7, #4]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	440b      	add	r3, r1
 8006160:	3358      	adds	r3, #88	; 0x58
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	440b      	add	r3, r1
 8006174:	335c      	adds	r3, #92	; 0x5c
 8006176:	2204      	movs	r2, #4
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	e009      	b.n	8006190 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4613      	mov	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	440b      	add	r3, r1
 800618a:	335c      	adds	r3, #92	; 0x5c
 800618c:	2202      	movs	r2, #2
 800618e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ae:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6013      	str	r3, [r2, #0]
 80061c2:	e056      	b.n	8006272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	00db      	lsls	r3, r3, #3
 80061d0:	440b      	add	r3, r1
 80061d2:	335d      	adds	r3, #93	; 0x5d
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b03      	cmp	r3, #3
 80061d8:	d123      	bne.n	8006222 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	440b      	add	r3, r1
 80061e8:	335c      	adds	r3, #92	; 0x5c
 80061ea:	2202      	movs	r2, #2
 80061ec:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006204:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800620c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	461a      	mov	r2, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	e027      	b.n	8006272 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	00db      	lsls	r3, r3, #3
 800622e:	440b      	add	r3, r1
 8006230:	335d      	adds	r3, #93	; 0x5d
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b07      	cmp	r3, #7
 8006236:	d11c      	bne.n	8006272 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	440b      	add	r3, r1
 8006246:	3358      	adds	r3, #88	; 0x58
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4403      	add	r3, r0
 800625a:	3358      	adds	r3, #88	; 0x58
 800625c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4613      	mov	r3, r2
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	440b      	add	r3, r1
 800626c:	335c      	adds	r3, #92	; 0x5c
 800626e:	2204      	movs	r2, #4
 8006270:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	4413      	add	r3, r2
 800627a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627e:	461a      	mov	r2, r3
 8006280:	2302      	movs	r3, #2
 8006282:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	b2d8      	uxtb	r0, r3
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	440b      	add	r3, r1
 8006296:	335c      	adds	r3, #92	; 0x5c
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	461a      	mov	r2, r3
 800629c:	4601      	mov	r1, r0
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f00b fbf6 	bl	8011a90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80062a4:	e0d1      	b.n	800644a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d13e      	bne.n	800633a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d6:	f043 0302 	orr.w	r3, r3, #2
 80062da:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80062dc:	6879      	ldr	r1, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	440b      	add	r3, r1
 80062ea:	3358      	adds	r3, #88	; 0x58
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4403      	add	r3, r0
 80062fe:	3358      	adds	r3, #88	; 0x58
 8006300:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	00db      	lsls	r3, r3, #3
 800630e:	440b      	add	r3, r1
 8006310:	335d      	adds	r3, #93	; 0x5d
 8006312:	2206      	movs	r2, #6
 8006314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68fa      	ldr	r2, [r7, #12]
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f004 fe50 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006332:	461a      	mov	r2, r3
 8006334:	2380      	movs	r3, #128	; 0x80
 8006336:	6093      	str	r3, [r2, #8]
}
 8006338:	e087      	b.n	800644a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b10      	cmp	r3, #16
 800634e:	d17c      	bne.n	800644a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006350:	6879      	ldr	r1, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	333f      	adds	r3, #63	; 0x3f
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b03      	cmp	r3, #3
 8006364:	d122      	bne.n	80063ac <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	3358      	adds	r3, #88	; 0x58
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	440a      	add	r2, r1
 8006390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006394:	f043 0302 	orr.w	r3, r3, #2
 8006398:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f004 fe0e 	bl	800afc6 <USB_HC_Halt>
 80063aa:	e045      	b.n	8006438 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	440b      	add	r3, r1
 80063ba:	333f      	adds	r3, #63	; 0x3f
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00a      	beq.n	80063d8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80063c2:	6879      	ldr	r1, [r7, #4]
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	440b      	add	r3, r1
 80063d0:	333f      	adds	r3, #63	; 0x3f
 80063d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d12f      	bne.n	8006438 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063d8:	6879      	ldr	r1, [r7, #4]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	440b      	add	r3, r1
 80063e6:	3358      	adds	r3, #88	; 0x58
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d121      	bne.n	8006438 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	440b      	add	r3, r1
 8006402:	335d      	adds	r3, #93	; 0x5d
 8006404:	2203      	movs	r2, #3
 8006406:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	440a      	add	r2, r1
 800641e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006422:	f043 0302 	orr.w	r3, r3, #2
 8006426:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f004 fdc7 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	4413      	add	r3, r2
 8006440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006444:	461a      	mov	r2, r3
 8006446:	2310      	movs	r3, #16
 8006448:	6093      	str	r3, [r2, #8]
}
 800644a:	bf00      	nop
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d119      	bne.n	80064b6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	461a      	mov	r2, r3
 8006490:	2304      	movs	r3, #4
 8006492:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	4413      	add	r3, r2
 800649c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80064b4:	e33e      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d141      	bne.n	8006550 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d8:	461a      	mov	r2, r3
 80064da:	2320      	movs	r3, #32
 80064dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	440b      	add	r3, r1
 80064ec:	333d      	adds	r3, #61	; 0x3d
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	f040 831f 	bne.w	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	440b      	add	r3, r1
 8006504:	333d      	adds	r3, #61	; 0x3d
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	440b      	add	r3, r1
 8006518:	335c      	adds	r3, #92	; 0x5c
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	440a      	add	r2, r1
 8006534:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006538:	f043 0302 	orr.w	r3, r3, #2
 800653c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f004 fd3c 	bl	800afc6 <USB_HC_Halt>
}
 800654e:	e2f1      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	4413      	add	r3, r2
 8006558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	d13f      	bne.n	80065e6 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4613      	mov	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	4413      	add	r3, r2
 8006570:	00db      	lsls	r3, r3, #3
 8006572:	440b      	add	r3, r1
 8006574:	335d      	adds	r3, #93	; 0x5d
 8006576:	2204      	movs	r2, #4
 8006578:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	440b      	add	r3, r1
 8006588:	333d      	adds	r3, #61	; 0x3d
 800658a:	2201      	movs	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	440b      	add	r3, r1
 800659c:	3358      	adds	r3, #88	; 0x58
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 0302 	orr.w	r3, r3, #2
 80065c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f004 fcfa 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065de:	461a      	mov	r2, r3
 80065e0:	2340      	movs	r3, #64	; 0x40
 80065e2:	6093      	str	r3, [r2, #8]
}
 80065e4:	e2a6      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d122      	bne.n	8006644 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	0151      	lsls	r1, r2, #5
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	440a      	add	r2, r1
 8006614:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006618:	f043 0302 	orr.w	r3, r3, #2
 800661c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	4611      	mov	r1, r2
 8006628:	4618      	mov	r0, r3
 800662a:	f004 fccc 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	461a      	mov	r2, r3
 800663c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006640:	6093      	str	r3, [r2, #8]
}
 8006642:	e277      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b01      	cmp	r3, #1
 8006658:	d135      	bne.n	80066c6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	440b      	add	r3, r1
 8006668:	3358      	adds	r3, #88	; 0x58
 800666a:	2200      	movs	r2, #0
 800666c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	440a      	add	r2, r1
 8006684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f004 fc94 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066aa:	461a      	mov	r2, r3
 80066ac:	2301      	movs	r3, #1
 80066ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	440b      	add	r3, r1
 80066be:	335d      	adds	r3, #93	; 0x5d
 80066c0:	2201      	movs	r2, #1
 80066c2:	701a      	strb	r2, [r3, #0]
}
 80066c4:	e236      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d12b      	bne.n	8006734 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e8:	461a      	mov	r2, r3
 80066ea:	2308      	movs	r3, #8
 80066ec:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	440a      	add	r2, r1
 8006704:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006708:	f043 0302 	orr.w	r3, r3, #2
 800670c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	4611      	mov	r1, r2
 8006718:	4618      	mov	r0, r3
 800671a:	f004 fc54 	bl	800afc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	335d      	adds	r3, #93	; 0x5d
 800672e:	2205      	movs	r2, #5
 8006730:	701a      	strb	r2, [r3, #0]
}
 8006732:	e1ff      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	4413      	add	r3, r2
 800673c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d155      	bne.n	80067f6 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	3358      	adds	r3, #88	; 0x58
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4613      	mov	r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	4413      	add	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	440b      	add	r3, r1
 800676c:	335d      	adds	r3, #93	; 0x5d
 800676e:	2203      	movs	r2, #3
 8006770:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	440b      	add	r3, r1
 8006780:	333d      	adds	r3, #61	; 0x3d
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d114      	bne.n	80067b2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	440b      	add	r3, r1
 8006796:	333c      	adds	r3, #60	; 0x3c
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	440b      	add	r3, r1
 80067ac:	333d      	adds	r3, #61	; 0x3d
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067cc:	f043 0302 	orr.w	r3, r3, #2
 80067d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	4611      	mov	r1, r2
 80067dc:	4618      	mov	r0, r3
 80067de:	f004 fbf2 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	461a      	mov	r2, r3
 80067f0:	2310      	movs	r3, #16
 80067f2:	6093      	str	r3, [r2, #8]
}
 80067f4:	e19e      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d12b      	bne.n	8006864 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	4413      	add	r3, r2
 8006814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	440a      	add	r2, r1
 8006822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f004 fbc5 	bl	800afc6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800683c:	6879      	ldr	r1, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	440b      	add	r3, r1
 800684a:	335d      	adds	r3, #93	; 0x5d
 800684c:	2206      	movs	r2, #6
 800684e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4413      	add	r3, r2
 8006858:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800685c:	461a      	mov	r2, r3
 800685e:	2380      	movs	r3, #128	; 0x80
 8006860:	6093      	str	r3, [r2, #8]
}
 8006862:	e167      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	4413      	add	r3, r2
 800686c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800687a:	d135      	bne.n	80068e8 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	440a      	add	r2, r1
 8006892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006896:	f043 0302 	orr.w	r3, r3, #2
 800689a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4611      	mov	r1, r2
 80068a6:	4618      	mov	r0, r3
 80068a8:	f004 fb8d 	bl	800afc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	461a      	mov	r2, r3
 80068ba:	2310      	movs	r3, #16
 80068bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	461a      	mov	r2, r3
 80068cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4613      	mov	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	440b      	add	r3, r1
 80068e0:	335d      	adds	r3, #93	; 0x5d
 80068e2:	2208      	movs	r2, #8
 80068e4:	701a      	strb	r2, [r3, #0]
}
 80068e6:	e125      	b.n	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	f040 811a 	bne.w	8006b34 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	440a      	add	r2, r1
 8006916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800691a:	f023 0302 	bic.w	r3, r3, #2
 800691e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	440b      	add	r3, r1
 800692e:	335d      	adds	r3, #93	; 0x5d
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d137      	bne.n	80069a6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	440b      	add	r3, r1
 8006944:	335c      	adds	r3, #92	; 0x5c
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	00db      	lsls	r3, r3, #3
 8006956:	440b      	add	r3, r1
 8006958:	333f      	adds	r3, #63	; 0x3f
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d00b      	beq.n	8006978 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8006960:	6879      	ldr	r1, [r7, #4]
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	440b      	add	r3, r1
 800696e:	333f      	adds	r3, #63	; 0x3f
 8006970:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006972:	2b03      	cmp	r3, #3
 8006974:	f040 80c5 	bne.w	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	440b      	add	r3, r1
 8006986:	3351      	adds	r3, #81	; 0x51
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	f083 0301 	eor.w	r3, r3, #1
 800698e:	b2d8      	uxtb	r0, r3
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4613      	mov	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4413      	add	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	440b      	add	r3, r1
 800699e:	3351      	adds	r3, #81	; 0x51
 80069a0:	4602      	mov	r2, r0
 80069a2:	701a      	strb	r2, [r3, #0]
 80069a4:	e0ad      	b.n	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	00db      	lsls	r3, r3, #3
 80069b2:	440b      	add	r3, r1
 80069b4:	335d      	adds	r3, #93	; 0x5d
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10a      	bne.n	80069d2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	440b      	add	r3, r1
 80069ca:	335c      	adds	r3, #92	; 0x5c
 80069cc:	2202      	movs	r2, #2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e097      	b.n	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	440b      	add	r3, r1
 80069e0:	335d      	adds	r3, #93	; 0x5d
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b04      	cmp	r3, #4
 80069e6:	d10a      	bne.n	80069fe <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	440b      	add	r3, r1
 80069f6:	335c      	adds	r3, #92	; 0x5c
 80069f8:	2202      	movs	r2, #2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e081      	b.n	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4613      	mov	r3, r2
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	440b      	add	r3, r1
 8006a0c:	335d      	adds	r3, #93	; 0x5d
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d10a      	bne.n	8006a2a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	4413      	add	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	440b      	add	r3, r1
 8006a22:	335c      	adds	r3, #92	; 0x5c
 8006a24:	2205      	movs	r2, #5
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	e06b      	b.n	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4413      	add	r3, r2
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	440b      	add	r3, r1
 8006a38:	335d      	adds	r3, #93	; 0x5d
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b06      	cmp	r3, #6
 8006a3e:	d00a      	beq.n	8006a56 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	440b      	add	r3, r1
 8006a4e:	335d      	adds	r3, #93	; 0x5d
 8006a50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d155      	bne.n	8006b02 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	440b      	add	r3, r1
 8006a64:	3358      	adds	r3, #88	; 0x58
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4403      	add	r3, r0
 8006a78:	3358      	adds	r3, #88	; 0x58
 8006a7a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006a7c:	6879      	ldr	r1, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	440b      	add	r3, r1
 8006a8a:	3358      	adds	r3, #88	; 0x58
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d914      	bls.n	8006abc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	440b      	add	r3, r1
 8006aa0:	3358      	adds	r3, #88	; 0x58
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	440b      	add	r3, r1
 8006ab4:	335c      	adds	r3, #92	; 0x5c
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	e009      	b.n	8006ad0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	440b      	add	r3, r1
 8006aca:	335c      	adds	r3, #92	; 0x5c
 8006acc:	2202      	movs	r2, #2
 8006ace:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ae6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006aee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	461a      	mov	r2, r3
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2302      	movs	r3, #2
 8006b12:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	b2d8      	uxtb	r0, r3
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	440b      	add	r3, r1
 8006b26:	335c      	adds	r3, #92	; 0x5c
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f00a ffae 	bl	8011a90 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b08a      	sub	sp, #40	; 0x28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	0c5b      	lsrs	r3, r3, #17
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	091b      	lsrs	r3, r3, #4
 8006b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b70:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d004      	beq.n	8006b82 <HCD_RXQLVL_IRQHandler+0x46>
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b05      	cmp	r3, #5
 8006b7c:	f000 8082 	beq.w	8006c84 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b80:	e083      	b.n	8006c8a <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d07f      	beq.n	8006c88 <HCD_RXQLVL_IRQHandler+0x14c>
 8006b88:	6879      	ldr	r1, [r7, #4]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	00db      	lsls	r3, r3, #3
 8006b94:	440b      	add	r3, r1
 8006b96:	3344      	adds	r3, #68	; 0x44
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d074      	beq.n	8006c88 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	440b      	add	r3, r1
 8006bb0:	3344      	adds	r3, #68	; 0x44
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	b292      	uxth	r2, r2
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f003 fda4 	bl	800a706 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	00db      	lsls	r3, r3, #3
 8006bca:	440b      	add	r3, r1
 8006bcc:	3344      	adds	r3, #68	; 0x44
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	18d1      	adds	r1, r2, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4403      	add	r3, r0
 8006be2:	3344      	adds	r3, #68	; 0x44
 8006be4:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	334c      	adds	r3, #76	; 0x4c
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	18d1      	adds	r1, r2, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4613      	mov	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4403      	add	r3, r0
 8006c0a:	334c      	adds	r3, #76	; 0x4c
 8006c0c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	4b1d      	ldr	r3, [pc, #116]	; (8006c94 <HCD_RXQLVL_IRQHandler+0x158>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d031      	beq.n	8006c88 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c42:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c50:	461a      	mov	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	00db      	lsls	r3, r3, #3
 8006c62:	440b      	add	r3, r1
 8006c64:	3350      	adds	r3, #80	; 0x50
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f083 0301 	eor.w	r3, r3, #1
 8006c6c:	b2d8      	uxtb	r0, r3
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	440b      	add	r3, r1
 8006c7c:	3350      	adds	r3, #80	; 0x50
 8006c7e:	4602      	mov	r2, r0
 8006c80:	701a      	strb	r2, [r3, #0]
      break;
 8006c82:	e001      	b.n	8006c88 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8006c88:	bf00      	nop
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	3728      	adds	r7, #40	; 0x28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	1ff80000 	.word	0x1ff80000

08006c98 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cc4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d10b      	bne.n	8006ce8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d102      	bne.n	8006ce0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f00a febc 	bl	8011a58 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	f043 0302 	orr.w	r3, r3, #2
 8006ce6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b08      	cmp	r3, #8
 8006cf0:	d132      	bne.n	8006d58 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f043 0308 	orr.w	r3, r3, #8
 8006cf8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d126      	bne.n	8006d52 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d113      	bne.n	8006d34 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d16:	d106      	bne.n	8006d26 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f003 fe2c 	bl	800a97c <USB_InitFSLSPClkSel>
 8006d24:	e011      	b.n	8006d4a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f003 fe25 	bl	800a97c <USB_InitFSLSPClkSel>
 8006d32:	e00a      	b.n	8006d4a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d106      	bne.n	8006d4a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d42:	461a      	mov	r2, r3
 8006d44:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d48:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f00a feae 	bl	8011aac <HAL_HCD_PortEnabled_Callback>
 8006d50:	e002      	b.n	8006d58 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f00a feb8 	bl	8011ac8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d103      	bne.n	8006d6a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	f043 0320 	orr.w	r3, r3, #32
 8006d68:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6013      	str	r3, [r2, #0]
}
 8006d76:	bf00      	nop
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e12b      	b.n	8006fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fa fafa 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2224      	movs	r2, #36	; 0x24
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006de4:	f001 f9ba 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8006de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	4a81      	ldr	r2, [pc, #516]	; (8006ff4 <HAL_I2C_Init+0x274>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d807      	bhi.n	8006e04 <HAL_I2C_Init+0x84>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a80      	ldr	r2, [pc, #512]	; (8006ff8 <HAL_I2C_Init+0x278>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bf94      	ite	ls
 8006dfc:	2301      	movls	r3, #1
 8006dfe:	2300      	movhi	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	e006      	b.n	8006e12 <HAL_I2C_Init+0x92>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4a7d      	ldr	r2, [pc, #500]	; (8006ffc <HAL_I2C_Init+0x27c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	bf94      	ite	ls
 8006e0c:	2301      	movls	r3, #1
 8006e0e:	2300      	movhi	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d001      	beq.n	8006e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e0e7      	b.n	8006fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4a78      	ldr	r2, [pc, #480]	; (8007000 <HAL_I2C_Init+0x280>)
 8006e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e22:	0c9b      	lsrs	r3, r3, #18
 8006e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	4a6a      	ldr	r2, [pc, #424]	; (8006ff4 <HAL_I2C_Init+0x274>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d802      	bhi.n	8006e54 <HAL_I2C_Init+0xd4>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	3301      	adds	r3, #1
 8006e52:	e009      	b.n	8006e68 <HAL_I2C_Init+0xe8>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e5a:	fb02 f303 	mul.w	r3, r2, r3
 8006e5e:	4a69      	ldr	r2, [pc, #420]	; (8007004 <HAL_I2C_Init+0x284>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	099b      	lsrs	r3, r3, #6
 8006e66:	3301      	adds	r3, #1
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6812      	ldr	r2, [r2, #0]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	495c      	ldr	r1, [pc, #368]	; (8006ff4 <HAL_I2C_Init+0x274>)
 8006e84:	428b      	cmp	r3, r1
 8006e86:	d819      	bhi.n	8006ebc <HAL_I2C_Init+0x13c>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	1e59      	subs	r1, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e96:	1c59      	adds	r1, r3, #1
 8006e98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006e9c:	400b      	ands	r3, r1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_I2C_Init+0x138>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	1e59      	subs	r1, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb6:	e051      	b.n	8006f5c <HAL_I2C_Init+0x1dc>
 8006eb8:	2304      	movs	r3, #4
 8006eba:	e04f      	b.n	8006f5c <HAL_I2C_Init+0x1dc>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d111      	bne.n	8006ee8 <HAL_I2C_Init+0x168>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	1e58      	subs	r0, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6859      	ldr	r1, [r3, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	440b      	add	r3, r1
 8006ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e012      	b.n	8006f0e <HAL_I2C_Init+0x18e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1e58      	subs	r0, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	0099      	lsls	r1, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006efe:	3301      	adds	r3, #1
 8006f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_I2C_Init+0x196>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e022      	b.n	8006f5c <HAL_I2C_Init+0x1dc>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10e      	bne.n	8006f3c <HAL_I2C_Init+0x1bc>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1e58      	subs	r0, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	440b      	add	r3, r1
 8006f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f30:	3301      	adds	r3, #1
 8006f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3a:	e00f      	b.n	8006f5c <HAL_I2C_Init+0x1dc>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1e58      	subs	r0, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	0099      	lsls	r1, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f52:	3301      	adds	r3, #1
 8006f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	6809      	ldr	r1, [r1, #0]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6911      	ldr	r1, [r2, #16]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68d2      	ldr	r2, [r2, #12]
 8006f96:	4311      	orrs	r1, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	000186a0 	.word	0x000186a0
 8006ff8:	001e847f 	.word	0x001e847f
 8006ffc:	003d08ff 	.word	0x003d08ff
 8007000:	431bde83 	.word	0x431bde83
 8007004:	10624dd3 	.word	0x10624dd3

08007008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b20      	cmp	r3, #32
 800701c:	d129      	bne.n	8007072 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2224      	movs	r2, #36	; 0x24
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0210 	bic.w	r2, r2, #16
 8007044:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f042 0201 	orr.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007072:	2302      	movs	r3, #2
  }
}
 8007074:	4618      	mov	r0, r3
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b20      	cmp	r3, #32
 8007098:	d12a      	bne.n	80070f0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	; 0x24
 800709e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	f023 030f 	bic.w	r3, r3, #15
 80070c0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	89fb      	ldrh	r3, [r7, #14]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	89fa      	ldrh	r2, [r7, #14]
 80070d2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e000      	b.n	80070f2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80070f0:	2302      	movs	r3, #2
  }
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
	...

08007100 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e0bf      	b.n	8007292 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fa f9a4 	bl	8001474 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007142:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6999      	ldr	r1, [r3, #24]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007158:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6899      	ldr	r1, [r3, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	4b4a      	ldr	r3, [pc, #296]	; (800729c <HAL_LTDC_Init+0x19c>)
 8007174:	400b      	ands	r3, r1
 8007176:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6899      	ldr	r1, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68d9      	ldr	r1, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b3e      	ldr	r3, [pc, #248]	; (800729c <HAL_LTDC_Init+0x19c>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68d9      	ldr	r1, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1a      	ldr	r2, [r3, #32]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6919      	ldr	r1, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b33      	ldr	r3, [pc, #204]	; (800729c <HAL_LTDC_Init+0x19c>)
 80071d0:	400b      	ands	r3, r1
 80071d2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6919      	ldr	r1, [r3, #16]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6959      	ldr	r1, [r3, #20]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	4b27      	ldr	r3, [pc, #156]	; (800729c <HAL_LTDC_Init+0x19c>)
 80071fe:	400b      	ands	r3, r1
 8007200:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	6959      	ldr	r1, [r3, #20]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007242:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0206 	orr.w	r2, r2, #6
 800726e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699a      	ldr	r2, [r3, #24]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	f000f800 	.word	0xf000f800

080072a0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d023      	beq.n	800730a <HAL_LTDC_IRQHandler+0x6a>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f003 0304 	and.w	r3, r3, #4
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d01e      	beq.n	800730a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2204      	movs	r2, #4
 80072e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2204      	movs	r2, #4
 80072f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f86f 	bl	80073e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 0302 	and.w	r3, r3, #2
 8007310:	2b00      	cmp	r3, #0
 8007312:	d023      	beq.n	800735c <HAL_LTDC_IRQHandler+0xbc>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01e      	beq.n	800735c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f022 0202 	bic.w	r2, r2, #2
 800732c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2202      	movs	r2, #2
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800733c:	f043 0202 	orr.w	r2, r3, #2
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2204      	movs	r2, #4
 800734a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f846 	bl	80073e8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01b      	beq.n	800739e <HAL_LTDC_IRQHandler+0xfe>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d016      	beq.n	800739e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2201      	movs	r2, #1
 8007386:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f82f 	bl	80073fc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <HAL_LTDC_IRQHandler+0x140>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 0308 	and.w	r3, r3, #8
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0208 	bic.w	r2, r2, #8
 80073c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2208      	movs	r2, #8
 80073c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f818 	bl	8007410 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80073f0:	bf00      	nop
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007424:	b5b0      	push	{r4, r5, r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_LTDC_ConfigLayer+0x1a>
 800743a:	2302      	movs	r3, #2
 800743c:	e02c      	b.n	8007498 <HAL_LTDC_ConfigLayer+0x74>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2134      	movs	r1, #52	; 0x34
 8007454:	fb01 f303 	mul.w	r3, r1, r3
 8007458:	4413      	add	r3, r2
 800745a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800746a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800746e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f871 	bl	8007560 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bdb0      	pop	{r4, r5, r7, pc}

080074a0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_LTDC_EnableDither+0x16>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e016      	b.n	80074e4 <HAL_LTDC_EnableDither+0x44>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80074c6:	4b0a      	ldr	r3, [pc, #40]	; (80074f0 <HAL_LTDC_EnableDither+0x50>)
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <HAL_LTDC_EnableDither+0x50>)
 80074cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	40016800 	.word	0x40016800

080074f4 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007506:	2b01      	cmp	r3, #1
 8007508:	d101      	bne.n	800750e <HAL_LTDC_SetAlpha+0x1a>
 800750a:	2302      	movs	r3, #2
 800750c:	e024      	b.n	8007558 <HAL_LTDC_SetAlpha+0x64>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2234      	movs	r2, #52	; 0x34
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	3338      	adds	r3, #56	; 0x38
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4413      	add	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6979      	ldr	r1, [r7, #20]
 8007538:	68f8      	ldr	r0, [r7, #12]
 800753a:	f000 f811 	bl	8007560 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	; 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	0c1b      	lsrs	r3, r3, #16
 8007578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800757c:	4413      	add	r3, r2
 800757e:	041b      	lsls	r3, r3, #16
 8007580:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	461a      	mov	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	01db      	lsls	r3, r3, #7
 800758c:	4413      	add	r3, r2
 800758e:	3384      	adds	r3, #132	; 0x84
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	4611      	mov	r1, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	01d2      	lsls	r2, r2, #7
 800759c:	440a      	add	r2, r1
 800759e:	3284      	adds	r2, #132	; 0x84
 80075a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b6:	4413      	add	r3, r2
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4619      	mov	r1, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	440b      	add	r3, r1
 80075c6:	3384      	adds	r3, #132	; 0x84
 80075c8:	4619      	mov	r1, r3
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075de:	4413      	add	r3, r2
 80075e0:	041b      	lsls	r3, r3, #16
 80075e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	01db      	lsls	r3, r3, #7
 80075ee:	4413      	add	r3, r2
 80075f0:	3384      	adds	r3, #132	; 0x84
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	6812      	ldr	r2, [r2, #0]
 80075f8:	4611      	mov	r1, r2
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	01d2      	lsls	r2, r2, #7
 80075fe:	440a      	add	r2, r1
 8007600:	3284      	adds	r2, #132	; 0x84
 8007602:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007606:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007616:	4413      	add	r3, r2
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4619      	mov	r1, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	01db      	lsls	r3, r3, #7
 8007624:	440b      	add	r3, r1
 8007626:	3384      	adds	r3, #132	; 0x84
 8007628:	4619      	mov	r1, r3
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	4313      	orrs	r3, r2
 800762e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	461a      	mov	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	01db      	lsls	r3, r3, #7
 800763a:	4413      	add	r3, r2
 800763c:	3384      	adds	r3, #132	; 0x84
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	4611      	mov	r1, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	01d2      	lsls	r2, r2, #7
 800764a:	440a      	add	r2, r1
 800764c:	3284      	adds	r2, #132	; 0x84
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	01db      	lsls	r3, r3, #7
 800765e:	4413      	add	r3, r2
 8007660:	3384      	adds	r3, #132	; 0x84
 8007662:	461a      	mov	r2, r3
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800767a:	041b      	lsls	r3, r3, #16
 800767c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	061b      	lsls	r3, r3, #24
 8007684:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	01db      	lsls	r3, r3, #7
 8007690:	4413      	add	r3, r2
 8007692:	3384      	adds	r3, #132	; 0x84
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	01db      	lsls	r3, r3, #7
 80076a0:	4413      	add	r3, r2
 80076a2:	3384      	adds	r3, #132	; 0x84
 80076a4:	461a      	mov	r2, r3
 80076a6:	2300      	movs	r3, #0
 80076a8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076b0:	461a      	mov	r2, r3
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4619      	mov	r1, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	01db      	lsls	r3, r3, #7
 80076c4:	440b      	add	r3, r1
 80076c6:	3384      	adds	r3, #132	; 0x84
 80076c8:	4619      	mov	r1, r3
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	01db      	lsls	r3, r3, #7
 80076da:	4413      	add	r3, r2
 80076dc:	3384      	adds	r3, #132	; 0x84
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	4611      	mov	r1, r2
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	01d2      	lsls	r2, r2, #7
 80076ea:	440a      	add	r2, r1
 80076ec:	3284      	adds	r2, #132	; 0x84
 80076ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	01db      	lsls	r3, r3, #7
 80076fe:	4413      	add	r3, r2
 8007700:	3384      	adds	r3, #132	; 0x84
 8007702:	461a      	mov	r2, r3
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	01db      	lsls	r3, r3, #7
 8007714:	4413      	add	r3, r2
 8007716:	3384      	adds	r3, #132	; 0x84
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	6812      	ldr	r2, [r2, #0]
 800771e:	4611      	mov	r1, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	01d2      	lsls	r2, r2, #7
 8007724:	440a      	add	r2, r1
 8007726:	3284      	adds	r2, #132	; 0x84
 8007728:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800772c:	f023 0307 	bic.w	r3, r3, #7
 8007730:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	69da      	ldr	r2, [r3, #28]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	68f9      	ldr	r1, [r7, #12]
 800773c:	6809      	ldr	r1, [r1, #0]
 800773e:	4608      	mov	r0, r1
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	01c9      	lsls	r1, r1, #7
 8007744:	4401      	add	r1, r0
 8007746:	3184      	adds	r1, #132	; 0x84
 8007748:	4313      	orrs	r3, r2
 800774a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	01db      	lsls	r3, r3, #7
 8007756:	4413      	add	r3, r2
 8007758:	3384      	adds	r3, #132	; 0x84
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	01db      	lsls	r3, r3, #7
 8007766:	4413      	add	r3, r2
 8007768:	3384      	adds	r3, #132	; 0x84
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	01db      	lsls	r3, r3, #7
 800777a:	4413      	add	r3, r2
 800777c:	3384      	adds	r3, #132	; 0x84
 800777e:	461a      	mov	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d102      	bne.n	8007794 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800778e:	2304      	movs	r3, #4
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e01b      	b.n	80077cc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d102      	bne.n	80077a2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800779c:	2303      	movs	r3, #3
 800779e:	61fb      	str	r3, [r7, #28]
 80077a0:	e014      	b.n	80077cc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d00b      	beq.n	80077c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d007      	beq.n	80077c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077b6:	2b03      	cmp	r3, #3
 80077b8:	d003      	beq.n	80077c2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077be:	2b07      	cmp	r3, #7
 80077c0:	d102      	bne.n	80077c8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80077c2:	2302      	movs	r3, #2
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	e001      	b.n	80077cc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80077c8:	2301      	movs	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	01db      	lsls	r3, r3, #7
 80077d6:	4413      	add	r3, r2
 80077d8:	3384      	adds	r3, #132	; 0x84
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	6812      	ldr	r2, [r2, #0]
 80077e0:	4611      	mov	r1, r2
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	01d2      	lsls	r2, r2, #7
 80077e6:	440a      	add	r2, r1
 80077e8:	3284      	adds	r2, #132	; 0x84
 80077ea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80077ee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	fb02 f303 	mul.w	r3, r2, r3
 80077fa:	041a      	lsls	r2, r3, #16
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6859      	ldr	r1, [r3, #4]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	1acb      	subs	r3, r1, r3
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	3303      	adds	r3, #3
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	6809      	ldr	r1, [r1, #0]
 8007812:	4608      	mov	r0, r1
 8007814:	6879      	ldr	r1, [r7, #4]
 8007816:	01c9      	lsls	r1, r1, #7
 8007818:	4401      	add	r1, r0
 800781a:	3184      	adds	r1, #132	; 0x84
 800781c:	4313      	orrs	r3, r2
 800781e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	01db      	lsls	r3, r3, #7
 800782a:	4413      	add	r3, r2
 800782c:	3384      	adds	r3, #132	; 0x84
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	6812      	ldr	r2, [r2, #0]
 8007834:	4611      	mov	r1, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	01d2      	lsls	r2, r2, #7
 800783a:	440a      	add	r2, r1
 800783c:	3284      	adds	r2, #132	; 0x84
 800783e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007842:	f023 0307 	bic.w	r3, r3, #7
 8007846:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	01db      	lsls	r3, r3, #7
 8007852:	4413      	add	r3, r2
 8007854:	3384      	adds	r3, #132	; 0x84
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	01db      	lsls	r3, r3, #7
 8007868:	4413      	add	r3, r2
 800786a:	3384      	adds	r3, #132	; 0x84
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	6812      	ldr	r2, [r2, #0]
 8007872:	4611      	mov	r1, r2
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	01d2      	lsls	r2, r2, #7
 8007878:	440a      	add	r2, r1
 800787a:	3284      	adds	r2, #132	; 0x84
 800787c:	f043 0301 	orr.w	r3, r3, #1
 8007880:	6013      	str	r3, [r2, #0]
}
 8007882:	bf00      	nop
 8007884:	3724      	adds	r7, #36	; 0x24
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
	...

08007890 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e25e      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d075      	beq.n	800799a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078ae:	4b88      	ldr	r3, [pc, #544]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f003 030c 	and.w	r3, r3, #12
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d00c      	beq.n	80078d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078ba:	4b85      	ldr	r3, [pc, #532]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d112      	bne.n	80078ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80078c6:	4b82      	ldr	r3, [pc, #520]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078d2:	d10b      	bne.n	80078ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d4:	4b7e      	ldr	r3, [pc, #504]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d05b      	beq.n	8007998 <HAL_RCC_OscConfig+0x108>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d157      	bne.n	8007998 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e239      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078f4:	d106      	bne.n	8007904 <HAL_RCC_OscConfig+0x74>
 80078f6:	4b76      	ldr	r3, [pc, #472]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a75      	ldr	r2, [pc, #468]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80078fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007900:	6013      	str	r3, [r2, #0]
 8007902:	e01d      	b.n	8007940 <HAL_RCC_OscConfig+0xb0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800790c:	d10c      	bne.n	8007928 <HAL_RCC_OscConfig+0x98>
 800790e:	4b70      	ldr	r3, [pc, #448]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a6f      	ldr	r2, [pc, #444]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	4b6d      	ldr	r3, [pc, #436]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a6c      	ldr	r2, [pc, #432]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007924:	6013      	str	r3, [r2, #0]
 8007926:	e00b      	b.n	8007940 <HAL_RCC_OscConfig+0xb0>
 8007928:	4b69      	ldr	r3, [pc, #420]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a68      	ldr	r2, [pc, #416]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 800792e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4b66      	ldr	r3, [pc, #408]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a65      	ldr	r2, [pc, #404]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 800793a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800793e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d013      	beq.n	8007970 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007948:	f7fc fbaa 	bl	80040a0 <HAL_GetTick>
 800794c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800794e:	e008      	b.n	8007962 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007950:	f7fc fba6 	bl	80040a0 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	2b64      	cmp	r3, #100	; 0x64
 800795c:	d901      	bls.n	8007962 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e1fe      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007962:	4b5b      	ldr	r3, [pc, #364]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d0f0      	beq.n	8007950 <HAL_RCC_OscConfig+0xc0>
 800796e:	e014      	b.n	800799a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007970:	f7fc fb96 	bl	80040a0 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007978:	f7fc fb92 	bl	80040a0 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b64      	cmp	r3, #100	; 0x64
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e1ea      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800798a:	4b51      	ldr	r3, [pc, #324]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1f0      	bne.n	8007978 <HAL_RCC_OscConfig+0xe8>
 8007996:	e000      	b.n	800799a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d063      	beq.n	8007a6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079a6:	4b4a      	ldr	r3, [pc, #296]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 030c 	and.w	r3, r3, #12
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00b      	beq.n	80079ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079b2:	4b47      	ldr	r3, [pc, #284]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80079ba:	2b08      	cmp	r3, #8
 80079bc:	d11c      	bne.n	80079f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079be:	4b44      	ldr	r3, [pc, #272]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d116      	bne.n	80079f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ca:	4b41      	ldr	r3, [pc, #260]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_RCC_OscConfig+0x152>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e1be      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e2:	4b3b      	ldr	r3, [pc, #236]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	4937      	ldr	r1, [pc, #220]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079f6:	e03a      	b.n	8007a6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d020      	beq.n	8007a42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a00:	4b34      	ldr	r3, [pc, #208]	; (8007ad4 <HAL_RCC_OscConfig+0x244>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a06:	f7fc fb4b 	bl	80040a0 <HAL_GetTick>
 8007a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a0c:	e008      	b.n	8007a20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a0e:	f7fc fb47 	bl	80040a0 <HAL_GetTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d901      	bls.n	8007a20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e19f      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a20:	4b2b      	ldr	r3, [pc, #172]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0f0      	beq.n	8007a0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a2c:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	4925      	ldr	r1, [pc, #148]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	600b      	str	r3, [r1, #0]
 8007a40:	e015      	b.n	8007a6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a42:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <HAL_RCC_OscConfig+0x244>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a48:	f7fc fb2a 	bl	80040a0 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a4e:	e008      	b.n	8007a62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a50:	f7fc fb26 	bl	80040a0 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d901      	bls.n	8007a62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e17e      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a62:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1f0      	bne.n	8007a50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d036      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d016      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <HAL_RCC_OscConfig+0x248>)
 8007a84:	2201      	movs	r2, #1
 8007a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a88:	f7fc fb0a 	bl	80040a0 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a90:	f7fc fb06 	bl	80040a0 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b02      	cmp	r3, #2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e15e      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aa2:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0x200>
 8007aae:	e01b      	b.n	8007ae8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <HAL_RCC_OscConfig+0x248>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ab6:	f7fc faf3 	bl	80040a0 <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007abc:	e00e      	b.n	8007adc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007abe:	f7fc faef 	bl	80040a0 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d907      	bls.n	8007adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e147      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	42470000 	.word	0x42470000
 8007ad8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007adc:	4b88      	ldr	r3, [pc, #544]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ea      	bne.n	8007abe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8097 	beq.w	8007c24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007af6:	2300      	movs	r3, #0
 8007af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007afa:	4b81      	ldr	r3, [pc, #516]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b06:	2300      	movs	r3, #0
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	4b7d      	ldr	r3, [pc, #500]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0e:	4a7c      	ldr	r2, [pc, #496]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b14:	6413      	str	r3, [r2, #64]	; 0x40
 8007b16:	4b7a      	ldr	r3, [pc, #488]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	60bb      	str	r3, [r7, #8]
 8007b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b26:	4b77      	ldr	r3, [pc, #476]	; (8007d04 <HAL_RCC_OscConfig+0x474>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d118      	bne.n	8007b64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b32:	4b74      	ldr	r3, [pc, #464]	; (8007d04 <HAL_RCC_OscConfig+0x474>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a73      	ldr	r2, [pc, #460]	; (8007d04 <HAL_RCC_OscConfig+0x474>)
 8007b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b3e:	f7fc faaf 	bl	80040a0 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b46:	f7fc faab 	bl	80040a0 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e103      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b58:	4b6a      	ldr	r3, [pc, #424]	; (8007d04 <HAL_RCC_OscConfig+0x474>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCC_OscConfig+0x2ea>
 8007b6c:	4b64      	ldr	r3, [pc, #400]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b70:	4a63      	ldr	r2, [pc, #396]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b72:	f043 0301 	orr.w	r3, r3, #1
 8007b76:	6713      	str	r3, [r2, #112]	; 0x70
 8007b78:	e01c      	b.n	8007bb4 <HAL_RCC_OscConfig+0x324>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	d10c      	bne.n	8007b9c <HAL_RCC_OscConfig+0x30c>
 8007b82:	4b5f      	ldr	r3, [pc, #380]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	4a5e      	ldr	r2, [pc, #376]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b88:	f043 0304 	orr.w	r3, r3, #4
 8007b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b8e:	4b5c      	ldr	r3, [pc, #368]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	4a5b      	ldr	r2, [pc, #364]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	6713      	str	r3, [r2, #112]	; 0x70
 8007b9a:	e00b      	b.n	8007bb4 <HAL_RCC_OscConfig+0x324>
 8007b9c:	4b58      	ldr	r3, [pc, #352]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	4a57      	ldr	r2, [pc, #348]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007ba2:	f023 0301 	bic.w	r3, r3, #1
 8007ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba8:	4b55      	ldr	r3, [pc, #340]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bac:	4a54      	ldr	r2, [pc, #336]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007bae:	f023 0304 	bic.w	r3, r3, #4
 8007bb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d015      	beq.n	8007be8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbc:	f7fc fa70 	bl	80040a0 <HAL_GetTick>
 8007bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bc2:	e00a      	b.n	8007bda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bc4:	f7fc fa6c 	bl	80040a0 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e0c2      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bda:	4b49      	ldr	r3, [pc, #292]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0ee      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x334>
 8007be6:	e014      	b.n	8007c12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be8:	f7fc fa5a 	bl	80040a0 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bee:	e00a      	b.n	8007c06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007bf0:	f7fc fa56 	bl	80040a0 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e0ac      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c06:	4b3e      	ldr	r3, [pc, #248]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1ee      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d105      	bne.n	8007c24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c18:	4b39      	ldr	r3, [pc, #228]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	4a38      	ldr	r2, [pc, #224]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8098 	beq.w	8007d5e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007c2e:	4b34      	ldr	r3, [pc, #208]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 030c 	and.w	r3, r3, #12
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d05c      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d141      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c42:	4b31      	ldr	r3, [pc, #196]	; (8007d08 <HAL_RCC_OscConfig+0x478>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c48:	f7fc fa2a 	bl	80040a0 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c50:	f7fc fa26 	bl	80040a0 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e07e      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	4b27      	ldr	r3, [pc, #156]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69da      	ldr	r2, [r3, #28]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	019b      	lsls	r3, r3, #6
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	491b      	ldr	r1, [pc, #108]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007c94:	4313      	orrs	r3, r2
 8007c96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c98:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <HAL_RCC_OscConfig+0x478>)
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c9e:	f7fc f9ff 	bl	80040a0 <HAL_GetTick>
 8007ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ca4:	e008      	b.n	8007cb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ca6:	f7fc f9fb 	bl	80040a0 <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e053      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cb8:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0f0      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x416>
 8007cc4:	e04b      	b.n	8007d5e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc6:	4b10      	ldr	r3, [pc, #64]	; (8007d08 <HAL_RCC_OscConfig+0x478>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ccc:	f7fc f9e8 	bl	80040a0 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cd4:	f7fc f9e4 	bl	80040a0 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e03c      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ce6:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <HAL_RCC_OscConfig+0x470>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1f0      	bne.n	8007cd4 <HAL_RCC_OscConfig+0x444>
 8007cf2:	e034      	b.n	8007d5e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e02f      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
 8007d00:	40023800 	.word	0x40023800
 8007d04:	40007000 	.word	0x40007000
 8007d08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d0c:	4b16      	ldr	r3, [pc, #88]	; (8007d68 <HAL_RCC_OscConfig+0x4d8>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d11c      	bne.n	8007d5a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d115      	bne.n	8007d5a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d34:	4013      	ands	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d10d      	bne.n	8007d5a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d001      	beq.n	8007d5e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40023800 	.word	0x40023800

08007d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e0cc      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d80:	4b68      	ldr	r3, [pc, #416]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d90c      	bls.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b65      	ldr	r3, [pc, #404]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	b2d2      	uxtb	r2, r2
 8007d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d96:	4b63      	ldr	r3, [pc, #396]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 030f 	and.w	r3, r3, #15
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d001      	beq.n	8007da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	e0b8      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dc0:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a58      	ldr	r2, [pc, #352]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0308 	and.w	r3, r3, #8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dd8:	4b53      	ldr	r3, [pc, #332]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4a52      	ldr	r2, [pc, #328]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007de4:	4b50      	ldr	r3, [pc, #320]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	494d      	ldr	r1, [pc, #308]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d044      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d107      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e0a:	4b47      	ldr	r3, [pc, #284]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d119      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e07f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d003      	beq.n	8007e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d107      	bne.n	8007e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2a:	4b3f      	ldr	r3, [pc, #252]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d109      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e06f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e3a:	4b3b      	ldr	r3, [pc, #236]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e067      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e4a:	4b37      	ldr	r3, [pc, #220]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f023 0203 	bic.w	r2, r3, #3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4934      	ldr	r1, [pc, #208]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e5c:	f7fc f920 	bl	80040a0 <HAL_GetTick>
 8007e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e62:	e00a      	b.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e64:	f7fc f91c 	bl	80040a0 <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e04f      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7a:	4b2b      	ldr	r3, [pc, #172]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	f003 020c 	and.w	r2, r3, #12
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d1eb      	bne.n	8007e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e8c:	4b25      	ldr	r3, [pc, #148]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d20c      	bcs.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e9a:	4b22      	ldr	r3, [pc, #136]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ea2:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <HAL_RCC_ClockConfig+0x1b8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e032      	b.n	8007f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ec0:	4b19      	ldr	r3, [pc, #100]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4916      	ldr	r1, [pc, #88]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f003 0308 	and.w	r3, r3, #8
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ede:	4b12      	ldr	r3, [pc, #72]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	490e      	ldr	r1, [pc, #56]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ef2:	f000 f821 	bl	8007f38 <HAL_RCC_GetSysClockFreq>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <HAL_RCC_ClockConfig+0x1bc>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	490a      	ldr	r1, [pc, #40]	; (8007f2c <HAL_RCC_ClockConfig+0x1c0>)
 8007f04:	5ccb      	ldrb	r3, [r1, r3]
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <HAL_RCC_ClockConfig+0x1c8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fa fbd0 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 8007f18:	2300      	movs	r3, #0
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40023c00 	.word	0x40023c00
 8007f28:	40023800 	.word	0x40023800
 8007f2c:	080196d4 	.word	0x080196d4
 8007f30:	20000000 	.word	0x20000000
 8007f34:	20000044 	.word	0x20000044

08007f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f3c:	b094      	sub	sp, #80	; 0x50
 8007f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	647b      	str	r3, [r7, #68]	; 0x44
 8007f44:	2300      	movs	r3, #0
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f48:	2300      	movs	r3, #0
 8007f4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f50:	4b79      	ldr	r3, [pc, #484]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 030c 	and.w	r3, r3, #12
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d00d      	beq.n	8007f78 <HAL_RCC_GetSysClockFreq+0x40>
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	f200 80e1 	bhi.w	8008124 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0x34>
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	d003      	beq.n	8007f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f6a:	e0db      	b.n	8008124 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f6c:	4b73      	ldr	r3, [pc, #460]	; (800813c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007f70:	e0db      	b.n	800812a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f72:	4b73      	ldr	r3, [pc, #460]	; (8008140 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f76:	e0d8      	b.n	800812a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f78:	4b6f      	ldr	r3, [pc, #444]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f82:	4b6d      	ldr	r3, [pc, #436]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d063      	beq.n	8008056 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f8e:	4b6a      	ldr	r3, [pc, #424]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	099b      	lsrs	r3, r3, #6
 8007f94:	2200      	movs	r2, #0
 8007f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007faa:	4622      	mov	r2, r4
 8007fac:	462b      	mov	r3, r5
 8007fae:	f04f 0000 	mov.w	r0, #0
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	0159      	lsls	r1, r3, #5
 8007fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fbc:	0150      	lsls	r0, r2, #5
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	1a51      	subs	r1, r2, r1
 8007fc6:	6139      	str	r1, [r7, #16]
 8007fc8:	4629      	mov	r1, r5
 8007fca:	eb63 0301 	sbc.w	r3, r3, r1
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fdc:	4659      	mov	r1, fp
 8007fde:	018b      	lsls	r3, r1, #6
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fe6:	4651      	mov	r1, sl
 8007fe8:	018a      	lsls	r2, r1, #6
 8007fea:	4651      	mov	r1, sl
 8007fec:	ebb2 0801 	subs.w	r8, r2, r1
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	eb63 0901 	sbc.w	r9, r3, r1
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	f04f 0300 	mov.w	r3, #0
 8007ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800800a:	4690      	mov	r8, r2
 800800c:	4699      	mov	r9, r3
 800800e:	4623      	mov	r3, r4
 8008010:	eb18 0303 	adds.w	r3, r8, r3
 8008014:	60bb      	str	r3, [r7, #8]
 8008016:	462b      	mov	r3, r5
 8008018:	eb49 0303 	adc.w	r3, r9, r3
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	f04f 0200 	mov.w	r2, #0
 8008022:	f04f 0300 	mov.w	r3, #0
 8008026:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800802a:	4629      	mov	r1, r5
 800802c:	024b      	lsls	r3, r1, #9
 800802e:	4621      	mov	r1, r4
 8008030:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008034:	4621      	mov	r1, r4
 8008036:	024a      	lsls	r2, r1, #9
 8008038:	4610      	mov	r0, r2
 800803a:	4619      	mov	r1, r3
 800803c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800803e:	2200      	movs	r2, #0
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
 8008042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008044:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008048:	f7f8 fe2e 	bl	8000ca8 <__aeabi_uldivmod>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4613      	mov	r3, r2
 8008052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008054:	e058      	b.n	8008108 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008056:	4b38      	ldr	r3, [pc, #224]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	099b      	lsrs	r3, r3, #6
 800805c:	2200      	movs	r2, #0
 800805e:	4618      	mov	r0, r3
 8008060:	4611      	mov	r1, r2
 8008062:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008066:	623b      	str	r3, [r7, #32]
 8008068:	2300      	movs	r3, #0
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
 800806c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	f04f 0000 	mov.w	r0, #0
 8008078:	f04f 0100 	mov.w	r1, #0
 800807c:	0159      	lsls	r1, r3, #5
 800807e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008082:	0150      	lsls	r0, r2, #5
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4641      	mov	r1, r8
 800808a:	ebb2 0a01 	subs.w	sl, r2, r1
 800808e:	4649      	mov	r1, r9
 8008090:	eb63 0b01 	sbc.w	fp, r3, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80080a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80080a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80080a8:	ebb2 040a 	subs.w	r4, r2, sl
 80080ac:	eb63 050b 	sbc.w	r5, r3, fp
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	f04f 0300 	mov.w	r3, #0
 80080b8:	00eb      	lsls	r3, r5, #3
 80080ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080be:	00e2      	lsls	r2, r4, #3
 80080c0:	4614      	mov	r4, r2
 80080c2:	461d      	mov	r5, r3
 80080c4:	4643      	mov	r3, r8
 80080c6:	18e3      	adds	r3, r4, r3
 80080c8:	603b      	str	r3, [r7, #0]
 80080ca:	464b      	mov	r3, r9
 80080cc:	eb45 0303 	adc.w	r3, r5, r3
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080de:	4629      	mov	r1, r5
 80080e0:	028b      	lsls	r3, r1, #10
 80080e2:	4621      	mov	r1, r4
 80080e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080e8:	4621      	mov	r1, r4
 80080ea:	028a      	lsls	r2, r1, #10
 80080ec:	4610      	mov	r0, r2
 80080ee:	4619      	mov	r1, r3
 80080f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f2:	2200      	movs	r2, #0
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	61fa      	str	r2, [r7, #28]
 80080f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080fc:	f7f8 fdd4 	bl	8000ca8 <__aeabi_uldivmod>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4613      	mov	r3, r2
 8008106:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008108:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <HAL_RCC_GetSysClockFreq+0x200>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	0c1b      	lsrs	r3, r3, #16
 800810e:	f003 0303 	and.w	r3, r3, #3
 8008112:	3301      	adds	r3, #1
 8008114:	005b      	lsls	r3, r3, #1
 8008116:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008118:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800811a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008120:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008122:	e002      	b.n	800812a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_RCC_GetSysClockFreq+0x204>)
 8008126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800812a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800812c:	4618      	mov	r0, r3
 800812e:	3750      	adds	r7, #80	; 0x50
 8008130:	46bd      	mov	sp, r7
 8008132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008136:	bf00      	nop
 8008138:	40023800 	.word	0x40023800
 800813c:	00f42400 	.word	0x00f42400
 8008140:	007a1200 	.word	0x007a1200

08008144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008148:	4b03      	ldr	r3, [pc, #12]	; (8008158 <HAL_RCC_GetHCLKFreq+0x14>)
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20000000 	.word	0x20000000

0800815c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008160:	f7ff fff0 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 8008164:	4602      	mov	r2, r0
 8008166:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	0a9b      	lsrs	r3, r3, #10
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	4903      	ldr	r1, [pc, #12]	; (8008180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008172:	5ccb      	ldrb	r3, [r1, r3]
 8008174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008178:	4618      	mov	r0, r3
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40023800 	.word	0x40023800
 8008180:	080196e4 	.word	0x080196e4

08008184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008188:	f7ff ffdc 	bl	8008144 <HAL_RCC_GetHCLKFreq>
 800818c:	4602      	mov	r2, r0
 800818e:	4b05      	ldr	r3, [pc, #20]	; (80081a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	0b5b      	lsrs	r3, r3, #13
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	4903      	ldr	r1, [pc, #12]	; (80081a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800819a:	5ccb      	ldrb	r3, [r1, r3]
 800819c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40023800 	.word	0x40023800
 80081a8:	080196e4 	.word	0x080196e4

080081ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	220f      	movs	r2, #15
 80081ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <HAL_RCC_GetClockConfig+0x5c>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	f003 0203 	and.w	r2, r3, #3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <HAL_RCC_GetClockConfig+0x5c>)
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <HAL_RCC_GetClockConfig+0x5c>)
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80081e0:	4b09      	ldr	r3, [pc, #36]	; (8008208 <HAL_RCC_GetClockConfig+0x5c>)
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	08db      	lsrs	r3, r3, #3
 80081e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80081ee:	4b07      	ldr	r3, [pc, #28]	; (800820c <HAL_RCC_GetClockConfig+0x60>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 020f 	and.w	r2, r3, #15
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	601a      	str	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40023800 	.word	0x40023800
 800820c:	40023c00 	.word	0x40023c00

08008210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008218:	2300      	movs	r3, #0
 800821a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008240:	2b00      	cmp	r3, #0
 8008242:	d075      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008244:	4b91      	ldr	r3, [pc, #580]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800824a:	f7fb ff29 	bl	80040a0 <HAL_GetTick>
 800824e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008250:	e008      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008252:	f7fb ff25 	bl	80040a0 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e189      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008264:	4b8a      	ldr	r3, [pc, #552]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	019a      	lsls	r2, r3, #6
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	071b      	lsls	r3, r3, #28
 8008288:	4981      	ldr	r1, [pc, #516]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01f      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800829c:	4b7c      	ldr	r3, [pc, #496]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800829e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a2:	0f1b      	lsrs	r3, r3, #28
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	019a      	lsls	r2, r3, #6
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68db      	ldr	r3, [r3, #12]
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	431a      	orrs	r2, r3
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	071b      	lsls	r3, r3, #28
 80082bc:	4974      	ldr	r1, [pc, #464]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80082c4:	4b72      	ldr	r3, [pc, #456]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ca:	f023 021f 	bic.w	r2, r3, #31
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	3b01      	subs	r3, #1
 80082d4:	496e      	ldr	r1, [pc, #440]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00d      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	019a      	lsls	r2, r3, #6
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	061b      	lsls	r3, r3, #24
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	071b      	lsls	r3, r3, #28
 80082fc:	4964      	ldr	r1, [pc, #400]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80082fe:	4313      	orrs	r3, r2
 8008300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008304:	4b61      	ldr	r3, [pc, #388]	; (800848c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800830a:	f7fb fec9 	bl	80040a0 <HAL_GetTick>
 800830e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008310:	e008      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008312:	f7fb fec5 	bl	80040a0 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e129      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008324:	4b5a      	ldr	r3, [pc, #360]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0304 	and.w	r3, r3, #4
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008344:	2b00      	cmp	r3, #0
 8008346:	d079      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008348:	4b52      	ldr	r3, [pc, #328]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800834a:	2200      	movs	r2, #0
 800834c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800834e:	f7fb fea7 	bl	80040a0 <HAL_GetTick>
 8008352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008354:	e008      	b.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008356:	f7fb fea3 	bl	80040a0 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e107      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008368:	4b49      	ldr	r3, [pc, #292]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008374:	d0ef      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d020      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008382:	4b43      	ldr	r3, [pc, #268]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008388:	0f1b      	lsrs	r3, r3, #28
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	019a      	lsls	r2, r3, #6
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	061b      	lsls	r3, r3, #24
 800839c:	431a      	orrs	r2, r3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	071b      	lsls	r3, r3, #28
 80083a2:	493b      	ldr	r1, [pc, #236]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80083aa:	4b39      	ldr	r3, [pc, #228]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a1b      	ldr	r3, [r3, #32]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	4934      	ldr	r1, [pc, #208]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d01e      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083d0:	4b2f      	ldr	r3, [pc, #188]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d6:	0e1b      	lsrs	r3, r3, #24
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	019a      	lsls	r2, r3, #6
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	061b      	lsls	r3, r3, #24
 80083e8:	431a      	orrs	r2, r3
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	071b      	lsls	r3, r3, #28
 80083f0:	4927      	ldr	r1, [pc, #156]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80083f8:	4b25      	ldr	r3, [pc, #148]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80083fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008406:	4922      	ldr	r1, [pc, #136]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800840e:	4b21      	ldr	r3, [pc, #132]	; (8008494 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8008410:	2201      	movs	r2, #1
 8008412:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008414:	f7fb fe44 	bl	80040a0 <HAL_GetTick>
 8008418:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800841a:	e008      	b.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800841c:	f7fb fe40 	bl	80040a0 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e0a4      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800842e:	4b18      	ldr	r3, [pc, #96]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800843a:	d1ef      	bne.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0320 	and.w	r3, r3, #32
 8008444:	2b00      	cmp	r3, #0
 8008446:	f000 808b 	beq.w	8008560 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	4a0f      	ldr	r2, [pc, #60]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8008454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008458:	6413      	str	r3, [r2, #64]	; 0x40
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a0b      	ldr	r2, [pc, #44]	; (8008498 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800846c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008470:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008472:	f7fb fe15 	bl	80040a0 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008478:	e010      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800847a:	f7fb fe11 	bl	80040a0 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d909      	bls.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e075      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800848c:	42470068 	.word	0x42470068
 8008490:	40023800 	.word	0x40023800
 8008494:	42470070 	.word	0x42470070
 8008498:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800849c:	4b38      	ldr	r3, [pc, #224]	; (8008580 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0e8      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084a8:	4b36      	ldr	r3, [pc, #216]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d02f      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d028      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084c6:	4b2f      	ldr	r3, [pc, #188]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084d0:	4b2d      	ldr	r3, [pc, #180]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084d6:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80084dc:	4a29      	ldr	r2, [pc, #164]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084e2:	4b28      	ldr	r3, [pc, #160]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d114      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80084ee:	f7fb fdd7 	bl	80040a0 <HAL_GetTick>
 80084f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084f4:	e00a      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084f6:	f7fb fdd3 	bl	80040a0 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	f241 3288 	movw	r2, #5000	; 0x1388
 8008504:	4293      	cmp	r3, r2
 8008506:	d901      	bls.n	800850c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e035      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800850c:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800850e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0ee      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008524:	d10d      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008526:	4b17      	ldr	r3, [pc, #92]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853a:	4912      	ldr	r1, [pc, #72]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800853c:	4313      	orrs	r3, r2
 800853e:	608b      	str	r3, [r1, #8]
 8008540:	e005      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8008542:	4b10      	ldr	r3, [pc, #64]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	4a0f      	ldr	r2, [pc, #60]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008548:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800854c:	6093      	str	r3, [r2, #8]
 800854e:	4b0d      	ldr	r3, [pc, #52]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800855a:	490a      	ldr	r1, [pc, #40]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800855c:	4313      	orrs	r3, r2
 800855e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	d004      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8008574:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40007000 	.word	0x40007000
 8008584:	40023800 	.word	0x40023800
 8008588:	42470e40 	.word	0x42470e40
 800858c:	424711e0 	.word	0x424711e0

08008590 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e025      	b.n	80085f0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f81d 	bl	80085f8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2202      	movs	r2, #2
 80085c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f001 fe2d 	bl	800a230 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	461a      	mov	r2, r3
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	f001 fe98 	bl	800a316 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3708      	adds	r7, #8
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d101      	bne.n	8008628 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008624:	2302      	movs	r3, #2
 8008626:	e018      	b.n	800865a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4618      	mov	r0, r3
 800863a:	f001 feeb 	bl	800a414 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d104      	bne.n	8008650 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2205      	movs	r2, #5
 800864a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800864e:	e003      	b.n	8008658 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
 800866a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b02      	cmp	r3, #2
 8008676:	d101      	bne.n	800867c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008678:	2302      	movs	r3, #2
 800867a:	e00e      	b.n	800869a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f001 fefe 	bl	800a48c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e056      	b.n	8008762 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d106      	bne.n	80086d4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7f9 ff60 	bl	8002594 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	431a      	orrs	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a1b      	ldr	r3, [r3, #32]
 800871c:	ea42 0103 	orr.w	r1, r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	430a      	orrs	r2, r1
 800872a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	f003 0104 	and.w	r1, r3, #4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	430a      	orrs	r2, r1
 8008740:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	69da      	ldr	r2, [r3, #28]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008750:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e01a      	b.n	80087b2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008792:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7f9 ff45 	bl	8002624 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_SPI_Transmit+0x22>
 80087d8:	2302      	movs	r3, #2
 80087da:	e11e      	b.n	8008a1a <HAL_SPI_Transmit+0x260>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087e4:	f7fb fc5c 	bl	80040a0 <HAL_GetTick>
 80087e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80087ea:	88fb      	ldrh	r3, [r7, #6]
 80087ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d002      	beq.n	8008800 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80087fa:	2302      	movs	r3, #2
 80087fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80087fe:	e103      	b.n	8008a08 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_SPI_Transmit+0x52>
 8008806:	88fb      	ldrh	r3, [r7, #6]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d102      	bne.n	8008812 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008810:	e0fa      	b.n	8008a08 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2203      	movs	r2, #3
 8008816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	88fa      	ldrh	r2, [r7, #6]
 800882a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	88fa      	ldrh	r2, [r7, #6]
 8008830:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008858:	d107      	bne.n	800886a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008868:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d007      	beq.n	8008888 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008886:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008890:	d14b      	bne.n	800892a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <HAL_SPI_Transmit+0xe6>
 800889a:	8afb      	ldrh	r3, [r7, #22]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d13e      	bne.n	800891e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a4:	881a      	ldrh	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	1c9a      	adds	r2, r3, #2
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80088c4:	e02b      	b.n	800891e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 0302 	and.w	r3, r3, #2
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	d112      	bne.n	80088fa <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d8:	881a      	ldrh	r2, [r3, #0]
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e4:	1c9a      	adds	r2, r3, #2
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80088f8:	e011      	b.n	800891e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088fa:	f7fb fbd1 	bl	80040a0 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d803      	bhi.n	8008912 <HAL_SPI_Transmit+0x158>
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008910:	d102      	bne.n	8008918 <HAL_SPI_Transmit+0x15e>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d102      	bne.n	800891e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800891c:	e074      	b.n	8008a08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008922:	b29b      	uxth	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1ce      	bne.n	80088c6 <HAL_SPI_Transmit+0x10c>
 8008928:	e04c      	b.n	80089c4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d002      	beq.n	8008938 <HAL_SPI_Transmit+0x17e>
 8008932:	8afb      	ldrh	r3, [r7, #22]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d140      	bne.n	80089ba <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	330c      	adds	r3, #12
 8008942:	7812      	ldrb	r2, [r2, #0]
 8008944:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008954:	b29b      	uxth	r3, r3
 8008956:	3b01      	subs	r3, #1
 8008958:	b29a      	uxth	r2, r3
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800895e:	e02c      	b.n	80089ba <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d113      	bne.n	8008996 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	330c      	adds	r3, #12
 8008978:	7812      	ldrb	r2, [r2, #0]
 800897a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	1c5a      	adds	r2, r3, #1
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800898a:	b29b      	uxth	r3, r3
 800898c:	3b01      	subs	r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	86da      	strh	r2, [r3, #54]	; 0x36
 8008994:	e011      	b.n	80089ba <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008996:	f7fb fb83 	bl	80040a0 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d803      	bhi.n	80089ae <HAL_SPI_Transmit+0x1f4>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ac:	d102      	bne.n	80089b4 <HAL_SPI_Transmit+0x1fa>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80089b8:	e026      	b.n	8008a08 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1cd      	bne.n	8008960 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fbb3 	bl	8009134 <SPI_EndRxTxTransaction>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2220      	movs	r2, #32
 80089d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	613b      	str	r3, [r7, #16]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	613b      	str	r3, [r7, #16]
 80089f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e000      	b.n	8008a08 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008a06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b088      	sub	sp, #32
 8008a26:	af02      	add	r7, sp, #8
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	60b9      	str	r1, [r7, #8]
 8008a2c:	603b      	str	r3, [r7, #0]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a3e:	d112      	bne.n	8008a66 <HAL_SPI_Receive+0x44>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10e      	bne.n	8008a66 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a50:	88fa      	ldrh	r2, [r7, #6]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	4613      	mov	r3, r2
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	68b9      	ldr	r1, [r7, #8]
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f8e9 	bl	8008c34 <HAL_SPI_TransmitReceive>
 8008a62:	4603      	mov	r3, r0
 8008a64:	e0e2      	b.n	8008c2c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_SPI_Receive+0x52>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e0db      	b.n	8008c2c <HAL_SPI_Receive+0x20a>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a7c:	f7fb fb10 	bl	80040a0 <HAL_GetTick>
 8008a80:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d002      	beq.n	8008a94 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a92:	e0c2      	b.n	8008c1a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HAL_SPI_Receive+0x7e>
 8008a9a:	88fb      	ldrh	r3, [r7, #6]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d102      	bne.n	8008aa6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008aa4:	e0b9      	b.n	8008c1a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2204      	movs	r2, #4
 8008aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	88fa      	ldrh	r2, [r7, #6]
 8008abe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	88fa      	ldrh	r2, [r7, #6]
 8008ac4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aec:	d107      	bne.n	8008afe <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b08:	2b40      	cmp	r3, #64	; 0x40
 8008b0a:	d007      	beq.n	8008b1c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d162      	bne.n	8008bea <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008b24:	e02e      	b.n	8008b84 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d115      	bne.n	8008b60 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f103 020c 	add.w	r2, r3, #12
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	1c5a      	adds	r2, r3, #1
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	3b01      	subs	r3, #1
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b5e:	e011      	b.n	8008b84 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b60:	f7fb fa9e 	bl	80040a0 <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	683a      	ldr	r2, [r7, #0]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d803      	bhi.n	8008b78 <HAL_SPI_Receive+0x156>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b76:	d102      	bne.n	8008b7e <HAL_SPI_Receive+0x15c>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b82:	e04a      	b.n	8008c1a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1cb      	bne.n	8008b26 <HAL_SPI_Receive+0x104>
 8008b8e:	e031      	b.n	8008bf4 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d113      	bne.n	8008bc6 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	b292      	uxth	r2, r2
 8008baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	1c9a      	adds	r2, r3, #2
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bc4:	e011      	b.n	8008bea <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bc6:	f7fb fa6b 	bl	80040a0 <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d803      	bhi.n	8008bde <HAL_SPI_Receive+0x1bc>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bdc:	d102      	bne.n	8008be4 <HAL_SPI_Receive+0x1c2>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008be4:	2303      	movs	r3, #3
 8008be6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008be8:	e017      	b.n	8008c1a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1cd      	bne.n	8008b90 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fa35 	bl	8009068 <SPI_EndRxTransaction>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
 8008c16:	e000      	b.n	8008c1a <HAL_SPI_Receive+0x1f8>
  }

error :
 8008c18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	607a      	str	r2, [r7, #4]
 8008c40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c42:	2301      	movs	r3, #1
 8008c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d101      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x26>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e18a      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x33c>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c62:	f7fb fa1d 	bl	80040a0 <HAL_GetTick>
 8008c66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c78:	887b      	ldrh	r3, [r7, #2]
 8008c7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d00f      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x70>
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c8a:	d107      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d103      	bne.n	8008c9c <HAL_SPI_TransmitReceive+0x68>
 8008c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c98:	2b04      	cmp	r3, #4
 8008c9a:	d003      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008ca2:	e15b      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <HAL_SPI_TransmitReceive+0x82>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_SPI_TransmitReceive+0x82>
 8008cb0:	887b      	ldrh	r3, [r7, #2]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008cbc:	e14e      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d003      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2205      	movs	r2, #5
 8008cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	887a      	ldrh	r2, [r7, #2]
 8008ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	887a      	ldrh	r2, [r7, #2]
 8008ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	887a      	ldrh	r2, [r7, #2]
 8008cf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	887a      	ldrh	r2, [r7, #2]
 8008cfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d007      	beq.n	8008d26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d2e:	d178      	bne.n	8008e22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <HAL_SPI_TransmitReceive+0x10a>
 8008d38:	8b7b      	ldrh	r3, [r7, #26]
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	d166      	bne.n	8008e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	881a      	ldrh	r2, [r3, #0]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d4e:	1c9a      	adds	r2, r3, #2
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d62:	e053      	b.n	8008e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d11b      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x176>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d016      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x176>
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d113      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d86:	881a      	ldrh	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	1c9a      	adds	r2, r3, #2
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d119      	bne.n	8008dec <HAL_SPI_TransmitReceive+0x1b8>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	1c9a      	adds	r2, r3, #2
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3b01      	subs	r3, #1
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008de8:	2301      	movs	r3, #1
 8008dea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008dec:	f7fb f958 	bl	80040a0 <HAL_GetTick>
 8008df0:	4602      	mov	r2, r0
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d807      	bhi.n	8008e0c <HAL_SPI_TransmitReceive+0x1d8>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e02:	d003      	beq.n	8008e0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008e0a:	e0a7      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1a6      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x130>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1a1      	bne.n	8008d64 <HAL_SPI_TransmitReceive+0x130>
 8008e20:	e07c      	b.n	8008f1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_SPI_TransmitReceive+0x1fc>
 8008e2a:	8b7b      	ldrh	r3, [r7, #26]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d16b      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	330c      	adds	r3, #12
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e42:	1c5a      	adds	r2, r3, #1
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e56:	e057      	b.n	8008f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d11c      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x26c>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d017      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x26c>
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d114      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	7812      	ldrb	r2, [r2, #0]
 8008e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f003 0301 	and.w	r3, r3, #1
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d119      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x2ae>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d014      	beq.n	8008ee2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec2:	b2d2      	uxtb	r2, r2
 8008ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ee2:	f7fb f8dd 	bl	80040a0 <HAL_GetTick>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	1ad3      	subs	r3, r2, r3
 8008eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d803      	bhi.n	8008efa <HAL_SPI_TransmitReceive+0x2c6>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ef8:	d102      	bne.n	8008f00 <HAL_SPI_TransmitReceive+0x2cc>
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d103      	bne.n	8008f08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008f06:	e029      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1a2      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x224>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d19d      	bne.n	8008e58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f907 	bl	8009134 <SPI_EndRxTxTransaction>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d006      	beq.n	8008f3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2220      	movs	r2, #32
 8008f36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008f38:	e010      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10b      	bne.n	8008f5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	617b      	str	r3, [r7, #20]
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	e000      	b.n	8008f5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3730      	adds	r7, #48	; 0x30
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f86:	b2db      	uxtb	r3, r3
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fa4:	e04c      	b.n	8009040 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fac:	d048      	beq.n	8009040 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008fae:	f7fb f877 	bl	80040a0 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d902      	bls.n	8008fc4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d13d      	bne.n	8009040 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685a      	ldr	r2, [r3, #4]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008fdc:	d111      	bne.n	8009002 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fe6:	d004      	beq.n	8008ff2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ff0:	d107      	bne.n	8009002 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800900a:	d10f      	bne.n	800902c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800902a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e00f      	b.n	8009060 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	689a      	ldr	r2, [r3, #8]
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	4013      	ands	r3, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	429a      	cmp	r2, r3
 800904e:	bf0c      	ite	eq
 8009050:	2301      	moveq	r3, #1
 8009052:	2300      	movne	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	461a      	mov	r2, r3
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	429a      	cmp	r2, r3
 800905c:	d1a3      	bne.n	8008fa6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af02      	add	r7, sp, #8
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800907c:	d111      	bne.n	80090a2 <SPI_EndRxTransaction+0x3a>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009086:	d004      	beq.n	8009092 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009090:	d107      	bne.n	80090a2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090aa:	d12a      	bne.n	8009102 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090b4:	d012      	beq.n	80090dc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2200      	movs	r2, #0
 80090be:	2180      	movs	r1, #128	; 0x80
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff ff67 	bl	8008f94 <SPI_WaitFlagStateUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02d      	beq.n	8009128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d0:	f043 0220 	orr.w	r2, r3, #32
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e026      	b.n	800912a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	2101      	movs	r1, #1
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff ff54 	bl	8008f94 <SPI_WaitFlagStateUntilTimeout>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d01a      	beq.n	8009128 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f6:	f043 0220 	orr.w	r2, r3, #32
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e013      	b.n	800912a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2200      	movs	r2, #0
 800910a:	2101      	movs	r1, #1
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff ff41 	bl	8008f94 <SPI_WaitFlagStateUntilTimeout>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d007      	beq.n	8009128 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911c:	f043 0220 	orr.w	r2, r3, #32
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e000      	b.n	800912a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
	...

08009134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	60b9      	str	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009140:	4b1b      	ldr	r3, [pc, #108]	; (80091b0 <SPI_EndRxTxTransaction+0x7c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1b      	ldr	r2, [pc, #108]	; (80091b4 <SPI_EndRxTxTransaction+0x80>)
 8009146:	fba2 2303 	umull	r2, r3, r2, r3
 800914a:	0d5b      	lsrs	r3, r3, #21
 800914c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009150:	fb02 f303 	mul.w	r3, r2, r3
 8009154:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800915e:	d112      	bne.n	8009186 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	2200      	movs	r2, #0
 8009168:	2180      	movs	r1, #128	; 0x80
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f7ff ff12 	bl	8008f94 <SPI_WaitFlagStateUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d016      	beq.n	80091a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	f043 0220 	orr.w	r2, r3, #32
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e00f      	b.n	80091a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	3b01      	subs	r3, #1
 8009190:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800919c:	2b80      	cmp	r3, #128	; 0x80
 800919e:	d0f2      	beq.n	8009186 <SPI_EndRxTxTransaction+0x52>
 80091a0:	e000      	b.n	80091a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80091a2:	bf00      	nop
  }

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000000 	.word	0x20000000
 80091b4:	165e9f81 	.word	0x165e9f81

080091b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e01d      	b.n	8009206 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f815 	bl	800920e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2202      	movs	r2, #2
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f000 f968 	bl	80094cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}

0800920e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800920e:	b480      	push	{r7}
 8009210:	b083      	sub	sp, #12
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009216:	bf00      	nop
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68da      	ldr	r2, [r3, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f042 0201 	orr.w	r2, r2, #1
 8009238:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f003 0307 	and.w	r3, r3, #7
 8009244:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b06      	cmp	r3, #6
 800924a:	d007      	beq.n	800925c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f042 0201 	orr.w	r2, r2, #1
 800925a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3714      	adds	r7, #20
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr

0800926a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b02      	cmp	r3, #2
 800927e:	d122      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b02      	cmp	r3, #2
 800928c:	d11b      	bne.n	80092c6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f06f 0202 	mvn.w	r2, #2
 8009296:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f8ee 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 80092b2:	e005      	b.n	80092c0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f8e0 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f8f1 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	f003 0304 	and.w	r3, r3, #4
 80092d0:	2b04      	cmp	r3, #4
 80092d2:	d122      	bne.n	800931a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b04      	cmp	r3, #4
 80092e0:	d11b      	bne.n	800931a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f06f 0204 	mvn.w	r2, #4
 80092ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f8c4 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 8009306:	e005      	b.n	8009314 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8b6 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8c7 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f003 0308 	and.w	r3, r3, #8
 8009324:	2b08      	cmp	r3, #8
 8009326:	d122      	bne.n	800936e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b08      	cmp	r3, #8
 8009334:	d11b      	bne.n	800936e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f06f 0208 	mvn.w	r2, #8
 800933e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2204      	movs	r2, #4
 8009344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f003 0303 	and.w	r3, r3, #3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d003      	beq.n	800935c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f89a 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 800935a:	e005      	b.n	8009368 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f88c 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f89d 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	f003 0310 	and.w	r3, r3, #16
 8009378:	2b10      	cmp	r3, #16
 800937a:	d122      	bne.n	80093c2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	2b10      	cmp	r3, #16
 8009388:	d11b      	bne.n	80093c2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f06f 0210 	mvn.w	r2, #16
 8009392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2208      	movs	r2, #8
 8009398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d003      	beq.n	80093b0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f870 	bl	800948e <HAL_TIM_IC_CaptureCallback>
 80093ae:	e005      	b.n	80093bc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f862 	bl	800947a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f873 	bl	80094a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10e      	bne.n	80093ee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d107      	bne.n	80093ee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f06f 0201 	mvn.w	r2, #1
 80093e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7f9 f883 	bl	80024f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f8:	2b80      	cmp	r3, #128	; 0x80
 80093fa:	d10e      	bne.n	800941a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009406:	2b80      	cmp	r3, #128	; 0x80
 8009408:	d107      	bne.n	800941a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f903 	bl	8009620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009424:	2b40      	cmp	r3, #64	; 0x40
 8009426:	d10e      	bne.n	8009446 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009432:	2b40      	cmp	r3, #64	; 0x40
 8009434:	d107      	bne.n	8009446 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800943e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f838 	bl	80094b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b20      	cmp	r3, #32
 8009452:	d10e      	bne.n	8009472 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b20      	cmp	r3, #32
 8009460:	d107      	bne.n	8009472 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f06f 0220 	mvn.w	r2, #32
 800946a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 f8cd 	bl	800960c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009472:	bf00      	nop
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009482:	bf00      	nop
 8009484:	370c      	adds	r7, #12
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094be:	bf00      	nop
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
	...

080094cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a40      	ldr	r2, [pc, #256]	; (80095e0 <TIM_Base_SetConfig+0x114>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d013      	beq.n	800950c <TIM_Base_SetConfig+0x40>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094ea:	d00f      	beq.n	800950c <TIM_Base_SetConfig+0x40>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a3d      	ldr	r2, [pc, #244]	; (80095e4 <TIM_Base_SetConfig+0x118>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00b      	beq.n	800950c <TIM_Base_SetConfig+0x40>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a3c      	ldr	r2, [pc, #240]	; (80095e8 <TIM_Base_SetConfig+0x11c>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d007      	beq.n	800950c <TIM_Base_SetConfig+0x40>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a3b      	ldr	r2, [pc, #236]	; (80095ec <TIM_Base_SetConfig+0x120>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d003      	beq.n	800950c <TIM_Base_SetConfig+0x40>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a3a      	ldr	r2, [pc, #232]	; (80095f0 <TIM_Base_SetConfig+0x124>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d108      	bne.n	800951e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	4313      	orrs	r3, r2
 800951c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a2f      	ldr	r2, [pc, #188]	; (80095e0 <TIM_Base_SetConfig+0x114>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d02b      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800952c:	d027      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a2c      	ldr	r2, [pc, #176]	; (80095e4 <TIM_Base_SetConfig+0x118>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d023      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a2b      	ldr	r2, [pc, #172]	; (80095e8 <TIM_Base_SetConfig+0x11c>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d01f      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a2a      	ldr	r2, [pc, #168]	; (80095ec <TIM_Base_SetConfig+0x120>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d01b      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a29      	ldr	r2, [pc, #164]	; (80095f0 <TIM_Base_SetConfig+0x124>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d017      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a28      	ldr	r2, [pc, #160]	; (80095f4 <TIM_Base_SetConfig+0x128>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d013      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a27      	ldr	r2, [pc, #156]	; (80095f8 <TIM_Base_SetConfig+0x12c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d00f      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a26      	ldr	r2, [pc, #152]	; (80095fc <TIM_Base_SetConfig+0x130>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00b      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a25      	ldr	r2, [pc, #148]	; (8009600 <TIM_Base_SetConfig+0x134>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d007      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a24      	ldr	r2, [pc, #144]	; (8009604 <TIM_Base_SetConfig+0x138>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d003      	beq.n	800957e <TIM_Base_SetConfig+0xb2>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a23      	ldr	r2, [pc, #140]	; (8009608 <TIM_Base_SetConfig+0x13c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d108      	bne.n	8009590 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	4313      	orrs	r3, r2
 800958e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	4313      	orrs	r3, r2
 800959c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <TIM_Base_SetConfig+0x114>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d003      	beq.n	80095c4 <TIM_Base_SetConfig+0xf8>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a0c      	ldr	r2, [pc, #48]	; (80095f0 <TIM_Base_SetConfig+0x124>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d103      	bne.n	80095cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	615a      	str	r2, [r3, #20]
}
 80095d2:	bf00      	nop
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	40010000 	.word	0x40010000
 80095e4:	40000400 	.word	0x40000400
 80095e8:	40000800 	.word	0x40000800
 80095ec:	40000c00 	.word	0x40000c00
 80095f0:	40010400 	.word	0x40010400
 80095f4:	40014000 	.word	0x40014000
 80095f8:	40014400 	.word	0x40014400
 80095fc:	40014800 	.word	0x40014800
 8009600:	40001800 	.word	0x40001800
 8009604:	40001c00 	.word	0x40001c00
 8009608:	40002000 	.word	0x40002000

0800960c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e03f      	b.n	80096c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7f9 f9d6 	bl	8002a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2224      	movs	r2, #36	; 0x24
 8009664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f90b 	bl	8009894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	691a      	ldr	r2, [r3, #16]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800968c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695a      	ldr	r2, [r3, #20]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800969c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2220      	movs	r2, #32
 80096b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b088      	sub	sp, #32
 80096d2:	af02      	add	r7, sp, #8
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	60b9      	str	r1, [r7, #8]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	4613      	mov	r3, r2
 80096dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	2b20      	cmp	r3, #32
 80096ec:	f040 8083 	bne.w	80097f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <HAL_UART_Transmit+0x2e>
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e07b      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_UART_Transmit+0x40>
 800970a:	2302      	movs	r3, #2
 800970c:	e074      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2221      	movs	r2, #33	; 0x21
 8009720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009724:	f7fa fcbc 	bl	80040a0 <HAL_GetTick>
 8009728:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	88fa      	ldrh	r2, [r7, #6]
 800972e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	88fa      	ldrh	r2, [r7, #6]
 8009734:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800973e:	e042      	b.n	80097c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009744:	b29b      	uxth	r3, r3
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009756:	d122      	bne.n	800979e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2200      	movs	r2, #0
 8009760:	2180      	movs	r1, #128	; 0x80
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f84c 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800976e:	2303      	movs	r3, #3
 8009770:	e042      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009784:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	3302      	adds	r3, #2
 8009792:	60bb      	str	r3, [r7, #8]
 8009794:	e017      	b.n	80097c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	3301      	adds	r3, #1
 800979a:	60bb      	str	r3, [r7, #8]
 800979c:	e013      	b.n	80097c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	2180      	movs	r1, #128	; 0x80
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f829 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e01f      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	60ba      	str	r2, [r7, #8]
 80097be:	781a      	ldrb	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1b7      	bne.n	8009740 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2200      	movs	r2, #0
 80097d8:	2140      	movs	r1, #64	; 0x40
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 f810 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e006      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e000      	b.n	80097f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80097f6:	2302      	movs	r3, #2
  }
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009810:	e02c      	b.n	800986c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009818:	d028      	beq.n	800986c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d007      	beq.n	8009830 <UART_WaitOnFlagUntilTimeout+0x30>
 8009820:	f7fa fc3e 	bl	80040a0 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	429a      	cmp	r2, r3
 800982e:	d21d      	bcs.n	800986c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68da      	ldr	r2, [r3, #12]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800983e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	695a      	ldr	r2, [r3, #20]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0201 	bic.w	r2, r2, #1
 800984e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2220      	movs	r2, #32
 800985c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e00f      	b.n	800988c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4013      	ands	r3, r2
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	429a      	cmp	r2, r3
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	429a      	cmp	r2, r3
 8009888:	d0c3      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009898:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800989c:	af00      	add	r7, sp, #0
 800989e:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80098ae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098b2:	68d9      	ldr	r1, [r3, #12]
 80098b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	ea40 0301 	orr.w	r3, r0, r1
 80098be:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80098c0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098c4:	689a      	ldr	r2, [r3, #8]
 80098c6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	431a      	orrs	r2, r3
 80098ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	431a      	orrs	r2, r3
 80098d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	4313      	orrs	r3, r2
 80098de:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80098e2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098ee:	f021 010c 	bic.w	r1, r1, #12
 80098f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80098fc:	430b      	orrs	r3, r1
 80098fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009900:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800990c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009910:	6999      	ldr	r1, [r3, #24]
 8009912:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	ea40 0301 	orr.w	r3, r0, r1
 800991c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800991e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009928:	f040 824a 	bne.w	8009dc0 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800992c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	4b96      	ldr	r3, [pc, #600]	; (8009b8c <UART_SetConfig+0x2f8>)
 8009934:	429a      	cmp	r2, r3
 8009936:	d006      	beq.n	8009946 <UART_SetConfig+0xb2>
 8009938:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b94      	ldr	r3, [pc, #592]	; (8009b90 <UART_SetConfig+0x2fc>)
 8009940:	429a      	cmp	r2, r3
 8009942:	f040 8129 	bne.w	8009b98 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009946:	f7fe fc1d 	bl	8008184 <HAL_RCC_GetPCLK2Freq>
 800994a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800994e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009952:	2200      	movs	r2, #0
 8009954:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8009958:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800995c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8009960:	4622      	mov	r2, r4
 8009962:	462b      	mov	r3, r5
 8009964:	1891      	adds	r1, r2, r2
 8009966:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800996a:	415b      	adcs	r3, r3
 800996c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009970:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8009974:	4621      	mov	r1, r4
 8009976:	1851      	adds	r1, r2, r1
 8009978:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800997c:	4629      	mov	r1, r5
 800997e:	414b      	adcs	r3, r1
 8009980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8009990:	4649      	mov	r1, r9
 8009992:	00cb      	lsls	r3, r1, #3
 8009994:	4641      	mov	r1, r8
 8009996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800999a:	4641      	mov	r1, r8
 800999c:	00ca      	lsls	r2, r1, #3
 800999e:	4610      	mov	r0, r2
 80099a0:	4619      	mov	r1, r3
 80099a2:	4603      	mov	r3, r0
 80099a4:	4622      	mov	r2, r4
 80099a6:	189b      	adds	r3, r3, r2
 80099a8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80099ac:	462b      	mov	r3, r5
 80099ae:	460a      	mov	r2, r1
 80099b0:	eb42 0303 	adc.w	r3, r2, r3
 80099b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80099b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80099c4:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80099c8:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80099cc:	460b      	mov	r3, r1
 80099ce:	18db      	adds	r3, r3, r3
 80099d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099d4:	4613      	mov	r3, r2
 80099d6:	eb42 0303 	adc.w	r3, r2, r3
 80099da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80099de:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 80099e2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 80099e6:	f7f7 f95f 	bl	8000ca8 <__aeabi_uldivmod>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4b69      	ldr	r3, [pc, #420]	; (8009b94 <UART_SetConfig+0x300>)
 80099f0:	fba3 2302 	umull	r2, r3, r3, r2
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	011c      	lsls	r4, r3, #4
 80099f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8009a02:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8009a06:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	464b      	mov	r3, r9
 8009a0e:	1891      	adds	r1, r2, r2
 8009a10:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009a14:	415b      	adcs	r3, r3
 8009a16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a1a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8009a1e:	4641      	mov	r1, r8
 8009a20:	1851      	adds	r1, r2, r1
 8009a22:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8009a26:	4649      	mov	r1, r9
 8009a28:	414b      	adcs	r3, r1
 8009a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a2e:	f04f 0200 	mov.w	r2, #0
 8009a32:	f04f 0300 	mov.w	r3, #0
 8009a36:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8009a3a:	4659      	mov	r1, fp
 8009a3c:	00cb      	lsls	r3, r1, #3
 8009a3e:	4651      	mov	r1, sl
 8009a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a44:	4651      	mov	r1, sl
 8009a46:	00ca      	lsls	r2, r1, #3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4642      	mov	r2, r8
 8009a50:	189b      	adds	r3, r3, r2
 8009a52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8009a56:	464b      	mov	r3, r9
 8009a58:	460a      	mov	r2, r1
 8009a5a:	eb42 0303 	adc.w	r3, r2, r3
 8009a5e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8009a62:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8009a6e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8009a72:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8009a76:	460b      	mov	r3, r1
 8009a78:	18db      	adds	r3, r3, r3
 8009a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a7e:	4613      	mov	r3, r2
 8009a80:	eb42 0303 	adc.w	r3, r2, r3
 8009a84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a88:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8009a8c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8009a90:	f7f7 f90a 	bl	8000ca8 <__aeabi_uldivmod>
 8009a94:	4602      	mov	r2, r0
 8009a96:	460b      	mov	r3, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4b3e      	ldr	r3, [pc, #248]	; (8009b94 <UART_SetConfig+0x300>)
 8009a9c:	fba3 2301 	umull	r2, r3, r3, r1
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	2264      	movs	r2, #100	; 0x64
 8009aa4:	fb02 f303 	mul.w	r3, r2, r3
 8009aa8:	1acb      	subs	r3, r1, r3
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ab0:	4b38      	ldr	r3, [pc, #224]	; (8009b94 <UART_SetConfig+0x300>)
 8009ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009abe:	441c      	add	r4, r3
 8009ac0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8009aca:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8009ace:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8009ad2:	4642      	mov	r2, r8
 8009ad4:	464b      	mov	r3, r9
 8009ad6:	1891      	adds	r1, r2, r2
 8009ad8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009adc:	415b      	adcs	r3, r3
 8009ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009ae2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	1851      	adds	r1, r2, r1
 8009aea:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8009aee:	4649      	mov	r1, r9
 8009af0:	414b      	adcs	r3, r1
 8009af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009af6:	f04f 0200 	mov.w	r2, #0
 8009afa:	f04f 0300 	mov.w	r3, #0
 8009afe:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8009b02:	4659      	mov	r1, fp
 8009b04:	00cb      	lsls	r3, r1, #3
 8009b06:	4651      	mov	r1, sl
 8009b08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b0c:	4651      	mov	r1, sl
 8009b0e:	00ca      	lsls	r2, r1, #3
 8009b10:	4610      	mov	r0, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	4603      	mov	r3, r0
 8009b16:	4642      	mov	r2, r8
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8009b1e:	464b      	mov	r3, r9
 8009b20:	460a      	mov	r2, r1
 8009b22:	eb42 0303 	adc.w	r3, r2, r3
 8009b26:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8009b2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8009b36:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8009b3a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	18db      	adds	r3, r3, r3
 8009b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b46:	4613      	mov	r3, r2
 8009b48:	eb42 0303 	adc.w	r3, r2, r3
 8009b4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8009b54:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8009b58:	f7f7 f8a6 	bl	8000ca8 <__aeabi_uldivmod>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <UART_SetConfig+0x300>)
 8009b62:	fba3 1302 	umull	r1, r3, r3, r2
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	2164      	movs	r1, #100	; 0x64
 8009b6a:	fb01 f303 	mul.w	r3, r1, r3
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	00db      	lsls	r3, r3, #3
 8009b72:	3332      	adds	r3, #50	; 0x32
 8009b74:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <UART_SetConfig+0x300>)
 8009b76:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	f003 0207 	and.w	r2, r3, #7
 8009b80:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4422      	add	r2, r4
 8009b88:	609a      	str	r2, [r3, #8]
 8009b8a:	e349      	b.n	800a220 <UART_SetConfig+0x98c>
 8009b8c:	40011000 	.word	0x40011000
 8009b90:	40011400 	.word	0x40011400
 8009b94:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b98:	f7fe fae0 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 8009b9c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ba0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8009baa:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8009bae:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	1891      	adds	r1, r2, r2
 8009bb8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009bbc:	415b      	adcs	r3, r3
 8009bbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009bc2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	eb12 0a01 	adds.w	sl, r2, r1
 8009bcc:	4629      	mov	r1, r5
 8009bce:	eb43 0b01 	adc.w	fp, r3, r1
 8009bd2:	f04f 0200 	mov.w	r2, #0
 8009bd6:	f04f 0300 	mov.w	r3, #0
 8009bda:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bde:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009be2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009be6:	4692      	mov	sl, r2
 8009be8:	469b      	mov	fp, r3
 8009bea:	4623      	mov	r3, r4
 8009bec:	eb1a 0303 	adds.w	r3, sl, r3
 8009bf0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009bf4:	462b      	mov	r3, r5
 8009bf6:	eb4b 0303 	adc.w	r3, fp, r3
 8009bfa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009bfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8009c0a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8009c0e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8009c12:	460b      	mov	r3, r1
 8009c14:	18db      	adds	r3, r3, r3
 8009c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	eb42 0303 	adc.w	r3, r2, r3
 8009c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c24:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009c28:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8009c2c:	f7f7 f83c 	bl	8000ca8 <__aeabi_uldivmod>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4b61      	ldr	r3, [pc, #388]	; (8009dbc <UART_SetConfig+0x528>)
 8009c36:	fba3 2302 	umull	r2, r3, r3, r2
 8009c3a:	095b      	lsrs	r3, r3, #5
 8009c3c:	011c      	lsls	r4, r3, #4
 8009c3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009c42:	2200      	movs	r2, #0
 8009c44:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8009c48:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8009c4c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8009c50:	4642      	mov	r2, r8
 8009c52:	464b      	mov	r3, r9
 8009c54:	1891      	adds	r1, r2, r2
 8009c56:	67b9      	str	r1, [r7, #120]	; 0x78
 8009c58:	415b      	adcs	r3, r3
 8009c5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c5c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009c60:	4641      	mov	r1, r8
 8009c62:	1851      	adds	r1, r2, r1
 8009c64:	6739      	str	r1, [r7, #112]	; 0x70
 8009c66:	4649      	mov	r1, r9
 8009c68:	414b      	adcs	r3, r1
 8009c6a:	677b      	str	r3, [r7, #116]	; 0x74
 8009c6c:	f04f 0200 	mov.w	r2, #0
 8009c70:	f04f 0300 	mov.w	r3, #0
 8009c74:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8009c78:	4659      	mov	r1, fp
 8009c7a:	00cb      	lsls	r3, r1, #3
 8009c7c:	4651      	mov	r1, sl
 8009c7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c82:	4651      	mov	r1, sl
 8009c84:	00ca      	lsls	r2, r1, #3
 8009c86:	4610      	mov	r0, r2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	189b      	adds	r3, r3, r2
 8009c90:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8009c94:	464b      	mov	r3, r9
 8009c96:	460a      	mov	r2, r1
 8009c98:	eb42 0303 	adc.w	r3, r2, r3
 8009c9c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8009ca0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009cac:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8009cb0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	18db      	adds	r3, r3, r3
 8009cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cba:	4613      	mov	r3, r2
 8009cbc:	eb42 0303 	adc.w	r3, r2, r3
 8009cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cc2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009cc6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009cca:	f7f6 ffed 	bl	8000ca8 <__aeabi_uldivmod>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <UART_SetConfig+0x528>)
 8009cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8009cda:	095b      	lsrs	r3, r3, #5
 8009cdc:	2264      	movs	r2, #100	; 0x64
 8009cde:	fb02 f303 	mul.w	r3, r2, r3
 8009ce2:	1acb      	subs	r3, r1, r3
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009cea:	4b34      	ldr	r3, [pc, #208]	; (8009dbc <UART_SetConfig+0x528>)
 8009cec:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf0:	095b      	lsrs	r3, r3, #5
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009cf8:	441c      	add	r4, r3
 8009cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8009d04:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8009d08:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	6639      	str	r1, [r7, #96]	; 0x60
 8009d14:	415b      	adcs	r3, r3
 8009d16:	667b      	str	r3, [r7, #100]	; 0x64
 8009d18:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	1851      	adds	r1, r2, r1
 8009d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d22:	4649      	mov	r1, r9
 8009d24:	414b      	adcs	r3, r1
 8009d26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8009d34:	4659      	mov	r1, fp
 8009d36:	00cb      	lsls	r3, r1, #3
 8009d38:	4651      	mov	r1, sl
 8009d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3e:	4651      	mov	r1, sl
 8009d40:	00ca      	lsls	r2, r1, #3
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	4603      	mov	r3, r0
 8009d48:	4642      	mov	r2, r8
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8009d50:	464b      	mov	r3, r9
 8009d52:	460a      	mov	r2, r1
 8009d54:	eb42 0303 	adc.w	r3, r2, r3
 8009d58:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009d5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8009d68:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8009d6c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8009d70:	460b      	mov	r3, r1
 8009d72:	18db      	adds	r3, r3, r3
 8009d74:	653b      	str	r3, [r7, #80]	; 0x50
 8009d76:	4613      	mov	r3, r2
 8009d78:	eb42 0303 	adc.w	r3, r2, r3
 8009d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8009d7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d82:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8009d86:	f7f6 ff8f 	bl	8000ca8 <__aeabi_uldivmod>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <UART_SetConfig+0x528>)
 8009d90:	fba3 1302 	umull	r1, r3, r3, r2
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	2164      	movs	r1, #100	; 0x64
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	00db      	lsls	r3, r3, #3
 8009da0:	3332      	adds	r3, #50	; 0x32
 8009da2:	4a06      	ldr	r2, [pc, #24]	; (8009dbc <UART_SetConfig+0x528>)
 8009da4:	fba2 2303 	umull	r2, r3, r2, r3
 8009da8:	095b      	lsrs	r3, r3, #5
 8009daa:	f003 0207 	and.w	r2, r3, #7
 8009dae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4422      	add	r2, r4
 8009db6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009db8:	e232      	b.n	800a220 <UART_SetConfig+0x98c>
 8009dba:	bf00      	nop
 8009dbc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009dc0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	4b8d      	ldr	r3, [pc, #564]	; (8009ffc <UART_SetConfig+0x768>)
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d006      	beq.n	8009dda <UART_SetConfig+0x546>
 8009dcc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	4b8b      	ldr	r3, [pc, #556]	; (800a000 <UART_SetConfig+0x76c>)
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	f040 8117 	bne.w	800a008 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dda:	f7fe f9d3 	bl	8008184 <HAL_RCC_GetPCLK2Freq>
 8009dde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009de6:	2200      	movs	r2, #0
 8009de8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009dec:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8009df0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8009df4:	4622      	mov	r2, r4
 8009df6:	462b      	mov	r3, r5
 8009df8:	1891      	adds	r1, r2, r2
 8009dfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8009dfc:	415b      	adcs	r3, r3
 8009dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009e04:	4621      	mov	r1, r4
 8009e06:	eb12 0801 	adds.w	r8, r2, r1
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	eb43 0901 	adc.w	r9, r3, r1
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	f04f 0300 	mov.w	r3, #0
 8009e18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009e1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009e20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009e24:	4690      	mov	r8, r2
 8009e26:	4699      	mov	r9, r3
 8009e28:	4623      	mov	r3, r4
 8009e2a:	eb18 0303 	adds.w	r3, r8, r3
 8009e2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8009e32:	462b      	mov	r3, r5
 8009e34:	eb49 0303 	adc.w	r3, r9, r3
 8009e38:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009e3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009e48:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8009e58:	4629      	mov	r1, r5
 8009e5a:	008b      	lsls	r3, r1, #2
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e62:	4621      	mov	r1, r4
 8009e64:	008a      	lsls	r2, r1, #2
 8009e66:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8009e6a:	f7f6 ff1d 	bl	8000ca8 <__aeabi_uldivmod>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	4b64      	ldr	r3, [pc, #400]	; (800a004 <UART_SetConfig+0x770>)
 8009e74:	fba3 2302 	umull	r2, r3, r3, r2
 8009e78:	095b      	lsrs	r3, r3, #5
 8009e7a:	011c      	lsls	r4, r3, #4
 8009e7c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009e80:	2200      	movs	r2, #0
 8009e82:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8009e86:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009e8a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8009e8e:	4642      	mov	r2, r8
 8009e90:	464b      	mov	r3, r9
 8009e92:	1891      	adds	r1, r2, r2
 8009e94:	6439      	str	r1, [r7, #64]	; 0x40
 8009e96:	415b      	adcs	r3, r3
 8009e98:	647b      	str	r3, [r7, #68]	; 0x44
 8009e9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	1851      	adds	r1, r2, r1
 8009ea2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	414b      	adcs	r3, r1
 8009ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eaa:	f04f 0200 	mov.w	r2, #0
 8009eae:	f04f 0300 	mov.w	r3, #0
 8009eb2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8009eb6:	4659      	mov	r1, fp
 8009eb8:	00cb      	lsls	r3, r1, #3
 8009eba:	4651      	mov	r1, sl
 8009ebc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ec0:	4651      	mov	r1, sl
 8009ec2:	00ca      	lsls	r2, r1, #3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4642      	mov	r2, r8
 8009ecc:	189b      	adds	r3, r3, r2
 8009ece:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8009ed2:	464b      	mov	r3, r9
 8009ed4:	460a      	mov	r2, r1
 8009ed6:	eb42 0303 	adc.w	r3, r2, r3
 8009eda:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8009ede:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009eea:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8009efa:	4649      	mov	r1, r9
 8009efc:	008b      	lsls	r3, r1, #2
 8009efe:	4641      	mov	r1, r8
 8009f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f04:	4641      	mov	r1, r8
 8009f06:	008a      	lsls	r2, r1, #2
 8009f08:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009f0c:	f7f6 fecc 	bl	8000ca8 <__aeabi_uldivmod>
 8009f10:	4602      	mov	r2, r0
 8009f12:	460b      	mov	r3, r1
 8009f14:	4b3b      	ldr	r3, [pc, #236]	; (800a004 <UART_SetConfig+0x770>)
 8009f16:	fba3 1302 	umull	r1, r3, r3, r2
 8009f1a:	095b      	lsrs	r3, r3, #5
 8009f1c:	2164      	movs	r1, #100	; 0x64
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	3332      	adds	r3, #50	; 0x32
 8009f28:	4a36      	ldr	r2, [pc, #216]	; (800a004 <UART_SetConfig+0x770>)
 8009f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2e:	095b      	lsrs	r3, r3, #5
 8009f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f34:	441c      	add	r4, r3
 8009f36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8009f40:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009f44:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8009f48:	4642      	mov	r2, r8
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	1891      	adds	r1, r2, r2
 8009f4e:	6339      	str	r1, [r7, #48]	; 0x30
 8009f50:	415b      	adcs	r3, r3
 8009f52:	637b      	str	r3, [r7, #52]	; 0x34
 8009f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009f58:	4641      	mov	r1, r8
 8009f5a:	1851      	adds	r1, r2, r1
 8009f5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009f5e:	4649      	mov	r1, r9
 8009f60:	414b      	adcs	r3, r1
 8009f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8009f70:	4659      	mov	r1, fp
 8009f72:	00cb      	lsls	r3, r1, #3
 8009f74:	4651      	mov	r1, sl
 8009f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f7a:	4651      	mov	r1, sl
 8009f7c:	00ca      	lsls	r2, r1, #3
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4619      	mov	r1, r3
 8009f82:	4603      	mov	r3, r0
 8009f84:	4642      	mov	r2, r8
 8009f86:	189b      	adds	r3, r3, r2
 8009f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009f8c:	464b      	mov	r3, r9
 8009f8e:	460a      	mov	r2, r1
 8009f90:	eb42 0303 	adc.w	r3, r2, r3
 8009f94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f98:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009fa4:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009fa8:	f04f 0200 	mov.w	r2, #0
 8009fac:	f04f 0300 	mov.w	r3, #0
 8009fb0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	008b      	lsls	r3, r1, #2
 8009fb8:	4641      	mov	r1, r8
 8009fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fbe:	4641      	mov	r1, r8
 8009fc0:	008a      	lsls	r2, r1, #2
 8009fc2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8009fc6:	f7f6 fe6f 	bl	8000ca8 <__aeabi_uldivmod>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	460b      	mov	r3, r1
 8009fce:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <UART_SetConfig+0x770>)
 8009fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8009fd4:	095b      	lsrs	r3, r3, #5
 8009fd6:	2164      	movs	r1, #100	; 0x64
 8009fd8:	fb01 f303 	mul.w	r3, r1, r3
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	3332      	adds	r3, #50	; 0x32
 8009fe2:	4a08      	ldr	r2, [pc, #32]	; (800a004 <UART_SetConfig+0x770>)
 8009fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe8:	095b      	lsrs	r3, r3, #5
 8009fea:	f003 020f 	and.w	r2, r3, #15
 8009fee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4422      	add	r2, r4
 8009ff6:	609a      	str	r2, [r3, #8]
 8009ff8:	e112      	b.n	800a220 <UART_SetConfig+0x98c>
 8009ffa:	bf00      	nop
 8009ffc:	40011000 	.word	0x40011000
 800a000:	40011400 	.word	0x40011400
 800a004:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800a008:	f7fe f8a8 	bl	800815c <HAL_RCC_GetPCLK1Freq>
 800a00c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a010:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a014:	2200      	movs	r2, #0
 800a016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a01a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800a01e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800a022:	4642      	mov	r2, r8
 800a024:	464b      	mov	r3, r9
 800a026:	1891      	adds	r1, r2, r2
 800a028:	6239      	str	r1, [r7, #32]
 800a02a:	415b      	adcs	r3, r3
 800a02c:	627b      	str	r3, [r7, #36]	; 0x24
 800a02e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a032:	4641      	mov	r1, r8
 800a034:	1854      	adds	r4, r2, r1
 800a036:	4649      	mov	r1, r9
 800a038:	eb43 0501 	adc.w	r5, r3, r1
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f04f 0300 	mov.w	r3, #0
 800a044:	00eb      	lsls	r3, r5, #3
 800a046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a04a:	00e2      	lsls	r2, r4, #3
 800a04c:	4614      	mov	r4, r2
 800a04e:	461d      	mov	r5, r3
 800a050:	4643      	mov	r3, r8
 800a052:	18e3      	adds	r3, r4, r3
 800a054:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a058:	464b      	mov	r3, r9
 800a05a:	eb45 0303 	adc.w	r3, r5, r3
 800a05e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a062:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a06e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800a072:	f04f 0200 	mov.w	r2, #0
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800a07e:	4629      	mov	r1, r5
 800a080:	008b      	lsls	r3, r1, #2
 800a082:	4621      	mov	r1, r4
 800a084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a088:	4621      	mov	r1, r4
 800a08a:	008a      	lsls	r2, r1, #2
 800a08c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800a090:	f7f6 fe0a 	bl	8000ca8 <__aeabi_uldivmod>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4b64      	ldr	r3, [pc, #400]	; (800a22c <UART_SetConfig+0x998>)
 800a09a:	fba3 2302 	umull	r2, r3, r3, r2
 800a09e:	095b      	lsrs	r3, r3, #5
 800a0a0:	011c      	lsls	r4, r3, #4
 800a0a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a0ac:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a0b0:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800a0b4:	4642      	mov	r2, r8
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	1891      	adds	r1, r2, r2
 800a0ba:	61b9      	str	r1, [r7, #24]
 800a0bc:	415b      	adcs	r3, r3
 800a0be:	61fb      	str	r3, [r7, #28]
 800a0c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a0c4:	4641      	mov	r1, r8
 800a0c6:	1851      	adds	r1, r2, r1
 800a0c8:	6139      	str	r1, [r7, #16]
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	414b      	adcs	r3, r1
 800a0ce:	617b      	str	r3, [r7, #20]
 800a0d0:	f04f 0200 	mov.w	r2, #0
 800a0d4:	f04f 0300 	mov.w	r3, #0
 800a0d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a0dc:	4659      	mov	r1, fp
 800a0de:	00cb      	lsls	r3, r1, #3
 800a0e0:	4651      	mov	r1, sl
 800a0e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0e6:	4651      	mov	r1, sl
 800a0e8:	00ca      	lsls	r2, r1, #3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	189b      	adds	r3, r3, r2
 800a0f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	460a      	mov	r2, r1
 800a0fc:	eb42 0303 	adc.w	r3, r2, r3
 800a100:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a104:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a110:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800a120:	4649      	mov	r1, r9
 800a122:	008b      	lsls	r3, r1, #2
 800a124:	4641      	mov	r1, r8
 800a126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a12a:	4641      	mov	r1, r8
 800a12c:	008a      	lsls	r2, r1, #2
 800a12e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a132:	f7f6 fdb9 	bl	8000ca8 <__aeabi_uldivmod>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4b3c      	ldr	r3, [pc, #240]	; (800a22c <UART_SetConfig+0x998>)
 800a13c:	fba3 1302 	umull	r1, r3, r3, r2
 800a140:	095b      	lsrs	r3, r3, #5
 800a142:	2164      	movs	r1, #100	; 0x64
 800a144:	fb01 f303 	mul.w	r3, r1, r3
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	3332      	adds	r3, #50	; 0x32
 800a14e:	4a37      	ldr	r2, [pc, #220]	; (800a22c <UART_SetConfig+0x998>)
 800a150:	fba2 2303 	umull	r2, r3, r2, r3
 800a154:	095b      	lsrs	r3, r3, #5
 800a156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a15a:	441c      	add	r4, r3
 800a15c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a160:	2200      	movs	r2, #0
 800a162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a166:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a16a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800a16e:	4642      	mov	r2, r8
 800a170:	464b      	mov	r3, r9
 800a172:	1891      	adds	r1, r2, r2
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	415b      	adcs	r3, r3
 800a178:	60fb      	str	r3, [r7, #12]
 800a17a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a17e:	4641      	mov	r1, r8
 800a180:	1851      	adds	r1, r2, r1
 800a182:	6039      	str	r1, [r7, #0]
 800a184:	4649      	mov	r1, r9
 800a186:	414b      	adcs	r3, r1
 800a188:	607b      	str	r3, [r7, #4]
 800a18a:	f04f 0200 	mov.w	r2, #0
 800a18e:	f04f 0300 	mov.w	r3, #0
 800a192:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a196:	4659      	mov	r1, fp
 800a198:	00cb      	lsls	r3, r1, #3
 800a19a:	4651      	mov	r1, sl
 800a19c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1a0:	4651      	mov	r1, sl
 800a1a2:	00ca      	lsls	r2, r1, #3
 800a1a4:	4610      	mov	r0, r2
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4642      	mov	r2, r8
 800a1ac:	189b      	adds	r3, r3, r2
 800a1ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	460a      	mov	r2, r1
 800a1b6:	eb42 0303 	adc.w	r3, r2, r3
 800a1ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a1ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a1ce:	f04f 0200 	mov.w	r2, #0
 800a1d2:	f04f 0300 	mov.w	r3, #0
 800a1d6:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800a1da:	4649      	mov	r1, r9
 800a1dc:	008b      	lsls	r3, r1, #2
 800a1de:	4641      	mov	r1, r8
 800a1e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1e4:	4641      	mov	r1, r8
 800a1e6:	008a      	lsls	r2, r1, #2
 800a1e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a1ec:	f7f6 fd5c 	bl	8000ca8 <__aeabi_uldivmod>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	4b0d      	ldr	r3, [pc, #52]	; (800a22c <UART_SetConfig+0x998>)
 800a1f6:	fba3 1302 	umull	r1, r3, r3, r2
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	2164      	movs	r1, #100	; 0x64
 800a1fe:	fb01 f303 	mul.w	r3, r1, r3
 800a202:	1ad3      	subs	r3, r2, r3
 800a204:	011b      	lsls	r3, r3, #4
 800a206:	3332      	adds	r3, #50	; 0x32
 800a208:	4a08      	ldr	r2, [pc, #32]	; (800a22c <UART_SetConfig+0x998>)
 800a20a:	fba2 2303 	umull	r2, r3, r2, r3
 800a20e:	095b      	lsrs	r3, r3, #5
 800a210:	f003 020f 	and.w	r2, r3, #15
 800a214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4422      	add	r2, r4
 800a21c:	609a      	str	r2, [r3, #8]
}
 800a21e:	e7ff      	b.n	800a220 <UART_SetConfig+0x98c>
 800a220:	bf00      	nop
 800a222:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800a226:	46bd      	mov	sp, r7
 800a228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a22c:	51eb851f 	.word	0x51eb851f

0800a230 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d029      	beq.n	800a29e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a256:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a25a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a264:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800a26a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800a270:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800a276:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800a27c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800a282:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 800a288:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800a28e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	e034      	b.n	800a308 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2aa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a2ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2d2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2dc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800a2e2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 800a2e8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800a2ee:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800a2f4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a2f6:	68ba      	ldr	r2, [r7, #8]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a316:	b480      	push	{r7}
 800a318:	b087      	sub	sp, #28
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	60f8      	str	r0, [r7, #12]
 800a31e:	60b9      	str	r1, [r7, #8]
 800a320:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d02e      	beq.n	800a38e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a33c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	3b01      	subs	r3, #1
 800a34a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a34c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	3b01      	subs	r3, #1
 800a354:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800a356:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800a360:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	3b01      	subs	r3, #1
 800a368:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a36a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	3b01      	subs	r3, #1
 800a372:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800a374:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800a37e:	4313      	orrs	r3, r2
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	609a      	str	r2, [r3, #8]
 800a38c:	e03b      	b.n	800a406 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a39a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a39e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	697a      	ldr	r2, [r7, #20]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a3c4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800a3de:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800a3e8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	3b01      	subs	r3, #1
 800a3f0:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a430:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	3b01      	subs	r3, #1
 800a438:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800a43a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800a442:	4313      	orrs	r3, r2
 800a444:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800a44c:	f7f9 fe28 	bl	80040a0 <HAL_GetTick>
 800a450:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a452:	e010      	b.n	800a476 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a45a:	d00c      	beq.n	800a476 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d007      	beq.n	800a472 <FMC_SDRAM_SendCommand+0x5e>
 800a462:	f7f9 fe1d 	bl	80040a0 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d201      	bcs.n	800a476 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e006      	b.n	800a484 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	699b      	ldr	r3, [r3, #24]
 800a47a:	f003 0320 	and.w	r3, r3, #32
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d0e8      	beq.n	800a454 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695a      	ldr	r2, [r3, #20]
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	f107 001c 	add.w	r0, r7, #28
 800a4c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d122      	bne.n	800a510 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d105      	bne.n	800a504 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f949 	bl	800a79c <USB_CoreReset>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73fb      	strb	r3, [r7, #15]
 800a50e:	e01a      	b.n	800a546 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f93d 	bl	800a79c <USB_CoreReset>
 800a522:	4603      	mov	r3, r0
 800a524:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d106      	bne.n	800a53a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a530:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	639a      	str	r2, [r3, #56]	; 0x38
 800a538:	e005      	b.n	800a546 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d10b      	bne.n	800a564 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f043 0206 	orr.w	r2, r3, #6
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f043 0220 	orr.w	r2, r3, #32
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a570:	b004      	add	sp, #16
 800a572:	4770      	bx	lr

0800a574 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f043 0201 	orr.w	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a588:	2300      	movs	r3, #0
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f023 0201 	bic.w	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	460b      	mov	r3, r1
 800a5c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5d0:	78fb      	ldrb	r3, [r7, #3]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d106      	bne.n	800a5e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	60da      	str	r2, [r3, #12]
 800a5e2:	e00b      	b.n	800a5fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5e4:	78fb      	ldrb	r3, [r7, #3]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	60da      	str	r2, [r3, #12]
 800a5f6:	e001      	b.n	800a5fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e003      	b.n	800a604 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a5fc:	2032      	movs	r0, #50	; 0x32
 800a5fe:	f7f9 fd5b 	bl	80040b8 <HAL_Delay>

  return HAL_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	019b      	lsls	r3, r3, #6
 800a61e:	f043 0220 	orr.w	r2, r3, #32
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4a09      	ldr	r2, [pc, #36]	; (800a654 <USB_FlushTxFifo+0x48>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d901      	bls.n	800a638 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e006      	b.n	800a646 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f003 0320 	and.w	r3, r3, #32
 800a640:	2b20      	cmp	r3, #32
 800a642:	d0f0      	beq.n	800a626 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	00030d40 	.word	0x00030d40

0800a658 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2210      	movs	r2, #16
 800a668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3301      	adds	r3, #1
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4a09      	ldr	r2, [pc, #36]	; (800a698 <USB_FlushRxFifo+0x40>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d901      	bls.n	800a67c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e006      	b.n	800a68a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	f003 0310 	and.w	r3, r3, #16
 800a684:	2b10      	cmp	r3, #16
 800a686:	d0f0      	beq.n	800a66a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	00030d40 	.word	0x00030d40

0800a69c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b089      	sub	sp, #36	; 0x24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	71fb      	strb	r3, [r7, #7]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a6ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d11a      	bne.n	800a6f8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a6c2:	88bb      	ldrh	r3, [r7, #4]
 800a6c4:	3303      	adds	r3, #3
 800a6c6:	089b      	lsrs	r3, r3, #2
 800a6c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	e00f      	b.n	800a6f0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	031a      	lsls	r2, r3, #12
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	461a      	mov	r2, r3
 800a6de:	69fb      	ldr	r3, [r7, #28]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	3304      	adds	r3, #4
 800a6e8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	61bb      	str	r3, [r7, #24]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d3eb      	bcc.n	800a6d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3724      	adds	r7, #36	; 0x24
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a706:	b480      	push	{r7}
 800a708:	b089      	sub	sp, #36	; 0x24
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	60b9      	str	r1, [r7, #8]
 800a710:	4613      	mov	r3, r2
 800a712:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a71c:	88fb      	ldrh	r3, [r7, #6]
 800a71e:	3303      	adds	r3, #3
 800a720:	089b      	lsrs	r3, r3, #2
 800a722:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a724:	2300      	movs	r3, #0
 800a726:	61bb      	str	r3, [r7, #24]
 800a728:	e00b      	b.n	800a742 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	601a      	str	r2, [r3, #0]
    pDest++;
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	3304      	adds	r3, #4
 800a73a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	3301      	adds	r3, #1
 800a740:	61bb      	str	r3, [r7, #24]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	429a      	cmp	r2, r3
 800a748:	d3ef      	bcc.n	800a72a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a74a:	69fb      	ldr	r3, [r7, #28]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3724      	adds	r7, #36	; 0x24
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a758:	b480      	push	{r7}
 800a75a:	b085      	sub	sp, #20
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	4013      	ands	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a770:	68fb      	ldr	r3, [r7, #12]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	f003 0301 	and.w	r3, r3, #1
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
	...

0800a79c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	4a13      	ldr	r2, [pc, #76]	; (800a800 <USB_CoreReset+0x64>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d901      	bls.n	800a7ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e01b      	b.n	800a7f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	daf2      	bge.n	800a7a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	f043 0201 	orr.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4a09      	ldr	r2, [pc, #36]	; (800a800 <USB_CoreReset+0x64>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d901      	bls.n	800a7e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e006      	b.n	800a7f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	691b      	ldr	r3, [r3, #16]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d0f0      	beq.n	800a7d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3714      	adds	r7, #20
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	00030d40 	.word	0x00030d40

0800a804 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a804:	b084      	sub	sp, #16
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	f107 001c 	add.w	r0, r7, #28
 800a812:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a820:	461a      	mov	r2, r3
 800a822:	2300      	movs	r3, #0
 800a824:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a836:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a842:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a852:	2b00      	cmp	r3, #0
 800a854:	d018      	beq.n	800a888 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d10a      	bne.n	800a872 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a86a:	f043 0304 	orr.w	r3, r3, #4
 800a86e:	6013      	str	r3, [r2, #0]
 800a870:	e014      	b.n	800a89c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68ba      	ldr	r2, [r7, #8]
 800a87c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a880:	f023 0304 	bic.w	r3, r3, #4
 800a884:	6013      	str	r3, [r2, #0]
 800a886:	e009      	b.n	800a89c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a896:	f023 0304 	bic.w	r3, r3, #4
 800a89a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a89c:	2110      	movs	r1, #16
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff feb4 	bl	800a60c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fed7 	bl	800a658 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e015      	b.n	800a8dc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8bc:	461a      	mov	r2, r3
 800a8be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8c2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	68fa      	ldr	r2, [r7, #12]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d3e5      	bcc.n	800a8b0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 f8ac 	bl	800aa44 <USB_DriveVbus>

  HAL_Delay(200U);
 800a8ec:	20c8      	movs	r0, #200	; 0xc8
 800a8ee:	f7f9 fbe3 	bl	80040b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8fe:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00b      	beq.n	800a924 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a912:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a14      	ldr	r2, [pc, #80]	; (800a968 <USB_HostInit+0x164>)
 800a918:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a13      	ldr	r2, [pc, #76]	; (800a96c <USB_HostInit+0x168>)
 800a91e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a922:	e009      	b.n	800a938 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2280      	movs	r2, #128	; 0x80
 800a928:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a10      	ldr	r2, [pc, #64]	; (800a970 <USB_HostInit+0x16c>)
 800a92e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a10      	ldr	r2, [pc, #64]	; (800a974 <USB_HostInit+0x170>)
 800a934:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d105      	bne.n	800a94a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	f043 0210 	orr.w	r2, r3, #16
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699a      	ldr	r2, [r3, #24]
 800a94e:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <USB_HostInit+0x174>)
 800a950:	4313      	orrs	r3, r2
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a962:	b004      	add	sp, #16
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	01000200 	.word	0x01000200
 800a96c:	00e00300 	.word	0x00e00300
 800a970:	00600080 	.word	0x00600080
 800a974:	004000e0 	.word	0x004000e0
 800a978:	a3200008 	.word	0xa3200008

0800a97c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a99a:	f023 0303 	bic.w	r3, r3, #3
 800a99e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	78fb      	ldrb	r3, [r7, #3]
 800a9aa:	f003 0303 	and.w	r3, r3, #3
 800a9ae:	68f9      	ldr	r1, [r7, #12]
 800a9b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d107      	bne.n	800a9ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a9ca:	6053      	str	r3, [r2, #4]
 800a9cc:	e009      	b.n	800a9e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d106      	bne.n	800a9e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9da:	461a      	mov	r2, r3
 800a9dc:	f241 7370 	movw	r3, #6000	; 0x1770
 800a9e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a9e2:	2300      	movs	r3, #0
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aa10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800aa20:	2064      	movs	r0, #100	; 0x64
 800aa22:	f7f9 fb49 	bl	80040b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa32:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800aa34:	200a      	movs	r0, #10
 800aa36:	f7f9 fb3f 	bl	80040b8 <HAL_Delay>

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800aa54:	2300      	movs	r3, #0
 800aa56:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800aa68:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d109      	bne.n	800aa88 <USB_DriveVbus+0x44>
 800aa74:	78fb      	ldrb	r3, [r7, #3]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d106      	bne.n	800aa88 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aa82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa86:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa92:	d109      	bne.n	800aaa8 <USB_DriveVbus+0x64>
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800aaa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaa6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3714      	adds	r7, #20
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b085      	sub	sp, #20
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	0c5b      	lsrs	r3, r3, #17
 800aad4:	f003 0303 	and.w	r3, r3, #3
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3714      	adds	r7, #20
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	b29b      	uxth	r3, r3
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
	...

0800ab08 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	461a      	mov	r2, r3
 800ab16:	4603      	mov	r3, r0
 800ab18:	70fb      	strb	r3, [r7, #3]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70bb      	strb	r3, [r7, #2]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab36:	461a      	mov	r2, r3
 800ab38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab3c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800ab3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d87e      	bhi.n	800ac44 <USB_HC_Init+0x13c>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <USB_HC_Init+0x44>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab5d 	.word	0x0800ab5d
 800ab50:	0800ac07 	.word	0x0800ac07
 800ab54:	0800ab5d 	.word	0x0800ab5d
 800ab58:	0800abc9 	.word	0x0800abc9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f240 439d 	movw	r3, #1181	; 0x49d
 800ab6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ab70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	da10      	bge.n	800ab9a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	78fa      	ldrb	r2, [r7, #3]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab96:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ab98:	e057      	b.n	800ac4a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d051      	beq.n	800ac4a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800aba6:	78fb      	ldrb	r3, [r7, #3]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4413      	add	r3, r2
 800abae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	78fa      	ldrb	r2, [r7, #3]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abc0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800abc4:	60d3      	str	r3, [r2, #12]
      break;
 800abc6:	e040      	b.n	800ac4a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abd4:	461a      	mov	r2, r3
 800abd6:	f240 639d 	movw	r3, #1693	; 0x69d
 800abda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800abdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	da34      	bge.n	800ac4e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4413      	add	r3, r2
 800abec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	78fa      	ldrb	r2, [r7, #3]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac02:	60d3      	str	r3, [r2, #12]
      }

      break;
 800ac04:	e023      	b.n	800ac4e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	015a      	lsls	r2, r3, #5
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac12:	461a      	mov	r2, r3
 800ac14:	f240 2325 	movw	r3, #549	; 0x225
 800ac18:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ac1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da17      	bge.n	800ac52 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	015a      	lsls	r2, r3, #5
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	4413      	add	r3, r2
 800ac2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	78fa      	ldrb	r2, [r7, #3]
 800ac32:	0151      	lsls	r1, r2, #5
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	440a      	add	r2, r1
 800ac38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac3c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ac40:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ac42:	e006      	b.n	800ac52 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	75fb      	strb	r3, [r7, #23]
      break;
 800ac48:	e004      	b.n	800ac54 <USB_HC_Init+0x14c>
      break;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <USB_HC_Init+0x14c>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <USB_HC_Init+0x14c>
      break;
 800ac52:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac5a:	699a      	ldr	r2, [r3, #24]
 800ac5c:	78fb      	ldrb	r3, [r7, #3]
 800ac5e:	f003 030f 	and.w	r3, r3, #15
 800ac62:	2101      	movs	r1, #1
 800ac64:	fa01 f303 	lsl.w	r3, r1, r3
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	699b      	ldr	r3, [r3, #24]
 800ac76:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ac7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	da03      	bge.n	800ac8e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ac86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac8a:	613b      	str	r3, [r7, #16]
 800ac8c:	e001      	b.n	800ac92 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ac92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d103      	bne.n	800aca2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ac9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ac9e:	60fb      	str	r3, [r7, #12]
 800aca0:	e001      	b.n	800aca6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800aca6:	787b      	ldrb	r3, [r7, #1]
 800aca8:	059b      	lsls	r3, r3, #22
 800acaa:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800acae:	78bb      	ldrb	r3, [r7, #2]
 800acb0:	02db      	lsls	r3, r3, #11
 800acb2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800acb6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800acb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acbc:	049b      	lsls	r3, r3, #18
 800acbe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800acc2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800acc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800acca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	0159      	lsls	r1, r3, #5
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	440b      	add	r3, r1
 800acd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acdc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ace2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800ace4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d10f      	bne.n	800ad0c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	78fa      	ldrb	r2, [r7, #3]
 800acfc:	0151      	lsls	r1, r2, #5
 800acfe:	68ba      	ldr	r2, [r7, #8]
 800ad00:	440a      	add	r2, r1
 800ad02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad0a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	371c      	adds	r7, #28
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop

0800ad1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08c      	sub	sp, #48	; 0x30
 800ad20:	af02      	add	r7, sp, #8
 800ad22:	60f8      	str	r0, [r7, #12]
 800ad24:	60b9      	str	r1, [r7, #8]
 800ad26:	4613      	mov	r3, r2
 800ad28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	785b      	ldrb	r3, [r3, #1]
 800ad32:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ad34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad38:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d028      	beq.n	800ad98 <USB_HC_StartXfer+0x7c>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	791b      	ldrb	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d124      	bne.n	800ad98 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ad4e:	79fb      	ldrb	r3, [r7, #7]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <USB_HC_StartXfer+0x50>
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	795b      	ldrb	r3, [r3, #5]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d107      	bne.n	800ad6c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	785b      	ldrb	r3, [r3, #1]
 800ad60:	4619      	mov	r1, r3
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f000 fa2e 	bl	800b1c4 <USB_DoPing>
      return HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e113      	b.n	800af94 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d112      	bne.n	800ad98 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	6a3b      	ldr	r3, [r7, #32]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	6a3a      	ldr	r2, [r7, #32]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad8c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ad90:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2200      	movs	r2, #0
 800ad96:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d018      	beq.n	800add2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	8912      	ldrh	r2, [r2, #8]
 800ada8:	4413      	add	r3, r2
 800adaa:	3b01      	subs	r3, #1
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	8912      	ldrh	r2, [r2, #8]
 800adb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800adb4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800adb6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800adb8:	8b7b      	ldrh	r3, [r7, #26]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d90b      	bls.n	800add6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800adbe:	8b7b      	ldrh	r3, [r7, #26]
 800adc0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800adc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	8912      	ldrh	r2, [r2, #8]
 800adc8:	fb03 f202 	mul.w	r2, r3, r2
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	611a      	str	r2, [r3, #16]
 800add0:	e001      	b.n	800add6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800add2:	2301      	movs	r3, #1
 800add4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	78db      	ldrb	r3, [r3, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d006      	beq.n	800adec <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800adde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	8912      	ldrh	r2, [r2, #8]
 800ade4:	fb03 f202 	mul.w	r2, r3, r2
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800adf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adf6:	04d9      	lsls	r1, r3, #19
 800adf8:	4b68      	ldr	r3, [pc, #416]	; (800af9c <USB_HC_StartXfer+0x280>)
 800adfa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800adfc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	7a9b      	ldrb	r3, [r3, #10]
 800ae02:	075b      	lsls	r3, r3, #29
 800ae04:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ae08:	69f9      	ldr	r1, [r7, #28]
 800ae0a:	0148      	lsls	r0, r1, #5
 800ae0c:	6a39      	ldr	r1, [r7, #32]
 800ae0e:	4401      	add	r1, r0
 800ae10:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ae14:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ae16:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ae18:	79fb      	ldrb	r3, [r7, #7]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d009      	beq.n	800ae32 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	68d9      	ldr	r1, [r3, #12]
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	6a3b      	ldr	r3, [r7, #32]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae2e:	460a      	mov	r2, r1
 800ae30:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bf0c      	ite	eq
 800ae42:	2301      	moveq	r3, #1
 800ae44:	2300      	movne	r3, #0
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	69fa      	ldr	r2, [r7, #28]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	6a3a      	ldr	r2, [r7, #32]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae68:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	015a      	lsls	r2, r3, #5
 800ae6e:	6a3b      	ldr	r3, [r7, #32]
 800ae70:	4413      	add	r3, r2
 800ae72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	7e7b      	ldrb	r3, [r7, #25]
 800ae7a:	075b      	lsls	r3, r3, #29
 800ae7c:	69f9      	ldr	r1, [r7, #28]
 800ae7e:	0148      	lsls	r0, r1, #5
 800ae80:	6a39      	ldr	r1, [r7, #32]
 800ae82:	4401      	add	r1, r0
 800ae84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	6a3b      	ldr	r3, [r7, #32]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a41      	ldr	r2, [pc, #260]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800ae9c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae9e:	4b40      	ldr	r3, [pc, #256]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aea6:	4a3e      	ldr	r2, [pc, #248]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aea8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d006      	beq.n	800aec0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800aeb2:	4b3b      	ldr	r3, [pc, #236]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeba:	4a39      	ldr	r2, [pc, #228]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	e005      	b.n	800aecc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800aec0:	4b37      	ldr	r3, [pc, #220]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aec8:	4a35      	ldr	r2, [pc, #212]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aeca:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aecc:	4b34      	ldr	r3, [pc, #208]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aed4:	4a32      	ldr	r2, [pc, #200]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aed6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	6a3b      	ldr	r3, [r7, #32]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b2e      	ldr	r3, [pc, #184]	; (800afa0 <USB_HC_StartXfer+0x284>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d001      	beq.n	800aef6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	e04e      	b.n	800af94 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	78db      	ldrb	r3, [r3, #3]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d149      	bne.n	800af92 <USB_HC_StartXfer+0x276>
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	691b      	ldr	r3, [r3, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d045      	beq.n	800af92 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	79db      	ldrb	r3, [r3, #7]
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d830      	bhi.n	800af70 <USB_HC_StartXfer+0x254>
 800af0e:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <USB_HC_StartXfer+0x1f8>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af25 	.word	0x0800af25
 800af18:	0800af49 	.word	0x0800af49
 800af1c:	0800af25 	.word	0x0800af25
 800af20:	0800af49 	.word	0x0800af49
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	3303      	adds	r3, #3
 800af2a:	089b      	lsrs	r3, r3, #2
 800af2c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800af2e:	8afa      	ldrh	r2, [r7, #22]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af34:	b29b      	uxth	r3, r3
 800af36:	429a      	cmp	r2, r3
 800af38:	d91c      	bls.n	800af74 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	f043 0220 	orr.w	r2, r3, #32
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	619a      	str	r2, [r3, #24]
        }
        break;
 800af46:	e015      	b.n	800af74 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	691b      	ldr	r3, [r3, #16]
 800af4c:	3303      	adds	r3, #3
 800af4e:	089b      	lsrs	r3, r3, #2
 800af50:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800af52:	8afa      	ldrh	r2, [r7, #22]
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af5a:	691b      	ldr	r3, [r3, #16]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	429a      	cmp	r2, r3
 800af60:	d90a      	bls.n	800af78 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	619a      	str	r2, [r3, #24]
        }
        break;
 800af6e:	e003      	b.n	800af78 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800af70:	bf00      	nop
 800af72:	e002      	b.n	800af7a <USB_HC_StartXfer+0x25e>
        break;
 800af74:	bf00      	nop
 800af76:	e000      	b.n	800af7a <USB_HC_StartXfer+0x25e>
        break;
 800af78:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	68d9      	ldr	r1, [r3, #12]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	785a      	ldrb	r2, [r3, #1]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	b29b      	uxth	r3, r3
 800af88:	2000      	movs	r0, #0
 800af8a:	9000      	str	r0, [sp, #0]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f7ff fb85 	bl	800a69c <USB_WritePacket>
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3728      	adds	r7, #40	; 0x28
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	1ff80000 	.word	0x1ff80000
 800afa0:	20000f14 	.word	0x20000f14

0800afa4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	b29b      	uxth	r3, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3714      	adds	r7, #20
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800afc6:	b480      	push	{r7}
 800afc8:	b087      	sub	sp, #28
 800afca:	af00      	add	r7, sp, #0
 800afcc:	6078      	str	r0, [r7, #4]
 800afce:	460b      	mov	r3, r1
 800afd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800afd6:	78fb      	ldrb	r3, [r7, #3]
 800afd8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	0c9b      	lsrs	r3, r3, #18
 800afee:	f003 0303 	and.w	r3, r3, #3
 800aff2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <USB_HC_Halt+0x3a>
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	2b02      	cmp	r3, #2
 800affe:	d16c      	bne.n	800b0da <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	4413      	add	r3, r2
 800b008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	0151      	lsls	r1, r2, #5
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	440a      	add	r2, r1
 800b016:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b01a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b01e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d143      	bne.n	800b0b4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	015a      	lsls	r2, r3, #5
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	4413      	add	r3, r2
 800b034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	0151      	lsls	r1, r2, #5
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	440a      	add	r2, r1
 800b042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b04a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	4413      	add	r3, r2
 800b054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	0151      	lsls	r1, r2, #5
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	440a      	add	r2, r1
 800b062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b06a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	4413      	add	r3, r2
 800b074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	0151      	lsls	r1, r2, #5
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	440a      	add	r2, r1
 800b082:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b08a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	3301      	adds	r3, #1
 800b090:	617b      	str	r3, [r7, #20]
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b098:	d81d      	bhi.n	800b0d6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0b0:	d0ec      	beq.n	800b08c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0b2:	e080      	b.n	800b1b6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0d2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0d4:	e06f      	b.n	800b1b6 <USB_HC_Halt+0x1f0>
          break;
 800b0d6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b0d8:	e06d      	b.n	800b1b6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0f8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b100:	691b      	ldr	r3, [r3, #16]
 800b102:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b106:	2b00      	cmp	r3, #0
 800b108:	d143      	bne.n	800b192 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	015a      	lsls	r2, r3, #5
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	4413      	add	r3, r2
 800b112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	0151      	lsls	r1, r2, #5
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	440a      	add	r2, r1
 800b120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b128:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	4413      	add	r3, r2
 800b132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	0151      	lsls	r1, r2, #5
 800b13c:	693a      	ldr	r2, [r7, #16]
 800b13e:	440a      	add	r2, r1
 800b140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b148:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	4413      	add	r3, r2
 800b152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	0151      	lsls	r1, r2, #5
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	440a      	add	r2, r1
 800b160:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b164:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b168:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3301      	adds	r3, #1
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b176:	d81d      	bhi.n	800b1b4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b18a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b18e:	d0ec      	beq.n	800b16a <USB_HC_Halt+0x1a4>
 800b190:	e011      	b.n	800b1b6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	e000      	b.n	800b1b6 <USB_HC_Halt+0x1f0>
          break;
 800b1b4:	bf00      	nop
    }
  }

  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b1d4:	78fb      	ldrb	r3, [r7, #3]
 800b1d6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	04da      	lsls	r2, r3, #19
 800b1e0:	4b15      	ldr	r3, [pc, #84]	; (800b238 <USB_DoPing+0x74>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	0151      	lsls	r1, r2, #5
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	440a      	add	r2, r1
 800b1ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b1f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1f4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b20c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b214:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	015a      	lsls	r2, r3, #5
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	4413      	add	r3, r2
 800b21e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b222:	461a      	mov	r2, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	371c      	adds	r7, #28
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	1ff80000 	.word	0x1ff80000

0800b23c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b248:	2300      	movs	r3, #0
 800b24a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff f9a2 	bl	800a596 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b252:	2110      	movs	r1, #16
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff f9d9 	bl	800a60c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff f9fc 	bl	800a658 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b260:	2300      	movs	r3, #0
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	e01f      	b.n	800b2a6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b27c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b284:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b28c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	015a      	lsls	r2, r3, #5
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b29a:	461a      	mov	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b0f      	cmp	r3, #15
 800b2aa:	d9dc      	bls.n	800b266 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	613b      	str	r3, [r7, #16]
 800b2b0:	e034      	b.n	800b31c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2c8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b2d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b2d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	617b      	str	r3, [r7, #20]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b2f8:	d80c      	bhi.n	800b314 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	4413      	add	r3, r2
 800b302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b30c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b310:	d0ec      	beq.n	800b2ec <USB_StopHost+0xb0>
 800b312:	e000      	b.n	800b316 <USB_StopHost+0xda>
        break;
 800b314:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	3301      	adds	r3, #1
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2b0f      	cmp	r3, #15
 800b320:	d9c7      	bls.n	800b2b2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b328:	461a      	mov	r2, r3
 800b32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b32e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b336:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff f91b 	bl	800a574 <USB_EnableGlobalInt>

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800b34c:	4904      	ldr	r1, [pc, #16]	; (800b360 <MX_FATFS_Init+0x18>)
 800b34e:	4805      	ldr	r0, [pc, #20]	; (800b364 <MX_FATFS_Init+0x1c>)
 800b350:	f006 f9be 	bl	80116d0 <FATFS_LinkDriver>
 800b354:	4603      	mov	r3, r0
 800b356:	461a      	mov	r2, r3
 800b358:	4b03      	ldr	r3, [pc, #12]	; (800b368 <MX_FATFS_Init+0x20>)
 800b35a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b35c:	bf00      	nop
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	20000f1c 	.word	0x20000f1c
 800b364:	0801bd8c 	.word	0x0801bd8c
 800b368:	20000f18 	.word	0x20000f18

0800b36c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b36c:	b480      	push	{r7}
 800b36e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b370:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b372:	4618      	mov	r0, r3
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	4603      	mov	r3, r0
 800b384:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4808      	ldr	r0, [pc, #32]	; (800b3c8 <USBH_status+0x34>)
 800b3a8:	f000 fe1a 	bl	800bfe0 <USBH_MSC_UnitIsReady>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <USBH_status+0x24>
  {
    res = RES_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	73fb      	strb	r3, [r7, #15]
 800b3b6:	e001      	b.n	800b3bc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3710      	adds	r7, #16
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	2000138c 	.word	0x2000138c

0800b3cc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b094      	sub	sp, #80	; 0x50
 800b3d0:	af02      	add	r7, sp, #8
 800b3d2:	60b9      	str	r1, [r7, #8]
 800b3d4:	607a      	str	r2, [r7, #4]
 800b3d6:	603b      	str	r3, [r7, #0]
 800b3d8:	4603      	mov	r3, r0
 800b3da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b3e2:	7bf9      	ldrb	r1, [r7, #15]
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	9300      	str	r3, [sp, #0]
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	4813      	ldr	r0, [pc, #76]	; (800b43c <USBH_read+0x70>)
 800b3ee:	f000 fe41 	bl	800c074 <USBH_MSC_Read>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d103      	bne.n	800b400 <USBH_read+0x34>
  {
    res = RES_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b3fe:	e017      	b.n	800b430 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b400:	f107 0210 	add.w	r2, r7, #16
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	4619      	mov	r1, r3
 800b408:	480c      	ldr	r0, [pc, #48]	; (800b43c <USBH_read+0x70>)
 800b40a:	f000 fe0f 	bl	800c02c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b40e:	7f7b      	ldrb	r3, [r7, #29]
 800b410:	2b3a      	cmp	r3, #58	; 0x3a
 800b412:	d005      	beq.n	800b420 <USBH_read+0x54>
 800b414:	2b3a      	cmp	r3, #58	; 0x3a
 800b416:	dc07      	bgt.n	800b428 <USBH_read+0x5c>
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d001      	beq.n	800b420 <USBH_read+0x54>
 800b41c:	2b28      	cmp	r3, #40	; 0x28
 800b41e:	d103      	bne.n	800b428 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b420:	2303      	movs	r3, #3
 800b422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b426:	e003      	b.n	800b430 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b42e:	bf00      	nop
    }
  }

  return res;
 800b430:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b434:	4618      	mov	r0, r3
 800b436:	3748      	adds	r7, #72	; 0x48
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	2000138c 	.word	0x2000138c

0800b440 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b094      	sub	sp, #80	; 0x50
 800b444:	af02      	add	r7, sp, #8
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	607a      	str	r2, [r7, #4]
 800b44a:	603b      	str	r3, [r7, #0]
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b456:	7bf9      	ldrb	r1, [r7, #15]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	4817      	ldr	r0, [pc, #92]	; (800b4c0 <USBH_write+0x80>)
 800b462:	f000 fe70 	bl	800c146 <USBH_MSC_Write>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d103      	bne.n	800b474 <USBH_write+0x34>
  {
    res = RES_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b472:	e01f      	b.n	800b4b4 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b474:	f107 0210 	add.w	r2, r7, #16
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4619      	mov	r1, r3
 800b47c:	4810      	ldr	r0, [pc, #64]	; (800b4c0 <USBH_write+0x80>)
 800b47e:	f000 fdd5 	bl	800c02c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b482:	7f7b      	ldrb	r3, [r7, #29]
 800b484:	2b3a      	cmp	r3, #58	; 0x3a
 800b486:	d00d      	beq.n	800b4a4 <USBH_write+0x64>
 800b488:	2b3a      	cmp	r3, #58	; 0x3a
 800b48a:	dc0f      	bgt.n	800b4ac <USBH_write+0x6c>
 800b48c:	2b28      	cmp	r3, #40	; 0x28
 800b48e:	d009      	beq.n	800b4a4 <USBH_write+0x64>
 800b490:	2b28      	cmp	r3, #40	; 0x28
 800b492:	dc0b      	bgt.n	800b4ac <USBH_write+0x6c>
 800b494:	2b04      	cmp	r3, #4
 800b496:	d005      	beq.n	800b4a4 <USBH_write+0x64>
 800b498:	2b27      	cmp	r3, #39	; 0x27
 800b49a:	d107      	bne.n	800b4ac <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b49c:	2302      	movs	r3, #2
 800b49e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4a2:	e007      	b.n	800b4b4 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4aa:	e003      	b.n	800b4b4 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b4b2:	bf00      	nop
    }
  }

  return res;
 800b4b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3748      	adds	r7, #72	; 0x48
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	2000138c 	.word	0x2000138c

0800b4c4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b090      	sub	sp, #64	; 0x40
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	603a      	str	r2, [r7, #0]
 800b4ce:	71fb      	strb	r3, [r7, #7]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b4da:	79bb      	ldrb	r3, [r7, #6]
 800b4dc:	2b03      	cmp	r3, #3
 800b4de:	d852      	bhi.n	800b586 <USBH_ioctl+0xc2>
 800b4e0:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <USBH_ioctl+0x24>)
 800b4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e6:	bf00      	nop
 800b4e8:	0800b4f9 	.word	0x0800b4f9
 800b4ec:	0800b501 	.word	0x0800b501
 800b4f0:	0800b52b 	.word	0x0800b52b
 800b4f4:	0800b557 	.word	0x0800b557
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b4fe:	e045      	b.n	800b58c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b500:	f107 0208 	add.w	r2, r7, #8
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	4619      	mov	r1, r3
 800b508:	4823      	ldr	r0, [pc, #140]	; (800b598 <USBH_ioctl+0xd4>)
 800b50a:	f000 fd8f 	bl	800c02c <USBH_MSC_GetLUNInfo>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d106      	bne.n	800b522 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b520:	e034      	b.n	800b58c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b528:	e030      	b.n	800b58c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b52a:	f107 0208 	add.w	r2, r7, #8
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	4619      	mov	r1, r3
 800b532:	4819      	ldr	r0, [pc, #100]	; (800b598 <USBH_ioctl+0xd4>)
 800b534:	f000 fd7a 	bl	800c02c <USBH_MSC_GetLUNInfo>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d107      	bne.n	800b54e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b53e:	8a3b      	ldrh	r3, [r7, #16]
 800b540:	461a      	mov	r2, r3
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b54c:	e01e      	b.n	800b58c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b554:	e01a      	b.n	800b58c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b556:	f107 0208 	add.w	r2, r7, #8
 800b55a:	79fb      	ldrb	r3, [r7, #7]
 800b55c:	4619      	mov	r1, r3
 800b55e:	480e      	ldr	r0, [pc, #56]	; (800b598 <USBH_ioctl+0xd4>)
 800b560:	f000 fd64 	bl	800c02c <USBH_MSC_GetLUNInfo>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d109      	bne.n	800b57e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b56a:	8a3b      	ldrh	r3, [r7, #16]
 800b56c:	0a5b      	lsrs	r3, r3, #9
 800b56e:	b29b      	uxth	r3, r3
 800b570:	461a      	mov	r2, r3
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b57c:	e006      	b.n	800b58c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b584:	e002      	b.n	800b58c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b586:	2304      	movs	r3, #4
 800b588:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b58c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b590:	4618      	mov	r0, r3
 800b592:	3740      	adds	r7, #64	; 0x40
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	2000138c 	.word	0x2000138c

0800b59c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b089      	sub	sp, #36	; 0x24
 800b5a0:	af04      	add	r7, sp, #16
 800b5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5aa:	7919      	ldrb	r1, [r3, #4]
 800b5ac:	2350      	movs	r3, #80	; 0x50
 800b5ae:	2206      	movs	r2, #6
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f001 fc53 	bl	800ce5c <USBH_FindInterface>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b5ba:	7bfb      	ldrb	r3, [r7, #15]
 800b5bc:	2bff      	cmp	r3, #255	; 0xff
 800b5be:	d002      	beq.n	800b5c6 <USBH_MSC_InterfaceInit+0x2a>
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d901      	bls.n	800b5ca <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b5c6:	2302      	movs	r3, #2
 800b5c8:	e0ef      	b.n	800b7aa <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f001 fc28 	bl	800ce24 <USBH_SelectInterface>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e0e3      	b.n	800b7aa <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b5e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b5ec:	f009 f84e 	bl	801468c <malloc>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b604:	2302      	movs	r3, #2
 800b606:	e0d0      	b.n	800b7aa <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b60c:	2100      	movs	r1, #0
 800b60e:	68b8      	ldr	r0, [r7, #8]
 800b610:	f009 f85a 	bl	80146c8 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b614:	7bfb      	ldrb	r3, [r7, #15]
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	211a      	movs	r1, #26
 800b61a:	fb01 f303 	mul.w	r3, r1, r3
 800b61e:	4413      	add	r3, r2
 800b620:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	b25b      	sxtb	r3, r3
 800b628:	2b00      	cmp	r3, #0
 800b62a:	da16      	bge.n	800b65a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b62c:	7bfb      	ldrb	r3, [r7, #15]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	211a      	movs	r1, #26
 800b632:	fb01 f303 	mul.w	r3, r1, r3
 800b636:	4413      	add	r3, r2
 800b638:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b63c:	781a      	ldrb	r2, [r3, #0]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	211a      	movs	r1, #26
 800b648:	fb01 f303 	mul.w	r3, r1, r3
 800b64c:	4413      	add	r3, r2
 800b64e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b652:	881a      	ldrh	r2, [r3, #0]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	815a      	strh	r2, [r3, #10]
 800b658:	e015      	b.n	800b686 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	211a      	movs	r1, #26
 800b660:	fb01 f303 	mul.w	r3, r1, r3
 800b664:	4413      	add	r3, r2
 800b666:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b66a:	781a      	ldrb	r2, [r3, #0]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	211a      	movs	r1, #26
 800b676:	fb01 f303 	mul.w	r3, r1, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b680:	881a      	ldrh	r2, [r3, #0]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b686:	7bfb      	ldrb	r3, [r7, #15]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	211a      	movs	r1, #26
 800b68c:	fb01 f303 	mul.w	r3, r1, r3
 800b690:	4413      	add	r3, r2
 800b692:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	b25b      	sxtb	r3, r3
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	da16      	bge.n	800b6cc <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b69e:	7bfb      	ldrb	r3, [r7, #15]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	211a      	movs	r1, #26
 800b6a4:	fb01 f303 	mul.w	r3, r1, r3
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b6ae:	781a      	ldrb	r2, [r3, #0]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	211a      	movs	r1, #26
 800b6ba:	fb01 f303 	mul.w	r3, r1, r3
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b6c4:	881a      	ldrh	r2, [r3, #0]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	815a      	strh	r2, [r3, #10]
 800b6ca:	e015      	b.n	800b6f8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	687a      	ldr	r2, [r7, #4]
 800b6d0:	211a      	movs	r1, #26
 800b6d2:	fb01 f303 	mul.w	r3, r1, r3
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b6dc:	781a      	ldrb	r2, [r3, #0]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	211a      	movs	r1, #26
 800b6e8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ec:	4413      	add	r3, r2
 800b6ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b6f2:	881a      	ldrh	r2, [r3, #0]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2200      	movs	r2, #0
 800b702:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2200      	movs	r2, #0
 800b708:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	799b      	ldrb	r3, [r3, #6]
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f002 fdc4 	bl	800e29e <USBH_AllocPipe>
 800b716:	4603      	mov	r3, r0
 800b718:	461a      	mov	r2, r3
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	79db      	ldrb	r3, [r3, #7]
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f002 fdba 	bl	800e29e <USBH_AllocPipe>
 800b72a:	4603      	mov	r3, r0
 800b72c:	461a      	mov	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fdac 	bl	800c290 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	7959      	ldrb	r1, [r3, #5]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	7998      	ldrb	r0, [r3, #6]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	8912      	ldrh	r2, [r2, #8]
 800b750:	9202      	str	r2, [sp, #8]
 800b752:	2202      	movs	r2, #2
 800b754:	9201      	str	r2, [sp, #4]
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	4623      	mov	r3, r4
 800b75a:	4602      	mov	r2, r0
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f002 fd6f 	bl	800e240 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	7919      	ldrb	r1, [r3, #4]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	79d8      	ldrb	r0, [r3, #7]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	8952      	ldrh	r2, [r2, #10]
 800b77a:	9202      	str	r2, [sp, #8]
 800b77c:	2202      	movs	r2, #2
 800b77e:	9201      	str	r2, [sp, #4]
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	4623      	mov	r3, r4
 800b784:	4602      	mov	r2, r0
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f002 fd5a 	bl	800e240 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	791b      	ldrb	r3, [r3, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f006 fb1f 	bl	8011dd8 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	795b      	ldrb	r3, [r3, #5]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f006 fb18 	bl	8011dd8 <USBH_LL_SetToggle>

  return USBH_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd90      	pop	{r4, r7, pc}

0800b7b2 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7c0:	69db      	ldr	r3, [r3, #28]
 800b7c2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	795b      	ldrb	r3, [r3, #5]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	795b      	ldrb	r3, [r3, #5]
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f002 fd53 	bl	800e27e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	795b      	ldrb	r3, [r3, #5]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f002 fd7e 	bl	800e2e0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	791b      	ldrb	r3, [r3, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00e      	beq.n	800b810 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	791b      	ldrb	r3, [r3, #4]
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f002 fd40 	bl	800e27e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	791b      	ldrb	r3, [r3, #4]
 800b802:	4619      	mov	r1, r3
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f002 fd6b 	bl	800e2e0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b816:	69db      	ldr	r3, [r3, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00b      	beq.n	800b834 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	4618      	mov	r0, r3
 800b826:	f008 ff39 	bl	801469c <free>
    phost->pActiveClass->pData = 0U;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b830:	2200      	movs	r2, #0
 800b832:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b084      	sub	sp, #16
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b850:	2301      	movs	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	7b9b      	ldrb	r3, [r3, #14]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d041      	beq.n	800b8e0 <USBH_MSC_ClassRequest+0xa2>
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	dc4b      	bgt.n	800b8f8 <USBH_MSC_ClassRequest+0xba>
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <USBH_MSC_ClassRequest+0x2a>
 800b864:	2b02      	cmp	r3, #2
 800b866:	d147      	bne.n	800b8f8 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fcf0 	bl	800c252 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b872:	4603      	mov	r3, r0
 800b874:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b876:	7bfb      	ldrb	r3, [r7, #15]
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d104      	bne.n	800b886 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	2200      	movs	r2, #0
 800b880:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b886:	7bfb      	ldrb	r3, [r7, #15]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d137      	bne.n	800b8fc <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b02      	cmp	r3, #2
 800b892:	d804      	bhi.n	800b89e <USBH_MSC_ClassRequest+0x60>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	3301      	adds	r3, #1
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	e000      	b.n	800b8a0 <USBH_MSC_ClassRequest+0x62>
 800b89e:	2202      	movs	r2, #2
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73bb      	strb	r3, [r7, #14]
 800b8a8:	e014      	b.n	800b8d4 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b8aa:	7bbb      	ldrb	r3, [r7, #14]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	2134      	movs	r1, #52	; 0x34
 800b8b0:	fb01 f303 	mul.w	r3, r1, r3
 800b8b4:	4413      	add	r3, r2
 800b8b6:	3392      	adds	r3, #146	; 0x92
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b8bc:	7bbb      	ldrb	r3, [r7, #14]
 800b8be:	68ba      	ldr	r2, [r7, #8]
 800b8c0:	2134      	movs	r1, #52	; 0x34
 800b8c2:	fb01 f303 	mul.w	r3, r1, r3
 800b8c6:	4413      	add	r3, r2
 800b8c8:	33c1      	adds	r3, #193	; 0xc1
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	73bb      	strb	r3, [r7, #14]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	7bba      	ldrb	r2, [r7, #14]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d3e5      	bcc.n	800b8aa <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b8de:	e00d      	b.n	800b8fc <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f002 f87b 	bl	800d9de <USBH_ClrFeature>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d108      	bne.n	800b900 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	7bda      	ldrb	r2, [r3, #15]
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b8f6:	e003      	b.n	800b900 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b8f8:	bf00      	nop
 800b8fa:	e002      	b.n	800b902 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b8fc:	bf00      	nop
 800b8fe:	e000      	b.n	800b902 <USBH_MSC_ClassRequest+0xc4>
      break;
 800b900:	bf00      	nop
  }

  return status;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b91e:	2301      	movs	r3, #1
 800b920:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b922:	2301      	movs	r3, #1
 800b924:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b926:	2301      	movs	r3, #1
 800b928:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	7b1b      	ldrb	r3, [r3, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <USBH_MSC_Process+0x2e>
 800b932:	2b01      	cmp	r3, #1
 800b934:	f000 8271 	beq.w	800be1a <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b938:	e272      	b.n	800be20 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	b29b      	uxth	r3, r3
 800b946:	429a      	cmp	r2, r3
 800b948:	f080 824f 	bcs.w	800bdea <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b952:	4619      	mov	r1, r3
 800b954:	693a      	ldr	r2, [r7, #16]
 800b956:	2334      	movs	r3, #52	; 0x34
 800b958:	fb01 f303 	mul.w	r3, r1, r3
 800b95c:	4413      	add	r3, r2
 800b95e:	3391      	adds	r3, #145	; 0x91
 800b960:	2201      	movs	r2, #1
 800b962:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b96a:	4619      	mov	r1, r3
 800b96c:	693a      	ldr	r2, [r7, #16]
 800b96e:	2334      	movs	r3, #52	; 0x34
 800b970:	fb01 f303 	mul.w	r3, r1, r3
 800b974:	4413      	add	r3, r2
 800b976:	3390      	adds	r3, #144	; 0x90
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	2b08      	cmp	r3, #8
 800b97c:	f200 8243 	bhi.w	800be06 <USBH_MSC_Process+0x4fa>
 800b980:	a201      	add	r2, pc, #4	; (adr r2, 800b988 <USBH_MSC_Process+0x7c>)
 800b982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b986:	bf00      	nop
 800b988:	0800b9ad 	.word	0x0800b9ad
 800b98c:	0800be07 	.word	0x0800be07
 800b990:	0800ba75 	.word	0x0800ba75
 800b994:	0800bbf9 	.word	0x0800bbf9
 800b998:	0800b9d3 	.word	0x0800b9d3
 800b99c:	0800bcc5 	.word	0x0800bcc5
 800b9a0:	0800be07 	.word	0x0800be07
 800b9a4:	0800be07 	.word	0x0800be07
 800b9a8:	0800bdd9 	.word	0x0800bdd9
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	2334      	movs	r3, #52	; 0x34
 800b9b8:	fb01 f303 	mul.w	r3, r1, r3
 800b9bc:	4413      	add	r3, r2
 800b9be:	3390      	adds	r3, #144	; 0x90
 800b9c0:	2204      	movs	r2, #4
 800b9c2:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b9d0:	e222      	b.n	800be18 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9d8:	b2d9      	uxtb	r1, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	2334      	movs	r3, #52	; 0x34
 800b9e4:	fb02 f303 	mul.w	r3, r2, r3
 800b9e8:	3398      	adds	r3, #152	; 0x98
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	3307      	adds	r3, #7
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 ff6a 	bl	800c8cc <USBH_MSC_SCSI_Inquiry>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10b      	bne.n	800ba1a <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba08:	4619      	mov	r1, r3
 800ba0a:	693a      	ldr	r2, [r7, #16]
 800ba0c:	2334      	movs	r3, #52	; 0x34
 800ba0e:	fb01 f303 	mul.w	r3, r1, r3
 800ba12:	4413      	add	r3, r2
 800ba14:	3390      	adds	r3, #144	; 0x90
 800ba16:	2202      	movs	r2, #2
 800ba18:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d10c      	bne.n	800ba3a <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba26:	4619      	mov	r1, r3
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	2334      	movs	r3, #52	; 0x34
 800ba2c:	fb01 f303 	mul.w	r3, r1, r3
 800ba30:	4413      	add	r3, r2
 800ba32:	3390      	adds	r3, #144	; 0x90
 800ba34:	2205      	movs	r2, #5
 800ba36:	701a      	strb	r2, [r3, #0]
            break;
 800ba38:	e1e7      	b.n	800be0a <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	2b04      	cmp	r3, #4
 800ba3e:	f040 81e4 	bne.w	800be0a <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba48:	4619      	mov	r1, r3
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	2334      	movs	r3, #52	; 0x34
 800ba4e:	fb01 f303 	mul.w	r3, r1, r3
 800ba52:	4413      	add	r3, r2
 800ba54:	3390      	adds	r3, #144	; 0x90
 800ba56:	2201      	movs	r2, #1
 800ba58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba60:	4619      	mov	r1, r3
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	2334      	movs	r3, #52	; 0x34
 800ba66:	fb01 f303 	mul.w	r3, r1, r3
 800ba6a:	4413      	add	r3, r2
 800ba6c:	3391      	adds	r3, #145	; 0x91
 800ba6e:	2202      	movs	r2, #2
 800ba70:	701a      	strb	r2, [r3, #0]
            break;
 800ba72:	e1ca      	b.n	800be0a <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fe66 	bl	800c750 <USBH_MSC_SCSI_TestUnitReady>
 800ba84:	4603      	mov	r3, r0
 800ba86:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800ba88:	7bbb      	ldrb	r3, [r7, #14]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d149      	bne.n	800bb22 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba94:	4619      	mov	r1, r3
 800ba96:	693a      	ldr	r2, [r7, #16]
 800ba98:	2334      	movs	r3, #52	; 0x34
 800ba9a:	fb01 f303 	mul.w	r3, r1, r3
 800ba9e:	4413      	add	r3, r2
 800baa0:	3392      	adds	r3, #146	; 0x92
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00c      	beq.n	800bac2 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baae:	4619      	mov	r1, r3
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	2334      	movs	r3, #52	; 0x34
 800bab4:	fb01 f303 	mul.w	r3, r1, r3
 800bab8:	4413      	add	r3, r2
 800baba:	33c1      	adds	r3, #193	; 0xc1
 800babc:	2201      	movs	r2, #1
 800babe:	701a      	strb	r2, [r3, #0]
 800bac0:	e00b      	b.n	800bada <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bac8:	4619      	mov	r1, r3
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	2334      	movs	r3, #52	; 0x34
 800bace:	fb01 f303 	mul.w	r3, r1, r3
 800bad2:	4413      	add	r3, r2
 800bad4:	33c1      	adds	r3, #193	; 0xc1
 800bad6:	2200      	movs	r2, #0
 800bad8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bae0:	4619      	mov	r1, r3
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	2334      	movs	r3, #52	; 0x34
 800bae6:	fb01 f303 	mul.w	r3, r1, r3
 800baea:	4413      	add	r3, r2
 800baec:	3390      	adds	r3, #144	; 0x90
 800baee:	2203      	movs	r2, #3
 800baf0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800baf8:	4619      	mov	r1, r3
 800bafa:	693a      	ldr	r2, [r7, #16]
 800bafc:	2334      	movs	r3, #52	; 0x34
 800bafe:	fb01 f303 	mul.w	r3, r1, r3
 800bb02:	4413      	add	r3, r2
 800bb04:	3391      	adds	r3, #145	; 0x91
 800bb06:	2200      	movs	r2, #0
 800bb08:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb10:	4619      	mov	r1, r3
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	2334      	movs	r3, #52	; 0x34
 800bb16:	fb01 f303 	mul.w	r3, r1, r3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3392      	adds	r3, #146	; 0x92
 800bb1e:	2200      	movs	r2, #0
 800bb20:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800bb22:	7bbb      	ldrb	r3, [r7, #14]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d14a      	bne.n	800bbbe <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb2e:	4619      	mov	r1, r3
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	2334      	movs	r3, #52	; 0x34
 800bb34:	fb01 f303 	mul.w	r3, r1, r3
 800bb38:	4413      	add	r3, r2
 800bb3a:	3392      	adds	r3, #146	; 0x92
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d00c      	beq.n	800bb5c <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb48:	4619      	mov	r1, r3
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	2334      	movs	r3, #52	; 0x34
 800bb4e:	fb01 f303 	mul.w	r3, r1, r3
 800bb52:	4413      	add	r3, r2
 800bb54:	33c1      	adds	r3, #193	; 0xc1
 800bb56:	2201      	movs	r2, #1
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	e00b      	b.n	800bb74 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb62:	4619      	mov	r1, r3
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	2334      	movs	r3, #52	; 0x34
 800bb68:	fb01 f303 	mul.w	r3, r1, r3
 800bb6c:	4413      	add	r3, r2
 800bb6e:	33c1      	adds	r3, #193	; 0xc1
 800bb70:	2200      	movs	r2, #0
 800bb72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	693a      	ldr	r2, [r7, #16]
 800bb7e:	2334      	movs	r3, #52	; 0x34
 800bb80:	fb01 f303 	mul.w	r3, r1, r3
 800bb84:	4413      	add	r3, r2
 800bb86:	3390      	adds	r3, #144	; 0x90
 800bb88:	2205      	movs	r2, #5
 800bb8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bb92:	4619      	mov	r1, r3
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	2334      	movs	r3, #52	; 0x34
 800bb98:	fb01 f303 	mul.w	r3, r1, r3
 800bb9c:	4413      	add	r3, r2
 800bb9e:	3391      	adds	r3, #145	; 0x91
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbaa:	4619      	mov	r1, r3
 800bbac:	693a      	ldr	r2, [r7, #16]
 800bbae:	2334      	movs	r3, #52	; 0x34
 800bbb0:	fb01 f303 	mul.w	r3, r1, r3
 800bbb4:	4413      	add	r3, r2
 800bbb6:	3392      	adds	r3, #146	; 0x92
 800bbb8:	2202      	movs	r2, #2
 800bbba:	701a      	strb	r2, [r3, #0]
            break;
 800bbbc:	e127      	b.n	800be0e <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	2b04      	cmp	r3, #4
 800bbc2:	f040 8124 	bne.w	800be0e <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbcc:	4619      	mov	r1, r3
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	2334      	movs	r3, #52	; 0x34
 800bbd2:	fb01 f303 	mul.w	r3, r1, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	3390      	adds	r3, #144	; 0x90
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	693a      	ldr	r2, [r7, #16]
 800bbe8:	2334      	movs	r3, #52	; 0x34
 800bbea:	fb01 f303 	mul.w	r3, r1, r3
 800bbee:	4413      	add	r3, r2
 800bbf0:	3391      	adds	r3, #145	; 0x91
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	701a      	strb	r2, [r3, #0]
            break;
 800bbf6:	e10a      	b.n	800be0e <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bbfe:	b2d9      	uxtb	r1, r3
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc06:	461a      	mov	r2, r3
 800bc08:	2334      	movs	r3, #52	; 0x34
 800bc0a:	fb02 f303 	mul.w	r3, r2, r3
 800bc0e:	3390      	adds	r3, #144	; 0x90
 800bc10:	693a      	ldr	r2, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	3304      	adds	r3, #4
 800bc16:	461a      	mov	r2, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fddc 	bl	800c7d6 <USBH_MSC_SCSI_ReadCapacity>
 800bc1e:	4603      	mov	r3, r0
 800bc20:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bc22:	7bfb      	ldrb	r3, [r7, #15]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d120      	bne.n	800bc6a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc2e:	4619      	mov	r1, r3
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	2334      	movs	r3, #52	; 0x34
 800bc34:	fb01 f303 	mul.w	r3, r1, r3
 800bc38:	4413      	add	r3, r2
 800bc3a:	3390      	adds	r3, #144	; 0x90
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc46:	4619      	mov	r1, r3
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	2334      	movs	r3, #52	; 0x34
 800bc4c:	fb01 f303 	mul.w	r3, r1, r3
 800bc50:	4413      	add	r3, r2
 800bc52:	3391      	adds	r3, #145	; 0x91
 800bc54:	2200      	movs	r2, #0
 800bc56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc5e:	3301      	adds	r3, #1
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bc68:	e0d3      	b.n	800be12 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800bc6a:	7bfb      	ldrb	r3, [r7, #15]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d10c      	bne.n	800bc8a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc76:	4619      	mov	r1, r3
 800bc78:	693a      	ldr	r2, [r7, #16]
 800bc7a:	2334      	movs	r3, #52	; 0x34
 800bc7c:	fb01 f303 	mul.w	r3, r1, r3
 800bc80:	4413      	add	r3, r2
 800bc82:	3390      	adds	r3, #144	; 0x90
 800bc84:	2205      	movs	r2, #5
 800bc86:	701a      	strb	r2, [r3, #0]
            break;
 800bc88:	e0c3      	b.n	800be12 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	f040 80c0 	bne.w	800be12 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bc98:	4619      	mov	r1, r3
 800bc9a:	693a      	ldr	r2, [r7, #16]
 800bc9c:	2334      	movs	r3, #52	; 0x34
 800bc9e:	fb01 f303 	mul.w	r3, r1, r3
 800bca2:	4413      	add	r3, r2
 800bca4:	3390      	adds	r3, #144	; 0x90
 800bca6:	2201      	movs	r2, #1
 800bca8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	693a      	ldr	r2, [r7, #16]
 800bcb4:	2334      	movs	r3, #52	; 0x34
 800bcb6:	fb01 f303 	mul.w	r3, r1, r3
 800bcba:	4413      	add	r3, r2
 800bcbc:	3391      	adds	r3, #145	; 0x91
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	701a      	strb	r2, [r3, #0]
            break;
 800bcc2:	e0a6      	b.n	800be12 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcca:	b2d9      	uxtb	r1, r3
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcd2:	461a      	mov	r2, r3
 800bcd4:	2334      	movs	r3, #52	; 0x34
 800bcd6:	fb02 f303 	mul.w	r3, r2, r3
 800bcda:	3398      	adds	r3, #152	; 0x98
 800bcdc:	693a      	ldr	r2, [r7, #16]
 800bcde:	4413      	add	r3, r2
 800bce0:	3304      	adds	r3, #4
 800bce2:	461a      	mov	r2, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fe96 	bl	800ca16 <USBH_MSC_SCSI_RequestSense>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d145      	bne.n	800bd80 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bcf4:	693b      	ldr	r3, [r7, #16]
 800bcf6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	2334      	movs	r3, #52	; 0x34
 800bd00:	fb01 f303 	mul.w	r3, r1, r3
 800bd04:	4413      	add	r3, r2
 800bd06:	339c      	adds	r3, #156	; 0x9c
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	2b06      	cmp	r3, #6
 800bd0c:	d00c      	beq.n	800bd28 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd14:	4619      	mov	r1, r3
 800bd16:	693a      	ldr	r2, [r7, #16]
 800bd18:	2334      	movs	r3, #52	; 0x34
 800bd1a:	fb01 f303 	mul.w	r3, r1, r3
 800bd1e:	4413      	add	r3, r2
 800bd20:	339c      	adds	r3, #156	; 0x9c
 800bd22:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d117      	bne.n	800bd58 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	f242 720f 	movw	r2, #9999	; 0x270f
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d80c      	bhi.n	800bd58 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd44:	4619      	mov	r1, r3
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	2334      	movs	r3, #52	; 0x34
 800bd4a:	fb01 f303 	mul.w	r3, r1, r3
 800bd4e:	4413      	add	r3, r2
 800bd50:	3390      	adds	r3, #144	; 0x90
 800bd52:	2202      	movs	r2, #2
 800bd54:	701a      	strb	r2, [r3, #0]
                  break;
 800bd56:	e05f      	b.n	800be18 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd5e:	4619      	mov	r1, r3
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	2334      	movs	r3, #52	; 0x34
 800bd64:	fb01 f303 	mul.w	r3, r1, r3
 800bd68:	4413      	add	r3, r2
 800bd6a:	3390      	adds	r3, #144	; 0x90
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd76:	3301      	adds	r3, #1
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d10c      	bne.n	800bda0 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	2334      	movs	r3, #52	; 0x34
 800bd92:	fb01 f303 	mul.w	r3, r1, r3
 800bd96:	4413      	add	r3, r2
 800bd98:	3390      	adds	r3, #144	; 0x90
 800bd9a:	2208      	movs	r2, #8
 800bd9c:	701a      	strb	r2, [r3, #0]
            break;
 800bd9e:	e03a      	b.n	800be16 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d137      	bne.n	800be16 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdac:	4619      	mov	r1, r3
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	2334      	movs	r3, #52	; 0x34
 800bdb2:	fb01 f303 	mul.w	r3, r1, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	3390      	adds	r3, #144	; 0x90
 800bdba:	2201      	movs	r2, #1
 800bdbc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	2334      	movs	r3, #52	; 0x34
 800bdca:	fb01 f303 	mul.w	r3, r1, r3
 800bdce:	4413      	add	r3, r2
 800bdd0:	3391      	adds	r3, #145	; 0x91
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	701a      	strb	r2, [r3, #0]
            break;
 800bdd6:	e01e      	b.n	800be16 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800bdde:	3301      	adds	r3, #1
 800bde0:	b29a      	uxth	r2, r3
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800bde8:	e016      	b.n	800be18 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdfe:	2102      	movs	r1, #2
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	4798      	blx	r3
      break;
 800be04:	e00c      	b.n	800be20 <USBH_MSC_Process+0x514>
            break;
 800be06:	bf00      	nop
 800be08:	e00a      	b.n	800be20 <USBH_MSC_Process+0x514>
            break;
 800be0a:	bf00      	nop
 800be0c:	e008      	b.n	800be20 <USBH_MSC_Process+0x514>
            break;
 800be0e:	bf00      	nop
 800be10:	e006      	b.n	800be20 <USBH_MSC_Process+0x514>
            break;
 800be12:	bf00      	nop
 800be14:	e004      	b.n	800be20 <USBH_MSC_Process+0x514>
            break;
 800be16:	bf00      	nop
      break;
 800be18:	e002      	b.n	800be20 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
      break;
 800be1e:	bf00      	nop
  }
  return error;
 800be20:	7dfb      	ldrb	r3, [r7, #23]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop

0800be2c <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b088      	sub	sp, #32
 800be46:	af02      	add	r7, sp, #8
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	460b      	mov	r3, r1
 800be4c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800be58:	2301      	movs	r3, #1
 800be5a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800be5c:	2301      	movs	r3, #1
 800be5e:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	2134      	movs	r1, #52	; 0x34
 800be66:	fb01 f303 	mul.w	r3, r1, r3
 800be6a:	4413      	add	r3, r2
 800be6c:	3390      	adds	r3, #144	; 0x90
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b07      	cmp	r3, #7
 800be72:	d03c      	beq.n	800beee <USBH_MSC_RdWrProcess+0xac>
 800be74:	2b07      	cmp	r3, #7
 800be76:	f300 80a7 	bgt.w	800bfc8 <USBH_MSC_RdWrProcess+0x186>
 800be7a:	2b05      	cmp	r3, #5
 800be7c:	d06c      	beq.n	800bf58 <USBH_MSC_RdWrProcess+0x116>
 800be7e:	2b06      	cmp	r3, #6
 800be80:	f040 80a2 	bne.w	800bfc8 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800be84:	78f9      	ldrb	r1, [r7, #3]
 800be86:	2300      	movs	r3, #0
 800be88:	9300      	str	r3, [sp, #0]
 800be8a:	2300      	movs	r3, #0
 800be8c:	2200      	movs	r2, #0
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fea5 	bl	800cbde <USBH_MSC_SCSI_Read>
 800be94:	4603      	mov	r3, r0
 800be96:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10b      	bne.n	800beb6 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800be9e:	78fb      	ldrb	r3, [r7, #3]
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	2134      	movs	r1, #52	; 0x34
 800bea4:	fb01 f303 	mul.w	r3, r1, r3
 800bea8:	4413      	add	r3, r2
 800beaa:	3390      	adds	r3, #144	; 0x90
 800beac:	2201      	movs	r2, #1
 800beae:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800beb4:	e08a      	b.n	800bfcc <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d109      	bne.n	800bed0 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bebc:	78fb      	ldrb	r3, [r7, #3]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	2134      	movs	r1, #52	; 0x34
 800bec2:	fb01 f303 	mul.w	r3, r1, r3
 800bec6:	4413      	add	r3, r2
 800bec8:	3390      	adds	r3, #144	; 0x90
 800beca:	2205      	movs	r2, #5
 800becc:	701a      	strb	r2, [r3, #0]
      break;
 800bece:	e07d      	b.n	800bfcc <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bed0:	7bfb      	ldrb	r3, [r7, #15]
 800bed2:	2b04      	cmp	r3, #4
 800bed4:	d17a      	bne.n	800bfcc <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bed6:	78fb      	ldrb	r3, [r7, #3]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	2134      	movs	r1, #52	; 0x34
 800bedc:	fb01 f303 	mul.w	r3, r1, r3
 800bee0:	4413      	add	r3, r2
 800bee2:	3390      	adds	r3, #144	; 0x90
 800bee4:	2208      	movs	r2, #8
 800bee6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bee8:	2302      	movs	r3, #2
 800beea:	75fb      	strb	r3, [r7, #23]
      break;
 800beec:	e06e      	b.n	800bfcc <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800beee:	78f9      	ldrb	r1, [r7, #3]
 800bef0:	2300      	movs	r3, #0
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	2300      	movs	r3, #0
 800bef6:	2200      	movs	r2, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fe05 	bl	800cb08 <USBH_MSC_SCSI_Write>
 800befe:	4603      	mov	r3, r0
 800bf00:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10b      	bne.n	800bf20 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	693a      	ldr	r2, [r7, #16]
 800bf0c:	2134      	movs	r1, #52	; 0x34
 800bf0e:	fb01 f303 	mul.w	r3, r1, r3
 800bf12:	4413      	add	r3, r2
 800bf14:	3390      	adds	r3, #144	; 0x90
 800bf16:	2201      	movs	r2, #1
 800bf18:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bf1e:	e057      	b.n	800bfd0 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d109      	bne.n	800bf3a <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	693a      	ldr	r2, [r7, #16]
 800bf2a:	2134      	movs	r1, #52	; 0x34
 800bf2c:	fb01 f303 	mul.w	r3, r1, r3
 800bf30:	4413      	add	r3, r2
 800bf32:	3390      	adds	r3, #144	; 0x90
 800bf34:	2205      	movs	r2, #5
 800bf36:	701a      	strb	r2, [r3, #0]
      break;
 800bf38:	e04a      	b.n	800bfd0 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bf3a:	7bfb      	ldrb	r3, [r7, #15]
 800bf3c:	2b04      	cmp	r3, #4
 800bf3e:	d147      	bne.n	800bfd0 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	2134      	movs	r1, #52	; 0x34
 800bf46:	fb01 f303 	mul.w	r3, r1, r3
 800bf4a:	4413      	add	r3, r2
 800bf4c:	3390      	adds	r3, #144	; 0x90
 800bf4e:	2208      	movs	r2, #8
 800bf50:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bf52:	2302      	movs	r3, #2
 800bf54:	75fb      	strb	r3, [r7, #23]
      break;
 800bf56:	e03b      	b.n	800bfd0 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	2234      	movs	r2, #52	; 0x34
 800bf5c:	fb02 f303 	mul.w	r3, r2, r3
 800bf60:	3398      	adds	r3, #152	; 0x98
 800bf62:	693a      	ldr	r2, [r7, #16]
 800bf64:	4413      	add	r3, r2
 800bf66:	1d1a      	adds	r2, r3, #4
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fd52 	bl	800ca16 <USBH_MSC_SCSI_RequestSense>
 800bf72:	4603      	mov	r3, r0
 800bf74:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d113      	bne.n	800bfa4 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bf7c:	78fb      	ldrb	r3, [r7, #3]
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	2134      	movs	r1, #52	; 0x34
 800bf82:	fb01 f303 	mul.w	r3, r1, r3
 800bf86:	4413      	add	r3, r2
 800bf88:	3390      	adds	r3, #144	; 0x90
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bf8e:	78fb      	ldrb	r3, [r7, #3]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	2134      	movs	r1, #52	; 0x34
 800bf94:	fb01 f303 	mul.w	r3, r1, r3
 800bf98:	4413      	add	r3, r2
 800bf9a:	3391      	adds	r3, #145	; 0x91
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	2b02      	cmp	r3, #2
 800bfa8:	d014      	beq.n	800bfd4 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bfaa:	7bfb      	ldrb	r3, [r7, #15]
 800bfac:	2b04      	cmp	r3, #4
 800bfae:	d111      	bne.n	800bfd4 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bfb0:	78fb      	ldrb	r3, [r7, #3]
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	2134      	movs	r1, #52	; 0x34
 800bfb6:	fb01 f303 	mul.w	r3, r1, r3
 800bfba:	4413      	add	r3, r2
 800bfbc:	3390      	adds	r3, #144	; 0x90
 800bfbe:	2208      	movs	r2, #8
 800bfc0:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800bfc6:	e005      	b.n	800bfd4 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 800bfc8:	bf00      	nop
 800bfca:	e004      	b.n	800bfd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bfcc:	bf00      	nop
 800bfce:	e002      	b.n	800bfd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bfd0:	bf00      	nop
 800bfd2:	e000      	b.n	800bfd6 <USBH_MSC_RdWrProcess+0x194>
      break;
 800bfd4:	bf00      	nop

  }
  return error;
 800bfd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	2b0b      	cmp	r3, #11
 800bffe:	d10c      	bne.n	800c01a <USBH_MSC_UnitIsReady+0x3a>
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	2134      	movs	r1, #52	; 0x34
 800c006:	fb01 f303 	mul.w	r3, r1, r3
 800c00a:	4413      	add	r3, r2
 800c00c:	3391      	adds	r3, #145	; 0x91
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d102      	bne.n	800c01a <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800c014:	2301      	movs	r3, #1
 800c016:	73fb      	strb	r3, [r7, #15]
 800c018:	e001      	b.n	800c01e <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3714      	adds	r7, #20
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b086      	sub	sp, #24
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	460b      	mov	r3, r1
 800c036:	607a      	str	r2, [r7, #4]
 800c038:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b0b      	cmp	r3, #11
 800c04c:	d10d      	bne.n	800c06a <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800c04e:	7afb      	ldrb	r3, [r7, #11]
 800c050:	2234      	movs	r2, #52	; 0x34
 800c052:	fb02 f303 	mul.w	r3, r2, r3
 800c056:	3390      	adds	r3, #144	; 0x90
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	4413      	add	r3, r2
 800c05c:	2234      	movs	r2, #52	; 0x34
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f008 fb23 	bl	80146ac <memcpy>
    return USBH_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	e000      	b.n	800c06c <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800c06a:	2302      	movs	r3, #2
  }
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b088      	sub	sp, #32
 800c078:	af02      	add	r7, sp, #8
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	607a      	str	r2, [r7, #4]
 800c07e:	603b      	str	r3, [r7, #0]
 800c080:	460b      	mov	r3, r1
 800c082:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00e      	beq.n	800c0b8 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	781b      	ldrb	r3, [r3, #0]
 800c09e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c0a0:	2b0b      	cmp	r3, #11
 800c0a2:	d109      	bne.n	800c0b8 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c0a4:	7afb      	ldrb	r3, [r7, #11]
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	2134      	movs	r1, #52	; 0x34
 800c0aa:	fb01 f303 	mul.w	r3, r1, r3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	3390      	adds	r3, #144	; 0x90
 800c0b2:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d001      	beq.n	800c0bc <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800c0b8:	2302      	movs	r3, #2
 800c0ba:	e040      	b.n	800c13e <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	2206      	movs	r2, #6
 800c0c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800c0c2:	7afb      	ldrb	r3, [r7, #11]
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	2134      	movs	r1, #52	; 0x34
 800c0c8:	fb01 f303 	mul.w	r3, r1, r3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	3390      	adds	r3, #144	; 0x90
 800c0d0:	2206      	movs	r2, #6
 800c0d2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c0d4:	7afb      	ldrb	r3, [r7, #11]
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800c0de:	7af9      	ldrb	r1, [r7, #11]
 800c0e0:	6a3b      	ldr	r3, [r7, #32]
 800c0e2:	9300      	str	r3, [sp, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f000 fd78 	bl	800cbde <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0f4:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c0f6:	e016      	b.n	800c126 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	1ad2      	subs	r2, r2, r3
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	f242 7110 	movw	r1, #10000	; 0x2710
 800c108:	fb01 f303 	mul.w	r3, r1, r3
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d805      	bhi.n	800c11c <USBH_MSC_Read+0xa8>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d104      	bne.n	800c126 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	2201      	movs	r2, #1
 800c120:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c122:	2302      	movs	r3, #2
 800c124:	e00b      	b.n	800c13e <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c126:	7afb      	ldrb	r3, [r7, #11]
 800c128:	4619      	mov	r1, r3
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7ff fe89 	bl	800be42 <USBH_MSC_RdWrProcess>
 800c130:	4603      	mov	r3, r0
 800c132:	2b01      	cmp	r3, #1
 800c134:	d0e0      	beq.n	800c0f8 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2201      	movs	r2, #1
 800c13a:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b088      	sub	sp, #32
 800c14a:	af02      	add	r7, sp, #8
 800c14c:	60f8      	str	r0, [r7, #12]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	603b      	str	r3, [r7, #0]
 800c152:	460b      	mov	r3, r1
 800c154:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00e      	beq.n	800c18a <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800c172:	2b0b      	cmp	r3, #11
 800c174:	d109      	bne.n	800c18a <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	697a      	ldr	r2, [r7, #20]
 800c17a:	2134      	movs	r1, #52	; 0x34
 800c17c:	fb01 f303 	mul.w	r3, r1, r3
 800c180:	4413      	add	r3, r2
 800c182:	3390      	adds	r3, #144	; 0x90
 800c184:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800c186:	2b01      	cmp	r3, #1
 800c188:	d001      	beq.n	800c18e <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800c18a:	2302      	movs	r3, #2
 800c18c:	e040      	b.n	800c210 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	2207      	movs	r2, #7
 800c192:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	2134      	movs	r1, #52	; 0x34
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	4413      	add	r3, r2
 800c1a0:	3390      	adds	r3, #144	; 0x90
 800c1a2:	2207      	movs	r2, #7
 800c1a4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800c1a6:	7afb      	ldrb	r3, [r7, #11]
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800c1b0:	7af9      	ldrb	r1, [r7, #11]
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	9300      	str	r3, [sp, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	f000 fca4 	bl	800cb08 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1c6:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c1c8:	e016      	b.n	800c1f8 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	1ad2      	subs	r2, r2, r3
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	f242 7110 	movw	r1, #10000	; 0x2710
 800c1da:	fb01 f303 	mul.w	r3, r1, r3
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d805      	bhi.n	800c1ee <USBH_MSC_Write+0xa8>
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d104      	bne.n	800c1f8 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	e00b      	b.n	800c210 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800c1f8:	7afb      	ldrb	r3, [r7, #11]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f7ff fe20 	bl	800be42 <USBH_MSC_RdWrProcess>
 800c202:	4603      	mov	r3, r0
 800c204:	2b01      	cmp	r3, #1
 800c206:	d0e0      	beq.n	800c1ca <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	2201      	movs	r2, #1
 800c20c:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800c20e:	2300      	movs	r3, #0
}
 800c210:	4618      	mov	r0, r3
 800c212:	3718      	adds	r7, #24
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2221      	movs	r2, #33	; 0x21
 800c224:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	22ff      	movs	r2, #255	; 0xff
 800c22a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800c23e:	2200      	movs	r2, #0
 800c240:	2100      	movs	r1, #0
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f001 fdab 	bl	800dd9e <USBH_CtlReq>
 800c248:	4603      	mov	r3, r0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	22a1      	movs	r2, #161	; 0xa1
 800c260:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	22fe      	movs	r2, #254	; 0xfe
 800c266:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800c27a:	2201      	movs	r2, #1
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fd8d 	bl	800dd9e <USBH_CtlReq>
 800c284:	4603      	mov	r3, r0
}
 800c286:	4618      	mov	r0, r3
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <USBH_MSC_BOT_Init+0x3c>)
 800c2a6:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <USBH_MSC_BOT_Init+0x40>)
 800c2ac:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr
 800c2cc:	43425355 	.word	0x43425355
 800c2d0:	20304050 	.word	0x20304050

0800c2d4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b088      	sub	sp, #32
 800c2d8:	af02      	add	r7, sp, #8
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	460b      	mov	r3, r1
 800c2de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c2f6:	69db      	ldr	r3, [r3, #28]
 800c2f8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c304:	3b01      	subs	r3, #1
 800c306:	2b0a      	cmp	r3, #10
 800c308:	f200 819e 	bhi.w	800c648 <USBH_MSC_BOT_Process+0x374>
 800c30c:	a201      	add	r2, pc, #4	; (adr r2, 800c314 <USBH_MSC_BOT_Process+0x40>)
 800c30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c312:	bf00      	nop
 800c314:	0800c341 	.word	0x0800c341
 800c318:	0800c369 	.word	0x0800c369
 800c31c:	0800c3d3 	.word	0x0800c3d3
 800c320:	0800c3f1 	.word	0x0800c3f1
 800c324:	0800c475 	.word	0x0800c475
 800c328:	0800c497 	.word	0x0800c497
 800c32c:	0800c52f 	.word	0x0800c52f
 800c330:	0800c54b 	.word	0x0800c54b
 800c334:	0800c59d 	.word	0x0800c59d
 800c338:	0800c5cd 	.word	0x0800c5cd
 800c33c:	0800c62f 	.word	0x0800c62f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	78fa      	ldrb	r2, [r7, #3]
 800c344:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	2202      	movs	r2, #2
 800c34c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	795b      	ldrb	r3, [r3, #5]
 800c35a:	2201      	movs	r2, #1
 800c35c:	9200      	str	r2, [sp, #0]
 800c35e:	221f      	movs	r2, #31
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 ff2a 	bl	800e1ba <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c366:	e17e      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	795b      	ldrb	r3, [r3, #5]
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f005 fd08 	bl	8011d84 <USBH_LL_GetURBState>
 800c374:	4603      	mov	r3, r0
 800c376:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c378:	7d3b      	ldrb	r3, [r7, #20]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d118      	bne.n	800c3b0 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00f      	beq.n	800c3a6 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c38c:	b25b      	sxtb	r3, r3
 800c38e:	2b00      	cmp	r3, #0
 800c390:	da04      	bge.n	800c39c <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2203      	movs	r2, #3
 800c396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c39a:	e157      	b.n	800c64c <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2205      	movs	r2, #5
 800c3a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3a4:	e152      	b.n	800c64c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c3a6:	693b      	ldr	r3, [r7, #16]
 800c3a8:	2207      	movs	r2, #7
 800c3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3ae:	e14d      	b.n	800c64c <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c3b0:	7d3b      	ldrb	r3, [r7, #20]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d104      	bne.n	800c3c0 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3be:	e145      	b.n	800c64c <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800c3c0:	7d3b      	ldrb	r3, [r7, #20]
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	f040 8142 	bne.w	800c64c <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	220a      	movs	r2, #10
 800c3cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3d0:	e13c      	b.n	800c64c <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	895a      	ldrh	r2, [r3, #10]
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	791b      	ldrb	r3, [r3, #4]
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f001 ff0f 	bl	800e204 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	2204      	movs	r2, #4
 800c3ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c3ee:	e13a      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	791b      	ldrb	r3, [r3, #4]
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f005 fcc4 	bl	8011d84 <USBH_LL_GetURBState>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c400:	7d3b      	ldrb	r3, [r7, #20]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d12d      	bne.n	800c462 <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	8952      	ldrh	r2, [r2, #10]
 800c40e:	4293      	cmp	r3, r2
 800c410:	d910      	bls.n	800c434 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	8952      	ldrh	r2, [r2, #10]
 800c41c:	441a      	add	r2, r3
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	8952      	ldrh	r2, [r2, #10]
 800c42c:	1a9a      	subs	r2, r3, r2
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	65da      	str	r2, [r3, #92]	; 0x5c
 800c432:	e002      	b.n	800c43a <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2200      	movs	r2, #0
 800c438:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d00a      	beq.n	800c458 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	895a      	ldrh	r2, [r3, #10]
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	791b      	ldrb	r3, [r3, #4]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f001 fed7 	bl	800e204 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c456:	e0fb      	b.n	800c650 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2207      	movs	r2, #7
 800c45c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c460:	e0f6      	b.n	800c650 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800c462:	7d3b      	ldrb	r3, [r7, #20]
 800c464:	2b05      	cmp	r3, #5
 800c466:	f040 80f3 	bne.w	800c650 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2209      	movs	r2, #9
 800c46e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c472:	e0ed      	b.n	800c650 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	891a      	ldrh	r2, [r3, #8]
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	795b      	ldrb	r3, [r3, #5]
 800c482:	2001      	movs	r0, #1
 800c484:	9000      	str	r0, [sp, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f001 fe97 	bl	800e1ba <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2206      	movs	r2, #6
 800c490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c494:	e0e7      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	795b      	ldrb	r3, [r3, #5]
 800c49a:	4619      	mov	r1, r3
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f005 fc71 	bl	8011d84 <USBH_LL_GetURBState>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c4a6:	7d3b      	ldrb	r3, [r7, #20]
 800c4a8:	2b01      	cmp	r3, #1
 800c4aa:	d12f      	bne.n	800c50c <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	8912      	ldrh	r2, [r2, #8]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d910      	bls.n	800c4da <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	8912      	ldrh	r2, [r2, #8]
 800c4c2:	441a      	add	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	8912      	ldrh	r2, [r2, #8]
 800c4d2:	1a9a      	subs	r2, r3, r2
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	65da      	str	r2, [r3, #92]	; 0x5c
 800c4d8:	e002      	b.n	800c4e0 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00c      	beq.n	800c502 <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	891a      	ldrh	r2, [r3, #8]
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	795b      	ldrb	r3, [r3, #5]
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	9000      	str	r0, [sp, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f001 fe5d 	bl	800e1ba <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800c500:	e0a8      	b.n	800c654 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2207      	movs	r2, #7
 800c506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c50a:	e0a3      	b.n	800c654 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c50c:	7d3b      	ldrb	r3, [r7, #20]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d104      	bne.n	800c51c <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	2205      	movs	r2, #5
 800c516:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c51a:	e09b      	b.n	800c654 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800c51c:	7d3b      	ldrb	r3, [r7, #20]
 800c51e:	2b05      	cmp	r3, #5
 800c520:	f040 8098 	bne.w	800c654 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	220a      	movs	r2, #10
 800c528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c52c:	e092      	b.n	800c654 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	791b      	ldrb	r3, [r3, #4]
 800c538:	220d      	movs	r2, #13
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f001 fe62 	bl	800e204 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	2208      	movs	r2, #8
 800c544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c548:	e08d      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	791b      	ldrb	r3, [r3, #4]
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f005 fc17 	bl	8011d84 <USBH_LL_GetURBState>
 800c556:	4603      	mov	r3, r0
 800c558:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c55a:	7d3b      	ldrb	r3, [r7, #20]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d115      	bne.n	800c58c <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	2201      	movs	r2, #1
 800c564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	2201      	movs	r2, #1
 800c56c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 f8a9 	bl	800c6c8 <USBH_MSC_DecodeCSW>
 800c576:	4603      	mov	r3, r0
 800c578:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c57a:	7d7b      	ldrb	r3, [r7, #21]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800c580:	2300      	movs	r3, #0
 800c582:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800c584:	e068      	b.n	800c658 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800c586:	2302      	movs	r3, #2
 800c588:	75fb      	strb	r3, [r7, #23]
      break;
 800c58a:	e065      	b.n	800c658 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800c58c:	7d3b      	ldrb	r3, [r7, #20]
 800c58e:	2b05      	cmp	r3, #5
 800c590:	d162      	bne.n	800c658 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2209      	movs	r2, #9
 800c596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c59a:	e05d      	b.n	800c658 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c59c:	78fb      	ldrb	r3, [r7, #3]
 800c59e:	2200      	movs	r2, #0
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f864 	bl	800c670 <USBH_MSC_BOT_Abort>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c5ac:	7dbb      	ldrb	r3, [r7, #22]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d104      	bne.n	800c5bc <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	2207      	movs	r2, #7
 800c5b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c5ba:	e04f      	b.n	800c65c <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c5bc:	7dbb      	ldrb	r3, [r7, #22]
 800c5be:	2b04      	cmp	r3, #4
 800c5c0:	d14c      	bne.n	800c65c <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	220b      	movs	r2, #11
 800c5c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c5ca:	e047      	b.n	800c65c <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f84c 	bl	800c670 <USBH_MSC_BOT_Abort>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c5dc:	7dbb      	ldrb	r3, [r7, #22]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d11d      	bne.n	800c61e <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	795b      	ldrb	r3, [r3, #5]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f005 fc28 	bl	8011e3e <USBH_LL_GetToggle>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	7959      	ldrb	r1, [r3, #5]
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	f1c3 0301 	rsb	r3, r3, #1
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	461a      	mov	r2, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f005 fbe9 	bl	8011dd8 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	791b      	ldrb	r3, [r3, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f005 fbe2 	bl	8011dd8 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	2209      	movs	r2, #9
 800c618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c61c:	e020      	b.n	800c660 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800c61e:	7dbb      	ldrb	r3, [r7, #22]
 800c620:	2b04      	cmp	r3, #4
 800c622:	d11d      	bne.n	800c660 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	220b      	movs	r2, #11
 800c628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c62c:	e018      	b.n	800c660 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	f7ff fdf2 	bl	800c218 <USBH_MSC_BOT_REQ_Reset>
 800c634:	4603      	mov	r3, r0
 800c636:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d112      	bne.n	800c664 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c646:	e00d      	b.n	800c664 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800c648:	bf00      	nop
 800c64a:	e00c      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c64c:	bf00      	nop
 800c64e:	e00a      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c650:	bf00      	nop
 800c652:	e008      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c654:	bf00      	nop
 800c656:	e006      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c658:	bf00      	nop
 800c65a:	e004      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c65c:	bf00      	nop
 800c65e:	e002      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c660:	bf00      	nop
 800c662:	e000      	b.n	800c666 <USBH_MSC_BOT_Process+0x392>
      break;
 800c664:	bf00      	nop
  }
  return status;
 800c666:	7dfb      	ldrb	r3, [r7, #23]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	460b      	mov	r3, r1
 800c67a:	70fb      	strb	r3, [r7, #3]
 800c67c:	4613      	mov	r3, r2
 800c67e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c680:	2302      	movs	r3, #2
 800c682:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c68a:	69db      	ldr	r3, [r3, #28]
 800c68c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c68e:	78bb      	ldrb	r3, [r7, #2]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d002      	beq.n	800c69a <USBH_MSC_BOT_Abort+0x2a>
 800c694:	2b01      	cmp	r3, #1
 800c696:	d009      	beq.n	800c6ac <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c698:	e011      	b.n	800c6be <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	79db      	ldrb	r3, [r3, #7]
 800c69e:	4619      	mov	r1, r3
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f001 f99c 	bl	800d9de <USBH_ClrFeature>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6aa:	e008      	b.n	800c6be <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	799b      	ldrb	r3, [r3, #6]
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 f993 	bl	800d9de <USBH_ClrFeature>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	73fb      	strb	r3, [r7, #15]
      break;
 800c6bc:	bf00      	nop
  }
  return status;
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	791b      	ldrb	r3, [r3, #4]
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f005 fabb 	bl	8011c60 <USBH_LL_GetLastXferSize>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b0d      	cmp	r3, #13
 800c6ee:	d002      	beq.n	800c6f6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c6f0:	2302      	movs	r3, #2
 800c6f2:	73fb      	strb	r3, [r7, #15]
 800c6f4:	e024      	b.n	800c740 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6fa:	4a14      	ldr	r2, [pc, #80]	; (800c74c <USBH_MSC_DecodeCSW+0x84>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d11d      	bne.n	800c73c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c708:	429a      	cmp	r2, r3
 800c70a:	d119      	bne.n	800c740 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c712:	2b00      	cmp	r3, #0
 800c714:	d102      	bne.n	800c71c <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
 800c71a:	e011      	b.n	800c740 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c722:	2b01      	cmp	r3, #1
 800c724:	d102      	bne.n	800c72c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c726:	2301      	movs	r3, #1
 800c728:	73fb      	strb	r3, [r7, #15]
 800c72a:	e009      	b.n	800c740 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c732:	2b02      	cmp	r3, #2
 800c734:	d104      	bne.n	800c740 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c736:	2302      	movs	r3, #2
 800c738:	73fb      	strb	r3, [r7, #15]
 800c73a:	e001      	b.n	800c740 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c73c:	2302      	movs	r3, #2
 800c73e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c740:	7bfb      	ldrb	r3, [r7, #15]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	53425355 	.word	0x53425355

0800c750 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c75c:	2302      	movs	r3, #2
 800c75e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c766:	69db      	ldr	r3, [r3, #28]
 800c768:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c770:	2b01      	cmp	r3, #1
 800c772:	d002      	beq.n	800c77a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c774:	2b02      	cmp	r3, #2
 800c776:	d021      	beq.n	800c7bc <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c778:	e028      	b.n	800c7cc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2200      	movs	r2, #0
 800c77e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	220a      	movs	r2, #10
 800c78c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	3363      	adds	r3, #99	; 0x63
 800c794:	2210      	movs	r2, #16
 800c796:	2100      	movs	r1, #0
 800c798:	4618      	mov	r0, r3
 800c79a:	f007 ff95 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2201      	movs	r2, #1
 800c7aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ba:	e007      	b.n	800c7cc <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c7bc:	78fb      	ldrb	r3, [r7, #3]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f7ff fd87 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ca:	bf00      	nop
  }

  return error;
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b086      	sub	sp, #24
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	60f8      	str	r0, [r7, #12]
 800c7de:	460b      	mov	r3, r1
 800c7e0:	607a      	str	r2, [r7, #4]
 800c7e2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7ee:	69db      	ldr	r3, [r3, #28]
 800c7f0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d002      	beq.n	800c802 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d027      	beq.n	800c850 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c800:	e05f      	b.n	800c8c2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	2208      	movs	r2, #8
 800c806:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2280      	movs	r2, #128	; 0x80
 800c80c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	220a      	movs	r2, #10
 800c814:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	3363      	adds	r3, #99	; 0x63
 800c81c:	2210      	movs	r2, #16
 800c81e:	2100      	movs	r1, #0
 800c820:	4618      	mov	r0, r3
 800c822:	f007 ff51 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	2225      	movs	r2, #37	; 0x25
 800c82a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2201      	movs	r2, #1
 800c832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	2202      	movs	r2, #2
 800c83a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	f103 0210 	add.w	r2, r3, #16
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c84a:	2301      	movs	r3, #1
 800c84c:	75fb      	strb	r3, [r7, #23]
      break;
 800c84e:	e038      	b.n	800c8c2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c850:	7afb      	ldrb	r3, [r7, #11]
 800c852:	4619      	mov	r1, r3
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f7ff fd3d 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800c85a:	4603      	mov	r3, r0
 800c85c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d12d      	bne.n	800c8c0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c86a:	3303      	adds	r3, #3
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	461a      	mov	r2, r3
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c876:	3302      	adds	r3, #2
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	021b      	lsls	r3, r3, #8
 800c87c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c884:	3301      	adds	r3, #1
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c88a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	061b      	lsls	r3, r3, #24
 800c896:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8a2:	3307      	adds	r3, #7
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ae:	3306      	adds	r3, #6
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	809a      	strh	r2, [r3, #4]
      break;
 800c8c0:	bf00      	nop
  }

  return error;
 800c8c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3718      	adds	r7, #24
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c8da:	2302      	movs	r3, #2
 800c8dc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d002      	beq.n	800c8f8 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d03d      	beq.n	800c972 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c8f6:	e089      	b.n	800ca0c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	2224      	movs	r2, #36	; 0x24
 800c8fc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2280      	movs	r2, #128	; 0x80
 800c902:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	220a      	movs	r2, #10
 800c90a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	3363      	adds	r3, #99	; 0x63
 800c912:	220a      	movs	r2, #10
 800c914:	2100      	movs	r1, #0
 800c916:	4618      	mov	r0, r3
 800c918:	f007 fed6 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	2212      	movs	r2, #18
 800c920:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c924:	7afb      	ldrb	r3, [r7, #11]
 800c926:	015b      	lsls	r3, r3, #5
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	2224      	movs	r2, #36	; 0x24
 800c944:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	2202      	movs	r2, #2
 800c95c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f103 0210 	add.w	r2, r3, #16
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c96c:	2301      	movs	r3, #1
 800c96e:	75fb      	strb	r3, [r7, #23]
      break;
 800c970:	e04c      	b.n	800ca0c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c972:	7afb      	ldrb	r3, [r7, #11]
 800c974:	4619      	mov	r1, r3
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f7ff fcac 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800c97c:	4603      	mov	r3, r0
 800c97e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c980:	7dfb      	ldrb	r3, [r7, #23]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d141      	bne.n	800ca0a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c986:	2222      	movs	r2, #34	; 0x22
 800c988:	2100      	movs	r1, #0
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f007 fe9c 	bl	80146c8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	095b      	lsrs	r3, r3, #5
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	b25b      	sxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	da03      	bge.n	800c9ca <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	709a      	strb	r2, [r3, #2]
 800c9c8:	e002      	b.n	800c9d0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	1cd8      	adds	r0, r3, #3
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9da:	3308      	adds	r3, #8
 800c9dc:	2208      	movs	r2, #8
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f007 fe64 	bl	80146ac <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f103 000c 	add.w	r0, r3, #12
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9f0:	3310      	adds	r3, #16
 800c9f2:	2210      	movs	r2, #16
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f007 fe59 	bl	80146ac <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	331d      	adds	r3, #29
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800ca04:	3220      	adds	r2, #32
 800ca06:	6812      	ldr	r2, [r2, #0]
 800ca08:	601a      	str	r2, [r3, #0]
      break;
 800ca0a:	bf00      	nop
  }

  return error;
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b086      	sub	sp, #24
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	60f8      	str	r0, [r7, #12]
 800ca1e:	460b      	mov	r3, r1
 800ca20:	607a      	str	r2, [r7, #4]
 800ca22:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ca24:	2302      	movs	r3, #2
 800ca26:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d002      	beq.n	800ca42 <USBH_MSC_SCSI_RequestSense+0x2c>
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d03d      	beq.n	800cabc <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ca40:	e05d      	b.n	800cafe <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	220e      	movs	r2, #14
 800ca46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ca48:	693b      	ldr	r3, [r7, #16]
 800ca4a:	2280      	movs	r2, #128	; 0x80
 800ca4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	220a      	movs	r2, #10
 800ca54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	3363      	adds	r3, #99	; 0x63
 800ca5c:	2210      	movs	r2, #16
 800ca5e:	2100      	movs	r1, #0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f007 fe31 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	2203      	movs	r2, #3
 800ca6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ca6e:	7afb      	ldrb	r3, [r7, #11]
 800ca70:	015b      	lsls	r3, r3, #5
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	220e      	movs	r2, #14
 800ca8e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	2202      	movs	r2, #2
 800caa6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800caaa:	693b      	ldr	r3, [r7, #16]
 800caac:	f103 0210 	add.w	r2, r3, #16
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cab6:	2301      	movs	r3, #1
 800cab8:	75fb      	strb	r3, [r7, #23]
      break;
 800caba:	e020      	b.n	800cafe <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cabc:	7afb      	ldrb	r3, [r7, #11]
 800cabe:	4619      	mov	r1, r3
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7ff fc07 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800cac6:	4603      	mov	r3, r0
 800cac8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d115      	bne.n	800cafc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cad6:	3302      	adds	r3, #2
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	f003 030f 	and.w	r3, r3, #15
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caea:	7b1a      	ldrb	r2, [r3, #12]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caf6:	7b5a      	ldrb	r2, [r3, #13]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	709a      	strb	r2, [r3, #2]
      break;
 800cafc:	bf00      	nop
  }

  return error;
 800cafe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	460b      	mov	r3, r1
 800cb16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cb18:	2302      	movs	r3, #2
 800cb1a:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d002      	beq.n	800cb36 <USBH_MSC_SCSI_Write+0x2e>
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d047      	beq.n	800cbc4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cb34:	e04e      	b.n	800cbd4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6a3b      	ldr	r3, [r7, #32]
 800cb40:	fb03 f202 	mul.w	r2, r3, r2
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	220a      	movs	r2, #10
 800cb54:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	3363      	adds	r3, #99	; 0x63
 800cb5c:	2210      	movs	r2, #16
 800cb5e:	2100      	movs	r1, #0
 800cb60:	4618      	mov	r0, r3
 800cb62:	f007 fdb1 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	222a      	movs	r2, #42	; 0x2a
 800cb6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cb6e:	79fa      	ldrb	r2, [r7, #7]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cb76:	79ba      	ldrb	r2, [r7, #6]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cb7e:	797a      	ldrb	r2, [r7, #5]
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cb86:	1d3b      	adds	r3, r7, #4
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cb90:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cb9a:	f107 0320 	add.w	r3, r7, #32
 800cb9e:	781a      	ldrb	r2, [r3, #0]
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2202      	movs	r2, #2
 800cbb2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbc2:	e007      	b.n	800cbd4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cbc4:	7afb      	ldrb	r3, [r7, #11]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f7ff fb83 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	75fb      	strb	r3, [r7, #23]
      break;
 800cbd2:	bf00      	nop
  }

  return error;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b086      	sub	sp, #24
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	60f8      	str	r0, [r7, #12]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
 800cbea:	460b      	mov	r3, r1
 800cbec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800cbee:	2302      	movs	r3, #2
 800cbf0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d002      	beq.n	800cc0c <USBH_MSC_SCSI_Read+0x2e>
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d047      	beq.n	800cc9a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800cc0a:	e04e      	b.n	800ccaa <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800cc12:	461a      	mov	r2, r3
 800cc14:	6a3b      	ldr	r3, [r7, #32]
 800cc16:	fb03 f202 	mul.w	r2, r3, r2
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	2280      	movs	r2, #128	; 0x80
 800cc22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	220a      	movs	r2, #10
 800cc2a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	3363      	adds	r3, #99	; 0x63
 800cc32:	2210      	movs	r2, #16
 800cc34:	2100      	movs	r1, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f007 fd46 	bl	80146c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	2228      	movs	r2, #40	; 0x28
 800cc40:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800cc44:	79fa      	ldrb	r2, [r7, #7]
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800cc4c:	79ba      	ldrb	r2, [r7, #6]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800cc54:	797a      	ldrb	r2, [r7, #5]
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800cc5c:	1d3b      	adds	r3, r7, #4
 800cc5e:	781a      	ldrb	r2, [r3, #0]
 800cc60:	693b      	ldr	r3, [r7, #16]
 800cc62:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800cc66:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800cc70:	f107 0320 	add.w	r3, r7, #32
 800cc74:	781a      	ldrb	r2, [r3, #0]
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	2202      	movs	r2, #2
 800cc88:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800cc94:	2301      	movs	r3, #1
 800cc96:	75fb      	strb	r3, [r7, #23]
      break;
 800cc98:	e007      	b.n	800ccaa <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f7ff fb18 	bl	800c2d4 <USBH_MSC_BOT_Process>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
      break;
 800cca8:	bf00      	nop
  }

  return error;
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	e029      	b.n	800cd20 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	79fa      	ldrb	r2, [r7, #7]
 800ccd0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f000 f81f 	bl	800cd28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	68ba      	ldr	r2, [r7, #8]
 800cd14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f004 fee3 	bl	8011ae4 <USBH_LL_Init>

  return USBH_OK;
 800cd1e:	2300      	movs	r3, #0
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cd30:	2300      	movs	r3, #0
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd34:	2300      	movs	r3, #0
 800cd36:	60fb      	str	r3, [r7, #12]
 800cd38:	e009      	b.n	800cd4e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	33e0      	adds	r3, #224	; 0xe0
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	4413      	add	r3, r2
 800cd44:	2200      	movs	r2, #0
 800cd46:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	60fb      	str	r3, [r7, #12]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b0e      	cmp	r3, #14
 800cd52:	d9f2      	bls.n	800cd3a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd54:	2300      	movs	r3, #0
 800cd56:	60fb      	str	r3, [r7, #12]
 800cd58:	e009      	b.n	800cd6e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd74:	d3f1      	bcc.n	800cd5a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2201      	movs	r2, #1
 800cd86:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2240      	movs	r2, #64	; 0x40
 800cd9a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d016      	beq.n	800ce12 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10e      	bne.n	800ce0c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cdf4:	1c59      	adds	r1, r3, #1
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	33de      	adds	r3, #222	; 0xde
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]
 800ce0a:	e004      	b.n	800ce16 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	73fb      	strb	r3, [r7, #15]
 800ce10:	e001      	b.n	800ce16 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ce12:	2302      	movs	r3, #2
 800ce14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3714      	adds	r7, #20
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800ce3a:	78fa      	ldrb	r2, [r7, #3]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d204      	bcs.n	800ce4a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	78fa      	ldrb	r2, [r7, #3]
 800ce44:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800ce48:	e001      	b.n	800ce4e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ce4a:	2302      	movs	r3, #2
 800ce4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr

0800ce5c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	4608      	mov	r0, r1
 800ce66:	4611      	mov	r1, r2
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	70fb      	strb	r3, [r7, #3]
 800ce6e:	460b      	mov	r3, r1
 800ce70:	70bb      	strb	r3, [r7, #2]
 800ce72:	4613      	mov	r3, r2
 800ce74:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ce84:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ce86:	e025      	b.n	800ced4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	221a      	movs	r2, #26
 800ce8c:	fb02 f303 	mul.w	r3, r2, r3
 800ce90:	3308      	adds	r3, #8
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	3302      	adds	r3, #2
 800ce98:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	795b      	ldrb	r3, [r3, #5]
 800ce9e:	78fa      	ldrb	r2, [r7, #3]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d002      	beq.n	800ceaa <USBH_FindInterface+0x4e>
 800cea4:	78fb      	ldrb	r3, [r7, #3]
 800cea6:	2bff      	cmp	r3, #255	; 0xff
 800cea8:	d111      	bne.n	800cece <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ceae:	78ba      	ldrb	r2, [r7, #2]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d002      	beq.n	800ceba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ceb4:	78bb      	ldrb	r3, [r7, #2]
 800ceb6:	2bff      	cmp	r3, #255	; 0xff
 800ceb8:	d109      	bne.n	800cece <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cebe:	787a      	ldrb	r2, [r7, #1]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d002      	beq.n	800ceca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cec4:	787b      	ldrb	r3, [r7, #1]
 800cec6:	2bff      	cmp	r3, #255	; 0xff
 800cec8:	d101      	bne.n	800cece <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	e006      	b.n	800cedc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	3301      	adds	r3, #1
 800ced2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ced4:	7dfb      	ldrb	r3, [r7, #23]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d9d6      	bls.n	800ce88 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ceda:	23ff      	movs	r3, #255	; 0xff
}
 800cedc:	4618      	mov	r0, r3
 800cede:	371c      	adds	r7, #28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f004 fe3d 	bl	8011b70 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cef6:	2101      	movs	r1, #1
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f004 ff56 	bl	8011daa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af04      	add	r7, sp, #16
 800cf0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cf10:	2302      	movs	r3, #2
 800cf12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cf14:	2300      	movs	r3, #0
 800cf16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d102      	bne.n	800cf2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2203      	movs	r2, #3
 800cf28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b0b      	cmp	r3, #11
 800cf32:	f200 81b3 	bhi.w	800d29c <USBH_Process+0x394>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <USBH_Process+0x34>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf6d 	.word	0x0800cf6d
 800cf40:	0800cf9f 	.word	0x0800cf9f
 800cf44:	0800d007 	.word	0x0800d007
 800cf48:	0800d237 	.word	0x0800d237
 800cf4c:	0800d29d 	.word	0x0800d29d
 800cf50:	0800d0ab 	.word	0x0800d0ab
 800cf54:	0800d1dd 	.word	0x0800d1dd
 800cf58:	0800d0e1 	.word	0x0800d0e1
 800cf5c:	0800d101 	.word	0x0800d101
 800cf60:	0800d121 	.word	0x0800d121
 800cf64:	0800d14f 	.word	0x0800d14f
 800cf68:	0800d21f 	.word	0x0800d21f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 8193 	beq.w	800d2a0 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cf80:	20c8      	movs	r0, #200	; 0xc8
 800cf82:	f004 ff8f 	bl	8011ea4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f004 fe4f 	bl	8011c2a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cf9c:	e180      	b.n	800d2a0 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d107      	bne.n	800cfb8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800cfb6:	e182      	b.n	800d2be <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cfbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfc2:	d914      	bls.n	800cfee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cfca:	3301      	adds	r3, #1
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d903      	bls.n	800cfe6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	220d      	movs	r2, #13
 800cfe2:	701a      	strb	r2, [r3, #0]
      break;
 800cfe4:	e16b      	b.n	800d2be <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	701a      	strb	r2, [r3, #0]
      break;
 800cfec:	e167      	b.n	800d2be <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cff4:	f103 020a 	add.w	r2, r3, #10
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800cffe:	200a      	movs	r0, #10
 800d000:	f004 ff50 	bl	8011ea4 <USBH_Delay>
      break;
 800d004:	e15b      	b.n	800d2be <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d005      	beq.n	800d01c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d016:	2104      	movs	r1, #4
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d01c:	2064      	movs	r0, #100	; 0x64
 800d01e:	f004 ff41 	bl	8011ea4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f004 fdda 	bl	8011bdc <USBH_LL_GetSpeed>
 800d028:	4603      	mov	r3, r0
 800d02a:	461a      	mov	r2, r3
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2205      	movs	r2, #5
 800d036:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d038:	2100      	movs	r1, #0
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f001 f92f 	bl	800e29e <USBH_AllocPipe>
 800d040:	4603      	mov	r3, r0
 800d042:	461a      	mov	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d048:	2180      	movs	r1, #128	; 0x80
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f001 f927 	bl	800e29e <USBH_AllocPipe>
 800d050:	4603      	mov	r3, r0
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7919      	ldrb	r1, [r3, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d06c:	b292      	uxth	r2, r2
 800d06e:	9202      	str	r2, [sp, #8]
 800d070:	2200      	movs	r2, #0
 800d072:	9201      	str	r2, [sp, #4]
 800d074:	9300      	str	r3, [sp, #0]
 800d076:	4603      	mov	r3, r0
 800d078:	2280      	movs	r2, #128	; 0x80
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 f8e0 	bl	800e240 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7959      	ldrb	r1, [r3, #5]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d094:	b292      	uxth	r2, r2
 800d096:	9202      	str	r2, [sp, #8]
 800d098:	2200      	movs	r2, #0
 800d09a:	9201      	str	r2, [sp, #4]
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	f001 f8cc 	bl	800e240 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d0a8:	e109      	b.n	800d2be <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 f90c 	bl	800d2c8 <USBH_HandleEnum>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f040 80f3 	bne.w	800d2a4 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d0cc:	2b01      	cmp	r3, #1
 800d0ce:	d103      	bne.n	800d0d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2208      	movs	r2, #8
 800d0d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d0d6:	e0e5      	b.n	800d2a4 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2207      	movs	r2, #7
 800d0dc:	701a      	strb	r2, [r3, #0]
      break;
 800d0de:	e0e1      	b.n	800d2a4 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	f000 80de 	beq.w	800d2a8 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800d0fe:	e0d3      	b.n	800d2a8 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d106:	b29b      	uxth	r3, r3
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 fc20 	bl	800d950 <USBH_SetCfg>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	f040 80ca 	bne.w	800d2ac <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2209      	movs	r2, #9
 800d11c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d11e:	e0c5      	b.n	800d2ac <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00b      	beq.n	800d146 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d12e:	2101      	movs	r1, #1
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fc30 	bl	800d996 <USBH_SetFeature>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f040 80b9 	bne.w	800d2b0 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	220a      	movs	r2, #10
 800d142:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d144:	e0b4      	b.n	800d2b0 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	220a      	movs	r2, #10
 800d14a:	701a      	strb	r2, [r3, #0]
      break;
 800d14c:	e0b0      	b.n	800d2b0 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d154:	2b00      	cmp	r3, #0
 800d156:	f000 80ad 	beq.w	800d2b4 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d162:	2300      	movs	r3, #0
 800d164:	73fb      	strb	r3, [r7, #15]
 800d166:	e016      	b.n	800d196 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d168:	7bfa      	ldrb	r2, [r7, #15]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	32de      	adds	r2, #222	; 0xde
 800d16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d172:	791a      	ldrb	r2, [r3, #4]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d108      	bne.n	800d190 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d17e:	7bfa      	ldrb	r2, [r7, #15]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	32de      	adds	r2, #222	; 0xde
 800d184:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d18e:	e005      	b.n	800d19c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d190:	7bfb      	ldrb	r3, [r7, #15]
 800d192:	3301      	adds	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
 800d196:	7bfb      	ldrb	r3, [r7, #15]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0e5      	beq.n	800d168 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d016      	beq.n	800d1d4 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1ac:	689b      	ldr	r3, [r3, #8]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	4798      	blx	r3
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d109      	bne.n	800d1cc <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2206      	movs	r2, #6
 800d1bc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d1c4:	2103      	movs	r1, #3
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d1ca:	e073      	b.n	800d2b4 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	220d      	movs	r2, #13
 800d1d0:	701a      	strb	r2, [r3, #0]
      break;
 800d1d2:	e06f      	b.n	800d2b4 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	220d      	movs	r2, #13
 800d1d8:	701a      	strb	r2, [r3, #0]
      break;
 800d1da:	e06b      	b.n	800d2b4 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d017      	beq.n	800d216 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	4798      	blx	r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d1f6:	7bbb      	ldrb	r3, [r7, #14]
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d103      	bne.n	800d206 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	220b      	movs	r2, #11
 800d202:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d204:	e058      	b.n	800d2b8 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d154      	bne.n	800d2b8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	220d      	movs	r2, #13
 800d212:	701a      	strb	r2, [r3, #0]
      break;
 800d214:	e050      	b.n	800d2b8 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	220d      	movs	r2, #13
 800d21a:	701a      	strb	r2, [r3, #0]
      break;
 800d21c:	e04c      	b.n	800d2b8 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d049      	beq.n	800d2bc <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
      }
      break;
 800d234:	e042      	b.n	800d2bc <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2200      	movs	r2, #0
 800d23a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7ff fd72 	bl	800cd28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d009      	beq.n	800d262 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2200      	movs	r2, #0
 800d25e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d272:	2105      	movs	r1, #5
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b01      	cmp	r3, #1
 800d282:	d107      	bne.n	800d294 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2200      	movs	r2, #0
 800d288:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff fe2b 	bl	800cee8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800d292:	e014      	b.n	800d2be <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f004 fc6b 	bl	8011b70 <USBH_LL_Start>
      break;
 800d29a:	e010      	b.n	800d2be <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d29c:	bf00      	nop
 800d29e:	e00e      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2a0:	bf00      	nop
 800d2a2:	e00c      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2a4:	bf00      	nop
 800d2a6:	e00a      	b.n	800d2be <USBH_Process+0x3b6>
    break;
 800d2a8:	bf00      	nop
 800d2aa:	e008      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2ac:	bf00      	nop
 800d2ae:	e006      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2b0:	bf00      	nop
 800d2b2:	e004      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2b4:	bf00      	nop
 800d2b6:	e002      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2b8:	bf00      	nop
 800d2ba:	e000      	b.n	800d2be <USBH_Process+0x3b6>
      break;
 800d2bc:	bf00      	nop
  }
  return USBH_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b088      	sub	sp, #32
 800d2cc:	af04      	add	r7, sp, #16
 800d2ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	785b      	ldrb	r3, [r3, #1]
 800d2dc:	2b07      	cmp	r3, #7
 800d2de:	f200 81c1 	bhi.w	800d664 <USBH_HandleEnum+0x39c>
 800d2e2:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <USBH_HandleEnum+0x20>)
 800d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e8:	0800d309 	.word	0x0800d309
 800d2ec:	0800d3c7 	.word	0x0800d3c7
 800d2f0:	0800d431 	.word	0x0800d431
 800d2f4:	0800d4bf 	.word	0x0800d4bf
 800d2f8:	0800d529 	.word	0x0800d529
 800d2fc:	0800d599 	.word	0x0800d599
 800d300:	0800d5df 	.word	0x0800d5df
 800d304:	0800d625 	.word	0x0800d625
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d308:	2108      	movs	r1, #8
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fa50 	bl	800d7b0 <USBH_Get_DevDesc>
 800d310:	4603      	mov	r3, r0
 800d312:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d314:	7bbb      	ldrb	r3, [r7, #14]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d130      	bne.n	800d37c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7919      	ldrb	r1, [r3, #4]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d33e:	b292      	uxth	r2, r2
 800d340:	9202      	str	r2, [sp, #8]
 800d342:	2200      	movs	r2, #0
 800d344:	9201      	str	r2, [sp, #4]
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	4603      	mov	r3, r0
 800d34a:	2280      	movs	r2, #128	; 0x80
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 ff77 	bl	800e240 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	7959      	ldrb	r1, [r3, #5]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d366:	b292      	uxth	r2, r2
 800d368:	9202      	str	r2, [sp, #8]
 800d36a:	2200      	movs	r2, #0
 800d36c:	9201      	str	r2, [sp, #4]
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4603      	mov	r3, r0
 800d372:	2200      	movs	r2, #0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 ff63 	bl	800e240 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d37a:	e175      	b.n	800d668 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d37c:	7bbb      	ldrb	r3, [r7, #14]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	f040 8172 	bne.w	800d668 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d38a:	3301      	adds	r3, #1
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d903      	bls.n	800d3a6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	220d      	movs	r2, #13
 800d3a2:	701a      	strb	r2, [r3, #0]
      break;
 800d3a4:	e160      	b.n	800d668 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	795b      	ldrb	r3, [r3, #5]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 ff97 	bl	800e2e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	791b      	ldrb	r3, [r3, #4]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 ff91 	bl	800e2e0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	701a      	strb	r2, [r3, #0]
      break;
 800d3c4:	e150      	b.n	800d668 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d3c6:	2112      	movs	r1, #18
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 f9f1 	bl	800d7b0 <USBH_Get_DevDesc>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d103      	bne.n	800d3e0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2202      	movs	r2, #2
 800d3dc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3de:	e145      	b.n	800d66c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
 800d3e2:	2b03      	cmp	r3, #3
 800d3e4:	f040 8142 	bne.w	800d66c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d903      	bls.n	800d40a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	220d      	movs	r2, #13
 800d406:	701a      	strb	r2, [r3, #0]
      break;
 800d408:	e130      	b.n	800d66c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	795b      	ldrb	r3, [r3, #5]
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 ff65 	bl	800e2e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	791b      	ldrb	r3, [r3, #4]
 800d41a:	4619      	mov	r1, r3
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 ff5f 	bl	800e2e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2200      	movs	r2, #0
 800d42c:	701a      	strb	r2, [r3, #0]
      break;
 800d42e:	e11d      	b.n	800d66c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d430:	2101      	movs	r1, #1
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fa68 	bl	800d908 <USBH_SetAddress>
 800d438:	4603      	mov	r3, r0
 800d43a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d43c:	7bbb      	ldrb	r3, [r7, #14]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d132      	bne.n	800d4a8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d442:	2002      	movs	r0, #2
 800d444:	f004 fd2e 	bl	8011ea4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2203      	movs	r2, #3
 800d454:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7919      	ldrb	r1, [r3, #4]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d46a:	b292      	uxth	r2, r2
 800d46c:	9202      	str	r2, [sp, #8]
 800d46e:	2200      	movs	r2, #0
 800d470:	9201      	str	r2, [sp, #4]
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	4603      	mov	r3, r0
 800d476:	2280      	movs	r2, #128	; 0x80
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f000 fee1 	bl	800e240 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	7959      	ldrb	r1, [r3, #5]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d48e:	687a      	ldr	r2, [r7, #4]
 800d490:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d492:	b292      	uxth	r2, r2
 800d494:	9202      	str	r2, [sp, #8]
 800d496:	2200      	movs	r2, #0
 800d498:	9201      	str	r2, [sp, #4]
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	4603      	mov	r3, r0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fecd 	bl	800e240 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d4a6:	e0e3      	b.n	800d670 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4a8:	7bbb      	ldrb	r3, [r7, #14]
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	f040 80e0 	bne.w	800d670 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	220d      	movs	r2, #13
 800d4b4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	705a      	strb	r2, [r3, #1]
      break;
 800d4bc:	e0d8      	b.n	800d670 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d4be:	2109      	movs	r1, #9
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f99d 	bl	800d800 <USBH_Get_CfgDesc>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d103      	bne.n	800d4d8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2204      	movs	r2, #4
 800d4d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d4d6:	e0cd      	b.n	800d674 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d4d8:	7bbb      	ldrb	r3, [r7, #14]
 800d4da:	2b03      	cmp	r3, #3
 800d4dc:	f040 80ca 	bne.w	800d674 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	b2da      	uxtb	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	d903      	bls.n	800d502 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	220d      	movs	r2, #13
 800d4fe:	701a      	strb	r2, [r3, #0]
      break;
 800d500:	e0b8      	b.n	800d674 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	795b      	ldrb	r3, [r3, #5]
 800d506:	4619      	mov	r1, r3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f000 fee9 	bl	800e2e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	791b      	ldrb	r3, [r3, #4]
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fee3 	bl	800e2e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	701a      	strb	r2, [r3, #0]
      break;
 800d526:	e0a5      	b.n	800d674 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d52e:	4619      	mov	r1, r3
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 f965 	bl	800d800 <USBH_Get_CfgDesc>
 800d536:	4603      	mov	r3, r0
 800d538:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d53a:	7bbb      	ldrb	r3, [r7, #14]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d103      	bne.n	800d548 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2205      	movs	r2, #5
 800d544:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d546:	e097      	b.n	800d678 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d548:	7bbb      	ldrb	r3, [r7, #14]
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	f040 8094 	bne.w	800d678 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d556:	3301      	adds	r3, #1
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d566:	2b03      	cmp	r3, #3
 800d568:	d903      	bls.n	800d572 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	220d      	movs	r2, #13
 800d56e:	701a      	strb	r2, [r3, #0]
      break;
 800d570:	e082      	b.n	800d678 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	795b      	ldrb	r3, [r3, #5]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 feb1 	bl	800e2e0 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	791b      	ldrb	r3, [r3, #4]
 800d582:	4619      	mov	r1, r3
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 feab 	bl	800e2e0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	701a      	strb	r2, [r3, #0]
      break;
 800d596:	e06f      	b.n	800d678 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d019      	beq.n	800d5d6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d5ae:	23ff      	movs	r3, #255	; 0xff
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f949 	bl	800d848 <USBH_Get_StringDesc>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d5ba:	7bbb      	ldrb	r3, [r7, #14]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d103      	bne.n	800d5c8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2206      	movs	r2, #6
 800d5c4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d5c6:	e059      	b.n	800d67c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5c8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d156      	bne.n	800d67c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2206      	movs	r2, #6
 800d5d2:	705a      	strb	r2, [r3, #1]
      break;
 800d5d4:	e052      	b.n	800d67c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2206      	movs	r2, #6
 800d5da:	705a      	strb	r2, [r3, #1]
      break;
 800d5dc:	e04e      	b.n	800d67c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d019      	beq.n	800d61c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d5f4:	23ff      	movs	r3, #255	; 0xff
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f926 	bl	800d848 <USBH_Get_StringDesc>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d103      	bne.n	800d60e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2207      	movs	r2, #7
 800d60a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d60c:	e038      	b.n	800d680 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d60e:	7bbb      	ldrb	r3, [r7, #14]
 800d610:	2b03      	cmp	r3, #3
 800d612:	d135      	bne.n	800d680 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2207      	movs	r2, #7
 800d618:	705a      	strb	r2, [r3, #1]
      break;
 800d61a:	e031      	b.n	800d680 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2207      	movs	r2, #7
 800d620:	705a      	strb	r2, [r3, #1]
      break;
 800d622:	e02d      	b.n	800d680 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d017      	beq.n	800d65e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d63a:	23ff      	movs	r3, #255	; 0xff
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f903 	bl	800d848 <USBH_Get_StringDesc>
 800d642:	4603      	mov	r3, r0
 800d644:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d646:	7bbb      	ldrb	r3, [r7, #14]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d102      	bne.n	800d652 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d64c:	2300      	movs	r3, #0
 800d64e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d650:	e018      	b.n	800d684 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b03      	cmp	r3, #3
 800d656:	d115      	bne.n	800d684 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d658:	2300      	movs	r3, #0
 800d65a:	73fb      	strb	r3, [r7, #15]
      break;
 800d65c:	e012      	b.n	800d684 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]
      break;
 800d662:	e00f      	b.n	800d684 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d664:	bf00      	nop
 800d666:	e00e      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d668:	bf00      	nop
 800d66a:	e00c      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d66c:	bf00      	nop
 800d66e:	e00a      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d670:	bf00      	nop
 800d672:	e008      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d674:	bf00      	nop
 800d676:	e006      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d678:	bf00      	nop
 800d67a:	e004      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d67c:	bf00      	nop
 800d67e:	e002      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d680:	bf00      	nop
 800d682:	e000      	b.n	800d686 <USBH_HandleEnum+0x3be>
      break;
 800d684:	bf00      	nop
  }
  return Status;
 800d686:	7bfb      	ldrb	r3, [r7, #15]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	683a      	ldr	r2, [r7, #0]
 800d69e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d6a2:	bf00      	nop
 800d6a4:	370c      	adds	r7, #12
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ac:	4770      	bx	lr

0800d6ae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 f804 	bl	800d6d2 <USBH_HandleSof>
}
 800d6ca:	bf00      	nop
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d6d2:	b580      	push	{r7, lr}
 800d6d4:	b082      	sub	sp, #8
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	2b0b      	cmp	r3, #11
 800d6e2:	d10a      	bne.n	800d6fa <USBH_HandleSof+0x28>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d005      	beq.n	800d6fa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	4798      	blx	r3
  }
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d702:	b480      	push	{r7}
 800d704:	b083      	sub	sp, #12
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800d712:	bf00      	nop
}
 800d714:	370c      	adds	r7, #12
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr

0800d71e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d71e:	b480      	push	{r7}
 800d720:	b083      	sub	sp, #12
 800d722:	af00      	add	r7, sp, #0
 800d724:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d72e:	bf00      	nop
}
 800d730:	370c      	adds	r7, #12
 800d732:	46bd      	mov	sp, r7
 800d734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d738:	4770      	bx	lr

0800d73a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d73a:	b480      	push	{r7}
 800d73c:	b083      	sub	sp, #12
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d75a:	2300      	movs	r3, #0
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f004 fa0c 	bl	8011ba6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	791b      	ldrb	r3, [r3, #4]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fda3 	bl	800e2e0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	795b      	ldrb	r3, [r3, #5]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fd9d 	bl	800e2e0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af02      	add	r7, sp, #8
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	4613      	mov	r3, r2
 800d7ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f864 	bl	800d89e <USBH_GetDescriptor>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	73fb      	strb	r3, [r7, #15]
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d10a      	bne.n	800d7f6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d7ec:	78fa      	ldrb	r2, [r7, #3]
 800d7ee:	b292      	uxth	r2, r2
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	f000 f918 	bl	800da26 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3710      	adds	r7, #16
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af02      	add	r7, sp, #8
 800d806:	6078      	str	r0, [r7, #4]
 800d808:	460b      	mov	r3, r1
 800d80a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	331c      	adds	r3, #28
 800d810:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d812:	887b      	ldrh	r3, [r7, #2]
 800d814:	9300      	str	r3, [sp, #0]
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d81c:	2100      	movs	r1, #0
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f83d 	bl	800d89e <USBH_GetDescriptor>
 800d824:	4603      	mov	r3, r0
 800d826:	72fb      	strb	r3, [r7, #11]
 800d828:	7afb      	ldrb	r3, [r7, #11]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d107      	bne.n	800d83e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d834:	887a      	ldrh	r2, [r7, #2]
 800d836:	68f9      	ldr	r1, [r7, #12]
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 f964 	bl	800db06 <USBH_ParseCfgDesc>
  }

  return status;
 800d83e:	7afb      	ldrb	r3, [r7, #11]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af02      	add	r7, sp, #8
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	607a      	str	r2, [r7, #4]
 800d852:	461a      	mov	r2, r3
 800d854:	460b      	mov	r3, r1
 800d856:	72fb      	strb	r3, [r7, #11]
 800d858:	4613      	mov	r3, r2
 800d85a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d85c:	7afb      	ldrb	r3, [r7, #11]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d864:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d86c:	893b      	ldrh	r3, [r7, #8]
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	460b      	mov	r3, r1
 800d872:	2100      	movs	r1, #0
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f812 	bl	800d89e <USBH_GetDescriptor>
 800d87a:	4603      	mov	r3, r0
 800d87c:	75fb      	strb	r3, [r7, #23]
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d107      	bne.n	800d894 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d88a:	893a      	ldrh	r2, [r7, #8]
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fa37 	bl	800dd02 <USBH_ParseStringDesc>
  }

  return status;
 800d894:	7dfb      	ldrb	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b084      	sub	sp, #16
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	60f8      	str	r0, [r7, #12]
 800d8a6:	607b      	str	r3, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	72fb      	strb	r3, [r7, #11]
 800d8ac:	4613      	mov	r3, r2
 800d8ae:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	789b      	ldrb	r3, [r3, #2]
 800d8b4:	2b01      	cmp	r3, #1
 800d8b6:	d11c      	bne.n	800d8f2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d8b8:	7afb      	ldrb	r3, [r7, #11]
 800d8ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2206      	movs	r2, #6
 800d8c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	893a      	ldrh	r2, [r7, #8]
 800d8ce:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d8d0:	893b      	ldrh	r3, [r7, #8]
 800d8d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d8d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8da:	d104      	bne.n	800d8e6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f240 4209 	movw	r2, #1033	; 0x409
 800d8e2:	829a      	strh	r2, [r3, #20]
 800d8e4:	e002      	b.n	800d8ec <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	8b3a      	ldrh	r2, [r7, #24]
 800d8f0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d8f2:	8b3b      	ldrh	r3, [r7, #24]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	6879      	ldr	r1, [r7, #4]
 800d8f8:	68f8      	ldr	r0, [r7, #12]
 800d8fa:	f000 fa50 	bl	800dd9e <USBH_CtlReq>
 800d8fe:	4603      	mov	r3, r0
}
 800d900:	4618      	mov	r0, r3
 800d902:	3710      	adds	r7, #16
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	460b      	mov	r3, r1
 800d912:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	789b      	ldrb	r3, [r3, #2]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d10f      	bne.n	800d93c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2205      	movs	r2, #5
 800d926:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d928:	78fb      	ldrb	r3, [r7, #3]
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d93c:	2200      	movs	r2, #0
 800d93e:	2100      	movs	r1, #0
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fa2c 	bl	800dd9e <USBH_CtlReq>
 800d946:	4603      	mov	r3, r0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	789b      	ldrb	r3, [r3, #2]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d10e      	bne.n	800d982 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2200      	movs	r2, #0
 800d968:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2209      	movs	r2, #9
 800d96e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	887a      	ldrh	r2, [r7, #2]
 800d974:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d982:	2200      	movs	r2, #0
 800d984:	2100      	movs	r1, #0
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 fa09 	bl	800dd9e <USBH_CtlReq>
 800d98c:	4603      	mov	r3, r0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b082      	sub	sp, #8
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	789b      	ldrb	r3, [r3, #2]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d10f      	bne.n	800d9ca <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2203      	movs	r2, #3
 800d9b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d9b6:	78fb      	ldrb	r3, [r7, #3]
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f9e5 	bl	800dd9e <USBH_CtlReq>
 800d9d4:	4603      	mov	r3, r0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	789b      	ldrb	r3, [r3, #2]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d10f      	bne.n	800da12 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800da04:	78fb      	ldrb	r3, [r7, #3]
 800da06:	b29a      	uxth	r2, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2200      	movs	r2, #0
 800da10:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800da12:	2200      	movs	r2, #0
 800da14:	2100      	movs	r1, #0
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 f9c1 	bl	800dd9e <USBH_CtlReq>
 800da1c:	4603      	mov	r3, r0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800da26:	b480      	push	{r7}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	60f8      	str	r0, [r7, #12]
 800da2e:	60b9      	str	r1, [r7, #8]
 800da30:	4613      	mov	r3, r2
 800da32:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	785a      	ldrb	r2, [r3, #1]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	3302      	adds	r3, #2
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	3303      	adds	r3, #3
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	b29b      	uxth	r3, r3
 800da54:	021b      	lsls	r3, r3, #8
 800da56:	b29b      	uxth	r3, r3
 800da58:	4313      	orrs	r3, r2
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	791a      	ldrb	r2, [r3, #4]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	795a      	ldrb	r2, [r3, #5]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	799a      	ldrb	r2, [r3, #6]
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	79da      	ldrb	r2, [r3, #7]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800da80:	88fb      	ldrh	r3, [r7, #6]
 800da82:	2b08      	cmp	r3, #8
 800da84:	d939      	bls.n	800dafa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	3308      	adds	r3, #8
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	3309      	adds	r3, #9
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	b29b      	uxth	r3, r3
 800da96:	021b      	lsls	r3, r3, #8
 800da98:	b29b      	uxth	r3, r3
 800da9a:	4313      	orrs	r3, r2
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	330a      	adds	r3, #10
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	330b      	adds	r3, #11
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	4313      	orrs	r3, r2
 800dab8:	b29a      	uxth	r2, r3
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	330c      	adds	r3, #12
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	330d      	adds	r3, #13
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	021b      	lsls	r3, r3, #8
 800dad0:	b29b      	uxth	r3, r3
 800dad2:	4313      	orrs	r3, r2
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	7b9a      	ldrb	r2, [r3, #14]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	7bda      	ldrb	r2, [r3, #15]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	7c1a      	ldrb	r2, [r3, #16]
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	7c5a      	ldrb	r2, [r3, #17]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	745a      	strb	r2, [r3, #17]
  }
}
 800dafa:	bf00      	nop
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr

0800db06 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b08a      	sub	sp, #40	; 0x28
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	60f8      	str	r0, [r7, #12]
 800db0e:	60b9      	str	r1, [r7, #8]
 800db10:	4613      	mov	r3, r2
 800db12:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800db1e:	2300      	movs	r3, #0
 800db20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	781a      	ldrb	r2, [r3, #0]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	785a      	ldrb	r2, [r3, #1]
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	3302      	adds	r3, #2
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b29a      	uxth	r2, r3
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	3303      	adds	r3, #3
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	b29b      	uxth	r3, r3
 800db48:	021b      	lsls	r3, r3, #8
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b29a      	uxth	r2, r3
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	791a      	ldrb	r2, [r3, #4]
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	795a      	ldrb	r2, [r3, #5]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	799a      	ldrb	r2, [r3, #6]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	79da      	ldrb	r2, [r3, #7]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	7a1a      	ldrb	r2, [r3, #8]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800db7c:	88fb      	ldrh	r3, [r7, #6]
 800db7e:	2b09      	cmp	r3, #9
 800db80:	d95f      	bls.n	800dc42 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800db82:	2309      	movs	r3, #9
 800db84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800db86:	2300      	movs	r3, #0
 800db88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800db8a:	e051      	b.n	800dc30 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800db8c:	f107 0316 	add.w	r3, r7, #22
 800db90:	4619      	mov	r1, r3
 800db92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db94:	f000 f8e8 	bl	800dd68 <USBH_GetNextDesc>
 800db98:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	785b      	ldrb	r3, [r3, #1]
 800db9e:	2b04      	cmp	r3, #4
 800dba0:	d146      	bne.n	800dc30 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800dba2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dba6:	221a      	movs	r2, #26
 800dba8:	fb02 f303 	mul.w	r3, r2, r3
 800dbac:	3308      	adds	r3, #8
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	3302      	adds	r3, #2
 800dbb4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dbb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dbb8:	69f8      	ldr	r0, [r7, #28]
 800dbba:	f000 f846 	bl	800dc4a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dbc8:	e022      	b.n	800dc10 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dbca:	f107 0316 	add.w	r3, r7, #22
 800dbce:	4619      	mov	r1, r3
 800dbd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbd2:	f000 f8c9 	bl	800dd68 <USBH_GetNextDesc>
 800dbd6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	785b      	ldrb	r3, [r3, #1]
 800dbdc:	2b05      	cmp	r3, #5
 800dbde:	d117      	bne.n	800dc10 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dbe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dbe4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dbe8:	3201      	adds	r2, #1
 800dbea:	00d2      	lsls	r2, r2, #3
 800dbec:	211a      	movs	r1, #26
 800dbee:	fb01 f303 	mul.w	r3, r1, r3
 800dbf2:	4413      	add	r3, r2
 800dbf4:	3308      	adds	r3, #8
 800dbf6:	68fa      	ldr	r2, [r7, #12]
 800dbf8:	4413      	add	r3, r2
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800dbfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc00:	69b8      	ldr	r0, [r7, #24]
 800dc02:	f000 f851 	bl	800dca8 <USBH_ParseEPDesc>
            ep_ix++;
 800dc06:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc0a:	3301      	adds	r3, #1
 800dc0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	791b      	ldrb	r3, [r3, #4]
 800dc14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d204      	bcs.n	800dc26 <USBH_ParseCfgDesc+0x120>
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	885a      	ldrh	r2, [r3, #2]
 800dc20:	8afb      	ldrh	r3, [r7, #22]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d8d1      	bhi.n	800dbca <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800dc26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dc30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d804      	bhi.n	800dc42 <USBH_ParseCfgDesc+0x13c>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	885a      	ldrh	r2, [r3, #2]
 800dc3c:	8afb      	ldrh	r3, [r7, #22]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d8a4      	bhi.n	800db8c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800dc42:	bf00      	nop
 800dc44:	3728      	adds	r7, #40	; 0x28
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781a      	ldrb	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	785a      	ldrb	r2, [r3, #1]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	789a      	ldrb	r2, [r3, #2]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	78da      	ldrb	r2, [r3, #3]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	791a      	ldrb	r2, [r3, #4]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	795a      	ldrb	r2, [r3, #5]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	799a      	ldrb	r2, [r3, #6]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	79da      	ldrb	r2, [r3, #7]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	7a1a      	ldrb	r2, [r3, #8]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	721a      	strb	r2, [r3, #8]
}
 800dc9c:	bf00      	nop
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	781a      	ldrb	r2, [r3, #0]
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	785a      	ldrb	r2, [r3, #1]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	789a      	ldrb	r2, [r3, #2]
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	78da      	ldrb	r2, [r3, #3]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	3305      	adds	r3, #5
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	021b      	lsls	r3, r3, #8
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	799a      	ldrb	r2, [r3, #6]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	719a      	strb	r2, [r3, #6]
}
 800dcf6:	bf00      	nop
 800dcf8:	370c      	adds	r7, #12
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr

0800dd02 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd02:	b480      	push	{r7}
 800dd04:	b087      	sub	sp, #28
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	60f8      	str	r0, [r7, #12]
 800dd0a:	60b9      	str	r1, [r7, #8]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	3301      	adds	r3, #1
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d120      	bne.n	800dd5c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	1e9a      	subs	r2, r3, #2
 800dd20:	88fb      	ldrh	r3, [r7, #6]
 800dd22:	4293      	cmp	r3, r2
 800dd24:	bf28      	it	cs
 800dd26:	4613      	movcs	r3, r2
 800dd28:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3302      	adds	r3, #2
 800dd2e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dd30:	2300      	movs	r3, #0
 800dd32:	82fb      	strh	r3, [r7, #22]
 800dd34:	e00b      	b.n	800dd4e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dd36:	8afb      	ldrh	r3, [r7, #22]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	4413      	add	r3, r2
 800dd3c:	781a      	ldrb	r2, [r3, #0]
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	3301      	adds	r3, #1
 800dd46:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dd48:	8afb      	ldrh	r3, [r7, #22]
 800dd4a:	3302      	adds	r3, #2
 800dd4c:	82fb      	strh	r3, [r7, #22]
 800dd4e:	8afa      	ldrh	r2, [r7, #22]
 800dd50:	8abb      	ldrh	r3, [r7, #20]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d3ef      	bcc.n	800dd36 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	701a      	strb	r2, [r3, #0]
  }
}
 800dd5c:	bf00      	nop
 800dd5e:	371c      	adds	r7, #28
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr

0800dd68 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	881a      	ldrh	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4413      	add	r3, r2
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dd90:	68fb      	ldr	r3, [r7, #12]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b086      	sub	sp, #24
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	60f8      	str	r0, [r7, #12]
 800dda6:	60b9      	str	r1, [r7, #8]
 800dda8:	4613      	mov	r3, r2
 800ddaa:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ddac:	2301      	movs	r3, #1
 800ddae:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	789b      	ldrb	r3, [r3, #2]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d002      	beq.n	800ddbe <USBH_CtlReq+0x20>
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d00f      	beq.n	800dddc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ddbc:	e027      	b.n	800de0e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	88fa      	ldrh	r2, [r7, #6]
 800ddc8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2201      	movs	r2, #1
 800ddce:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2202      	movs	r2, #2
 800ddd4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	75fb      	strb	r3, [r7, #23]
      break;
 800ddda:	e018      	b.n	800de0e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f000 f81b 	bl	800de18 <USBH_HandleControl>
 800dde2:	4603      	mov	r3, r0
 800dde4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <USBH_CtlReq+0x54>
 800ddec:	7dfb      	ldrb	r3, [r7, #23]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d106      	bne.n	800de00 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	761a      	strb	r2, [r3, #24]
      break;
 800ddfe:	e005      	b.n	800de0c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800de00:	7dfb      	ldrb	r3, [r7, #23]
 800de02:	2b02      	cmp	r3, #2
 800de04:	d102      	bne.n	800de0c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2201      	movs	r2, #1
 800de0a:	709a      	strb	r2, [r3, #2]
      break;
 800de0c:	bf00      	nop
  }
  return status;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3718      	adds	r7, #24
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800de20:	2301      	movs	r3, #1
 800de22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800de24:	2300      	movs	r3, #0
 800de26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	7e1b      	ldrb	r3, [r3, #24]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	2b0a      	cmp	r3, #10
 800de30:	f200 8156 	bhi.w	800e0e0 <USBH_HandleControl+0x2c8>
 800de34:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <USBH_HandleControl+0x24>)
 800de36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3a:	bf00      	nop
 800de3c:	0800de69 	.word	0x0800de69
 800de40:	0800de83 	.word	0x0800de83
 800de44:	0800deed 	.word	0x0800deed
 800de48:	0800df13 	.word	0x0800df13
 800de4c:	0800df4b 	.word	0x0800df4b
 800de50:	0800df75 	.word	0x0800df75
 800de54:	0800dfc7 	.word	0x0800dfc7
 800de58:	0800dfe9 	.word	0x0800dfe9
 800de5c:	0800e025 	.word	0x0800e025
 800de60:	0800e04b 	.word	0x0800e04b
 800de64:	0800e089 	.word	0x0800e089
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f103 0110 	add.w	r1, r3, #16
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	795b      	ldrb	r3, [r3, #5]
 800de72:	461a      	mov	r2, r3
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 f943 	bl	800e100 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2202      	movs	r2, #2
 800de7e:	761a      	strb	r2, [r3, #24]
      break;
 800de80:	e139      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	795b      	ldrb	r3, [r3, #5]
 800de86:	4619      	mov	r1, r3
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f003 ff7b 	bl	8011d84 <USBH_LL_GetURBState>
 800de8e:	4603      	mov	r3, r0
 800de90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d11e      	bne.n	800ded6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	7c1b      	ldrb	r3, [r3, #16]
 800de9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dea0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	8adb      	ldrh	r3, [r3, #22]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d00a      	beq.n	800dec0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800deaa:	7b7b      	ldrb	r3, [r7, #13]
 800deac:	2b80      	cmp	r3, #128	; 0x80
 800deae:	d103      	bne.n	800deb8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2203      	movs	r2, #3
 800deb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800deb6:	e115      	b.n	800e0e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2205      	movs	r2, #5
 800debc:	761a      	strb	r2, [r3, #24]
      break;
 800debe:	e111      	b.n	800e0e4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dec0:	7b7b      	ldrb	r3, [r7, #13]
 800dec2:	2b80      	cmp	r3, #128	; 0x80
 800dec4:	d103      	bne.n	800dece <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2209      	movs	r2, #9
 800deca:	761a      	strb	r2, [r3, #24]
      break;
 800decc:	e10a      	b.n	800e0e4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2207      	movs	r2, #7
 800ded2:	761a      	strb	r2, [r3, #24]
      break;
 800ded4:	e106      	b.n	800e0e4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b04      	cmp	r3, #4
 800deda:	d003      	beq.n	800dee4 <USBH_HandleControl+0xcc>
 800dedc:	7bbb      	ldrb	r3, [r7, #14]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	f040 8100 	bne.w	800e0e4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	220b      	movs	r2, #11
 800dee8:	761a      	strb	r2, [r3, #24]
      break;
 800deea:	e0fb      	b.n	800e0e4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6899      	ldr	r1, [r3, #8]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	899a      	ldrh	r2, [r3, #12]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	791b      	ldrb	r3, [r3, #4]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 f93a 	bl	800e17e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2204      	movs	r2, #4
 800df0e:	761a      	strb	r2, [r3, #24]
      break;
 800df10:	e0f1      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	791b      	ldrb	r3, [r3, #4]
 800df16:	4619      	mov	r1, r3
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f003 ff33 	bl	8011d84 <USBH_LL_GetURBState>
 800df1e:	4603      	mov	r3, r0
 800df20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	2b01      	cmp	r3, #1
 800df26:	d102      	bne.n	800df2e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2209      	movs	r2, #9
 800df2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	2b05      	cmp	r3, #5
 800df32:	d102      	bne.n	800df3a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800df34:	2303      	movs	r3, #3
 800df36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df38:	e0d6      	b.n	800e0e8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	2b04      	cmp	r3, #4
 800df3e:	f040 80d3 	bne.w	800e0e8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	220b      	movs	r2, #11
 800df46:	761a      	strb	r2, [r3, #24]
      break;
 800df48:	e0ce      	b.n	800e0e8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6899      	ldr	r1, [r3, #8]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	899a      	ldrh	r2, [r3, #12]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	795b      	ldrb	r3, [r3, #5]
 800df56:	2001      	movs	r0, #1
 800df58:	9000      	str	r0, [sp, #0]
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f8ea 	bl	800e134 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df66:	b29a      	uxth	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2206      	movs	r2, #6
 800df70:	761a      	strb	r2, [r3, #24]
      break;
 800df72:	e0c0      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	795b      	ldrb	r3, [r3, #5]
 800df78:	4619      	mov	r1, r3
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f003 ff02 	bl	8011d84 <USBH_LL_GetURBState>
 800df80:	4603      	mov	r3, r0
 800df82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800df84:	7bbb      	ldrb	r3, [r7, #14]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d103      	bne.n	800df92 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2207      	movs	r2, #7
 800df8e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df90:	e0ac      	b.n	800e0ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b05      	cmp	r3, #5
 800df96:	d105      	bne.n	800dfa4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	220c      	movs	r2, #12
 800df9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800df9e:	2303      	movs	r3, #3
 800dfa0:	73fb      	strb	r3, [r7, #15]
      break;
 800dfa2:	e0a3      	b.n	800e0ec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dfa4:	7bbb      	ldrb	r3, [r7, #14]
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d103      	bne.n	800dfb2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2205      	movs	r2, #5
 800dfae:	761a      	strb	r2, [r3, #24]
      break;
 800dfb0:	e09c      	b.n	800e0ec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dfb2:	7bbb      	ldrb	r3, [r7, #14]
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	f040 8099 	bne.w	800e0ec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	220b      	movs	r2, #11
 800dfbe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dfc0:	2302      	movs	r3, #2
 800dfc2:	73fb      	strb	r3, [r7, #15]
      break;
 800dfc4:	e092      	b.n	800e0ec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	791b      	ldrb	r3, [r3, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	2100      	movs	r1, #0
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 f8d5 	bl	800e17e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dfda:	b29a      	uxth	r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2208      	movs	r2, #8
 800dfe4:	761a      	strb	r2, [r3, #24]

      break;
 800dfe6:	e086      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	791b      	ldrb	r3, [r3, #4]
 800dfec:	4619      	mov	r1, r3
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f003 fec8 	bl	8011d84 <USBH_LL_GetURBState>
 800dff4:	4603      	mov	r3, r0
 800dff6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dff8:	7bbb      	ldrb	r3, [r7, #14]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d105      	bne.n	800e00a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	220d      	movs	r2, #13
 800e002:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e008:	e072      	b.n	800e0f0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e00a:	7bbb      	ldrb	r3, [r7, #14]
 800e00c:	2b04      	cmp	r3, #4
 800e00e:	d103      	bne.n	800e018 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	220b      	movs	r2, #11
 800e014:	761a      	strb	r2, [r3, #24]
      break;
 800e016:	e06b      	b.n	800e0f0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e018:	7bbb      	ldrb	r3, [r7, #14]
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	d168      	bne.n	800e0f0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e01e:	2303      	movs	r3, #3
 800e020:	73fb      	strb	r3, [r7, #15]
      break;
 800e022:	e065      	b.n	800e0f0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	795b      	ldrb	r3, [r3, #5]
 800e028:	2201      	movs	r2, #1
 800e02a:	9200      	str	r2, [sp, #0]
 800e02c:	2200      	movs	r2, #0
 800e02e:	2100      	movs	r1, #0
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 f87f 	bl	800e134 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e03c:	b29a      	uxth	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	220a      	movs	r2, #10
 800e046:	761a      	strb	r2, [r3, #24]
      break;
 800e048:	e055      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	795b      	ldrb	r3, [r3, #5]
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f003 fe97 	bl	8011d84 <USBH_LL_GetURBState>
 800e056:	4603      	mov	r3, r0
 800e058:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d105      	bne.n	800e06c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e060:	2300      	movs	r3, #0
 800e062:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	220d      	movs	r2, #13
 800e068:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e06a:	e043      	b.n	800e0f4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d103      	bne.n	800e07a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2209      	movs	r2, #9
 800e076:	761a      	strb	r2, [r3, #24]
      break;
 800e078:	e03c      	b.n	800e0f4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e07a:	7bbb      	ldrb	r3, [r7, #14]
 800e07c:	2b04      	cmp	r3, #4
 800e07e:	d139      	bne.n	800e0f4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	220b      	movs	r2, #11
 800e084:	761a      	strb	r2, [r3, #24]
      break;
 800e086:	e035      	b.n	800e0f4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	7e5b      	ldrb	r3, [r3, #25]
 800e08c:	3301      	adds	r3, #1
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	765a      	strb	r2, [r3, #25]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	7e5b      	ldrb	r3, [r3, #25]
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d806      	bhi.n	800e0aa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e0a8:	e025      	b.n	800e0f6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0b0:	2106      	movs	r1, #6
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	795b      	ldrb	r3, [r3, #5]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 f90c 	bl	800e2e0 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	791b      	ldrb	r3, [r3, #4]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f906 	bl	800e2e0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e0da:	2302      	movs	r3, #2
 800e0dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e0de:	e00a      	b.n	800e0f6 <USBH_HandleControl+0x2de>

    default:
      break;
 800e0e0:	bf00      	nop
 800e0e2:	e008      	b.n	800e0f6 <USBH_HandleControl+0x2de>
      break;
 800e0e4:	bf00      	nop
 800e0e6:	e006      	b.n	800e0f6 <USBH_HandleControl+0x2de>
      break;
 800e0e8:	bf00      	nop
 800e0ea:	e004      	b.n	800e0f6 <USBH_HandleControl+0x2de>
      break;
 800e0ec:	bf00      	nop
 800e0ee:	e002      	b.n	800e0f6 <USBH_HandleControl+0x2de>
      break;
 800e0f0:	bf00      	nop
 800e0f2:	e000      	b.n	800e0f6 <USBH_HandleControl+0x2de>
      break;
 800e0f4:	bf00      	nop
  }

  return status;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b088      	sub	sp, #32
 800e104:	af04      	add	r7, sp, #16
 800e106:	60f8      	str	r0, [r7, #12]
 800e108:	60b9      	str	r1, [r7, #8]
 800e10a:	4613      	mov	r3, r2
 800e10c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e10e:	79f9      	ldrb	r1, [r7, #7]
 800e110:	2300      	movs	r3, #0
 800e112:	9303      	str	r3, [sp, #12]
 800e114:	2308      	movs	r3, #8
 800e116:	9302      	str	r3, [sp, #8]
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	9301      	str	r3, [sp, #4]
 800e11c:	2300      	movs	r3, #0
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	2300      	movs	r3, #0
 800e122:	2200      	movs	r2, #0
 800e124:	68f8      	ldr	r0, [r7, #12]
 800e126:	f003 fdfc 	bl	8011d22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3710      	adds	r7, #16
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af04      	add	r7, sp, #16
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	4611      	mov	r1, r2
 800e140:	461a      	mov	r2, r3
 800e142:	460b      	mov	r3, r1
 800e144:	80fb      	strh	r3, [r7, #6]
 800e146:	4613      	mov	r3, r2
 800e148:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e150:	2b00      	cmp	r3, #0
 800e152:	d001      	beq.n	800e158 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e154:	2300      	movs	r3, #0
 800e156:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e158:	7979      	ldrb	r1, [r7, #5]
 800e15a:	7e3b      	ldrb	r3, [r7, #24]
 800e15c:	9303      	str	r3, [sp, #12]
 800e15e:	88fb      	ldrh	r3, [r7, #6]
 800e160:	9302      	str	r3, [sp, #8]
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	2301      	movs	r3, #1
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	2300      	movs	r3, #0
 800e16c:	2200      	movs	r2, #0
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f003 fdd7 	bl	8011d22 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e174:	2300      	movs	r3, #0
}
 800e176:	4618      	mov	r0, r3
 800e178:	3710      	adds	r7, #16
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}

0800e17e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e17e:	b580      	push	{r7, lr}
 800e180:	b088      	sub	sp, #32
 800e182:	af04      	add	r7, sp, #16
 800e184:	60f8      	str	r0, [r7, #12]
 800e186:	60b9      	str	r1, [r7, #8]
 800e188:	4611      	mov	r1, r2
 800e18a:	461a      	mov	r2, r3
 800e18c:	460b      	mov	r3, r1
 800e18e:	80fb      	strh	r3, [r7, #6]
 800e190:	4613      	mov	r3, r2
 800e192:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e194:	7979      	ldrb	r1, [r7, #5]
 800e196:	2300      	movs	r3, #0
 800e198:	9303      	str	r3, [sp, #12]
 800e19a:	88fb      	ldrh	r3, [r7, #6]
 800e19c:	9302      	str	r3, [sp, #8]
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	9300      	str	r3, [sp, #0]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	68f8      	ldr	r0, [r7, #12]
 800e1ac:	f003 fdb9 	bl	8011d22 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e1b0:	2300      	movs	r3, #0

}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3710      	adds	r7, #16
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b088      	sub	sp, #32
 800e1be:	af04      	add	r7, sp, #16
 800e1c0:	60f8      	str	r0, [r7, #12]
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	80fb      	strh	r3, [r7, #6]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e1de:	7979      	ldrb	r1, [r7, #5]
 800e1e0:	7e3b      	ldrb	r3, [r7, #24]
 800e1e2:	9303      	str	r3, [sp, #12]
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	9302      	str	r3, [sp, #8]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	2302      	movs	r3, #2
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f003 fd94 	bl	8011d22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3710      	adds	r7, #16
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b088      	sub	sp, #32
 800e208:	af04      	add	r7, sp, #16
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4611      	mov	r1, r2
 800e210:	461a      	mov	r2, r3
 800e212:	460b      	mov	r3, r1
 800e214:	80fb      	strh	r3, [r7, #6]
 800e216:	4613      	mov	r3, r2
 800e218:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e21a:	7979      	ldrb	r1, [r7, #5]
 800e21c:	2300      	movs	r3, #0
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	88fb      	ldrh	r3, [r7, #6]
 800e222:	9302      	str	r3, [sp, #8]
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	9301      	str	r3, [sp, #4]
 800e228:	2301      	movs	r3, #1
 800e22a:	9300      	str	r3, [sp, #0]
 800e22c:	2302      	movs	r3, #2
 800e22e:	2201      	movs	r2, #1
 800e230:	68f8      	ldr	r0, [r7, #12]
 800e232:	f003 fd76 	bl	8011d22 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af04      	add	r7, sp, #16
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	4608      	mov	r0, r1
 800e24a:	4611      	mov	r1, r2
 800e24c:	461a      	mov	r2, r3
 800e24e:	4603      	mov	r3, r0
 800e250:	70fb      	strb	r3, [r7, #3]
 800e252:	460b      	mov	r3, r1
 800e254:	70bb      	strb	r3, [r7, #2]
 800e256:	4613      	mov	r3, r2
 800e258:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e25a:	7878      	ldrb	r0, [r7, #1]
 800e25c:	78ba      	ldrb	r2, [r7, #2]
 800e25e:	78f9      	ldrb	r1, [r7, #3]
 800e260:	8b3b      	ldrh	r3, [r7, #24]
 800e262:	9302      	str	r3, [sp, #8]
 800e264:	7d3b      	ldrb	r3, [r7, #20]
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	7c3b      	ldrb	r3, [r7, #16]
 800e26a:	9300      	str	r3, [sp, #0]
 800e26c:	4603      	mov	r3, r0
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f003 fd09 	bl	8011c86 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e274:	2300      	movs	r3, #0
}
 800e276:	4618      	mov	r0, r3
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
 800e286:	460b      	mov	r3, r1
 800e288:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e28a:	78fb      	ldrb	r3, [r7, #3]
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f003 fd28 	bl	8011ce4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f836 	bl	800e31c <USBH_GetFreePipe>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e2b4:	89fb      	ldrh	r3, [r7, #14]
 800e2b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d00a      	beq.n	800e2d4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e2be:	78fa      	ldrb	r2, [r7, #3]
 800e2c0:	89fb      	ldrh	r3, [r7, #14]
 800e2c2:	f003 030f 	and.w	r3, r3, #15
 800e2c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2ca:	6879      	ldr	r1, [r7, #4]
 800e2cc:	33e0      	adds	r3, #224	; 0xe0
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	440b      	add	r3, r1
 800e2d2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e2d4:	89fb      	ldrh	r3, [r7, #14]
 800e2d6:	b2db      	uxtb	r3, r3
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	460b      	mov	r3, r1
 800e2ea:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	2b0a      	cmp	r3, #10
 800e2f0:	d80d      	bhi.n	800e30e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e2f2:	78fb      	ldrb	r3, [r7, #3]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	33e0      	adds	r3, #224	; 0xe0
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	78fb      	ldrb	r3, [r7, #3]
 800e300:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e304:	6879      	ldr	r1, [r7, #4]
 800e306:	33e0      	adds	r3, #224	; 0xe0
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	440b      	add	r3, r1
 800e30c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e324:	2300      	movs	r3, #0
 800e326:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
 800e32c:	e00f      	b.n	800e34e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	33e0      	adds	r3, #224	; 0xe0
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e342:	7bfb      	ldrb	r3, [r7, #15]
 800e344:	b29b      	uxth	r3, r3
 800e346:	e007      	b.n	800e358 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e348:	7bfb      	ldrb	r3, [r7, #15]
 800e34a:	3301      	adds	r3, #1
 800e34c:	73fb      	strb	r3, [r7, #15]
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
 800e350:	2b0a      	cmp	r3, #10
 800e352:	d9ec      	bls.n	800e32e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e354:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b084      	sub	sp, #16
 800e368:	af00      	add	r7, sp, #0
 800e36a:	4603      	mov	r3, r0
 800e36c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e36e:	79fb      	ldrb	r3, [r7, #7]
 800e370:	4a08      	ldr	r2, [pc, #32]	; (800e394 <disk_status+0x30>)
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	685b      	ldr	r3, [r3, #4]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	79fa      	ldrb	r2, [r7, #7]
 800e37c:	4905      	ldr	r1, [pc, #20]	; (800e394 <disk_status+0x30>)
 800e37e:	440a      	add	r2, r1
 800e380:	7a12      	ldrb	r2, [r2, #8]
 800e382:	4610      	mov	r0, r2
 800e384:	4798      	blx	r3
 800e386:	4603      	mov	r3, r0
 800e388:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e38a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	20001380 	.word	0x20001380

0800e398 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	4603      	mov	r3, r0
 800e3a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e3a6:	79fb      	ldrb	r3, [r7, #7]
 800e3a8:	4a0d      	ldr	r2, [pc, #52]	; (800e3e0 <disk_initialize+0x48>)
 800e3aa:	5cd3      	ldrb	r3, [r2, r3]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d111      	bne.n	800e3d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e3b0:	79fb      	ldrb	r3, [r7, #7]
 800e3b2:	4a0b      	ldr	r2, [pc, #44]	; (800e3e0 <disk_initialize+0x48>)
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e3b8:	79fb      	ldrb	r3, [r7, #7]
 800e3ba:	4a09      	ldr	r2, [pc, #36]	; (800e3e0 <disk_initialize+0x48>)
 800e3bc:	009b      	lsls	r3, r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	79fa      	ldrb	r2, [r7, #7]
 800e3c6:	4906      	ldr	r1, [pc, #24]	; (800e3e0 <disk_initialize+0x48>)
 800e3c8:	440a      	add	r2, r1
 800e3ca:	7a12      	ldrb	r2, [r2, #8]
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	4798      	blx	r3
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	20001380 	.word	0x20001380

0800e3e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60b9      	str	r1, [r7, #8]
 800e3ec:	607a      	str	r2, [r7, #4]
 800e3ee:	603b      	str	r3, [r7, #0]
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e3f4:	7bfb      	ldrb	r3, [r7, #15]
 800e3f6:	4a0a      	ldr	r2, [pc, #40]	; (800e420 <disk_read+0x3c>)
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4413      	add	r3, r2
 800e3fc:	685b      	ldr	r3, [r3, #4]
 800e3fe:	689c      	ldr	r4, [r3, #8]
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	4a07      	ldr	r2, [pc, #28]	; (800e420 <disk_read+0x3c>)
 800e404:	4413      	add	r3, r2
 800e406:	7a18      	ldrb	r0, [r3, #8]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	68b9      	ldr	r1, [r7, #8]
 800e40e:	47a0      	blx	r4
 800e410:	4603      	mov	r3, r0
 800e412:	75fb      	strb	r3, [r7, #23]
  return res;
 800e414:	7dfb      	ldrb	r3, [r7, #23]
}
 800e416:	4618      	mov	r0, r3
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd90      	pop	{r4, r7, pc}
 800e41e:	bf00      	nop
 800e420:	20001380 	.word	0x20001380

0800e424 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e424:	b590      	push	{r4, r7, lr}
 800e426:	b087      	sub	sp, #28
 800e428:	af00      	add	r7, sp, #0
 800e42a:	60b9      	str	r1, [r7, #8]
 800e42c:	607a      	str	r2, [r7, #4]
 800e42e:	603b      	str	r3, [r7, #0]
 800e430:	4603      	mov	r3, r0
 800e432:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e434:	7bfb      	ldrb	r3, [r7, #15]
 800e436:	4a0a      	ldr	r2, [pc, #40]	; (800e460 <disk_write+0x3c>)
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	68dc      	ldr	r4, [r3, #12]
 800e440:	7bfb      	ldrb	r3, [r7, #15]
 800e442:	4a07      	ldr	r2, [pc, #28]	; (800e460 <disk_write+0x3c>)
 800e444:	4413      	add	r3, r2
 800e446:	7a18      	ldrb	r0, [r3, #8]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	68b9      	ldr	r1, [r7, #8]
 800e44e:	47a0      	blx	r4
 800e450:	4603      	mov	r3, r0
 800e452:	75fb      	strb	r3, [r7, #23]
  return res;
 800e454:	7dfb      	ldrb	r3, [r7, #23]
}
 800e456:	4618      	mov	r0, r3
 800e458:	371c      	adds	r7, #28
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd90      	pop	{r4, r7, pc}
 800e45e:	bf00      	nop
 800e460:	20001380 	.word	0x20001380

0800e464 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	603a      	str	r2, [r7, #0]
 800e46e:	71fb      	strb	r3, [r7, #7]
 800e470:	460b      	mov	r3, r1
 800e472:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	4a09      	ldr	r2, [pc, #36]	; (800e49c <disk_ioctl+0x38>)
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	79fa      	ldrb	r2, [r7, #7]
 800e482:	4906      	ldr	r1, [pc, #24]	; (800e49c <disk_ioctl+0x38>)
 800e484:	440a      	add	r2, r1
 800e486:	7a10      	ldrb	r0, [r2, #8]
 800e488:	79b9      	ldrb	r1, [r7, #6]
 800e48a:	683a      	ldr	r2, [r7, #0]
 800e48c:	4798      	blx	r3
 800e48e:	4603      	mov	r3, r0
 800e490:	73fb      	strb	r3, [r7, #15]
  return res;
 800e492:	7bfb      	ldrb	r3, [r7, #15]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	20001380 	.word	0x20001380

0800e4a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e4b0:	89fb      	ldrh	r3, [r7, #14]
 800e4b2:	021b      	lsls	r3, r3, #8
 800e4b4:	b21a      	sxth	r2, r3
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	b21b      	sxth	r3, r3
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	b21b      	sxth	r3, r3
 800e4c0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e4c2:	89fb      	ldrh	r3, [r7, #14]
}
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	3714      	adds	r7, #20
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr

0800e4d0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b085      	sub	sp, #20
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3303      	adds	r3, #3
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	021b      	lsls	r3, r3, #8
 800e4e4:	687a      	ldr	r2, [r7, #4]
 800e4e6:	3202      	adds	r2, #2
 800e4e8:	7812      	ldrb	r2, [r2, #0]
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	3201      	adds	r2, #1
 800e4f6:	7812      	ldrb	r2, [r2, #0]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	021b      	lsls	r3, r3, #8
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	7812      	ldrb	r2, [r2, #0]
 800e504:	4313      	orrs	r3, r2
 800e506:	60fb      	str	r3, [r7, #12]
	return rv;
 800e508:	68fb      	ldr	r3, [r7, #12]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3714      	adds	r7, #20
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e516:	b480      	push	{r7}
 800e518:	b083      	sub	sp, #12
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	460b      	mov	r3, r1
 800e520:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	1c5a      	adds	r2, r3, #1
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	887a      	ldrh	r2, [r7, #2]
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	701a      	strb	r2, [r3, #0]
 800e52e:	887b      	ldrh	r3, [r7, #2]
 800e530:	0a1b      	lsrs	r3, r3, #8
 800e532:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	1c5a      	adds	r2, r3, #1
 800e538:	607a      	str	r2, [r7, #4]
 800e53a:	887a      	ldrh	r2, [r7, #2]
 800e53c:	b2d2      	uxtb	r2, r2
 800e53e:	701a      	strb	r2, [r3, #0]
}
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	607a      	str	r2, [r7, #4]
 800e55c:	683a      	ldr	r2, [r7, #0]
 800e55e:	b2d2      	uxtb	r2, r2
 800e560:	701a      	strb	r2, [r3, #0]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	0a1b      	lsrs	r3, r3, #8
 800e566:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	607a      	str	r2, [r7, #4]
 800e56e:	683a      	ldr	r2, [r7, #0]
 800e570:	b2d2      	uxtb	r2, r2
 800e572:	701a      	strb	r2, [r3, #0]
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	0a1b      	lsrs	r3, r3, #8
 800e578:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	1c5a      	adds	r2, r3, #1
 800e57e:	607a      	str	r2, [r7, #4]
 800e580:	683a      	ldr	r2, [r7, #0]
 800e582:	b2d2      	uxtb	r2, r2
 800e584:	701a      	strb	r2, [r3, #0]
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	0a1b      	lsrs	r3, r3, #8
 800e58a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	607a      	str	r2, [r7, #4]
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	b2d2      	uxtb	r2, r2
 800e596:	701a      	strb	r2, [r3, #0]
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e5a4:	b480      	push	{r7}
 800e5a6:	b087      	sub	sp, #28
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00d      	beq.n	800e5da <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	1c53      	adds	r3, r2, #1
 800e5c2:	613b      	str	r3, [r7, #16]
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	1c59      	adds	r1, r3, #1
 800e5c8:	6179      	str	r1, [r7, #20]
 800e5ca:	7812      	ldrb	r2, [r2, #0]
 800e5cc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	607b      	str	r3, [r7, #4]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1f1      	bne.n	800e5be <mem_cpy+0x1a>
	}
}
 800e5da:	bf00      	nop
 800e5dc:	371c      	adds	r7, #28
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e4:	4770      	bx	lr

0800e5e6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e5e6:	b480      	push	{r7}
 800e5e8:	b087      	sub	sp, #28
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	60b9      	str	r1, [r7, #8]
 800e5f0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	617a      	str	r2, [r7, #20]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	b2d2      	uxtb	r2, r2
 800e600:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3b01      	subs	r3, #1
 800e606:	607b      	str	r3, [r7, #4]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d1f3      	bne.n	800e5f6 <mem_set+0x10>
}
 800e60e:	bf00      	nop
 800e610:	bf00      	nop
 800e612:	371c      	adds	r7, #28
 800e614:	46bd      	mov	sp, r7
 800e616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61a:	4770      	bx	lr

0800e61c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e61c:	b480      	push	{r7}
 800e61e:	b089      	sub	sp, #36	; 0x24
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	61fb      	str	r3, [r7, #28]
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e634:	69fb      	ldr	r3, [r7, #28]
 800e636:	1c5a      	adds	r2, r3, #1
 800e638:	61fa      	str	r2, [r7, #28]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	4619      	mov	r1, r3
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	61ba      	str	r2, [r7, #24]
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	1acb      	subs	r3, r1, r3
 800e648:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	3b01      	subs	r3, #1
 800e64e:	607b      	str	r3, [r7, #4]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d002      	beq.n	800e65c <mem_cmp+0x40>
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0eb      	beq.n	800e634 <mem_cmp+0x18>

	return r;
 800e65c:	697b      	ldr	r3, [r7, #20]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3724      	adds	r7, #36	; 0x24
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr

0800e66a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e66a:	b480      	push	{r7}
 800e66c:	b083      	sub	sp, #12
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e674:	e002      	b.n	800e67c <chk_chr+0x12>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	3301      	adds	r3, #1
 800e67a:	607b      	str	r3, [r7, #4]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d005      	beq.n	800e690 <chk_chr+0x26>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	461a      	mov	r2, r3
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d1f2      	bne.n	800e676 <chk_chr+0xc>
	return *str;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	781b      	ldrb	r3, [r3, #0]
}
 800e694:	4618      	mov	r0, r3
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60bb      	str	r3, [r7, #8]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	60fb      	str	r3, [r7, #12]
 800e6b2:	e029      	b.n	800e708 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e6b4:	4a27      	ldr	r2, [pc, #156]	; (800e754 <chk_lock+0xb4>)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	4413      	add	r3, r2
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d01d      	beq.n	800e6fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6c2:	4a24      	ldr	r2, [pc, #144]	; (800e754 <chk_lock+0xb4>)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	011b      	lsls	r3, r3, #4
 800e6c8:	4413      	add	r3, r2
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d116      	bne.n	800e702 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e6d4:	4a1f      	ldr	r2, [pc, #124]	; (800e754 <chk_lock+0xb4>)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	011b      	lsls	r3, r3, #4
 800e6da:	4413      	add	r3, r2
 800e6dc:	3304      	adds	r3, #4
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d10c      	bne.n	800e702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6e8:	4a1a      	ldr	r2, [pc, #104]	; (800e754 <chk_lock+0xb4>)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	011b      	lsls	r3, r3, #4
 800e6ee:	4413      	add	r3, r2
 800e6f0:	3308      	adds	r3, #8
 800e6f2:	681a      	ldr	r2, [r3, #0]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d102      	bne.n	800e702 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e6fc:	e007      	b.n	800e70e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e6fe:	2301      	movs	r3, #1
 800e700:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	3301      	adds	r3, #1
 800e706:	60fb      	str	r3, [r7, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d9d2      	bls.n	800e6b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2b02      	cmp	r3, #2
 800e712:	d109      	bne.n	800e728 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d102      	bne.n	800e720 <chk_lock+0x80>
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b02      	cmp	r3, #2
 800e71e:	d101      	bne.n	800e724 <chk_lock+0x84>
 800e720:	2300      	movs	r3, #0
 800e722:	e010      	b.n	800e746 <chk_lock+0xa6>
 800e724:	2312      	movs	r3, #18
 800e726:	e00e      	b.n	800e746 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d108      	bne.n	800e740 <chk_lock+0xa0>
 800e72e:	4a09      	ldr	r2, [pc, #36]	; (800e754 <chk_lock+0xb4>)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	011b      	lsls	r3, r3, #4
 800e734:	4413      	add	r3, r2
 800e736:	330c      	adds	r3, #12
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e73e:	d101      	bne.n	800e744 <chk_lock+0xa4>
 800e740:	2310      	movs	r3, #16
 800e742:	e000      	b.n	800e746 <chk_lock+0xa6>
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3714      	adds	r7, #20
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	20001160 	.word	0x20001160

0800e758 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e75e:	2300      	movs	r3, #0
 800e760:	607b      	str	r3, [r7, #4]
 800e762:	e002      	b.n	800e76a <enq_lock+0x12>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	3301      	adds	r3, #1
 800e768:	607b      	str	r3, [r7, #4]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d806      	bhi.n	800e77e <enq_lock+0x26>
 800e770:	4a09      	ldr	r2, [pc, #36]	; (800e798 <enq_lock+0x40>)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	011b      	lsls	r3, r3, #4
 800e776:	4413      	add	r3, r2
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d1f2      	bne.n	800e764 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b02      	cmp	r3, #2
 800e782:	bf14      	ite	ne
 800e784:	2301      	movne	r3, #1
 800e786:	2300      	moveq	r3, #0
 800e788:	b2db      	uxtb	r3, r3
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	370c      	adds	r7, #12
 800e78e:	46bd      	mov	sp, r7
 800e790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e794:	4770      	bx	lr
 800e796:	bf00      	nop
 800e798:	20001160 	.word	0x20001160

0800e79c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	60fb      	str	r3, [r7, #12]
 800e7aa:	e01f      	b.n	800e7ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e7ac:	4a41      	ldr	r2, [pc, #260]	; (800e8b4 <inc_lock+0x118>)
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	4413      	add	r3, r2
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d113      	bne.n	800e7e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e7be:	4a3d      	ldr	r2, [pc, #244]	; (800e8b4 <inc_lock+0x118>)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	4413      	add	r3, r2
 800e7c6:	3304      	adds	r3, #4
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d109      	bne.n	800e7e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e7d2:	4a38      	ldr	r2, [pc, #224]	; (800e8b4 <inc_lock+0x118>)
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	011b      	lsls	r3, r3, #4
 800e7d8:	4413      	add	r3, r2
 800e7da:	3308      	adds	r3, #8
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d006      	beq.n	800e7f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	60fb      	str	r3, [r7, #12]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d9dc      	bls.n	800e7ac <inc_lock+0x10>
 800e7f2:	e000      	b.n	800e7f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e7f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d132      	bne.n	800e862 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	60fb      	str	r3, [r7, #12]
 800e800:	e002      	b.n	800e808 <inc_lock+0x6c>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	3301      	adds	r3, #1
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	2b01      	cmp	r3, #1
 800e80c:	d806      	bhi.n	800e81c <inc_lock+0x80>
 800e80e:	4a29      	ldr	r2, [pc, #164]	; (800e8b4 <inc_lock+0x118>)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	4413      	add	r3, r2
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d1f2      	bne.n	800e802 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d101      	bne.n	800e826 <inc_lock+0x8a>
 800e822:	2300      	movs	r3, #0
 800e824:	e040      	b.n	800e8a8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	4922      	ldr	r1, [pc, #136]	; (800e8b4 <inc_lock+0x118>)
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	011b      	lsls	r3, r3, #4
 800e830:	440b      	add	r3, r1
 800e832:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	689a      	ldr	r2, [r3, #8]
 800e838:	491e      	ldr	r1, [pc, #120]	; (800e8b4 <inc_lock+0x118>)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	011b      	lsls	r3, r3, #4
 800e83e:	440b      	add	r3, r1
 800e840:	3304      	adds	r3, #4
 800e842:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	695a      	ldr	r2, [r3, #20]
 800e848:	491a      	ldr	r1, [pc, #104]	; (800e8b4 <inc_lock+0x118>)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	011b      	lsls	r3, r3, #4
 800e84e:	440b      	add	r3, r1
 800e850:	3308      	adds	r3, #8
 800e852:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e854:	4a17      	ldr	r2, [pc, #92]	; (800e8b4 <inc_lock+0x118>)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	011b      	lsls	r3, r3, #4
 800e85a:	4413      	add	r3, r2
 800e85c:	330c      	adds	r3, #12
 800e85e:	2200      	movs	r2, #0
 800e860:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d009      	beq.n	800e87c <inc_lock+0xe0>
 800e868:	4a12      	ldr	r2, [pc, #72]	; (800e8b4 <inc_lock+0x118>)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	011b      	lsls	r3, r3, #4
 800e86e:	4413      	add	r3, r2
 800e870:	330c      	adds	r3, #12
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <inc_lock+0xe0>
 800e878:	2300      	movs	r3, #0
 800e87a:	e015      	b.n	800e8a8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d108      	bne.n	800e894 <inc_lock+0xf8>
 800e882:	4a0c      	ldr	r2, [pc, #48]	; (800e8b4 <inc_lock+0x118>)
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	011b      	lsls	r3, r3, #4
 800e888:	4413      	add	r3, r2
 800e88a:	330c      	adds	r3, #12
 800e88c:	881b      	ldrh	r3, [r3, #0]
 800e88e:	3301      	adds	r3, #1
 800e890:	b29a      	uxth	r2, r3
 800e892:	e001      	b.n	800e898 <inc_lock+0xfc>
 800e894:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e898:	4906      	ldr	r1, [pc, #24]	; (800e8b4 <inc_lock+0x118>)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	440b      	add	r3, r1
 800e8a0:	330c      	adds	r3, #12
 800e8a2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	3301      	adds	r3, #1
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3714      	adds	r7, #20
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	20001160 	.word	0x20001160

0800e8b8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e8b8:	b480      	push	{r7}
 800e8ba:	b085      	sub	sp, #20
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	607b      	str	r3, [r7, #4]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d825      	bhi.n	800e918 <dec_lock+0x60>
		n = Files[i].ctr;
 800e8cc:	4a17      	ldr	r2, [pc, #92]	; (800e92c <dec_lock+0x74>)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	011b      	lsls	r3, r3, #4
 800e8d2:	4413      	add	r3, r2
 800e8d4:	330c      	adds	r3, #12
 800e8d6:	881b      	ldrh	r3, [r3, #0]
 800e8d8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e8da:	89fb      	ldrh	r3, [r7, #14]
 800e8dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8e0:	d101      	bne.n	800e8e6 <dec_lock+0x2e>
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e8e6:	89fb      	ldrh	r3, [r7, #14]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d002      	beq.n	800e8f2 <dec_lock+0x3a>
 800e8ec:	89fb      	ldrh	r3, [r7, #14]
 800e8ee:	3b01      	subs	r3, #1
 800e8f0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e8f2:	4a0e      	ldr	r2, [pc, #56]	; (800e92c <dec_lock+0x74>)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	011b      	lsls	r3, r3, #4
 800e8f8:	4413      	add	r3, r2
 800e8fa:	330c      	adds	r3, #12
 800e8fc:	89fa      	ldrh	r2, [r7, #14]
 800e8fe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e900:	89fb      	ldrh	r3, [r7, #14]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d105      	bne.n	800e912 <dec_lock+0x5a>
 800e906:	4a09      	ldr	r2, [pc, #36]	; (800e92c <dec_lock+0x74>)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	011b      	lsls	r3, r3, #4
 800e90c:	4413      	add	r3, r2
 800e90e:	2200      	movs	r2, #0
 800e910:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	737b      	strb	r3, [r7, #13]
 800e916:	e001      	b.n	800e91c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e918:	2302      	movs	r3, #2
 800e91a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e91c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3714      	adds	r7, #20
 800e922:	46bd      	mov	sp, r7
 800e924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	20001160 	.word	0x20001160

0800e930 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
 800e93c:	e010      	b.n	800e960 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e93e:	4a0d      	ldr	r2, [pc, #52]	; (800e974 <clear_lock+0x44>)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	011b      	lsls	r3, r3, #4
 800e944:	4413      	add	r3, r2
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d105      	bne.n	800e95a <clear_lock+0x2a>
 800e94e:	4a09      	ldr	r2, [pc, #36]	; (800e974 <clear_lock+0x44>)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	011b      	lsls	r3, r3, #4
 800e954:	4413      	add	r3, r2
 800e956:	2200      	movs	r2, #0
 800e958:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	3301      	adds	r3, #1
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2b01      	cmp	r3, #1
 800e964:	d9eb      	bls.n	800e93e <clear_lock+0xe>
	}
}
 800e966:	bf00      	nop
 800e968:	bf00      	nop
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr
 800e974:	20001160 	.word	0x20001160

0800e978 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	78db      	ldrb	r3, [r3, #3]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d034      	beq.n	800e9f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	7858      	ldrb	r0, [r3, #1]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e99c:	2301      	movs	r3, #1
 800e99e:	697a      	ldr	r2, [r7, #20]
 800e9a0:	f7ff fd40 	bl	800e424 <disk_write>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	73fb      	strb	r3, [r7, #15]
 800e9ae:	e022      	b.n	800e9f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	1ad2      	subs	r2, r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d217      	bcs.n	800e9f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	789b      	ldrb	r3, [r3, #2]
 800e9ca:	613b      	str	r3, [r7, #16]
 800e9cc:	e010      	b.n	800e9f0 <sync_window+0x78>
					wsect += fs->fsize;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6a1b      	ldr	r3, [r3, #32]
 800e9d2:	697a      	ldr	r2, [r7, #20]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	7858      	ldrb	r0, [r3, #1]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	697a      	ldr	r2, [r7, #20]
 800e9e6:	f7ff fd1d 	bl	800e424 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	613b      	str	r3, [r7, #16]
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	2b01      	cmp	r3, #1
 800e9f4:	d8eb      	bhi.n	800e9ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea12:	683a      	ldr	r2, [r7, #0]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d01b      	beq.n	800ea50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7ff ffad 	bl	800e978 <sync_window>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d113      	bne.n	800ea50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	7858      	ldrb	r0, [r3, #1]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea32:	2301      	movs	r3, #1
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	f7ff fcd5 	bl	800e3e4 <disk_read>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d004      	beq.n	800ea4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ea40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800ea50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
	...

0800ea5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff ff87 	bl	800e978 <sync_window>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d158      	bne.n	800eb26 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	2b03      	cmp	r3, #3
 800ea7a:	d148      	bne.n	800eb0e <sync_fs+0xb2>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	791b      	ldrb	r3, [r3, #4]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d144      	bne.n	800eb0e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	3338      	adds	r3, #56	; 0x38
 800ea88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fda9 	bl	800e5e6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3338      	adds	r3, #56	; 0x38
 800ea98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea9c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f7ff fd38 	bl	800e516 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	3338      	adds	r3, #56	; 0x38
 800eaaa:	4921      	ldr	r1, [pc, #132]	; (800eb30 <sync_fs+0xd4>)
 800eaac:	4618      	mov	r0, r3
 800eaae:	f7ff fd4d 	bl	800e54c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	3338      	adds	r3, #56	; 0x38
 800eab6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eaba:	491e      	ldr	r1, [pc, #120]	; (800eb34 <sync_fs+0xd8>)
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7ff fd45 	bl	800e54c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3338      	adds	r3, #56	; 0x38
 800eac6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	695b      	ldr	r3, [r3, #20]
 800eace:	4619      	mov	r1, r3
 800ead0:	4610      	mov	r0, r2
 800ead2:	f7ff fd3b 	bl	800e54c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	3338      	adds	r3, #56	; 0x38
 800eada:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	691b      	ldr	r3, [r3, #16]
 800eae2:	4619      	mov	r1, r3
 800eae4:	4610      	mov	r0, r2
 800eae6:	f7ff fd31 	bl	800e54c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	7858      	ldrb	r0, [r3, #1]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb02:	2301      	movs	r3, #1
 800eb04:	f7ff fc8e 	bl	800e424 <disk_write>
			fs->fsi_flag = 0;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	785b      	ldrb	r3, [r3, #1]
 800eb12:	2200      	movs	r2, #0
 800eb14:	2100      	movs	r1, #0
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7ff fca4 	bl	800e464 <disk_ioctl>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <sync_fs+0xca>
 800eb22:	2301      	movs	r3, #1
 800eb24:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3710      	adds	r7, #16
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	41615252 	.word	0x41615252
 800eb34:	61417272 	.word	0x61417272

0800eb38 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b083      	sub	sp, #12
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	3b02      	subs	r3, #2
 800eb46:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	69db      	ldr	r3, [r3, #28]
 800eb4c:	3b02      	subs	r3, #2
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d301      	bcc.n	800eb58 <clust2sect+0x20>
 800eb54:	2300      	movs	r3, #0
 800eb56:	e008      	b.n	800eb6a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	895b      	ldrh	r3, [r3, #10]
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	fb03 f202 	mul.w	r2, r3, r2
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb68:	4413      	add	r3, r2
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	370c      	adds	r7, #12
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr

0800eb76 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b086      	sub	sp, #24
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d904      	bls.n	800eb96 <get_fat+0x20>
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	69db      	ldr	r3, [r3, #28]
 800eb90:	683a      	ldr	r2, [r7, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d302      	bcc.n	800eb9c <get_fat+0x26>
		val = 1;	/* Internal error */
 800eb96:	2301      	movs	r3, #1
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	e08f      	b.n	800ecbc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eba0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	781b      	ldrb	r3, [r3, #0]
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d062      	beq.n	800ec70 <get_fat+0xfa>
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	dc7c      	bgt.n	800eca8 <get_fat+0x132>
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d002      	beq.n	800ebb8 <get_fat+0x42>
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d042      	beq.n	800ec3c <get_fat+0xc6>
 800ebb6:	e077      	b.n	800eca8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	085b      	lsrs	r3, r3, #1
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	0a5b      	lsrs	r3, r3, #9
 800ebce:	4413      	add	r3, r2
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6938      	ldr	r0, [r7, #16]
 800ebd4:	f7ff ff14 	bl	800ea00 <move_window>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d167      	bne.n	800ecae <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	1c5a      	adds	r2, r3, #1
 800ebe2:	60fa      	str	r2, [r7, #12]
 800ebe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	4413      	add	r3, r2
 800ebec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ebf0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	0a5b      	lsrs	r3, r3, #9
 800ebfa:	4413      	add	r3, r2
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	6938      	ldr	r0, [r7, #16]
 800ec00:	f7ff fefe 	bl	800ea00 <move_window>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d153      	bne.n	800ecb2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec10:	693a      	ldr	r2, [r7, #16]
 800ec12:	4413      	add	r3, r2
 800ec14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ec18:	021b      	lsls	r3, r3, #8
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	f003 0301 	and.w	r3, r3, #1
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d002      	beq.n	800ec32 <get_fat+0xbc>
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	091b      	lsrs	r3, r3, #4
 800ec30:	e002      	b.n	800ec38 <get_fat+0xc2>
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec38:	617b      	str	r3, [r7, #20]
			break;
 800ec3a:	e03f      	b.n	800ecbc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	0a1b      	lsrs	r3, r3, #8
 800ec44:	4413      	add	r3, r2
 800ec46:	4619      	mov	r1, r3
 800ec48:	6938      	ldr	r0, [r7, #16]
 800ec4a:	f7ff fed9 	bl	800ea00 <move_window>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d130      	bne.n	800ecb6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	005b      	lsls	r3, r3, #1
 800ec5e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec62:	4413      	add	r3, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff fc1b 	bl	800e4a0 <ld_word>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	617b      	str	r3, [r7, #20]
			break;
 800ec6e:	e025      	b.n	800ecbc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	09db      	lsrs	r3, r3, #7
 800ec78:	4413      	add	r3, r2
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	6938      	ldr	r0, [r7, #16]
 800ec7e:	f7ff febf 	bl	800ea00 <move_window>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d118      	bne.n	800ecba <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ec96:	4413      	add	r3, r2
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fc19 	bl	800e4d0 <ld_dword>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eca4:	617b      	str	r3, [r7, #20]
			break;
 800eca6:	e009      	b.n	800ecbc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eca8:	2301      	movs	r3, #1
 800ecaa:	617b      	str	r3, [r7, #20]
 800ecac:	e006      	b.n	800ecbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecae:	bf00      	nop
 800ecb0:	e004      	b.n	800ecbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecb2:	bf00      	nop
 800ecb4:	e002      	b.n	800ecbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ecb6:	bf00      	nop
 800ecb8:	e000      	b.n	800ecbc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ecba:	bf00      	nop
		}
	}

	return val;
 800ecbc:	697b      	ldr	r3, [r7, #20]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3718      	adds	r7, #24
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ecc6:	b590      	push	{r4, r7, lr}
 800ecc8:	b089      	sub	sp, #36	; 0x24
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	60f8      	str	r0, [r7, #12]
 800ecce:	60b9      	str	r1, [r7, #8]
 800ecd0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	f240 80d2 	bls.w	800ee82 <put_fat+0x1bc>
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	69db      	ldr	r3, [r3, #28]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	429a      	cmp	r2, r3
 800ece6:	f080 80cc 	bcs.w	800ee82 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	f000 8096 	beq.w	800ee20 <put_fat+0x15a>
 800ecf4:	2b03      	cmp	r3, #3
 800ecf6:	f300 80cd 	bgt.w	800ee94 <put_fat+0x1ce>
 800ecfa:	2b01      	cmp	r3, #1
 800ecfc:	d002      	beq.n	800ed04 <put_fat+0x3e>
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d06e      	beq.n	800ede0 <put_fat+0x11a>
 800ed02:	e0c7      	b.n	800ee94 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	61bb      	str	r3, [r7, #24]
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	085b      	lsrs	r3, r3, #1
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	4413      	add	r3, r2
 800ed10:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	0a5b      	lsrs	r3, r3, #9
 800ed1a:	4413      	add	r3, r2
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f7ff fe6e 	bl	800ea00 <move_window>
 800ed24:	4603      	mov	r3, r0
 800ed26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed28:	7ffb      	ldrb	r3, [r7, #31]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f040 80ab 	bne.w	800ee86 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	1c59      	adds	r1, r3, #1
 800ed3a:	61b9      	str	r1, [r7, #24]
 800ed3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed40:	4413      	add	r3, r2
 800ed42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f003 0301 	and.w	r3, r3, #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00d      	beq.n	800ed6a <put_fat+0xa4>
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	b25b      	sxtb	r3, r3
 800ed54:	f003 030f 	and.w	r3, r3, #15
 800ed58:	b25a      	sxtb	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	011b      	lsls	r3, r3, #4
 800ed60:	b25b      	sxtb	r3, r3
 800ed62:	4313      	orrs	r3, r2
 800ed64:	b25b      	sxtb	r3, r3
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	e001      	b.n	800ed6e <put_fat+0xa8>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	697a      	ldr	r2, [r7, #20]
 800ed70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2201      	movs	r2, #1
 800ed76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	0a5b      	lsrs	r3, r3, #9
 800ed80:	4413      	add	r3, r2
 800ed82:	4619      	mov	r1, r3
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff fe3b 	bl	800ea00 <move_window>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed8e:	7ffb      	ldrb	r3, [r7, #31]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d17a      	bne.n	800ee8a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eda0:	4413      	add	r3, r2
 800eda2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	f003 0301 	and.w	r3, r3, #1
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <put_fat+0xf0>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	091b      	lsrs	r3, r3, #4
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	e00e      	b.n	800edd4 <put_fat+0x10e>
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	b25b      	sxtb	r3, r3
 800edbc:	f023 030f 	bic.w	r3, r3, #15
 800edc0:	b25a      	sxtb	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	0a1b      	lsrs	r3, r3, #8
 800edc6:	b25b      	sxtb	r3, r3
 800edc8:	f003 030f 	and.w	r3, r3, #15
 800edcc:	b25b      	sxtb	r3, r3
 800edce:	4313      	orrs	r3, r2
 800edd0:	b25b      	sxtb	r3, r3
 800edd2:	b2db      	uxtb	r3, r3
 800edd4:	697a      	ldr	r2, [r7, #20]
 800edd6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	70da      	strb	r2, [r3, #3]
			break;
 800edde:	e059      	b.n	800ee94 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	0a1b      	lsrs	r3, r3, #8
 800ede8:	4413      	add	r3, r2
 800edea:	4619      	mov	r1, r3
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7ff fe07 	bl	800ea00 <move_window>
 800edf2:	4603      	mov	r3, r0
 800edf4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edf6:	7ffb      	ldrb	r3, [r7, #31]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d148      	bne.n	800ee8e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	005b      	lsls	r3, r3, #1
 800ee06:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ee0a:	4413      	add	r3, r2
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	b292      	uxth	r2, r2
 800ee10:	4611      	mov	r1, r2
 800ee12:	4618      	mov	r0, r3
 800ee14:	f7ff fb7f 	bl	800e516 <st_word>
			fs->wflag = 1;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	70da      	strb	r2, [r3, #3]
			break;
 800ee1e:	e039      	b.n	800ee94 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	09db      	lsrs	r3, r3, #7
 800ee28:	4413      	add	r3, r2
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff fde7 	bl	800ea00 <move_window>
 800ee32:	4603      	mov	r3, r0
 800ee34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee36:	7ffb      	ldrb	r3, [r7, #31]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d12a      	bne.n	800ee92 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee50:	4413      	add	r3, r2
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7ff fb3c 	bl	800e4d0 <ld_dword>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee5e:	4323      	orrs	r3, r4
 800ee60:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	009b      	lsls	r3, r3, #2
 800ee6c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ee70:	4413      	add	r3, r2
 800ee72:	6879      	ldr	r1, [r7, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff fb69 	bl	800e54c <st_dword>
			fs->wflag = 1;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	70da      	strb	r2, [r3, #3]
			break;
 800ee80:	e008      	b.n	800ee94 <put_fat+0x1ce>
		}
	}
 800ee82:	bf00      	nop
 800ee84:	e006      	b.n	800ee94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ee86:	bf00      	nop
 800ee88:	e004      	b.n	800ee94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ee8a:	bf00      	nop
 800ee8c:	e002      	b.n	800ee94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ee8e:	bf00      	nop
 800ee90:	e000      	b.n	800ee94 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ee92:	bf00      	nop
	return res;
 800ee94:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3724      	adds	r7, #36	; 0x24
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd90      	pop	{r4, r7, pc}

0800ee9e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b088      	sub	sp, #32
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	60b9      	str	r1, [r7, #8]
 800eea8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d904      	bls.n	800eec4 <remove_chain+0x26>
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	69db      	ldr	r3, [r3, #28]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d301      	bcc.n	800eec8 <remove_chain+0x2a>
 800eec4:	2302      	movs	r3, #2
 800eec6:	e04b      	b.n	800ef60 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00c      	beq.n	800eee8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	69b8      	ldr	r0, [r7, #24]
 800eed6:	f7ff fef6 	bl	800ecc6 <put_fat>
 800eeda:	4603      	mov	r3, r0
 800eedc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eede:	7ffb      	ldrb	r3, [r7, #31]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <remove_chain+0x4a>
 800eee4:	7ffb      	ldrb	r3, [r7, #31]
 800eee6:	e03b      	b.n	800ef60 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	68f8      	ldr	r0, [r7, #12]
 800eeec:	f7ff fe43 	bl	800eb76 <get_fat>
 800eef0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d031      	beq.n	800ef5c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d101      	bne.n	800ef02 <remove_chain+0x64>
 800eefe:	2302      	movs	r3, #2
 800ef00:	e02e      	b.n	800ef60 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef08:	d101      	bne.n	800ef0e <remove_chain+0x70>
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e028      	b.n	800ef60 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef0e:	2200      	movs	r2, #0
 800ef10:	68b9      	ldr	r1, [r7, #8]
 800ef12:	69b8      	ldr	r0, [r7, #24]
 800ef14:	f7ff fed7 	bl	800ecc6 <put_fat>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef1c:	7ffb      	ldrb	r3, [r7, #31]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d001      	beq.n	800ef26 <remove_chain+0x88>
 800ef22:	7ffb      	ldrb	r3, [r7, #31]
 800ef24:	e01c      	b.n	800ef60 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	695a      	ldr	r2, [r3, #20]
 800ef2a:	69bb      	ldr	r3, [r7, #24]
 800ef2c:	69db      	ldr	r3, [r3, #28]
 800ef2e:	3b02      	subs	r3, #2
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d20b      	bcs.n	800ef4c <remove_chain+0xae>
			fs->free_clst++;
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	695b      	ldr	r3, [r3, #20]
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	791b      	ldrb	r3, [r3, #4]
 800ef42:	f043 0301 	orr.w	r3, r3, #1
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef50:	69bb      	ldr	r3, [r7, #24]
 800ef52:	69db      	ldr	r3, [r3, #28]
 800ef54:	68ba      	ldr	r2, [r7, #8]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d3c6      	bcc.n	800eee8 <remove_chain+0x4a>
 800ef5a:	e000      	b.n	800ef5e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef5c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3720      	adds	r7, #32
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10d      	bne.n	800ef9a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	691b      	ldr	r3, [r3, #16]
 800ef82:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d004      	beq.n	800ef94 <create_chain+0x2c>
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	69ba      	ldr	r2, [r7, #24]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d31b      	bcc.n	800efcc <create_chain+0x64>
 800ef94:	2301      	movs	r3, #1
 800ef96:	61bb      	str	r3, [r7, #24]
 800ef98:	e018      	b.n	800efcc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f7ff fdea 	bl	800eb76 <get_fat>
 800efa2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d801      	bhi.n	800efae <create_chain+0x46>
 800efaa:	2301      	movs	r3, #1
 800efac:	e070      	b.n	800f090 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efb4:	d101      	bne.n	800efba <create_chain+0x52>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	e06a      	b.n	800f090 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	69db      	ldr	r3, [r3, #28]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d201      	bcs.n	800efc8 <create_chain+0x60>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	e063      	b.n	800f090 <create_chain+0x128>
		scl = clst;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800efcc:	69bb      	ldr	r3, [r7, #24]
 800efce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	3301      	adds	r3, #1
 800efd4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	69db      	ldr	r3, [r3, #28]
 800efda:	69fa      	ldr	r2, [r7, #28]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d307      	bcc.n	800eff0 <create_chain+0x88>
				ncl = 2;
 800efe0:	2302      	movs	r3, #2
 800efe2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800efe4:	69fa      	ldr	r2, [r7, #28]
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d901      	bls.n	800eff0 <create_chain+0x88>
 800efec:	2300      	movs	r3, #0
 800efee:	e04f      	b.n	800f090 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eff0:	69f9      	ldr	r1, [r7, #28]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff fdbf 	bl	800eb76 <get_fat>
 800eff8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00e      	beq.n	800f01e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d003      	beq.n	800f00e <create_chain+0xa6>
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f00c:	d101      	bne.n	800f012 <create_chain+0xaa>
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	e03e      	b.n	800f090 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f012:	69fa      	ldr	r2, [r7, #28]
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	429a      	cmp	r2, r3
 800f018:	d1da      	bne.n	800efd0 <create_chain+0x68>
 800f01a:	2300      	movs	r3, #0
 800f01c:	e038      	b.n	800f090 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f01e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f024:	69f9      	ldr	r1, [r7, #28]
 800f026:	6938      	ldr	r0, [r7, #16]
 800f028:	f7ff fe4d 	bl	800ecc6 <put_fat>
 800f02c:	4603      	mov	r3, r0
 800f02e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f030:	7dfb      	ldrb	r3, [r7, #23]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d109      	bne.n	800f04a <create_chain+0xe2>
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d006      	beq.n	800f04a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f03c:	69fa      	ldr	r2, [r7, #28]
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	6938      	ldr	r0, [r7, #16]
 800f042:	f7ff fe40 	bl	800ecc6 <put_fat>
 800f046:	4603      	mov	r3, r0
 800f048:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f04a:	7dfb      	ldrb	r3, [r7, #23]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d116      	bne.n	800f07e <create_chain+0x116>
		fs->last_clst = ncl;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	69fa      	ldr	r2, [r7, #28]
 800f054:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	695a      	ldr	r2, [r3, #20]
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	3b02      	subs	r3, #2
 800f060:	429a      	cmp	r2, r3
 800f062:	d804      	bhi.n	800f06e <create_chain+0x106>
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	695b      	ldr	r3, [r3, #20]
 800f068:	1e5a      	subs	r2, r3, #1
 800f06a:	693b      	ldr	r3, [r7, #16]
 800f06c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	791b      	ldrb	r3, [r3, #4]
 800f072:	f043 0301 	orr.w	r3, r3, #1
 800f076:	b2da      	uxtb	r2, r3
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	711a      	strb	r2, [r3, #4]
 800f07c:	e007      	b.n	800f08e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d102      	bne.n	800f08a <create_chain+0x122>
 800f084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f088:	e000      	b.n	800f08c <create_chain+0x124>
 800f08a:	2301      	movs	r3, #1
 800f08c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f08e:	69fb      	ldr	r3, [r7, #28]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3720      	adds	r7, #32
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f098:	b480      	push	{r7}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0ac:	3304      	adds	r3, #4
 800f0ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	0a5b      	lsrs	r3, r3, #9
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	8952      	ldrh	r2, [r2, #10]
 800f0b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	1d1a      	adds	r2, r3, #4
 800f0c2:	613a      	str	r2, [r7, #16]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d101      	bne.n	800f0d2 <clmt_clust+0x3a>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	e010      	b.n	800f0f4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f0d2:	697a      	ldr	r2, [r7, #20]
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d307      	bcc.n	800f0ea <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	617b      	str	r3, [r7, #20]
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0e8:	e7e9      	b.n	800f0be <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f0ea:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	4413      	add	r3, r2
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	371c      	adds	r7, #28
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b086      	sub	sp, #24
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f116:	d204      	bcs.n	800f122 <dir_sdi+0x22>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f003 031f 	and.w	r3, r3, #31
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d001      	beq.n	800f126 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f122:	2302      	movs	r3, #2
 800f124:	e063      	b.n	800f1ee <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	683a      	ldr	r2, [r7, #0]
 800f12a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <dir_sdi+0x46>
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d902      	bls.n	800f146 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f144:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10c      	bne.n	800f166 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	095b      	lsrs	r3, r3, #5
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	8912      	ldrh	r2, [r2, #8]
 800f154:	4293      	cmp	r3, r2
 800f156:	d301      	bcc.n	800f15c <dir_sdi+0x5c>
 800f158:	2302      	movs	r3, #2
 800f15a:	e048      	b.n	800f1ee <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	61da      	str	r2, [r3, #28]
 800f164:	e029      	b.n	800f1ba <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	895b      	ldrh	r3, [r3, #10]
 800f16a:	025b      	lsls	r3, r3, #9
 800f16c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f16e:	e019      	b.n	800f1a4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6979      	ldr	r1, [r7, #20]
 800f174:	4618      	mov	r0, r3
 800f176:	f7ff fcfe 	bl	800eb76 <get_fat>
 800f17a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f182:	d101      	bne.n	800f188 <dir_sdi+0x88>
 800f184:	2301      	movs	r3, #1
 800f186:	e032      	b.n	800f1ee <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d904      	bls.n	800f198 <dir_sdi+0x98>
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	69db      	ldr	r3, [r3, #28]
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	429a      	cmp	r2, r3
 800f196:	d301      	bcc.n	800f19c <dir_sdi+0x9c>
 800f198:	2302      	movs	r3, #2
 800f19a:	e028      	b.n	800f1ee <dir_sdi+0xee>
			ofs -= csz;
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d2e1      	bcs.n	800f170 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f1ac:	6979      	ldr	r1, [r7, #20]
 800f1ae:	6938      	ldr	r0, [r7, #16]
 800f1b0:	f7ff fcc2 	bl	800eb38 <clust2sect>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <dir_sdi+0xcc>
 800f1c8:	2302      	movs	r3, #2
 800f1ca:	e010      	b.n	800f1ee <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	69da      	ldr	r2, [r3, #28]
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	0a5b      	lsrs	r3, r3, #9
 800f1d4:	441a      	add	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1e6:	441a      	add	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3718      	adds	r7, #24
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	bd80      	pop	{r7, pc}

0800f1f6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f1f6:	b580      	push	{r7, lr}
 800f1f8:	b086      	sub	sp, #24
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
 800f1fe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	3320      	adds	r3, #32
 800f20c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	69db      	ldr	r3, [r3, #28]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d003      	beq.n	800f21e <dir_next+0x28>
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f21c:	d301      	bcc.n	800f222 <dir_next+0x2c>
 800f21e:	2304      	movs	r3, #4
 800f220:	e0aa      	b.n	800f378 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f040 8098 	bne.w	800f35e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	69db      	ldr	r3, [r3, #28]
 800f232:	1c5a      	adds	r2, r3, #1
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d10b      	bne.n	800f258 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	095b      	lsrs	r3, r3, #5
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	8912      	ldrh	r2, [r2, #8]
 800f248:	4293      	cmp	r3, r2
 800f24a:	f0c0 8088 	bcc.w	800f35e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	61da      	str	r2, [r3, #28]
 800f254:	2304      	movs	r3, #4
 800f256:	e08f      	b.n	800f378 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	0a5b      	lsrs	r3, r3, #9
 800f25c:	68fa      	ldr	r2, [r7, #12]
 800f25e:	8952      	ldrh	r2, [r2, #10]
 800f260:	3a01      	subs	r2, #1
 800f262:	4013      	ands	r3, r2
 800f264:	2b00      	cmp	r3, #0
 800f266:	d17a      	bne.n	800f35e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	699b      	ldr	r3, [r3, #24]
 800f26e:	4619      	mov	r1, r3
 800f270:	4610      	mov	r0, r2
 800f272:	f7ff fc80 	bl	800eb76 <get_fat>
 800f276:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d801      	bhi.n	800f282 <dir_next+0x8c>
 800f27e:	2302      	movs	r3, #2
 800f280:	e07a      	b.n	800f378 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f288:	d101      	bne.n	800f28e <dir_next+0x98>
 800f28a:	2301      	movs	r3, #1
 800f28c:	e074      	b.n	800f378 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	429a      	cmp	r2, r3
 800f296:	d358      	bcc.n	800f34a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d104      	bne.n	800f2a8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	61da      	str	r2, [r3, #28]
 800f2a4:	2304      	movs	r3, #4
 800f2a6:	e067      	b.n	800f378 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	699b      	ldr	r3, [r3, #24]
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	4610      	mov	r0, r2
 800f2b2:	f7ff fe59 	bl	800ef68 <create_chain>
 800f2b6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d101      	bne.n	800f2c2 <dir_next+0xcc>
 800f2be:	2307      	movs	r3, #7
 800f2c0:	e05a      	b.n	800f378 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d101      	bne.n	800f2cc <dir_next+0xd6>
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	e055      	b.n	800f378 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2d2:	d101      	bne.n	800f2d8 <dir_next+0xe2>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e04f      	b.n	800f378 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f7ff fb4d 	bl	800e978 <sync_window>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <dir_next+0xf2>
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e047      	b.n	800f378 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	3338      	adds	r3, #56	; 0x38
 800f2ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7ff f977 	bl	800e5e6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	613b      	str	r3, [r7, #16]
 800f2fc:	6979      	ldr	r1, [r7, #20]
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f7ff fc1a 	bl	800eb38 <clust2sect>
 800f304:	4602      	mov	r2, r0
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	635a      	str	r2, [r3, #52]	; 0x34
 800f30a:	e012      	b.n	800f332 <dir_next+0x13c>
						fs->wflag = 1;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2201      	movs	r2, #1
 800f310:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f7ff fb30 	bl	800e978 <sync_window>
 800f318:	4603      	mov	r3, r0
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d001      	beq.n	800f322 <dir_next+0x12c>
 800f31e:	2301      	movs	r3, #1
 800f320:	e02a      	b.n	800f378 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	3301      	adds	r3, #1
 800f326:	613b      	str	r3, [r7, #16]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	635a      	str	r2, [r3, #52]	; 0x34
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	895b      	ldrh	r3, [r3, #10]
 800f336:	461a      	mov	r2, r3
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d3e6      	bcc.n	800f30c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	1ad2      	subs	r2, r2, r3
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f350:	6979      	ldr	r1, [r7, #20]
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7ff fbf0 	bl	800eb38 <clust2sect>
 800f358:	4602      	mov	r2, r0
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	68ba      	ldr	r2, [r7, #8]
 800f362:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f370:	441a      	add	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f376:	2300      	movs	r3, #0
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f390:	2100      	movs	r1, #0
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff feb4 	bl	800f100 <dir_sdi>
 800f398:	4603      	mov	r3, r0
 800f39a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f39c:	7dfb      	ldrb	r3, [r7, #23]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d12b      	bne.n	800f3fa <dir_alloc+0x7a>
		n = 0;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	69db      	ldr	r3, [r3, #28]
 800f3aa:	4619      	mov	r1, r3
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7ff fb27 	bl	800ea00 <move_window>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d11d      	bne.n	800f3f8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6a1b      	ldr	r3, [r3, #32]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	2be5      	cmp	r3, #229	; 0xe5
 800f3c4:	d004      	beq.n	800f3d0 <dir_alloc+0x50>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d107      	bne.n	800f3e0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	613b      	str	r3, [r7, #16]
 800f3d6:	693a      	ldr	r2, [r7, #16]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d102      	bne.n	800f3e4 <dir_alloc+0x64>
 800f3de:	e00c      	b.n	800f3fa <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f3e4:	2101      	movs	r1, #1
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f7ff ff05 	bl	800f1f6 <dir_next>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f3f0:	7dfb      	ldrb	r3, [r7, #23]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d0d7      	beq.n	800f3a6 <dir_alloc+0x26>
 800f3f6:	e000      	b.n	800f3fa <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f3f8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f3fa:	7dfb      	ldrb	r3, [r7, #23]
 800f3fc:	2b04      	cmp	r3, #4
 800f3fe:	d101      	bne.n	800f404 <dir_alloc+0x84>
 800f400:	2307      	movs	r3, #7
 800f402:	75fb      	strb	r3, [r7, #23]
	return res;
 800f404:	7dfb      	ldrb	r3, [r7, #23]
}
 800f406:	4618      	mov	r0, r3
 800f408:	3718      	adds	r7, #24
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b084      	sub	sp, #16
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	331a      	adds	r3, #26
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7ff f83f 	bl	800e4a0 <ld_word>
 800f422:	4603      	mov	r3, r0
 800f424:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	2b03      	cmp	r3, #3
 800f42c:	d109      	bne.n	800f442 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	3314      	adds	r3, #20
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff f834 	bl	800e4a0 <ld_word>
 800f438:	4603      	mov	r3, r0
 800f43a:	041b      	lsls	r3, r3, #16
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	4313      	orrs	r3, r2
 800f440:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f442:	68fb      	ldr	r3, [r7, #12]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3710      	adds	r7, #16
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}

0800f44c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b084      	sub	sp, #16
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	331a      	adds	r3, #26
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	b292      	uxth	r2, r2
 800f460:	4611      	mov	r1, r2
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff f857 	bl	800e516 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d109      	bne.n	800f484 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	f103 0214 	add.w	r2, r3, #20
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	0c1b      	lsrs	r3, r3, #16
 800f47a:	b29b      	uxth	r3, r3
 800f47c:	4619      	mov	r1, r3
 800f47e:	4610      	mov	r0, r2
 800f480:	f7ff f849 	bl	800e516 <st_word>
	}
}
 800f484:	bf00      	nop
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f48c:	b590      	push	{r4, r7, lr}
 800f48e:	b087      	sub	sp, #28
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	331a      	adds	r3, #26
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7ff f800 	bl	800e4a0 <ld_word>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <cmp_lfn+0x1e>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e059      	b.n	800f55e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f4b2:	1e5a      	subs	r2, r3, #1
 800f4b4:	4613      	mov	r3, r2
 800f4b6:	005b      	lsls	r3, r3, #1
 800f4b8:	4413      	add	r3, r2
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	4413      	add	r3, r2
 800f4be:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	81fb      	strh	r3, [r7, #14]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	613b      	str	r3, [r7, #16]
 800f4c8:	e033      	b.n	800f532 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f4ca:	4a27      	ldr	r2, [pc, #156]	; (800f568 <cmp_lfn+0xdc>)
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f7fe ffe1 	bl	800e4a0 <ld_word>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f4e2:	89fb      	ldrh	r3, [r7, #14]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d01a      	beq.n	800f51e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2bfe      	cmp	r3, #254	; 0xfe
 800f4ec:	d812      	bhi.n	800f514 <cmp_lfn+0x88>
 800f4ee:	89bb      	ldrh	r3, [r7, #12]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f002 f939 	bl	8011768 <ff_wtoupper>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	461c      	mov	r4, r3
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	1c5a      	adds	r2, r3, #1
 800f4fe:	617a      	str	r2, [r7, #20]
 800f500:	005b      	lsls	r3, r3, #1
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	4413      	add	r3, r2
 800f506:	881b      	ldrh	r3, [r3, #0]
 800f508:	4618      	mov	r0, r3
 800f50a:	f002 f92d 	bl	8011768 <ff_wtoupper>
 800f50e:	4603      	mov	r3, r0
 800f510:	429c      	cmp	r4, r3
 800f512:	d001      	beq.n	800f518 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f514:	2300      	movs	r3, #0
 800f516:	e022      	b.n	800f55e <cmp_lfn+0xd2>
			}
			wc = uc;
 800f518:	89bb      	ldrh	r3, [r7, #12]
 800f51a:	81fb      	strh	r3, [r7, #14]
 800f51c:	e006      	b.n	800f52c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f51e:	89bb      	ldrh	r3, [r7, #12]
 800f520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f524:	4293      	cmp	r3, r2
 800f526:	d001      	beq.n	800f52c <cmp_lfn+0xa0>
 800f528:	2300      	movs	r3, #0
 800f52a:	e018      	b.n	800f55e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	3301      	adds	r3, #1
 800f530:	613b      	str	r3, [r7, #16]
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	2b0c      	cmp	r3, #12
 800f536:	d9c8      	bls.n	800f4ca <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00b      	beq.n	800f55c <cmp_lfn+0xd0>
 800f544:	89fb      	ldrh	r3, [r7, #14]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d008      	beq.n	800f55c <cmp_lfn+0xd0>
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	4413      	add	r3, r2
 800f552:	881b      	ldrh	r3, [r3, #0]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <cmp_lfn+0xd0>
 800f558:	2300      	movs	r3, #0
 800f55a:	e000      	b.n	800f55e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f55c:	2301      	movs	r3, #1
}
 800f55e:	4618      	mov	r0, r3
 800f560:	371c      	adds	r7, #28
 800f562:	46bd      	mov	sp, r7
 800f564:	bd90      	pop	{r4, r7, pc}
 800f566:	bf00      	nop
 800f568:	0801be20 	.word	0x0801be20

0800f56c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b086      	sub	sp, #24
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	331a      	adds	r3, #26
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fe ff90 	bl	800e4a0 <ld_word>
 800f580:	4603      	mov	r3, r0
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <pick_lfn+0x1e>
 800f586:	2300      	movs	r3, #0
 800f588:	e04d      	b.n	800f626 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f592:	1e5a      	subs	r2, r3, #1
 800f594:	4613      	mov	r3, r2
 800f596:	005b      	lsls	r3, r3, #1
 800f598:	4413      	add	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	81fb      	strh	r3, [r7, #14]
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	613b      	str	r3, [r7, #16]
 800f5a8:	e028      	b.n	800f5fc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f5aa:	4a21      	ldr	r2, [pc, #132]	; (800f630 <pick_lfn+0xc4>)
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	4413      	add	r3, r2
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fe ff71 	bl	800e4a0 <ld_word>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f5c2:	89fb      	ldrh	r3, [r7, #14]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d00f      	beq.n	800f5e8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	2bfe      	cmp	r3, #254	; 0xfe
 800f5cc:	d901      	bls.n	800f5d2 <pick_lfn+0x66>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	e029      	b.n	800f626 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f5d2:	89bb      	ldrh	r3, [r7, #12]
 800f5d4:	81fb      	strh	r3, [r7, #14]
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	1c5a      	adds	r2, r3, #1
 800f5da:	617a      	str	r2, [r7, #20]
 800f5dc:	005b      	lsls	r3, r3, #1
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	89fa      	ldrh	r2, [r7, #14]
 800f5e4:	801a      	strh	r2, [r3, #0]
 800f5e6:	e006      	b.n	800f5f6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f5e8:	89bb      	ldrh	r3, [r7, #12]
 800f5ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d001      	beq.n	800f5f6 <pick_lfn+0x8a>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	e017      	b.n	800f626 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	613b      	str	r3, [r7, #16]
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	2b0c      	cmp	r3, #12
 800f600:	d9d3      	bls.n	800f5aa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	781b      	ldrb	r3, [r3, #0]
 800f606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00a      	beq.n	800f624 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	2bfe      	cmp	r3, #254	; 0xfe
 800f612:	d901      	bls.n	800f618 <pick_lfn+0xac>
 800f614:	2300      	movs	r3, #0
 800f616:	e006      	b.n	800f626 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	005b      	lsls	r3, r3, #1
 800f61c:	687a      	ldr	r2, [r7, #4]
 800f61e:	4413      	add	r3, r2
 800f620:	2200      	movs	r2, #0
 800f622:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f624:	2301      	movs	r3, #1
}
 800f626:	4618      	mov	r0, r3
 800f628:	3718      	adds	r7, #24
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	0801be20 	.word	0x0801be20

0800f634 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	4611      	mov	r1, r2
 800f640:	461a      	mov	r2, r3
 800f642:	460b      	mov	r3, r1
 800f644:	71fb      	strb	r3, [r7, #7]
 800f646:	4613      	mov	r3, r2
 800f648:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	330d      	adds	r3, #13
 800f64e:	79ba      	ldrb	r2, [r7, #6]
 800f650:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	330b      	adds	r3, #11
 800f656:	220f      	movs	r2, #15
 800f658:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f65a:	68bb      	ldr	r3, [r7, #8]
 800f65c:	330c      	adds	r3, #12
 800f65e:	2200      	movs	r2, #0
 800f660:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	331a      	adds	r3, #26
 800f666:	2100      	movs	r1, #0
 800f668:	4618      	mov	r0, r3
 800f66a:	f7fe ff54 	bl	800e516 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	1e5a      	subs	r2, r3, #1
 800f672:	4613      	mov	r3, r2
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	4413      	add	r3, r2
 800f678:	009b      	lsls	r3, r3, #2
 800f67a:	4413      	add	r3, r2
 800f67c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f67e:	2300      	movs	r3, #0
 800f680:	82fb      	strh	r3, [r7, #22]
 800f682:	2300      	movs	r3, #0
 800f684:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f686:	8afb      	ldrh	r3, [r7, #22]
 800f688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f68c:	4293      	cmp	r3, r2
 800f68e:	d007      	beq.n	800f6a0 <put_lfn+0x6c>
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	1c5a      	adds	r2, r3, #1
 800f694:	61fa      	str	r2, [r7, #28]
 800f696:	005b      	lsls	r3, r3, #1
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4413      	add	r3, r2
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f6a0:	4a17      	ldr	r2, [pc, #92]	; (800f700 <put_lfn+0xcc>)
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	8afa      	ldrh	r2, [r7, #22]
 800f6b0:	4611      	mov	r1, r2
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fe ff2f 	bl	800e516 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f6b8:	8afb      	ldrh	r3, [r7, #22]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d102      	bne.n	800f6c4 <put_lfn+0x90>
 800f6be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f6c4:	69bb      	ldr	r3, [r7, #24]
 800f6c6:	3301      	adds	r3, #1
 800f6c8:	61bb      	str	r3, [r7, #24]
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	2b0c      	cmp	r3, #12
 800f6ce:	d9da      	bls.n	800f686 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f6d0:	8afb      	ldrh	r3, [r7, #22]
 800f6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d006      	beq.n	800f6e8 <put_lfn+0xb4>
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	005b      	lsls	r3, r3, #1
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d103      	bne.n	800f6f0 <put_lfn+0xbc>
 800f6e8:	79fb      	ldrb	r3, [r7, #7]
 800f6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	79fa      	ldrb	r2, [r7, #7]
 800f6f4:	701a      	strb	r2, [r3, #0]
}
 800f6f6:	bf00      	nop
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	0801be20 	.word	0x0801be20

0800f704 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08c      	sub	sp, #48	; 0x30
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f712:	220b      	movs	r2, #11
 800f714:	68b9      	ldr	r1, [r7, #8]
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f7fe ff44 	bl	800e5a4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	2b05      	cmp	r3, #5
 800f720:	d92b      	bls.n	800f77a <gen_numname+0x76>
		sr = seq;
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f726:	e022      	b.n	800f76e <gen_numname+0x6a>
			wc = *lfn++;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	1c9a      	adds	r2, r3, #2
 800f72c:	607a      	str	r2, [r7, #4]
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f732:	2300      	movs	r3, #0
 800f734:	62bb      	str	r3, [r7, #40]	; 0x28
 800f736:	e017      	b.n	800f768 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	005a      	lsls	r2, r3, #1
 800f73c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f73e:	f003 0301 	and.w	r3, r3, #1
 800f742:	4413      	add	r3, r2
 800f744:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f746:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f748:	085b      	lsrs	r3, r3, #1
 800f74a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f752:	2b00      	cmp	r3, #0
 800f754:	d005      	beq.n	800f762 <gen_numname+0x5e>
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f75c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f760:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f764:	3301      	adds	r3, #1
 800f766:	62bb      	str	r3, [r7, #40]	; 0x28
 800f768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76a:	2b0f      	cmp	r3, #15
 800f76c:	d9e4      	bls.n	800f738 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d1d8      	bne.n	800f728 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f77a:	2307      	movs	r3, #7
 800f77c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	b2db      	uxtb	r3, r3
 800f782:	f003 030f 	and.w	r3, r3, #15
 800f786:	b2db      	uxtb	r3, r3
 800f788:	3330      	adds	r3, #48	; 0x30
 800f78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f792:	2b39      	cmp	r3, #57	; 0x39
 800f794:	d904      	bls.n	800f7a0 <gen_numname+0x9c>
 800f796:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f79a:	3307      	adds	r3, #7
 800f79c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a2:	1e5a      	subs	r2, r3, #1
 800f7a4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f7a6:	3330      	adds	r3, #48	; 0x30
 800f7a8:	443b      	add	r3, r7
 800f7aa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f7ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	091b      	lsrs	r3, r3, #4
 800f7b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1df      	bne.n	800f77e <gen_numname+0x7a>
	ns[i] = '~';
 800f7be:	f107 0214 	add.w	r2, r7, #20
 800f7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c4:	4413      	add	r3, r2
 800f7c6:	227e      	movs	r2, #126	; 0x7e
 800f7c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	627b      	str	r3, [r7, #36]	; 0x24
 800f7ce:	e002      	b.n	800f7d6 <gen_numname+0xd2>
 800f7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d205      	bcs.n	800f7ea <gen_numname+0xe6>
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e2:	4413      	add	r3, r2
 800f7e4:	781b      	ldrb	r3, [r3, #0]
 800f7e6:	2b20      	cmp	r3, #32
 800f7e8:	d1f2      	bne.n	800f7d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ec:	2b07      	cmp	r3, #7
 800f7ee:	d807      	bhi.n	800f800 <gen_numname+0xfc>
 800f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f7f6:	3330      	adds	r3, #48	; 0x30
 800f7f8:	443b      	add	r3, r7
 800f7fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f7fe:	e000      	b.n	800f802 <gen_numname+0xfe>
 800f800:	2120      	movs	r1, #32
 800f802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	627a      	str	r2, [r7, #36]	; 0x24
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	4413      	add	r3, r2
 800f80c:	460a      	mov	r2, r1
 800f80e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f812:	2b07      	cmp	r3, #7
 800f814:	d9e9      	bls.n	800f7ea <gen_numname+0xe6>
}
 800f816:	bf00      	nop
 800f818:	bf00      	nop
 800f81a:	3730      	adds	r7, #48	; 0x30
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f828:	2300      	movs	r3, #0
 800f82a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f82c:	230b      	movs	r3, #11
 800f82e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	b2da      	uxtb	r2, r3
 800f834:	0852      	lsrs	r2, r2, #1
 800f836:	01db      	lsls	r3, r3, #7
 800f838:	4313      	orrs	r3, r2
 800f83a:	b2da      	uxtb	r2, r3
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	1c59      	adds	r1, r3, #1
 800f840:	6079      	str	r1, [r7, #4]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	4413      	add	r3, r2
 800f846:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	60bb      	str	r3, [r7, #8]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1ed      	bne.n	800f830 <sum_sfn+0x10>
	return sum;
 800f854:	7bfb      	ldrb	r3, [r7, #15]
}
 800f856:	4618      	mov	r0, r3
 800f858:	3714      	adds	r7, #20
 800f85a:	46bd      	mov	sp, r7
 800f85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f860:	4770      	bx	lr

0800f862 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b086      	sub	sp, #24
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f86c:	2304      	movs	r3, #4
 800f86e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f876:	23ff      	movs	r3, #255	; 0xff
 800f878:	757b      	strb	r3, [r7, #21]
 800f87a:	23ff      	movs	r3, #255	; 0xff
 800f87c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f87e:	e081      	b.n	800f984 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	4619      	mov	r1, r3
 800f886:	6938      	ldr	r0, [r7, #16]
 800f888:	f7ff f8ba 	bl	800ea00 <move_window>
 800f88c:	4603      	mov	r3, r0
 800f88e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f890:	7dfb      	ldrb	r3, [r7, #23]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d17c      	bne.n	800f990 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f89e:	7dbb      	ldrb	r3, [r7, #22]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d102      	bne.n	800f8aa <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f8a4:	2304      	movs	r3, #4
 800f8a6:	75fb      	strb	r3, [r7, #23]
 800f8a8:	e077      	b.n	800f99a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	330b      	adds	r3, #11
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8b6:	73fb      	strb	r3, [r7, #15]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	7bfa      	ldrb	r2, [r7, #15]
 800f8bc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f8be:	7dbb      	ldrb	r3, [r7, #22]
 800f8c0:	2be5      	cmp	r3, #229	; 0xe5
 800f8c2:	d00e      	beq.n	800f8e2 <dir_read+0x80>
 800f8c4:	7dbb      	ldrb	r3, [r7, #22]
 800f8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800f8c8:	d00b      	beq.n	800f8e2 <dir_read+0x80>
 800f8ca:	7bfb      	ldrb	r3, [r7, #15]
 800f8cc:	f023 0320 	bic.w	r3, r3, #32
 800f8d0:	2b08      	cmp	r3, #8
 800f8d2:	bf0c      	ite	eq
 800f8d4:	2301      	moveq	r3, #1
 800f8d6:	2300      	movne	r3, #0
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	461a      	mov	r2, r3
 800f8dc:	683b      	ldr	r3, [r7, #0]
 800f8de:	4293      	cmp	r3, r2
 800f8e0:	d002      	beq.n	800f8e8 <dir_read+0x86>
				ord = 0xFF;
 800f8e2:	23ff      	movs	r3, #255	; 0xff
 800f8e4:	757b      	strb	r3, [r7, #21]
 800f8e6:	e044      	b.n	800f972 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f8e8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ea:	2b0f      	cmp	r3, #15
 800f8ec:	d12f      	bne.n	800f94e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f8ee:	7dbb      	ldrb	r3, [r7, #22]
 800f8f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00d      	beq.n	800f914 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6a1b      	ldr	r3, [r3, #32]
 800f8fc:	7b5b      	ldrb	r3, [r3, #13]
 800f8fe:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f900:	7dbb      	ldrb	r3, [r7, #22]
 800f902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f906:	75bb      	strb	r3, [r7, #22]
 800f908:	7dbb      	ldrb	r3, [r7, #22]
 800f90a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	695a      	ldr	r2, [r3, #20]
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f914:	7dba      	ldrb	r2, [r7, #22]
 800f916:	7d7b      	ldrb	r3, [r7, #21]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d115      	bne.n	800f948 <dir_read+0xe6>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6a1b      	ldr	r3, [r3, #32]
 800f920:	330d      	adds	r3, #13
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	7d3a      	ldrb	r2, [r7, #20]
 800f926:	429a      	cmp	r2, r3
 800f928:	d10e      	bne.n	800f948 <dir_read+0xe6>
 800f92a:	693b      	ldr	r3, [r7, #16]
 800f92c:	68da      	ldr	r2, [r3, #12]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6a1b      	ldr	r3, [r3, #32]
 800f932:	4619      	mov	r1, r3
 800f934:	4610      	mov	r0, r2
 800f936:	f7ff fe19 	bl	800f56c <pick_lfn>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d003      	beq.n	800f948 <dir_read+0xe6>
 800f940:	7d7b      	ldrb	r3, [r7, #21]
 800f942:	3b01      	subs	r3, #1
 800f944:	b2db      	uxtb	r3, r3
 800f946:	e000      	b.n	800f94a <dir_read+0xe8>
 800f948:	23ff      	movs	r3, #255	; 0xff
 800f94a:	757b      	strb	r3, [r7, #21]
 800f94c:	e011      	b.n	800f972 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f94e:	7d7b      	ldrb	r3, [r7, #21]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d109      	bne.n	800f968 <dir_read+0x106>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	6a1b      	ldr	r3, [r3, #32]
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff ff61 	bl	800f820 <sum_sfn>
 800f95e:	4603      	mov	r3, r0
 800f960:	461a      	mov	r2, r3
 800f962:	7d3b      	ldrb	r3, [r7, #20]
 800f964:	4293      	cmp	r3, r2
 800f966:	d015      	beq.n	800f994 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f96e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f970:	e010      	b.n	800f994 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f972:	2100      	movs	r1, #0
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f7ff fc3e 	bl	800f1f6 <dir_next>
 800f97a:	4603      	mov	r3, r0
 800f97c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f97e:	7dfb      	ldrb	r3, [r7, #23]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d109      	bne.n	800f998 <dir_read+0x136>
	while (dp->sect) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	69db      	ldr	r3, [r3, #28]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f47f af79 	bne.w	800f880 <dir_read+0x1e>
 800f98e:	e004      	b.n	800f99a <dir_read+0x138>
		if (res != FR_OK) break;
 800f990:	bf00      	nop
 800f992:	e002      	b.n	800f99a <dir_read+0x138>
					break;
 800f994:	bf00      	nop
 800f996:	e000      	b.n	800f99a <dir_read+0x138>
		if (res != FR_OK) break;
 800f998:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <dir_read+0x144>
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	61da      	str	r2, [r3, #28]
	return res;
 800f9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3718      	adds	r7, #24
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b086      	sub	sp, #24
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f9be:	2100      	movs	r1, #0
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff fb9d 	bl	800f100 <dir_sdi>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d001      	beq.n	800f9d4 <dir_find+0x24>
 800f9d0:	7dfb      	ldrb	r3, [r7, #23]
 800f9d2:	e0a9      	b.n	800fb28 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f9d4:	23ff      	movs	r3, #255	; 0xff
 800f9d6:	753b      	strb	r3, [r7, #20]
 800f9d8:	7d3b      	ldrb	r3, [r7, #20]
 800f9da:	757b      	strb	r3, [r7, #21]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9e2:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	69db      	ldr	r3, [r3, #28]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	6938      	ldr	r0, [r7, #16]
 800f9ec:	f7ff f808 	bl	800ea00 <move_window>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	f040 8090 	bne.w	800fb1c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6a1b      	ldr	r3, [r3, #32]
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa04:	7dbb      	ldrb	r3, [r7, #22]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d102      	bne.n	800fa10 <dir_find+0x60>
 800fa0a:	2304      	movs	r3, #4
 800fa0c:	75fb      	strb	r3, [r7, #23]
 800fa0e:	e08a      	b.n	800fb26 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a1b      	ldr	r3, [r3, #32]
 800fa14:	330b      	adds	r3, #11
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa1c:	73fb      	strb	r3, [r7, #15]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	7bfa      	ldrb	r2, [r7, #15]
 800fa22:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fa24:	7dbb      	ldrb	r3, [r7, #22]
 800fa26:	2be5      	cmp	r3, #229	; 0xe5
 800fa28:	d007      	beq.n	800fa3a <dir_find+0x8a>
 800fa2a:	7bfb      	ldrb	r3, [r7, #15]
 800fa2c:	f003 0308 	and.w	r3, r3, #8
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d009      	beq.n	800fa48 <dir_find+0x98>
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
 800fa36:	2b0f      	cmp	r3, #15
 800fa38:	d006      	beq.n	800fa48 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa3a:	23ff      	movs	r3, #255	; 0xff
 800fa3c:	757b      	strb	r3, [r7, #21]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa44:	631a      	str	r2, [r3, #48]	; 0x30
 800fa46:	e05e      	b.n	800fb06 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
 800fa4a:	2b0f      	cmp	r3, #15
 800fa4c:	d136      	bne.n	800fabc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d154      	bne.n	800fb06 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fa5c:	7dbb      	ldrb	r3, [r7, #22]
 800fa5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d00d      	beq.n	800fa82 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	7b5b      	ldrb	r3, [r3, #13]
 800fa6c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fa6e:	7dbb      	ldrb	r3, [r7, #22]
 800fa70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa74:	75bb      	strb	r3, [r7, #22]
 800fa76:	7dbb      	ldrb	r3, [r7, #22]
 800fa78:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	695a      	ldr	r2, [r3, #20]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa82:	7dba      	ldrb	r2, [r7, #22]
 800fa84:	7d7b      	ldrb	r3, [r7, #21]
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d115      	bne.n	800fab6 <dir_find+0x106>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a1b      	ldr	r3, [r3, #32]
 800fa8e:	330d      	adds	r3, #13
 800fa90:	781b      	ldrb	r3, [r3, #0]
 800fa92:	7d3a      	ldrb	r2, [r7, #20]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d10e      	bne.n	800fab6 <dir_find+0x106>
 800fa98:	693b      	ldr	r3, [r7, #16]
 800fa9a:	68da      	ldr	r2, [r3, #12]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6a1b      	ldr	r3, [r3, #32]
 800faa0:	4619      	mov	r1, r3
 800faa2:	4610      	mov	r0, r2
 800faa4:	f7ff fcf2 	bl	800f48c <cmp_lfn>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d003      	beq.n	800fab6 <dir_find+0x106>
 800faae:	7d7b      	ldrb	r3, [r7, #21]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	e000      	b.n	800fab8 <dir_find+0x108>
 800fab6:	23ff      	movs	r3, #255	; 0xff
 800fab8:	757b      	strb	r3, [r7, #21]
 800faba:	e024      	b.n	800fb06 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fabc:	7d7b      	ldrb	r3, [r7, #21]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <dir_find+0x126>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6a1b      	ldr	r3, [r3, #32]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7ff feaa 	bl	800f820 <sum_sfn>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	7d3b      	ldrb	r3, [r7, #20]
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d024      	beq.n	800fb20 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fadc:	f003 0301 	and.w	r3, r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10a      	bne.n	800fafa <dir_find+0x14a>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a18      	ldr	r0, [r3, #32]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	3324      	adds	r3, #36	; 0x24
 800faec:	220b      	movs	r2, #11
 800faee:	4619      	mov	r1, r3
 800faf0:	f7fe fd94 	bl	800e61c <mem_cmp>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d014      	beq.n	800fb24 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fafa:	23ff      	movs	r3, #255	; 0xff
 800fafc:	757b      	strb	r3, [r7, #21]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb04:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb06:	2100      	movs	r1, #0
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fb74 	bl	800f1f6 <dir_next>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	f43f af65 	beq.w	800f9e4 <dir_find+0x34>
 800fb1a:	e004      	b.n	800fb26 <dir_find+0x176>
		if (res != FR_OK) break;
 800fb1c:	bf00      	nop
 800fb1e:	e002      	b.n	800fb26 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb20:	bf00      	nop
 800fb22:	e000      	b.n	800fb26 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb24:	bf00      	nop

	return res;
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3718      	adds	r7, #24
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b08c      	sub	sp, #48	; 0x30
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb44:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d001      	beq.n	800fb50 <dir_register+0x20>
 800fb4c:	2306      	movs	r3, #6
 800fb4e:	e0e0      	b.n	800fd12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fb50:	2300      	movs	r3, #0
 800fb52:	627b      	str	r3, [r7, #36]	; 0x24
 800fb54:	e002      	b.n	800fb5c <dir_register+0x2c>
 800fb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb58:	3301      	adds	r3, #1
 800fb5a:	627b      	str	r3, [r7, #36]	; 0x24
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	68da      	ldr	r2, [r3, #12]
 800fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb62:	005b      	lsls	r3, r3, #1
 800fb64:	4413      	add	r3, r2
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1f4      	bne.n	800fb56 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800fb72:	f107 030c 	add.w	r3, r7, #12
 800fb76:	220c      	movs	r2, #12
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fe fd13 	bl	800e5a4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fb7e:	7dfb      	ldrb	r3, [r7, #23]
 800fb80:	f003 0301 	and.w	r3, r3, #1
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d032      	beq.n	800fbee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2240      	movs	r2, #64	; 0x40
 800fb8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800fb90:	2301      	movs	r3, #1
 800fb92:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb94:	e016      	b.n	800fbc4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	68da      	ldr	r2, [r3, #12]
 800fba0:	f107 010c 	add.w	r1, r7, #12
 800fba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fba6:	f7ff fdad 	bl	800f704 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f7ff ff00 	bl	800f9b0 <dir_find>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800fbb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc6:	2b63      	cmp	r3, #99	; 0x63
 800fbc8:	d9e5      	bls.n	800fb96 <dir_register+0x66>
 800fbca:	e000      	b.n	800fbce <dir_register+0x9e>
			if (res != FR_OK) break;
 800fbcc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	2b64      	cmp	r3, #100	; 0x64
 800fbd2:	d101      	bne.n	800fbd8 <dir_register+0xa8>
 800fbd4:	2307      	movs	r3, #7
 800fbd6:	e09c      	b.n	800fd12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fbd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbdc:	2b04      	cmp	r3, #4
 800fbde:	d002      	beq.n	800fbe6 <dir_register+0xb6>
 800fbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbe4:	e095      	b.n	800fd12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fbe6:	7dfa      	ldrb	r2, [r7, #23]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
 800fbf0:	f003 0302 	and.w	r3, r3, #2
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d007      	beq.n	800fc08 <dir_register+0xd8>
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	330c      	adds	r3, #12
 800fbfc:	4a47      	ldr	r2, [pc, #284]	; (800fd1c <dir_register+0x1ec>)
 800fbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800fc02:	089b      	lsrs	r3, r3, #2
 800fc04:	3301      	adds	r3, #1
 800fc06:	e000      	b.n	800fc0a <dir_register+0xda>
 800fc08:	2301      	movs	r3, #1
 800fc0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fc0c:	6a39      	ldr	r1, [r7, #32]
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7ff fbb6 	bl	800f380 <dir_alloc>
 800fc14:	4603      	mov	r3, r0
 800fc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fc1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d148      	bne.n	800fcb4 <dir_register+0x184>
 800fc22:	6a3b      	ldr	r3, [r7, #32]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	623b      	str	r3, [r7, #32]
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d042      	beq.n	800fcb4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	695a      	ldr	r2, [r3, #20]
 800fc32:	6a3b      	ldr	r3, [r7, #32]
 800fc34:	015b      	lsls	r3, r3, #5
 800fc36:	1ad3      	subs	r3, r2, r3
 800fc38:	4619      	mov	r1, r3
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff fa60 	bl	800f100 <dir_sdi>
 800fc40:	4603      	mov	r3, r0
 800fc42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fc46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d132      	bne.n	800fcb4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	3324      	adds	r3, #36	; 0x24
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7ff fde4 	bl	800f820 <sum_sfn>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	69db      	ldr	r3, [r3, #28]
 800fc60:	4619      	mov	r1, r3
 800fc62:	69f8      	ldr	r0, [r7, #28]
 800fc64:	f7fe fecc 	bl	800ea00 <move_window>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800fc6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d11d      	bne.n	800fcb2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	68d8      	ldr	r0, [r3, #12]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a19      	ldr	r1, [r3, #32]
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	b2da      	uxtb	r2, r3
 800fc82:	7efb      	ldrb	r3, [r7, #27]
 800fc84:	f7ff fcd6 	bl	800f634 <put_lfn>
				fs->wflag = 1;
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	2201      	movs	r2, #1
 800fc8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fc8e:	2100      	movs	r1, #0
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f7ff fab0 	bl	800f1f6 <dir_next>
 800fc96:	4603      	mov	r3, r0
 800fc98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fc9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d107      	bne.n	800fcb4 <dir_register+0x184>
 800fca4:	6a3b      	ldr	r3, [r7, #32]
 800fca6:	3b01      	subs	r3, #1
 800fca8:	623b      	str	r3, [r7, #32]
 800fcaa:	6a3b      	ldr	r3, [r7, #32]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1d5      	bne.n	800fc5c <dir_register+0x12c>
 800fcb0:	e000      	b.n	800fcb4 <dir_register+0x184>
				if (res != FR_OK) break;
 800fcb2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fcb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d128      	bne.n	800fd0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	69db      	ldr	r3, [r3, #28]
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	69f8      	ldr	r0, [r7, #28]
 800fcc4:	f7fe fe9c 	bl	800ea00 <move_window>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fcce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d11b      	bne.n	800fd0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	6a1b      	ldr	r3, [r3, #32]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	2100      	movs	r1, #0
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fe fc81 	bl	800e5e6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6a18      	ldr	r0, [r3, #32]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3324      	adds	r3, #36	; 0x24
 800fcec:	220b      	movs	r2, #11
 800fcee:	4619      	mov	r1, r3
 800fcf0:	f7fe fc58 	bl	800e5a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a1b      	ldr	r3, [r3, #32]
 800fcfe:	330c      	adds	r3, #12
 800fd00:	f002 0218 	and.w	r2, r2, #24
 800fd04:	b2d2      	uxtb	r2, r2
 800fd06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fd08:	69fb      	ldr	r3, [r7, #28]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3730      	adds	r7, #48	; 0x30
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	4ec4ec4f 	.word	0x4ec4ec4f

0800fd20 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b088      	sub	sp, #32
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	2200      	movs	r2, #0
 800fd34:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 80c9 	beq.w	800fed2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd48:	d032      	beq.n	800fdb0 <get_fileinfo+0x90>
			i = j = 0;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	61bb      	str	r3, [r7, #24]
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fd52:	e01b      	b.n	800fd8c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fd54:	89fb      	ldrh	r3, [r7, #14]
 800fd56:	2100      	movs	r1, #0
 800fd58:	4618      	mov	r0, r3
 800fd5a:	f001 fcc9 	bl	80116f0 <ff_convert>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fd62:	89fb      	ldrh	r3, [r7, #14]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d102      	bne.n	800fd6e <get_fileinfo+0x4e>
 800fd68:	2300      	movs	r3, #0
 800fd6a:	61fb      	str	r3, [r7, #28]
 800fd6c:	e01a      	b.n	800fda4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	2bfe      	cmp	r3, #254	; 0xfe
 800fd72:	d902      	bls.n	800fd7a <get_fileinfo+0x5a>
 800fd74:	2300      	movs	r3, #0
 800fd76:	61fb      	str	r3, [r7, #28]
 800fd78:	e014      	b.n	800fda4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	61fa      	str	r2, [r7, #28]
 800fd80:	89fa      	ldrh	r2, [r7, #14]
 800fd82:	b2d1      	uxtb	r1, r2
 800fd84:	683a      	ldr	r2, [r7, #0]
 800fd86:	4413      	add	r3, r2
 800fd88:	460a      	mov	r2, r1
 800fd8a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	68da      	ldr	r2, [r3, #12]
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	1c59      	adds	r1, r3, #1
 800fd94:	61b9      	str	r1, [r7, #24]
 800fd96:	005b      	lsls	r3, r3, #1
 800fd98:	4413      	add	r3, r2
 800fd9a:	881b      	ldrh	r3, [r3, #0]
 800fd9c:	81fb      	strh	r3, [r7, #14]
 800fd9e:	89fb      	ldrh	r3, [r7, #14]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1d7      	bne.n	800fd54 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	4413      	add	r3, r2
 800fdaa:	3316      	adds	r3, #22
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	61bb      	str	r3, [r7, #24]
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fdb8:	683a      	ldr	r2, [r7, #0]
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	4413      	add	r3, r2
 800fdbe:	3316      	adds	r3, #22
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800fdc4:	e04c      	b.n	800fe60 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	6a1a      	ldr	r2, [r3, #32]
 800fdca:	69fb      	ldr	r3, [r7, #28]
 800fdcc:	1c59      	adds	r1, r3, #1
 800fdce:	61f9      	str	r1, [r7, #28]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	781b      	ldrb	r3, [r3, #0]
 800fdd4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
 800fdd8:	2b20      	cmp	r3, #32
 800fdda:	d100      	bne.n	800fdde <get_fileinfo+0xbe>
 800fddc:	e040      	b.n	800fe60 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fdde:	7dfb      	ldrb	r3, [r7, #23]
 800fde0:	2b05      	cmp	r3, #5
 800fde2:	d101      	bne.n	800fde8 <get_fileinfo+0xc8>
 800fde4:	23e5      	movs	r3, #229	; 0xe5
 800fde6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fde8:	69fb      	ldr	r3, [r7, #28]
 800fdea:	2b09      	cmp	r3, #9
 800fdec:	d10f      	bne.n	800fe0e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800fdee:	89bb      	ldrh	r3, [r7, #12]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d105      	bne.n	800fe00 <get_fileinfo+0xe0>
 800fdf4:	683a      	ldr	r2, [r7, #0]
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	3316      	adds	r3, #22
 800fdfc:	222e      	movs	r2, #46	; 0x2e
 800fdfe:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	1c5a      	adds	r2, r3, #1
 800fe04:	61ba      	str	r2, [r7, #24]
 800fe06:	683a      	ldr	r2, [r7, #0]
 800fe08:	4413      	add	r3, r2
 800fe0a:	222e      	movs	r2, #46	; 0x2e
 800fe0c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fe0e:	683a      	ldr	r2, [r7, #0]
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	4413      	add	r3, r2
 800fe14:	3309      	adds	r3, #9
 800fe16:	7dfa      	ldrb	r2, [r7, #23]
 800fe18:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800fe1a:	89bb      	ldrh	r3, [r7, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d11c      	bne.n	800fe5a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fe20:	7dfb      	ldrb	r3, [r7, #23]
 800fe22:	2b40      	cmp	r3, #64	; 0x40
 800fe24:	d913      	bls.n	800fe4e <get_fileinfo+0x12e>
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
 800fe28:	2b5a      	cmp	r3, #90	; 0x5a
 800fe2a:	d810      	bhi.n	800fe4e <get_fileinfo+0x12e>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a1b      	ldr	r3, [r3, #32]
 800fe30:	330c      	adds	r3, #12
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	461a      	mov	r2, r3
 800fe36:	69fb      	ldr	r3, [r7, #28]
 800fe38:	2b08      	cmp	r3, #8
 800fe3a:	d901      	bls.n	800fe40 <get_fileinfo+0x120>
 800fe3c:	2310      	movs	r3, #16
 800fe3e:	e000      	b.n	800fe42 <get_fileinfo+0x122>
 800fe40:	2308      	movs	r3, #8
 800fe42:	4013      	ands	r3, r2
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800fe48:	7dfb      	ldrb	r3, [r7, #23]
 800fe4a:	3320      	adds	r3, #32
 800fe4c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	4413      	add	r3, r2
 800fe54:	3316      	adds	r3, #22
 800fe56:	7dfa      	ldrb	r2, [r7, #23]
 800fe58:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fe5a:	69bb      	ldr	r3, [r7, #24]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	2b0a      	cmp	r3, #10
 800fe64:	d9af      	bls.n	800fdc6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fe66:	89bb      	ldrh	r3, [r7, #12]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10d      	bne.n	800fe88 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	69bb      	ldr	r3, [r7, #24]
 800fe70:	4413      	add	r3, r2
 800fe72:	3316      	adds	r3, #22
 800fe74:	2200      	movs	r2, #0
 800fe76:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6a1b      	ldr	r3, [r3, #32]
 800fe7c:	330c      	adds	r3, #12
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d101      	bne.n	800fe88 <get_fileinfo+0x168>
 800fe84:	2300      	movs	r3, #0
 800fe86:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3309      	adds	r3, #9
 800fe90:	2200      	movs	r2, #0
 800fe92:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a1b      	ldr	r3, [r3, #32]
 800fe98:	7ada      	ldrb	r2, [r3, #11]
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	331c      	adds	r3, #28
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fe fb13 	bl	800e4d0 <ld_dword>
 800feaa:	4602      	mov	r2, r0
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	3316      	adds	r3, #22
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fb0a 	bl	800e4d0 <ld_dword>
 800febc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	80da      	strh	r2, [r3, #6]
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	0c1b      	lsrs	r3, r3, #16
 800feca:	b29a      	uxth	r2, r3
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	809a      	strh	r2, [r3, #4]
 800fed0:	e000      	b.n	800fed4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fed2:	bf00      	nop
}
 800fed4:	3720      	adds	r7, #32
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
	...

0800fedc <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	1c59      	adds	r1, r3, #1
 800feea:	687a      	ldr	r2, [r7, #4]
 800feec:	6011      	str	r1, [r2, #0]
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	2b60      	cmp	r3, #96	; 0x60
 800fef6:	d905      	bls.n	800ff04 <get_achar+0x28>
 800fef8:	89fb      	ldrh	r3, [r7, #14]
 800fefa:	2b7a      	cmp	r3, #122	; 0x7a
 800fefc:	d802      	bhi.n	800ff04 <get_achar+0x28>
 800fefe:	89fb      	ldrh	r3, [r7, #14]
 800ff00:	3b20      	subs	r3, #32
 800ff02:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ff04:	89fb      	ldrh	r3, [r7, #14]
 800ff06:	2b7f      	cmp	r3, #127	; 0x7f
 800ff08:	d904      	bls.n	800ff14 <get_achar+0x38>
 800ff0a:	89fb      	ldrh	r3, [r7, #14]
 800ff0c:	3b80      	subs	r3, #128	; 0x80
 800ff0e:	4a05      	ldr	r2, [pc, #20]	; (800ff24 <get_achar+0x48>)
 800ff10:	5cd3      	ldrb	r3, [r2, r3]
 800ff12:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 800ff14:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	0801bda0 	.word	0x0801bda0

0800ff28 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b08a      	sub	sp, #40	; 0x28
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	60f8      	str	r0, [r7, #12]
 800ff30:	60b9      	str	r1, [r7, #8]
 800ff32:	607a      	str	r2, [r7, #4]
 800ff34:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800ff36:	e009      	b.n	800ff4c <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800ff38:	f107 0308 	add.w	r3, r7, #8
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7ff ffcd 	bl	800fedc <get_achar>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d101      	bne.n	800ff4c <pattern_matching+0x24>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	e064      	b.n	8010016 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	1e5a      	subs	r2, r3, #1
 800ff50:	607a      	str	r2, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1f0      	bne.n	800ff38 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d104      	bne.n	800ff68 <pattern_matching+0x40>
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d001      	beq.n	800ff68 <pattern_matching+0x40>
 800ff64:	2301      	movs	r3, #1
 800ff66:	e056      	b.n	8010016 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	617b      	str	r3, [r7, #20]
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	781b      	ldrb	r3, [r3, #0]
 800ff74:	2b3f      	cmp	r3, #63	; 0x3f
 800ff76:	d003      	beq.n	800ff80 <pattern_matching+0x58>
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ff7e:	d126      	bne.n	800ffce <pattern_matching+0xa6>
				nm = nx = 0;
 800ff80:	2300      	movs	r3, #0
 800ff82:	61fb      	str	r3, [r7, #28]
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	1c5a      	adds	r2, r3, #1
 800ff8c:	617a      	str	r2, [r7, #20]
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	2b3f      	cmp	r3, #63	; 0x3f
 800ff92:	d103      	bne.n	800ff9c <pattern_matching+0x74>
 800ff94:	6a3b      	ldr	r3, [r7, #32]
 800ff96:	3301      	adds	r3, #1
 800ff98:	623b      	str	r3, [r7, #32]
 800ff9a:	e001      	b.n	800ffa0 <pattern_matching+0x78>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2b3f      	cmp	r3, #63	; 0x3f
 800ffa6:	d0ef      	beq.n	800ff88 <pattern_matching+0x60>
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	2b2a      	cmp	r3, #42	; 0x2a
 800ffae:	d0eb      	beq.n	800ff88 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800ffb0:	6978      	ldr	r0, [r7, #20]
 800ffb2:	6939      	ldr	r1, [r7, #16]
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	6a3a      	ldr	r2, [r7, #32]
 800ffb8:	f7ff ffb6 	bl	800ff28 <pattern_matching>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <pattern_matching+0x9e>
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e027      	b.n	8010016 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffcc:	e017      	b.n	800fffe <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 800ffce:	f107 0314 	add.w	r3, r7, #20
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7ff ff82 	bl	800fedc <get_achar>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 800ffdc:	f107 0310 	add.w	r3, r7, #16
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7ff ff7b 	bl	800fedc <get_achar>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 800ffea:	8b7a      	ldrh	r2, [r7, #26]
 800ffec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d104      	bne.n	800fffc <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800fff2:	8b7b      	ldrh	r3, [r7, #26]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1bb      	bne.n	800ff70 <pattern_matching+0x48>
 800fff8:	2301      	movs	r3, #1
 800fffa:	e00c      	b.n	8010016 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 800fffc:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 800fffe:	f107 0308 	add.w	r3, r7, #8
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff ff6a 	bl	800fedc <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <pattern_matching+0xec>
 801000e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010010:	2b00      	cmp	r3, #0
 8010012:	d1a9      	bne.n	800ff68 <pattern_matching+0x40>

	return 0;
 8010014:	2300      	movs	r3, #0
}
 8010016:	4618      	mov	r0, r3
 8010018:	3728      	adds	r7, #40	; 0x28
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
	...

08010020 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b08a      	sub	sp, #40	; 0x28
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	613b      	str	r3, [r7, #16]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	68db      	ldr	r3, [r3, #12]
 8010036:	60fb      	str	r3, [r7, #12]
 8010038:	2300      	movs	r3, #0
 801003a:	617b      	str	r3, [r7, #20]
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	1c5a      	adds	r2, r3, #1
 8010044:	61ba      	str	r2, [r7, #24]
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	4413      	add	r3, r2
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801004e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010050:	2b1f      	cmp	r3, #31
 8010052:	d940      	bls.n	80100d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010056:	2b2f      	cmp	r3, #47	; 0x2f
 8010058:	d006      	beq.n	8010068 <create_name+0x48>
 801005a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801005c:	2b5c      	cmp	r3, #92	; 0x5c
 801005e:	d110      	bne.n	8010082 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010060:	e002      	b.n	8010068 <create_name+0x48>
 8010062:	69bb      	ldr	r3, [r7, #24]
 8010064:	3301      	adds	r3, #1
 8010066:	61bb      	str	r3, [r7, #24]
 8010068:	693a      	ldr	r2, [r7, #16]
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	4413      	add	r3, r2
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b2f      	cmp	r3, #47	; 0x2f
 8010072:	d0f6      	beq.n	8010062 <create_name+0x42>
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	4413      	add	r3, r2
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2b5c      	cmp	r3, #92	; 0x5c
 801007e:	d0f0      	beq.n	8010062 <create_name+0x42>
			break;
 8010080:	e02a      	b.n	80100d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	2bfe      	cmp	r3, #254	; 0xfe
 8010086:	d901      	bls.n	801008c <create_name+0x6c>
 8010088:	2306      	movs	r3, #6
 801008a:	e1ca      	b.n	8010422 <create_name+0x402>
#if !_LFN_UNICODE
		w &= 0xFF;
 801008c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801008e:	b2db      	uxtb	r3, r3
 8010090:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010092:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010094:	2101      	movs	r1, #1
 8010096:	4618      	mov	r0, r3
 8010098:	f001 fb2a 	bl	80116f0 <ff_convert>
 801009c:	4603      	mov	r3, r0
 801009e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80100a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d101      	bne.n	80100aa <create_name+0x8a>
 80100a6:	2306      	movs	r3, #6
 80100a8:	e1bb      	b.n	8010422 <create_name+0x402>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80100aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100ac:	2b7f      	cmp	r3, #127	; 0x7f
 80100ae:	d809      	bhi.n	80100c4 <create_name+0xa4>
 80100b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100b2:	4619      	mov	r1, r3
 80100b4:	489f      	ldr	r0, [pc, #636]	; (8010334 <create_name+0x314>)
 80100b6:	f7fe fad8 	bl	800e66a <chk_chr>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d001      	beq.n	80100c4 <create_name+0xa4>
 80100c0:	2306      	movs	r3, #6
 80100c2:	e1ae      	b.n	8010422 <create_name+0x402>
		lfn[di++] = w;					/* Store the Unicode character */
 80100c4:	697b      	ldr	r3, [r7, #20]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	617a      	str	r2, [r7, #20]
 80100ca:	005b      	lsls	r3, r3, #1
 80100cc:	68fa      	ldr	r2, [r7, #12]
 80100ce:	4413      	add	r3, r2
 80100d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80100d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80100d4:	e7b4      	b.n	8010040 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80100d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80100d8:	693a      	ldr	r2, [r7, #16]
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	441a      	add	r2, r3
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80100e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100e4:	2b1f      	cmp	r3, #31
 80100e6:	d801      	bhi.n	80100ec <create_name+0xcc>
 80100e8:	2304      	movs	r3, #4
 80100ea:	e000      	b.n	80100ee <create_name+0xce>
 80100ec:	2300      	movs	r3, #0
 80100ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	2b01      	cmp	r3, #1
 80100f6:	d109      	bne.n	801010c <create_name+0xec>
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80100fe:	3b01      	subs	r3, #1
 8010100:	005b      	lsls	r3, r3, #1
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	4413      	add	r3, r2
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	2b2e      	cmp	r3, #46	; 0x2e
 801010a:	d016      	beq.n	801013a <create_name+0x11a>
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	2b02      	cmp	r3, #2
 8010110:	d14e      	bne.n	80101b0 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010118:	3b01      	subs	r3, #1
 801011a:	005b      	lsls	r3, r3, #1
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4413      	add	r3, r2
 8010120:	881b      	ldrh	r3, [r3, #0]
 8010122:	2b2e      	cmp	r3, #46	; 0x2e
 8010124:	d144      	bne.n	80101b0 <create_name+0x190>
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801012c:	3b02      	subs	r3, #2
 801012e:	005b      	lsls	r3, r3, #1
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	2b2e      	cmp	r3, #46	; 0x2e
 8010138:	d13a      	bne.n	80101b0 <create_name+0x190>
		lfn[di] = 0;
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	005b      	lsls	r3, r3, #1
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	4413      	add	r3, r2
 8010142:	2200      	movs	r2, #0
 8010144:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010146:	2300      	movs	r3, #0
 8010148:	623b      	str	r3, [r7, #32]
 801014a:	e00f      	b.n	801016c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 801014c:	6a3a      	ldr	r2, [r7, #32]
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	429a      	cmp	r2, r3
 8010152:	d201      	bcs.n	8010158 <create_name+0x138>
 8010154:	212e      	movs	r1, #46	; 0x2e
 8010156:	e000      	b.n	801015a <create_name+0x13a>
 8010158:	2120      	movs	r1, #32
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	6a3b      	ldr	r3, [r7, #32]
 801015e:	4413      	add	r3, r2
 8010160:	3324      	adds	r3, #36	; 0x24
 8010162:	460a      	mov	r2, r1
 8010164:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 8010166:	6a3b      	ldr	r3, [r7, #32]
 8010168:	3301      	adds	r3, #1
 801016a:	623b      	str	r3, [r7, #32]
 801016c:	6a3b      	ldr	r3, [r7, #32]
 801016e:	2b0a      	cmp	r3, #10
 8010170:	d9ec      	bls.n	801014c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8010172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010176:	f043 0320 	orr.w	r3, r3, #32
 801017a:	b2d9      	uxtb	r1, r3
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	6a3b      	ldr	r3, [r7, #32]
 8010180:	4413      	add	r3, r2
 8010182:	3324      	adds	r3, #36	; 0x24
 8010184:	460a      	mov	r2, r1
 8010186:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010188:	2300      	movs	r3, #0
 801018a:	e14a      	b.n	8010422 <create_name+0x402>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010192:	3b01      	subs	r3, #1
 8010194:	005b      	lsls	r3, r3, #1
 8010196:	68fa      	ldr	r2, [r7, #12]
 8010198:	4413      	add	r3, r2
 801019a:	881b      	ldrh	r3, [r3, #0]
 801019c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801019e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101a0:	2b20      	cmp	r3, #32
 80101a2:	d002      	beq.n	80101aa <create_name+0x18a>
 80101a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101a6:	2b2e      	cmp	r3, #46	; 0x2e
 80101a8:	d106      	bne.n	80101b8 <create_name+0x198>
		di--;
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	3b01      	subs	r3, #1
 80101ae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1ea      	bne.n	801018c <create_name+0x16c>
 80101b6:	e000      	b.n	80101ba <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 80101b8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	005b      	lsls	r3, r3, #1
 80101be:	68fa      	ldr	r2, [r7, #12]
 80101c0:	4413      	add	r3, r2
 80101c2:	2200      	movs	r2, #0
 80101c4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <create_name+0x1b0>
 80101cc:	2306      	movs	r3, #6
 80101ce:	e128      	b.n	8010422 <create_name+0x402>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3324      	adds	r3, #36	; 0x24
 80101d4:	220b      	movs	r2, #11
 80101d6:	2120      	movs	r1, #32
 80101d8:	4618      	mov	r0, r3
 80101da:	f7fe fa04 	bl	800e5e6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80101de:	2300      	movs	r3, #0
 80101e0:	61bb      	str	r3, [r7, #24]
 80101e2:	e002      	b.n	80101ea <create_name+0x1ca>
 80101e4:	69bb      	ldr	r3, [r7, #24]
 80101e6:	3301      	adds	r3, #1
 80101e8:	61bb      	str	r3, [r7, #24]
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	005b      	lsls	r3, r3, #1
 80101ee:	68fa      	ldr	r2, [r7, #12]
 80101f0:	4413      	add	r3, r2
 80101f2:	881b      	ldrh	r3, [r3, #0]
 80101f4:	2b20      	cmp	r3, #32
 80101f6:	d0f5      	beq.n	80101e4 <create_name+0x1c4>
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4413      	add	r3, r2
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	2b2e      	cmp	r3, #46	; 0x2e
 8010204:	d0ee      	beq.n	80101e4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d009      	beq.n	8010220 <create_name+0x200>
 801020c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010210:	f043 0303 	orr.w	r3, r3, #3
 8010214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010218:	e002      	b.n	8010220 <create_name+0x200>
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	3b01      	subs	r3, #1
 801021e:	617b      	str	r3, [r7, #20]
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d009      	beq.n	801023a <create_name+0x21a>
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801022c:	3b01      	subs	r3, #1
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	4413      	add	r3, r2
 8010234:	881b      	ldrh	r3, [r3, #0]
 8010236:	2b2e      	cmp	r3, #46	; 0x2e
 8010238:	d1ef      	bne.n	801021a <create_name+0x1fa>

	i = b = 0; ni = 8;
 801023a:	2300      	movs	r3, #0
 801023c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010240:	2300      	movs	r3, #0
 8010242:	623b      	str	r3, [r7, #32]
 8010244:	2308      	movs	r3, #8
 8010246:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	1c5a      	adds	r2, r3, #1
 801024c:	61ba      	str	r2, [r7, #24]
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	68fa      	ldr	r2, [r7, #12]
 8010252:	4413      	add	r3, r2
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801025a:	2b00      	cmp	r3, #0
 801025c:	f000 8097 	beq.w	801038e <create_name+0x36e>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010262:	2b20      	cmp	r3, #32
 8010264:	d006      	beq.n	8010274 <create_name+0x254>
 8010266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010268:	2b2e      	cmp	r3, #46	; 0x2e
 801026a:	d10a      	bne.n	8010282 <create_name+0x262>
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	429a      	cmp	r2, r3
 8010272:	d006      	beq.n	8010282 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 8010274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010278:	f043 0303 	orr.w	r3, r3, #3
 801027c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010280:	e084      	b.n	801038c <create_name+0x36c>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010282:	6a3a      	ldr	r2, [r7, #32]
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	429a      	cmp	r2, r3
 8010288:	d203      	bcs.n	8010292 <create_name+0x272>
 801028a:	69ba      	ldr	r2, [r7, #24]
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	429a      	cmp	r2, r3
 8010290:	d123      	bne.n	80102da <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	2b0b      	cmp	r3, #11
 8010296:	d106      	bne.n	80102a6 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 8010298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801029c:	f043 0303 	orr.w	r3, r3, #3
 80102a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102a4:	e076      	b.n	8010394 <create_name+0x374>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80102a6:	69ba      	ldr	r2, [r7, #24]
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d005      	beq.n	80102ba <create_name+0x29a>
 80102ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b2:	f043 0303 	orr.w	r3, r3, #3
 80102b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80102ba:	69ba      	ldr	r2, [r7, #24]
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d867      	bhi.n	8010392 <create_name+0x372>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	61bb      	str	r3, [r7, #24]
 80102c6:	2308      	movs	r3, #8
 80102c8:	623b      	str	r3, [r7, #32]
 80102ca:	230b      	movs	r3, #11
 80102cc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80102ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80102d8:	e058      	b.n	801038c <create_name+0x36c>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80102da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102dc:	2b7f      	cmp	r3, #127	; 0x7f
 80102de:	d914      	bls.n	801030a <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80102e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102e2:	2100      	movs	r1, #0
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 fa03 	bl	80116f0 <ff_convert>
 80102ea:	4603      	mov	r3, r0
 80102ec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80102ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d004      	beq.n	80102fe <create_name+0x2de>
 80102f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102f6:	3b80      	subs	r3, #128	; 0x80
 80102f8:	4a0f      	ldr	r2, [pc, #60]	; (8010338 <create_name+0x318>)
 80102fa:	5cd3      	ldrb	r3, [r2, r3]
 80102fc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80102fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010302:	f043 0302 	orr.w	r3, r3, #2
 8010306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801030a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801030c:	2b00      	cmp	r3, #0
 801030e:	d007      	beq.n	8010320 <create_name+0x300>
 8010310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010312:	4619      	mov	r1, r3
 8010314:	4809      	ldr	r0, [pc, #36]	; (801033c <create_name+0x31c>)
 8010316:	f7fe f9a8 	bl	800e66a <chk_chr>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00f      	beq.n	8010340 <create_name+0x320>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010320:	235f      	movs	r3, #95	; 0x5f
 8010322:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010328:	f043 0303 	orr.w	r3, r3, #3
 801032c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010330:	e022      	b.n	8010378 <create_name+0x358>
 8010332:	bf00      	nop
 8010334:	08019634 	.word	0x08019634
 8010338:	0801bda0 	.word	0x0801bda0
 801033c:	08019640 	.word	0x08019640
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010342:	2b40      	cmp	r3, #64	; 0x40
 8010344:	d909      	bls.n	801035a <create_name+0x33a>
 8010346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010348:	2b5a      	cmp	r3, #90	; 0x5a
 801034a:	d806      	bhi.n	801035a <create_name+0x33a>
					b |= 2;
 801034c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010350:	f043 0302 	orr.w	r3, r3, #2
 8010354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010358:	e00e      	b.n	8010378 <create_name+0x358>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801035a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801035c:	2b60      	cmp	r3, #96	; 0x60
 801035e:	d90b      	bls.n	8010378 <create_name+0x358>
 8010360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010362:	2b7a      	cmp	r3, #122	; 0x7a
 8010364:	d808      	bhi.n	8010378 <create_name+0x358>
						b |= 1; w -= 0x20;
 8010366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801036a:	f043 0301 	orr.w	r3, r3, #1
 801036e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010372:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010374:	3b20      	subs	r3, #32
 8010376:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	1c5a      	adds	r2, r3, #1
 801037c:	623a      	str	r2, [r7, #32]
 801037e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010380:	b2d1      	uxtb	r1, r2
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	4413      	add	r3, r2
 8010386:	460a      	mov	r2, r1
 8010388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801038c:	e75c      	b.n	8010248 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 801038e:	bf00      	nop
 8010390:	e000      	b.n	8010394 <create_name+0x374>
			if (si > di) break;			/* No extension */
 8010392:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801039a:	2be5      	cmp	r3, #229	; 0xe5
 801039c:	d103      	bne.n	80103a6 <create_name+0x386>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2205      	movs	r2, #5
 80103a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80103a6:	69fb      	ldr	r3, [r7, #28]
 80103a8:	2b08      	cmp	r3, #8
 80103aa:	d104      	bne.n	80103b6 <create_name+0x396>
 80103ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103b0:	009b      	lsls	r3, r3, #2
 80103b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80103b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103ba:	f003 030c 	and.w	r3, r3, #12
 80103be:	2b0c      	cmp	r3, #12
 80103c0:	d005      	beq.n	80103ce <create_name+0x3ae>
 80103c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103c6:	f003 0303 	and.w	r3, r3, #3
 80103ca:	2b03      	cmp	r3, #3
 80103cc:	d105      	bne.n	80103da <create_name+0x3ba>
 80103ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103d2:	f043 0302 	orr.w	r3, r3, #2
 80103d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80103da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103de:	f003 0302 	and.w	r3, r3, #2
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d117      	bne.n	8010416 <create_name+0x3f6>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80103e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103ea:	f003 0303 	and.w	r3, r3, #3
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d105      	bne.n	80103fe <create_name+0x3de>
 80103f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103f6:	f043 0310 	orr.w	r3, r3, #16
 80103fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80103fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010402:	f003 030c 	and.w	r3, r3, #12
 8010406:	2b04      	cmp	r3, #4
 8010408:	d105      	bne.n	8010416 <create_name+0x3f6>
 801040a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801040e:	f043 0308 	orr.w	r3, r3, #8
 8010412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801041c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010420:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010422:	4618      	mov	r0, r3
 8010424:	3728      	adds	r7, #40	; 0x28
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop

0801042c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b086      	sub	sp, #24
 8010430:	af00      	add	r7, sp, #0
 8010432:	6078      	str	r0, [r7, #4]
 8010434:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b2f      	cmp	r3, #47	; 0x2f
 8010446:	d00b      	beq.n	8010460 <follow_path+0x34>
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	781b      	ldrb	r3, [r3, #0]
 801044c:	2b5c      	cmp	r3, #92	; 0x5c
 801044e:	d007      	beq.n	8010460 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	699a      	ldr	r2, [r3, #24]
 8010454:	693b      	ldr	r3, [r7, #16]
 8010456:	609a      	str	r2, [r3, #8]
 8010458:	e00d      	b.n	8010476 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	3301      	adds	r3, #1
 801045e:	603b      	str	r3, [r7, #0]
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	781b      	ldrb	r3, [r3, #0]
 8010464:	2b2f      	cmp	r3, #47	; 0x2f
 8010466:	d0f8      	beq.n	801045a <follow_path+0x2e>
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b5c      	cmp	r3, #92	; 0x5c
 801046e:	d0f4      	beq.n	801045a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	2200      	movs	r2, #0
 8010474:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	2b1f      	cmp	r3, #31
 801047c:	d80a      	bhi.n	8010494 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2280      	movs	r2, #128	; 0x80
 8010482:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010486:	2100      	movs	r1, #0
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f7fe fe39 	bl	800f100 <dir_sdi>
 801048e:	4603      	mov	r3, r0
 8010490:	75fb      	strb	r3, [r7, #23]
 8010492:	e056      	b.n	8010542 <follow_path+0x116>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010494:	463b      	mov	r3, r7
 8010496:	4619      	mov	r1, r3
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff fdc1 	bl	8010020 <create_name>
 801049e:	4603      	mov	r3, r0
 80104a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80104a2:	7dfb      	ldrb	r3, [r7, #23]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d147      	bne.n	8010538 <follow_path+0x10c>
			res = dir_find(dp);				/* Find an object with the segment name */
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff fa81 	bl	800f9b0 <dir_find>
 80104ae:	4603      	mov	r3, r0
 80104b0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104b8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d01b      	beq.n	80104f8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b04      	cmp	r3, #4
 80104c4:	d13a      	bne.n	801053c <follow_path+0x110>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80104c6:	7afb      	ldrb	r3, [r7, #11]
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00b      	beq.n	80104e8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80104d0:	7afb      	ldrb	r3, [r7, #11]
 80104d2:	f003 0304 	and.w	r3, r3, #4
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d02c      	beq.n	8010534 <follow_path+0x108>
						dp->fn[NSFLAG] = NS_NONAME;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2280      	movs	r2, #128	; 0x80
 80104de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80104e2:	2300      	movs	r3, #0
 80104e4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80104e6:	e029      	b.n	801053c <follow_path+0x110>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80104e8:	7afb      	ldrb	r3, [r7, #11]
 80104ea:	f003 0304 	and.w	r3, r3, #4
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d124      	bne.n	801053c <follow_path+0x110>
 80104f2:	2305      	movs	r3, #5
 80104f4:	75fb      	strb	r3, [r7, #23]
				break;
 80104f6:	e021      	b.n	801053c <follow_path+0x110>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80104f8:	7afb      	ldrb	r3, [r7, #11]
 80104fa:	f003 0304 	and.w	r3, r3, #4
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d11e      	bne.n	8010540 <follow_path+0x114>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	799b      	ldrb	r3, [r3, #6]
 8010506:	f003 0310 	and.w	r3, r3, #16
 801050a:	2b00      	cmp	r3, #0
 801050c:	d102      	bne.n	8010514 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801050e:	2305      	movs	r3, #5
 8010510:	75fb      	strb	r3, [r7, #23]
 8010512:	e016      	b.n	8010542 <follow_path+0x116>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	695b      	ldr	r3, [r3, #20]
 801051e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010522:	4413      	add	r3, r2
 8010524:	4619      	mov	r1, r3
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f7fe ff71 	bl	800f40e <ld_clust>
 801052c:	4602      	mov	r2, r0
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	609a      	str	r2, [r3, #8]
 8010532:	e7af      	b.n	8010494 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010534:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010536:	e7ad      	b.n	8010494 <follow_path+0x68>
			if (res != FR_OK) break;
 8010538:	bf00      	nop
 801053a:	e002      	b.n	8010542 <follow_path+0x116>
				break;
 801053c:	bf00      	nop
 801053e:	e000      	b.n	8010542 <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010540:	bf00      	nop
			}
		}
	}

	return res;
 8010542:	7dfb      	ldrb	r3, [r7, #23]
}
 8010544:	4618      	mov	r0, r3
 8010546:	3718      	adds	r7, #24
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801054c:	b480      	push	{r7}
 801054e:	b087      	sub	sp, #28
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010558:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d031      	beq.n	80105c6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	617b      	str	r3, [r7, #20]
 8010568:	e002      	b.n	8010570 <get_ldnumber+0x24>
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	3301      	adds	r3, #1
 801056e:	617b      	str	r3, [r7, #20]
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	2b1f      	cmp	r3, #31
 8010576:	d903      	bls.n	8010580 <get_ldnumber+0x34>
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	2b3a      	cmp	r3, #58	; 0x3a
 801057e:	d1f4      	bne.n	801056a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	2b3a      	cmp	r3, #58	; 0x3a
 8010586:	d11c      	bne.n	80105c2 <get_ldnumber+0x76>
			tp = *path;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	60fa      	str	r2, [r7, #12]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	3b30      	subs	r3, #48	; 0x30
 8010598:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	2b09      	cmp	r3, #9
 801059e:	d80e      	bhi.n	80105be <get_ldnumber+0x72>
 80105a0:	68fa      	ldr	r2, [r7, #12]
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d10a      	bne.n	80105be <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d107      	bne.n	80105be <get_ldnumber+0x72>
					vol = (int)i;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	3301      	adds	r3, #1
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	697a      	ldr	r2, [r7, #20]
 80105bc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	e002      	b.n	80105c8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80105c2:	2300      	movs	r3, #0
 80105c4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80105c6:	693b      	ldr	r3, [r7, #16]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	371c      	adds	r7, #28
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	70da      	strb	r2, [r3, #3]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ea:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80105ec:	6839      	ldr	r1, [r7, #0]
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7fe fa06 	bl	800ea00 <move_window>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d001      	beq.n	80105fe <check_fs+0x2a>
 80105fa:	2304      	movs	r3, #4
 80105fc:	e038      	b.n	8010670 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	3338      	adds	r3, #56	; 0x38
 8010602:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010606:	4618      	mov	r0, r3
 8010608:	f7fd ff4a 	bl	800e4a0 <ld_word>
 801060c:	4603      	mov	r3, r0
 801060e:	461a      	mov	r2, r3
 8010610:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010614:	429a      	cmp	r2, r3
 8010616:	d001      	beq.n	801061c <check_fs+0x48>
 8010618:	2303      	movs	r3, #3
 801061a:	e029      	b.n	8010670 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010622:	2be9      	cmp	r3, #233	; 0xe9
 8010624:	d009      	beq.n	801063a <check_fs+0x66>
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801062c:	2beb      	cmp	r3, #235	; 0xeb
 801062e:	d11e      	bne.n	801066e <check_fs+0x9a>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010636:	2b90      	cmp	r3, #144	; 0x90
 8010638:	d119      	bne.n	801066e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	3338      	adds	r3, #56	; 0x38
 801063e:	3336      	adds	r3, #54	; 0x36
 8010640:	4618      	mov	r0, r3
 8010642:	f7fd ff45 	bl	800e4d0 <ld_dword>
 8010646:	4603      	mov	r3, r0
 8010648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801064c:	4a0a      	ldr	r2, [pc, #40]	; (8010678 <check_fs+0xa4>)
 801064e:	4293      	cmp	r3, r2
 8010650:	d101      	bne.n	8010656 <check_fs+0x82>
 8010652:	2300      	movs	r3, #0
 8010654:	e00c      	b.n	8010670 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3338      	adds	r3, #56	; 0x38
 801065a:	3352      	adds	r3, #82	; 0x52
 801065c:	4618      	mov	r0, r3
 801065e:	f7fd ff37 	bl	800e4d0 <ld_dword>
 8010662:	4603      	mov	r3, r0
 8010664:	4a05      	ldr	r2, [pc, #20]	; (801067c <check_fs+0xa8>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d101      	bne.n	801066e <check_fs+0x9a>
 801066a:	2300      	movs	r3, #0
 801066c:	e000      	b.n	8010670 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801066e:	2302      	movs	r3, #2
}
 8010670:	4618      	mov	r0, r3
 8010672:	3708      	adds	r7, #8
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	00544146 	.word	0x00544146
 801067c:	33544146 	.word	0x33544146

08010680 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b096      	sub	sp, #88	; 0x58
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	4613      	mov	r3, r2
 801068c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	2200      	movs	r2, #0
 8010692:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7ff ff59 	bl	801054c <get_ldnumber>
 801069a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801069c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	da01      	bge.n	80106a6 <find_volume+0x26>
 80106a2:	230b      	movs	r3, #11
 80106a4:	e233      	b.n	8010b0e <find_volume+0x48e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80106a6:	4aa1      	ldr	r2, [pc, #644]	; (801092c <find_volume+0x2ac>)
 80106a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106ae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <find_volume+0x3a>
 80106b6:	230c      	movs	r3, #12
 80106b8:	e229      	b.n	8010b0e <find_volume+0x48e>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80106c0:	79fb      	ldrb	r3, [r7, #7]
 80106c2:	f023 0301 	bic.w	r3, r3, #1
 80106c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01a      	beq.n	8010706 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80106d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fd fe45 	bl	800e364 <disk_status>
 80106da:	4603      	mov	r3, r0
 80106dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80106e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106e4:	f003 0301 	and.w	r3, r3, #1
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10c      	bne.n	8010706 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80106ec:	79fb      	ldrb	r3, [r7, #7]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d007      	beq.n	8010702 <find_volume+0x82>
 80106f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106f6:	f003 0304 	and.w	r3, r3, #4
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d001      	beq.n	8010702 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80106fe:	230a      	movs	r3, #10
 8010700:	e205      	b.n	8010b0e <find_volume+0x48e>
			}
			return FR_OK;				/* The file system object is valid */
 8010702:	2300      	movs	r3, #0
 8010704:	e203      	b.n	8010b0e <find_volume+0x48e>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	2200      	movs	r2, #0
 801070a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801070c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801070e:	b2da      	uxtb	r2, r3
 8010710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010712:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	785b      	ldrb	r3, [r3, #1]
 8010718:	4618      	mov	r0, r3
 801071a:	f7fd fe3d 	bl	800e398 <disk_initialize>
 801071e:	4603      	mov	r3, r0
 8010720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010728:	f003 0301 	and.w	r3, r3, #1
 801072c:	2b00      	cmp	r3, #0
 801072e:	d001      	beq.n	8010734 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010730:	2303      	movs	r3, #3
 8010732:	e1ec      	b.n	8010b0e <find_volume+0x48e>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010734:	79fb      	ldrb	r3, [r7, #7]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d007      	beq.n	801074a <find_volume+0xca>
 801073a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801073e:	f003 0304 	and.w	r3, r3, #4
 8010742:	2b00      	cmp	r3, #0
 8010744:	d001      	beq.n	801074a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010746:	230a      	movs	r3, #10
 8010748:	e1e1      	b.n	8010b0e <find_volume+0x48e>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801074a:	2300      	movs	r3, #0
 801074c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801074e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010752:	f7ff ff3f 	bl	80105d4 <check_fs>
 8010756:	4603      	mov	r3, r0
 8010758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801075c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010760:	2b02      	cmp	r3, #2
 8010762:	d149      	bne.n	80107f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010764:	2300      	movs	r3, #0
 8010766:	643b      	str	r3, [r7, #64]	; 0x40
 8010768:	e01e      	b.n	80107a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801076a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8010770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010772:	011b      	lsls	r3, r3, #4
 8010774:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010778:	4413      	add	r3, r2
 801077a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801077c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077e:	3304      	adds	r3, #4
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d006      	beq.n	8010794 <find_volume+0x114>
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	3308      	adds	r3, #8
 801078a:	4618      	mov	r0, r3
 801078c:	f7fd fea0 	bl	800e4d0 <ld_dword>
 8010790:	4602      	mov	r2, r0
 8010792:	e000      	b.n	8010796 <find_volume+0x116>
 8010794:	2200      	movs	r2, #0
 8010796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	3358      	adds	r3, #88	; 0x58
 801079c:	443b      	add	r3, r7
 801079e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80107a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107a4:	3301      	adds	r3, #1
 80107a6:	643b      	str	r3, [r7, #64]	; 0x40
 80107a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107aa:	2b03      	cmp	r3, #3
 80107ac:	d9dd      	bls.n	801076a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80107ae:	2300      	movs	r3, #0
 80107b0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80107b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d002      	beq.n	80107be <find_volume+0x13e>
 80107b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ba:	3b01      	subs	r3, #1
 80107bc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80107be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	3358      	adds	r3, #88	; 0x58
 80107c4:	443b      	add	r3, r7
 80107c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80107ca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80107cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d005      	beq.n	80107de <find_volume+0x15e>
 80107d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80107d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80107d6:	f7ff fefd 	bl	80105d4 <check_fs>
 80107da:	4603      	mov	r3, r0
 80107dc:	e000      	b.n	80107e0 <find_volume+0x160>
 80107de:	2303      	movs	r3, #3
 80107e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80107e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d905      	bls.n	80107f8 <find_volume+0x178>
 80107ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ee:	3301      	adds	r3, #1
 80107f0:	643b      	str	r3, [r7, #64]	; 0x40
 80107f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	d9e2      	bls.n	80107be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80107f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107fc:	2b04      	cmp	r3, #4
 80107fe:	d101      	bne.n	8010804 <find_volume+0x184>
 8010800:	2301      	movs	r3, #1
 8010802:	e184      	b.n	8010b0e <find_volume+0x48e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010808:	2b01      	cmp	r3, #1
 801080a:	d901      	bls.n	8010810 <find_volume+0x190>
 801080c:	230d      	movs	r3, #13
 801080e:	e17e      	b.n	8010b0e <find_volume+0x48e>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010812:	3338      	adds	r3, #56	; 0x38
 8010814:	330b      	adds	r3, #11
 8010816:	4618      	mov	r0, r3
 8010818:	f7fd fe42 	bl	800e4a0 <ld_word>
 801081c:	4603      	mov	r3, r0
 801081e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010822:	d001      	beq.n	8010828 <find_volume+0x1a8>
 8010824:	230d      	movs	r3, #13
 8010826:	e172      	b.n	8010b0e <find_volume+0x48e>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082a:	3338      	adds	r3, #56	; 0x38
 801082c:	3316      	adds	r3, #22
 801082e:	4618      	mov	r0, r3
 8010830:	f7fd fe36 	bl	800e4a0 <ld_word>
 8010834:	4603      	mov	r3, r0
 8010836:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801083a:	2b00      	cmp	r3, #0
 801083c:	d106      	bne.n	801084c <find_volume+0x1cc>
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	3338      	adds	r3, #56	; 0x38
 8010842:	3324      	adds	r3, #36	; 0x24
 8010844:	4618      	mov	r0, r3
 8010846:	f7fd fe43 	bl	800e4d0 <ld_dword>
 801084a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801084c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010850:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801085c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085e:	789b      	ldrb	r3, [r3, #2]
 8010860:	2b01      	cmp	r3, #1
 8010862:	d005      	beq.n	8010870 <find_volume+0x1f0>
 8010864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010866:	789b      	ldrb	r3, [r3, #2]
 8010868:	2b02      	cmp	r3, #2
 801086a:	d001      	beq.n	8010870 <find_volume+0x1f0>
 801086c:	230d      	movs	r3, #13
 801086e:	e14e      	b.n	8010b0e <find_volume+0x48e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010872:	789b      	ldrb	r3, [r3, #2]
 8010874:	461a      	mov	r2, r3
 8010876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010878:	fb02 f303 	mul.w	r3, r2, r3
 801087c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801087e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010884:	b29a      	uxth	r2, r3
 8010886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010888:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801088a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088c:	895b      	ldrh	r3, [r3, #10]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d008      	beq.n	80108a4 <find_volume+0x224>
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	895b      	ldrh	r3, [r3, #10]
 8010896:	461a      	mov	r2, r3
 8010898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089a:	895b      	ldrh	r3, [r3, #10]
 801089c:	3b01      	subs	r3, #1
 801089e:	4013      	ands	r3, r2
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d001      	beq.n	80108a8 <find_volume+0x228>
 80108a4:	230d      	movs	r3, #13
 80108a6:	e132      	b.n	8010b0e <find_volume+0x48e>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80108a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108aa:	3338      	adds	r3, #56	; 0x38
 80108ac:	3311      	adds	r3, #17
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fd fdf6 	bl	800e4a0 <ld_word>
 80108b4:	4603      	mov	r3, r0
 80108b6:	461a      	mov	r2, r3
 80108b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80108bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108be:	891b      	ldrh	r3, [r3, #8]
 80108c0:	f003 030f 	and.w	r3, r3, #15
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d001      	beq.n	80108ce <find_volume+0x24e>
 80108ca:	230d      	movs	r3, #13
 80108cc:	e11f      	b.n	8010b0e <find_volume+0x48e>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80108ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d0:	3338      	adds	r3, #56	; 0x38
 80108d2:	3313      	adds	r3, #19
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7fd fde3 	bl	800e4a0 <ld_word>
 80108da:	4603      	mov	r3, r0
 80108dc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80108de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d106      	bne.n	80108f2 <find_volume+0x272>
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	3338      	adds	r3, #56	; 0x38
 80108e8:	3320      	adds	r3, #32
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fd fdf0 	bl	800e4d0 <ld_dword>
 80108f0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	3338      	adds	r3, #56	; 0x38
 80108f6:	330e      	adds	r3, #14
 80108f8:	4618      	mov	r0, r3
 80108fa:	f7fd fdd1 	bl	800e4a0 <ld_word>
 80108fe:	4603      	mov	r3, r0
 8010900:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010904:	2b00      	cmp	r3, #0
 8010906:	d101      	bne.n	801090c <find_volume+0x28c>
 8010908:	230d      	movs	r3, #13
 801090a:	e100      	b.n	8010b0e <find_volume+0x48e>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801090c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801090e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010910:	4413      	add	r3, r2
 8010912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010914:	8912      	ldrh	r2, [r2, #8]
 8010916:	0912      	lsrs	r2, r2, #4
 8010918:	b292      	uxth	r2, r2
 801091a:	4413      	add	r3, r2
 801091c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801091e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	429a      	cmp	r2, r3
 8010924:	d204      	bcs.n	8010930 <find_volume+0x2b0>
 8010926:	230d      	movs	r3, #13
 8010928:	e0f1      	b.n	8010b0e <find_volume+0x48e>
 801092a:	bf00      	nop
 801092c:	20001158 	.word	0x20001158
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010930:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010934:	1ad3      	subs	r3, r2, r3
 8010936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010938:	8952      	ldrh	r2, [r2, #10]
 801093a:	fbb3 f3f2 	udiv	r3, r3, r2
 801093e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	2b00      	cmp	r3, #0
 8010944:	d101      	bne.n	801094a <find_volume+0x2ca>
 8010946:	230d      	movs	r3, #13
 8010948:	e0e1      	b.n	8010b0e <find_volume+0x48e>
		fmt = FS_FAT32;
 801094a:	2303      	movs	r3, #3
 801094c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010956:	4293      	cmp	r3, r2
 8010958:	d802      	bhi.n	8010960 <find_volume+0x2e0>
 801095a:	2302      	movs	r3, #2
 801095c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010966:	4293      	cmp	r3, r2
 8010968:	d802      	bhi.n	8010970 <find_volume+0x2f0>
 801096a:	2301      	movs	r3, #1
 801096c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010972:	1c9a      	adds	r2, r3, #2
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801097c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801097e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010982:	441a      	add	r2, r3
 8010984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010986:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801098a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098c:	441a      	add	r2, r3
 801098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010990:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010996:	2b03      	cmp	r3, #3
 8010998:	d11e      	bne.n	80109d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	3338      	adds	r3, #56	; 0x38
 801099e:	332a      	adds	r3, #42	; 0x2a
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd fd7d 	bl	800e4a0 <ld_word>
 80109a6:	4603      	mov	r3, r0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d001      	beq.n	80109b0 <find_volume+0x330>
 80109ac:	230d      	movs	r3, #13
 80109ae:	e0ae      	b.n	8010b0e <find_volume+0x48e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	891b      	ldrh	r3, [r3, #8]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d001      	beq.n	80109bc <find_volume+0x33c>
 80109b8:	230d      	movs	r3, #13
 80109ba:	e0a8      	b.n	8010b0e <find_volume+0x48e>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80109bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109be:	3338      	adds	r3, #56	; 0x38
 80109c0:	332c      	adds	r3, #44	; 0x2c
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fd fd84 	bl	800e4d0 <ld_dword>
 80109c8:	4602      	mov	r2, r0
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80109ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d0:	69db      	ldr	r3, [r3, #28]
 80109d2:	009b      	lsls	r3, r3, #2
 80109d4:	647b      	str	r3, [r7, #68]	; 0x44
 80109d6:	e01f      	b.n	8010a18 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	891b      	ldrh	r3, [r3, #8]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d101      	bne.n	80109e4 <find_volume+0x364>
 80109e0:	230d      	movs	r3, #13
 80109e2:	e094      	b.n	8010b0e <find_volume+0x48e>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80109e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109ea:	441a      	add	r2, r3
 80109ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ee:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80109f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d103      	bne.n	8010a00 <find_volume+0x380>
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	69db      	ldr	r3, [r3, #28]
 80109fc:	005b      	lsls	r3, r3, #1
 80109fe:	e00a      	b.n	8010a16 <find_volume+0x396>
 8010a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a02:	69da      	ldr	r2, [r3, #28]
 8010a04:	4613      	mov	r3, r2
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	4413      	add	r3, r2
 8010a0a:	085a      	lsrs	r2, r3, #1
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	69db      	ldr	r3, [r3, #28]
 8010a10:	f003 0301 	and.w	r3, r3, #1
 8010a14:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010a16:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a1a:	6a1a      	ldr	r2, [r3, #32]
 8010a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a1e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010a22:	0a5b      	lsrs	r3, r3, #9
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d201      	bcs.n	8010a2c <find_volume+0x3ac>
 8010a28:	230d      	movs	r3, #13
 8010a2a:	e070      	b.n	8010b0e <find_volume+0x48e>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a32:	615a      	str	r2, [r3, #20]
 8010a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a36:	695a      	ldr	r2, [r3, #20]
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3e:	2280      	movs	r2, #128	; 0x80
 8010a40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010a42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a46:	2b03      	cmp	r3, #3
 8010a48:	d149      	bne.n	8010ade <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	3338      	adds	r3, #56	; 0x38
 8010a4e:	3330      	adds	r3, #48	; 0x30
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fd fd25 	bl	800e4a0 <ld_word>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d140      	bne.n	8010ade <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a5e:	3301      	adds	r3, #1
 8010a60:	4619      	mov	r1, r3
 8010a62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a64:	f7fd ffcc 	bl	800ea00 <move_window>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d137      	bne.n	8010ade <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a70:	2200      	movs	r2, #0
 8010a72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a76:	3338      	adds	r3, #56	; 0x38
 8010a78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7fd fd0f 	bl	800e4a0 <ld_word>
 8010a82:	4603      	mov	r3, r0
 8010a84:	461a      	mov	r2, r3
 8010a86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d127      	bne.n	8010ade <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a90:	3338      	adds	r3, #56	; 0x38
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7fd fd1c 	bl	800e4d0 <ld_dword>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	4a1f      	ldr	r2, [pc, #124]	; (8010b18 <find_volume+0x498>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d11e      	bne.n	8010ade <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa2:	3338      	adds	r3, #56	; 0x38
 8010aa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fd fd11 	bl	800e4d0 <ld_dword>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	4a1a      	ldr	r2, [pc, #104]	; (8010b1c <find_volume+0x49c>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d113      	bne.n	8010ade <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab8:	3338      	adds	r3, #56	; 0x38
 8010aba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fd fd06 	bl	800e4d0 <ld_dword>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010acc:	3338      	adds	r3, #56	; 0x38
 8010ace:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fd fcfc 	bl	800e4d0 <ld_dword>
 8010ad8:	4602      	mov	r2, r0
 8010ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010adc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010ae4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010ae6:	4b0e      	ldr	r3, [pc, #56]	; (8010b20 <find_volume+0x4a0>)
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	3301      	adds	r3, #1
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	4b0c      	ldr	r3, [pc, #48]	; (8010b20 <find_volume+0x4a0>)
 8010af0:	801a      	strh	r2, [r3, #0]
 8010af2:	4b0b      	ldr	r3, [pc, #44]	; (8010b20 <find_volume+0x4a0>)
 8010af4:	881a      	ldrh	r2, [r3, #0]
 8010af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	4a09      	ldr	r2, [pc, #36]	; (8010b24 <find_volume+0x4a4>)
 8010afe:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b02:	2200      	movs	r2, #0
 8010b04:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010b06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b08:	f7fd ff12 	bl	800e930 <clear_lock>
#endif
	return FR_OK;
 8010b0c:	2300      	movs	r3, #0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3758      	adds	r7, #88	; 0x58
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	41615252 	.word	0x41615252
 8010b1c:	61417272 	.word	0x61417272
 8010b20:	2000115c 	.word	0x2000115c
 8010b24:	20001180 	.word	0x20001180

08010b28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010b32:	2309      	movs	r3, #9
 8010b34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d01c      	beq.n	8010b76 <validate+0x4e>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d018      	beq.n	8010b76 <validate+0x4e>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d013      	beq.n	8010b76 <validate+0x4e>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	889a      	ldrh	r2, [r3, #4]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	88db      	ldrh	r3, [r3, #6]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d10c      	bne.n	8010b76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	785b      	ldrb	r3, [r3, #1]
 8010b62:	4618      	mov	r0, r3
 8010b64:	f7fd fbfe 	bl	800e364 <disk_status>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d101      	bne.n	8010b76 <validate+0x4e>
			res = FR_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d102      	bne.n	8010b82 <validate+0x5a>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	e000      	b.n	8010b84 <validate+0x5c>
 8010b82:	2300      	movs	r3, #0
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	6013      	str	r3, [r2, #0]
	return res;
 8010b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
	...

08010b94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b088      	sub	sp, #32
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	60f8      	str	r0, [r7, #12]
 8010b9c:	60b9      	str	r1, [r7, #8]
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010ba6:	f107 0310 	add.w	r3, r7, #16
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7ff fcce 	bl	801054c <get_ldnumber>
 8010bb0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	da01      	bge.n	8010bbc <f_mount+0x28>
 8010bb8:	230b      	movs	r3, #11
 8010bba:	e02b      	b.n	8010c14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010bbc:	4a17      	ldr	r2, [pc, #92]	; (8010c1c <f_mount+0x88>)
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010bcc:	69b8      	ldr	r0, [r7, #24]
 8010bce:	f7fd feaf 	bl	800e930 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010bd2:	69bb      	ldr	r3, [r7, #24]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d002      	beq.n	8010be4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	2200      	movs	r2, #0
 8010be2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	490d      	ldr	r1, [pc, #52]	; (8010c1c <f_mount+0x88>)
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d002      	beq.n	8010bfa <f_mount+0x66>
 8010bf4:	79fb      	ldrb	r3, [r7, #7]
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d001      	beq.n	8010bfe <f_mount+0x6a>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	e00a      	b.n	8010c14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010bfe:	f107 010c 	add.w	r1, r7, #12
 8010c02:	f107 0308 	add.w	r3, r7, #8
 8010c06:	2200      	movs	r2, #0
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7ff fd39 	bl	8010680 <find_volume>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3720      	adds	r7, #32
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	20001158 	.word	0x20001158

08010c20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b09a      	sub	sp, #104	; 0x68
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	60b9      	str	r1, [r7, #8]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d101      	bne.n	8010c38 <f_open+0x18>
 8010c34:	2309      	movs	r3, #9
 8010c36:	e1ad      	b.n	8010f94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010c38:	79fb      	ldrb	r3, [r7, #7]
 8010c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010c40:	79fa      	ldrb	r2, [r7, #7]
 8010c42:	f107 0110 	add.w	r1, r7, #16
 8010c46:	f107 0308 	add.w	r3, r7, #8
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff fd18 	bl	8010680 <find_volume>
 8010c50:	4603      	mov	r3, r0
 8010c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	f040 8191 	bne.w	8010f82 <f_open+0x362>
		dj.obj.fs = fs;
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010c64:	68ba      	ldr	r2, [r7, #8]
 8010c66:	f107 0314 	add.w	r3, r7, #20
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fbdd 	bl	801042c <follow_path>
 8010c72:	4603      	mov	r3, r0
 8010c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d11a      	bne.n	8010cb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c84:	b25b      	sxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	da03      	bge.n	8010c92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010c8a:	2306      	movs	r3, #6
 8010c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010c90:	e011      	b.n	8010cb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c92:	79fb      	ldrb	r3, [r7, #7]
 8010c94:	f023 0301 	bic.w	r3, r3, #1
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	bf14      	ite	ne
 8010c9c:	2301      	movne	r3, #1
 8010c9e:	2300      	moveq	r3, #0
 8010ca0:	b2db      	uxtb	r3, r3
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	f107 0314 	add.w	r3, r7, #20
 8010ca8:	4611      	mov	r1, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7fd fcf8 	bl	800e6a0 <chk_lock>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
 8010cb8:	f003 031c 	and.w	r3, r3, #28
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d07f      	beq.n	8010dc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d017      	beq.n	8010cf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010ccc:	2b04      	cmp	r3, #4
 8010cce:	d10e      	bne.n	8010cee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010cd0:	f7fd fd42 	bl	800e758 <enq_lock>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d006      	beq.n	8010ce8 <f_open+0xc8>
 8010cda:	f107 0314 	add.w	r3, r7, #20
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7fe ff26 	bl	800fb30 <dir_register>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	e000      	b.n	8010cea <f_open+0xca>
 8010ce8:	2312      	movs	r3, #18
 8010cea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010cee:	79fb      	ldrb	r3, [r7, #7]
 8010cf0:	f043 0308 	orr.w	r3, r3, #8
 8010cf4:	71fb      	strb	r3, [r7, #7]
 8010cf6:	e010      	b.n	8010d1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010cf8:	7ebb      	ldrb	r3, [r7, #26]
 8010cfa:	f003 0311 	and.w	r3, r3, #17
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d003      	beq.n	8010d0a <f_open+0xea>
					res = FR_DENIED;
 8010d02:	2307      	movs	r3, #7
 8010d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010d08:	e007      	b.n	8010d1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010d0a:	79fb      	ldrb	r3, [r7, #7]
 8010d0c:	f003 0304 	and.w	r3, r3, #4
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d002      	beq.n	8010d1a <f_open+0xfa>
 8010d14:	2308      	movs	r3, #8
 8010d16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d168      	bne.n	8010df4 <f_open+0x1d4>
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	f003 0308 	and.w	r3, r3, #8
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d063      	beq.n	8010df4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010d2c:	f7fa fb1e 	bl	800b36c <get_fattime>
 8010d30:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d34:	330e      	adds	r3, #14
 8010d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7fd fc07 	bl	800e54c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d40:	3316      	adds	r3, #22
 8010d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fd fc01 	bl	800e54c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4c:	330b      	adds	r3, #11
 8010d4e:	2220      	movs	r2, #32
 8010d50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d56:	4611      	mov	r1, r2
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fe fb58 	bl	800f40e <ld_clust>
 8010d5e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010d60:	693b      	ldr	r3, [r7, #16]
 8010d62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010d64:	2200      	movs	r2, #0
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fe fb70 	bl	800f44c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d6e:	331c      	adds	r3, #28
 8010d70:	2100      	movs	r1, #0
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fd fbea 	bl	800e54c <st_dword>
					fs->wflag = 1;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d037      	beq.n	8010df4 <f_open+0x1d4>
						dw = fs->winsect;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d88:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8010d8a:	f107 0314 	add.w	r3, r7, #20
 8010d8e:	2200      	movs	r2, #0
 8010d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7fe f883 	bl	800ee9e <remove_chain>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d126      	bne.n	8010df4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fd fe28 	bl	800ea00 <move_window>
 8010db0:	4603      	mov	r3, r0
 8010db2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dba:	3a01      	subs	r2, #1
 8010dbc:	611a      	str	r2, [r3, #16]
 8010dbe:	e019      	b.n	8010df4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d115      	bne.n	8010df4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010dc8:	7ebb      	ldrb	r3, [r7, #26]
 8010dca:	f003 0310 	and.w	r3, r3, #16
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d003      	beq.n	8010dda <f_open+0x1ba>
					res = FR_NO_FILE;
 8010dd2:	2304      	movs	r3, #4
 8010dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010dd8:	e00c      	b.n	8010df4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010dda:	79fb      	ldrb	r3, [r7, #7]
 8010ddc:	f003 0302 	and.w	r3, r3, #2
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d007      	beq.n	8010df4 <f_open+0x1d4>
 8010de4:	7ebb      	ldrb	r3, [r7, #26]
 8010de6:	f003 0301 	and.w	r3, r3, #1
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d002      	beq.n	8010df4 <f_open+0x1d4>
						res = FR_DENIED;
 8010dee:	2307      	movs	r3, #7
 8010df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010df4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d128      	bne.n	8010e4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010dfc:	79fb      	ldrb	r3, [r7, #7]
 8010dfe:	f003 0308 	and.w	r3, r3, #8
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d003      	beq.n	8010e0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010e06:	79fb      	ldrb	r3, [r7, #7]
 8010e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010e1c:	79fb      	ldrb	r3, [r7, #7]
 8010e1e:	f023 0301 	bic.w	r3, r3, #1
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bf14      	ite	ne
 8010e26:	2301      	movne	r3, #1
 8010e28:	2300      	moveq	r3, #0
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	f107 0314 	add.w	r3, r7, #20
 8010e32:	4611      	mov	r1, r2
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7fd fcb1 	bl	800e79c <inc_lock>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	691b      	ldr	r3, [r3, #16]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d102      	bne.n	8010e4e <f_open+0x22e>
 8010e48:	2302      	movs	r3, #2
 8010e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f040 8095 	bne.w	8010f82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010e58:	693b      	ldr	r3, [r7, #16]
 8010e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e5c:	4611      	mov	r1, r2
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe fad5 	bl	800f40e <ld_clust>
 8010e64:	4602      	mov	r2, r0
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e6c:	331c      	adds	r3, #28
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7fd fb2e 	bl	800e4d0 <ld_dword>
 8010e74:	4602      	mov	r2, r0
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e80:	693a      	ldr	r2, [r7, #16]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	88da      	ldrh	r2, [r3, #6]
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	79fa      	ldrb	r2, [r7, #7]
 8010e92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2200      	movs	r2, #0
 8010e98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	3330      	adds	r3, #48	; 0x30
 8010eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010eae:	2100      	movs	r1, #0
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fd fb98 	bl	800e5e6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	f003 0320 	and.w	r3, r3, #32
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d060      	beq.n	8010f82 <f_open+0x362>
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	68db      	ldr	r3, [r3, #12]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d05c      	beq.n	8010f82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	68da      	ldr	r2, [r3, #12]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010ed0:	693b      	ldr	r3, [r7, #16]
 8010ed2:	895b      	ldrh	r3, [r3, #10]
 8010ed4:	025b      	lsls	r3, r3, #9
 8010ed6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	689b      	ldr	r3, [r3, #8]
 8010edc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	68db      	ldr	r3, [r3, #12]
 8010ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ee4:	e016      	b.n	8010f14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd fe43 	bl	800eb76 <get_fat>
 8010ef0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d802      	bhi.n	8010efe <f_open+0x2de>
 8010ef8:	2302      	movs	r3, #2
 8010efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f04:	d102      	bne.n	8010f0c <f_open+0x2ec>
 8010f06:	2301      	movs	r3, #1
 8010f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010f14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d103      	bne.n	8010f24 <f_open+0x304>
 8010f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d8e0      	bhi.n	8010ee6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010f28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d127      	bne.n	8010f82 <f_open+0x362>
 8010f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d022      	beq.n	8010f82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fd fdf9 	bl	800eb38 <clust2sect>
 8010f46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d103      	bne.n	8010f56 <f_open+0x336>
						res = FR_INT_ERR;
 8010f4e:	2302      	movs	r3, #2
 8010f50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010f54:	e015      	b.n	8010f82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f58:	0a5a      	lsrs	r2, r3, #9
 8010f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f5c:	441a      	add	r2, r3
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010f62:	693b      	ldr	r3, [r7, #16]
 8010f64:	7858      	ldrb	r0, [r3, #1]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	6a1a      	ldr	r2, [r3, #32]
 8010f70:	2301      	movs	r3, #1
 8010f72:	f7fd fa37 	bl	800e3e4 <disk_read>
 8010f76:	4603      	mov	r3, r0
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <f_open+0x362>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d002      	beq.n	8010f90 <f_open+0x370>
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3768      	adds	r7, #104	; 0x68
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08e      	sub	sp, #56	; 0x38
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f107 0214 	add.w	r2, r7, #20
 8010fba:	4611      	mov	r1, r2
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	f7ff fdb3 	bl	8010b28 <validate>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d107      	bne.n	8010fe0 <f_read+0x44>
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	7d5b      	ldrb	r3, [r3, #21]
 8010fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d002      	beq.n	8010fe6 <f_read+0x4a>
 8010fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe4:	e115      	b.n	8011212 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	7d1b      	ldrb	r3, [r3, #20]
 8010fea:	f003 0301 	and.w	r3, r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d101      	bne.n	8010ff6 <f_read+0x5a>
 8010ff2:	2307      	movs	r3, #7
 8010ff4:	e10d      	b.n	8011212 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	68da      	ldr	r2, [r3, #12]
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	699b      	ldr	r3, [r3, #24]
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	429a      	cmp	r2, r3
 8011008:	f240 80fe 	bls.w	8011208 <f_read+0x26c>
 801100c:	6a3b      	ldr	r3, [r7, #32]
 801100e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011010:	e0fa      	b.n	8011208 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	699b      	ldr	r3, [r3, #24]
 8011016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801101a:	2b00      	cmp	r3, #0
 801101c:	f040 80c6 	bne.w	80111ac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	699b      	ldr	r3, [r3, #24]
 8011024:	0a5b      	lsrs	r3, r3, #9
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	8952      	ldrh	r2, [r2, #10]
 801102a:	3a01      	subs	r2, #1
 801102c:	4013      	ands	r3, r2
 801102e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d12f      	bne.n	8011096 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d103      	bne.n	8011046 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	689b      	ldr	r3, [r3, #8]
 8011042:	633b      	str	r3, [r7, #48]	; 0x30
 8011044:	e013      	b.n	801106e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104a:	2b00      	cmp	r3, #0
 801104c:	d007      	beq.n	801105e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	699b      	ldr	r3, [r3, #24]
 8011052:	4619      	mov	r1, r3
 8011054:	68f8      	ldr	r0, [r7, #12]
 8011056:	f7fe f81f 	bl	800f098 <clmt_clust>
 801105a:	6338      	str	r0, [r7, #48]	; 0x30
 801105c:	e007      	b.n	801106e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	69db      	ldr	r3, [r3, #28]
 8011064:	4619      	mov	r1, r3
 8011066:	4610      	mov	r0, r2
 8011068:	f7fd fd85 	bl	800eb76 <get_fat>
 801106c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801106e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011070:	2b01      	cmp	r3, #1
 8011072:	d804      	bhi.n	801107e <f_read+0xe2>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	2202      	movs	r2, #2
 8011078:	755a      	strb	r2, [r3, #21]
 801107a:	2302      	movs	r3, #2
 801107c:	e0c9      	b.n	8011212 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011084:	d104      	bne.n	8011090 <f_read+0xf4>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2201      	movs	r2, #1
 801108a:	755a      	strb	r2, [r3, #21]
 801108c:	2301      	movs	r3, #1
 801108e:	e0c0      	b.n	8011212 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011094:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011096:	697a      	ldr	r2, [r7, #20]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	69db      	ldr	r3, [r3, #28]
 801109c:	4619      	mov	r1, r3
 801109e:	4610      	mov	r0, r2
 80110a0:	f7fd fd4a 	bl	800eb38 <clust2sect>
 80110a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80110a6:	69bb      	ldr	r3, [r7, #24]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d104      	bne.n	80110b6 <f_read+0x11a>
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2202      	movs	r2, #2
 80110b0:	755a      	strb	r2, [r3, #21]
 80110b2:	2302      	movs	r3, #2
 80110b4:	e0ad      	b.n	8011212 <f_read+0x276>
			sect += csect;
 80110b6:	69ba      	ldr	r2, [r7, #24]
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	4413      	add	r3, r2
 80110bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	0a5b      	lsrs	r3, r3, #9
 80110c2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d039      	beq.n	801113e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80110ca:	69fa      	ldr	r2, [r7, #28]
 80110cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ce:	4413      	add	r3, r2
 80110d0:	697a      	ldr	r2, [r7, #20]
 80110d2:	8952      	ldrh	r2, [r2, #10]
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d905      	bls.n	80110e4 <f_read+0x148>
					cc = fs->csize - csect;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	895b      	ldrh	r3, [r3, #10]
 80110dc:	461a      	mov	r2, r3
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	7858      	ldrb	r0, [r3, #1]
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	69ba      	ldr	r2, [r7, #24]
 80110ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ee:	f7fd f979 	bl	800e3e4 <disk_read>
 80110f2:	4603      	mov	r3, r0
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d004      	beq.n	8011102 <f_read+0x166>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	2201      	movs	r2, #1
 80110fc:	755a      	strb	r2, [r3, #21]
 80110fe:	2301      	movs	r3, #1
 8011100:	e087      	b.n	8011212 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	7d1b      	ldrb	r3, [r3, #20]
 8011106:	b25b      	sxtb	r3, r3
 8011108:	2b00      	cmp	r3, #0
 801110a:	da14      	bge.n	8011136 <f_read+0x19a>
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	6a1a      	ldr	r2, [r3, #32]
 8011110:	69bb      	ldr	r3, [r7, #24]
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011116:	429a      	cmp	r2, r3
 8011118:	d90d      	bls.n	8011136 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6a1a      	ldr	r2, [r3, #32]
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	025b      	lsls	r3, r3, #9
 8011124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011126:	18d0      	adds	r0, r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3330      	adds	r3, #48	; 0x30
 801112c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011130:	4619      	mov	r1, r3
 8011132:	f7fd fa37 	bl	800e5a4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011138:	025b      	lsls	r3, r3, #9
 801113a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801113c:	e050      	b.n	80111e0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	69ba      	ldr	r2, [r7, #24]
 8011144:	429a      	cmp	r2, r3
 8011146:	d02e      	beq.n	80111a6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	7d1b      	ldrb	r3, [r3, #20]
 801114c:	b25b      	sxtb	r3, r3
 801114e:	2b00      	cmp	r3, #0
 8011150:	da18      	bge.n	8011184 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	7858      	ldrb	r0, [r3, #1]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6a1a      	ldr	r2, [r3, #32]
 8011160:	2301      	movs	r3, #1
 8011162:	f7fd f95f 	bl	800e424 <disk_write>
 8011166:	4603      	mov	r3, r0
 8011168:	2b00      	cmp	r3, #0
 801116a:	d004      	beq.n	8011176 <f_read+0x1da>
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2201      	movs	r2, #1
 8011170:	755a      	strb	r2, [r3, #21]
 8011172:	2301      	movs	r3, #1
 8011174:	e04d      	b.n	8011212 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	7d1b      	ldrb	r3, [r3, #20]
 801117a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801117e:	b2da      	uxtb	r2, r3
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	7858      	ldrb	r0, [r3, #1]
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801118e:	2301      	movs	r3, #1
 8011190:	69ba      	ldr	r2, [r7, #24]
 8011192:	f7fd f927 	bl	800e3e4 <disk_read>
 8011196:	4603      	mov	r3, r0
 8011198:	2b00      	cmp	r3, #0
 801119a:	d004      	beq.n	80111a6 <f_read+0x20a>
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	2201      	movs	r2, #1
 80111a0:	755a      	strb	r2, [r3, #21]
 80111a2:	2301      	movs	r3, #1
 80111a4:	e035      	b.n	8011212 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	699b      	ldr	r3, [r3, #24]
 80111b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80111b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80111ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d901      	bls.n	80111c6 <f_read+0x22a>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	699b      	ldr	r3, [r3, #24]
 80111d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d4:	4413      	add	r3, r2
 80111d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111d8:	4619      	mov	r1, r3
 80111da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111dc:	f7fd f9e2 	bl	800e5a4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80111e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e4:	4413      	add	r3, r2
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	699a      	ldr	r2, [r3, #24]
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	441a      	add	r2, r3
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	619a      	str	r2, [r3, #24]
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fa:	441a      	add	r2, r3
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	601a      	str	r2, [r3, #0]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011204:	1ad3      	subs	r3, r2, r3
 8011206:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2b00      	cmp	r3, #0
 801120c:	f47f af01 	bne.w	8011012 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011210:	2300      	movs	r3, #0
}
 8011212:	4618      	mov	r0, r3
 8011214:	3738      	adds	r7, #56	; 0x38
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b086      	sub	sp, #24
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f107 0208 	add.w	r2, r7, #8
 8011228:	4611      	mov	r1, r2
 801122a:	4618      	mov	r0, r3
 801122c:	f7ff fc7c 	bl	8010b28 <validate>
 8011230:	4603      	mov	r3, r0
 8011232:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d168      	bne.n	801130c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	7d1b      	ldrb	r3, [r3, #20]
 801123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011242:	2b00      	cmp	r3, #0
 8011244:	d062      	beq.n	801130c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	7d1b      	ldrb	r3, [r3, #20]
 801124a:	b25b      	sxtb	r3, r3
 801124c:	2b00      	cmp	r3, #0
 801124e:	da15      	bge.n	801127c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	7858      	ldrb	r0, [r3, #1]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6a1a      	ldr	r2, [r3, #32]
 801125e:	2301      	movs	r3, #1
 8011260:	f7fd f8e0 	bl	800e424 <disk_write>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <f_sync+0x54>
 801126a:	2301      	movs	r3, #1
 801126c:	e04f      	b.n	801130e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	7d1b      	ldrb	r3, [r3, #20]
 8011272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011276:	b2da      	uxtb	r2, r3
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801127c:	f7fa f876 	bl	800b36c <get_fattime>
 8011280:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011282:	68ba      	ldr	r2, [r7, #8]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011288:	4619      	mov	r1, r3
 801128a:	4610      	mov	r0, r2
 801128c:	f7fd fbb8 	bl	800ea00 <move_window>
 8011290:	4603      	mov	r3, r0
 8011292:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011294:	7dfb      	ldrb	r3, [r7, #23]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d138      	bne.n	801130c <f_sync+0xf2>
					dir = fp->dir_ptr;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	330b      	adds	r3, #11
 80112a4:	781a      	ldrb	r2, [r3, #0]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	330b      	adds	r3, #11
 80112aa:	f042 0220 	orr.w	r2, r2, #32
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6818      	ldr	r0, [r3, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	461a      	mov	r2, r3
 80112bc:	68f9      	ldr	r1, [r7, #12]
 80112be:	f7fe f8c5 	bl	800f44c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	f103 021c 	add.w	r2, r3, #28
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	4619      	mov	r1, r3
 80112ce:	4610      	mov	r0, r2
 80112d0:	f7fd f93c 	bl	800e54c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	3316      	adds	r3, #22
 80112d8:	6939      	ldr	r1, [r7, #16]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fd f936 	bl	800e54c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	3312      	adds	r3, #18
 80112e4:	2100      	movs	r1, #0
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fd f915 	bl	800e516 <st_word>
					fs->wflag = 1;
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	2201      	movs	r2, #1
 80112f0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7fd fbb1 	bl	800ea5c <sync_fs>
 80112fa:	4603      	mov	r3, r0
 80112fc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	7d1b      	ldrb	r3, [r3, #20]
 8011302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011306:	b2da      	uxtb	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801130c:	7dfb      	ldrb	r3, [r7, #23]
}
 801130e:	4618      	mov	r0, r3
 8011310:	3718      	adds	r7, #24
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7ff ff7b 	bl	801121a <f_sync>
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011328:	7bfb      	ldrb	r3, [r7, #15]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d118      	bne.n	8011360 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f107 0208 	add.w	r2, r7, #8
 8011334:	4611      	mov	r1, r2
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fbf6 	bl	8010b28 <validate>
 801133c:	4603      	mov	r3, r0
 801133e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011340:	7bfb      	ldrb	r3, [r7, #15]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d10c      	bne.n	8011360 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	691b      	ldr	r3, [r3, #16]
 801134a:	4618      	mov	r0, r3
 801134c:	f7fd fab4 	bl	800e8b8 <dec_lock>
 8011350:	4603      	mov	r3, r0
 8011352:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011354:	7bfb      	ldrb	r3, [r7, #15]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d102      	bne.n	8011360 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	2200      	movs	r2, #0
 801135e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011360:	7bfb      	ldrb	r3, [r7, #15]
}
 8011362:	4618      	mov	r0, r3
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}

0801136a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801136a:	b590      	push	{r4, r7, lr}
 801136c:	b093      	sub	sp, #76	; 0x4c
 801136e:	af00      	add	r7, sp, #0
 8011370:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011372:	f107 0108 	add.w	r1, r7, #8
 8011376:	1d3b      	adds	r3, r7, #4
 8011378:	2200      	movs	r2, #0
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff f980 	bl	8010680 <find_volume>
 8011380:	4603      	mov	r3, r0
 8011382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8011386:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801138a:	2b00      	cmp	r3, #0
 801138c:	d131      	bne.n	80113f2 <f_chdir+0x88>
		dj.obj.fs = fs;
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	f107 030c 	add.w	r3, r7, #12
 8011398:	4611      	mov	r1, r2
 801139a:	4618      	mov	r0, r3
 801139c:	f7ff f846 	bl	801042c <follow_path>
 80113a0:	4603      	mov	r3, r0
 80113a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 80113a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d11a      	bne.n	80113e4 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80113ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80113b2:	b25b      	sxtb	r3, r3
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	da03      	bge.n	80113c0 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80113b8:	68bb      	ldr	r3, [r7, #8]
 80113ba:	697a      	ldr	r2, [r7, #20]
 80113bc:	619a      	str	r2, [r3, #24]
 80113be:	e011      	b.n	80113e4 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80113c0:	7cbb      	ldrb	r3, [r7, #18]
 80113c2:	f003 0310 	and.w	r3, r3, #16
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d009      	beq.n	80113de <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113ce:	68bc      	ldr	r4, [r7, #8]
 80113d0:	4611      	mov	r1, r2
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fe f81b 	bl	800f40e <ld_clust>
 80113d8:	4603      	mov	r3, r0
 80113da:	61a3      	str	r3, [r4, #24]
 80113dc:	e002      	b.n	80113e4 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80113de:	2305      	movs	r3, #5
 80113e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80113e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113e8:	2b04      	cmp	r3, #4
 80113ea:	d102      	bne.n	80113f2 <f_chdir+0x88>
 80113ec:	2305      	movs	r3, #5
 80113ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80113f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	374c      	adds	r7, #76	; 0x4c
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd90      	pop	{r4, r7, pc}

080113fe <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b086      	sub	sp, #24
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d101      	bne.n	8011412 <f_opendir+0x14>
 801140e:	2309      	movs	r3, #9
 8011410:	e064      	b.n	80114dc <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8011416:	f107 010c 	add.w	r1, r7, #12
 801141a:	463b      	mov	r3, r7
 801141c:	2200      	movs	r2, #0
 801141e:	4618      	mov	r0, r3
 8011420:	f7ff f92e 	bl	8010680 <find_volume>
 8011424:	4603      	mov	r3, r0
 8011426:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011428:	7dfb      	ldrb	r3, [r7, #23]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d14f      	bne.n	80114ce <f_opendir+0xd0>
		obj->fs = fs;
 801142e:	68fa      	ldr	r2, [r7, #12]
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7fe fff7 	bl	801042c <follow_path>
 801143e:	4603      	mov	r3, r0
 8011440:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8011442:	7dfb      	ldrb	r3, [r7, #23]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d13d      	bne.n	80114c4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801144e:	b25b      	sxtb	r3, r3
 8011450:	2b00      	cmp	r3, #0
 8011452:	db12      	blt.n	801147a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	799b      	ldrb	r3, [r3, #6]
 8011458:	f003 0310 	and.w	r3, r3, #16
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00a      	beq.n	8011476 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011460:	68fa      	ldr	r2, [r7, #12]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a1b      	ldr	r3, [r3, #32]
 8011466:	4619      	mov	r1, r3
 8011468:	4610      	mov	r0, r2
 801146a:	f7fd ffd0 	bl	800f40e <ld_clust>
 801146e:	4602      	mov	r2, r0
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	609a      	str	r2, [r3, #8]
 8011474:	e001      	b.n	801147a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011476:	2305      	movs	r3, #5
 8011478:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801147a:	7dfb      	ldrb	r3, [r7, #23]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d121      	bne.n	80114c4 <f_opendir+0xc6>
				obj->id = fs->id;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	88da      	ldrh	r2, [r3, #6]
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011488:	2100      	movs	r1, #0
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7fd fe38 	bl	800f100 <dir_sdi>
 8011490:	4603      	mov	r3, r0
 8011492:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011494:	7dfb      	ldrb	r3, [r7, #23]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d114      	bne.n	80114c4 <f_opendir+0xc6>
					if (obj->sclust) {
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	689b      	ldr	r3, [r3, #8]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00d      	beq.n	80114be <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80114a2:	2100      	movs	r1, #0
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f7fd f979 	bl	800e79c <inc_lock>
 80114aa:	4602      	mov	r2, r0
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	691b      	ldr	r3, [r3, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d105      	bne.n	80114c4 <f_opendir+0xc6>
 80114b8:	2312      	movs	r3, #18
 80114ba:	75fb      	strb	r3, [r7, #23]
 80114bc:	e002      	b.n	80114c4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	2200      	movs	r2, #0
 80114c2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80114c4:	7dfb      	ldrb	r3, [r7, #23]
 80114c6:	2b04      	cmp	r3, #4
 80114c8:	d101      	bne.n	80114ce <f_opendir+0xd0>
 80114ca:	2305      	movs	r3, #5
 80114cc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80114ce:	7dfb      	ldrb	r3, [r7, #23]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d002      	beq.n	80114da <f_opendir+0xdc>
 80114d4:	693b      	ldr	r3, [r7, #16]
 80114d6:	2200      	movs	r2, #0
 80114d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80114da:	7dfb      	ldrb	r3, [r7, #23]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	f107 0208 	add.w	r2, r7, #8
 80114f2:	4611      	mov	r1, r2
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7ff fb17 	bl	8010b28 <validate>
 80114fa:	4603      	mov	r3, r0
 80114fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80114fe:	7bfb      	ldrb	r3, [r7, #15]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d110      	bne.n	8011526 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	691b      	ldr	r3, [r3, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d006      	beq.n	801151a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	691b      	ldr	r3, [r3, #16]
 8011510:	4618      	mov	r0, r3
 8011512:	f7fd f9d1 	bl	800e8b8 <dec_lock>
 8011516:	4603      	mov	r3, r0
 8011518:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801151a:	7bfb      	ldrb	r3, [r7, #15]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d102      	bne.n	8011526 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2200      	movs	r2, #0
 8011524:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011526:	7bfb      	ldrb	r3, [r7, #15]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f107 0208 	add.w	r2, r7, #8
 8011540:	4611      	mov	r1, r2
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff faf0 	bl	8010b28 <validate>
 8011548:	4603      	mov	r3, r0
 801154a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801154c:	7bfb      	ldrb	r3, [r7, #15]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d126      	bne.n	80115a0 <f_readdir+0x70>
		if (!fno) {
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011558:	2100      	movs	r1, #0
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7fd fdd0 	bl	800f100 <dir_sdi>
 8011560:	4603      	mov	r3, r0
 8011562:	73fb      	strb	r3, [r7, #15]
 8011564:	e01c      	b.n	80115a0 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8011566:	2100      	movs	r1, #0
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7fe f97a 	bl	800f862 <dir_read>
 801156e:	4603      	mov	r3, r0
 8011570:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011572:	7bfb      	ldrb	r3, [r7, #15]
 8011574:	2b04      	cmp	r3, #4
 8011576:	d101      	bne.n	801157c <f_readdir+0x4c>
 8011578:	2300      	movs	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801157c:	7bfb      	ldrb	r3, [r7, #15]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10e      	bne.n	80115a0 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011582:	6839      	ldr	r1, [r7, #0]
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7fe fbcb 	bl	800fd20 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 801158a:	2100      	movs	r1, #0
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7fd fe32 	bl	800f1f6 <dir_next>
 8011592:	4603      	mov	r3, r0
 8011594:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011596:	7bfb      	ldrb	r3, [r7, #15]
 8011598:	2b04      	cmp	r3, #4
 801159a:	d101      	bne.n	80115a0 <f_readdir+0x70>
 801159c:	2300      	movs	r3, #0
 801159e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80115a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80115b4:	6839      	ldr	r1, [r7, #0]
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7ff ffba 	bl	8011530 <f_readdir>
 80115bc:	4603      	mov	r3, r0
 80115be:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80115c0:	7bfb      	ldrb	r3, [r7, #15]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d114      	bne.n	80115f0 <f_findnext+0x46>
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d011      	beq.n	80115f0 <f_findnext+0x46>
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	7d9b      	ldrb	r3, [r3, #22]
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d00d      	beq.n	80115f0 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	f103 0116 	add.w	r1, r3, #22
 80115de:	2300      	movs	r3, #0
 80115e0:	2200      	movs	r2, #0
 80115e2:	f7fe fca1 	bl	800ff28 <pattern_matching>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d100      	bne.n	80115ee <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80115ec:	e7e2      	b.n	80115b4 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80115ee:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b086      	sub	sp, #24
 80115fe:	af00      	add	r7, sp, #0
 8011600:	60f8      	str	r0, [r7, #12]
 8011602:	60b9      	str	r1, [r7, #8]
 8011604:	607a      	str	r2, [r7, #4]
 8011606:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 801160e:	6879      	ldr	r1, [r7, #4]
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f7ff fef4 	bl	80113fe <f_opendir>
 8011616:	4603      	mov	r3, r0
 8011618:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801161a:	7dfb      	ldrb	r3, [r7, #23]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d105      	bne.n	801162c <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8011620:	68b9      	ldr	r1, [r7, #8]
 8011622:	68f8      	ldr	r0, [r7, #12]
 8011624:	f7ff ffc1 	bl	80115aa <f_findnext>
 8011628:	4603      	mov	r3, r0
 801162a:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 801162c:	7dfb      	ldrb	r3, [r7, #23]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3718      	adds	r7, #24
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011638:	b480      	push	{r7}
 801163a:	b087      	sub	sp, #28
 801163c:	af00      	add	r7, sp, #0
 801163e:	60f8      	str	r0, [r7, #12]
 8011640:	60b9      	str	r1, [r7, #8]
 8011642:	4613      	mov	r3, r2
 8011644:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011646:	2301      	movs	r3, #1
 8011648:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801164e:	4b1f      	ldr	r3, [pc, #124]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011650:	7a5b      	ldrb	r3, [r3, #9]
 8011652:	b2db      	uxtb	r3, r3
 8011654:	2b00      	cmp	r3, #0
 8011656:	d131      	bne.n	80116bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011658:	4b1c      	ldr	r3, [pc, #112]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 801165a:	7a5b      	ldrb	r3, [r3, #9]
 801165c:	b2db      	uxtb	r3, r3
 801165e:	461a      	mov	r2, r3
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011662:	2100      	movs	r1, #0
 8011664:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011666:	4b19      	ldr	r3, [pc, #100]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011668:	7a5b      	ldrb	r3, [r3, #9]
 801166a:	b2db      	uxtb	r3, r3
 801166c:	4a17      	ldr	r2, [pc, #92]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	4413      	add	r3, r2
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011676:	4b15      	ldr	r3, [pc, #84]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011678:	7a5b      	ldrb	r3, [r3, #9]
 801167a:	b2db      	uxtb	r3, r3
 801167c:	461a      	mov	r2, r3
 801167e:	4b13      	ldr	r3, [pc, #76]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011680:	4413      	add	r3, r2
 8011682:	79fa      	ldrb	r2, [r7, #7]
 8011684:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011686:	4b11      	ldr	r3, [pc, #68]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011688:	7a5b      	ldrb	r3, [r3, #9]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	1c5a      	adds	r2, r3, #1
 801168e:	b2d1      	uxtb	r1, r2
 8011690:	4a0e      	ldr	r2, [pc, #56]	; (80116cc <FATFS_LinkDriverEx+0x94>)
 8011692:	7251      	strb	r1, [r2, #9]
 8011694:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011696:	7dbb      	ldrb	r3, [r7, #22]
 8011698:	3330      	adds	r3, #48	; 0x30
 801169a:	b2da      	uxtb	r2, r3
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	3301      	adds	r3, #1
 80116a4:	223a      	movs	r2, #58	; 0x3a
 80116a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	3302      	adds	r3, #2
 80116ac:	222f      	movs	r2, #47	; 0x2f
 80116ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	3303      	adds	r3, #3
 80116b4:	2200      	movs	r2, #0
 80116b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116b8:	2300      	movs	r3, #0
 80116ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	371c      	adds	r7, #28
 80116c2:	46bd      	mov	sp, r7
 80116c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop
 80116cc:	20001380 	.word	0x20001380

080116d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116da:	2200      	movs	r2, #0
 80116dc:	6839      	ldr	r1, [r7, #0]
 80116de:	6878      	ldr	r0, [r7, #4]
 80116e0:	f7ff ffaa 	bl	8011638 <FATFS_LinkDriverEx>
 80116e4:	4603      	mov	r3, r0
}
 80116e6:	4618      	mov	r0, r3
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80116f0:	b480      	push	{r7}
 80116f2:	b085      	sub	sp, #20
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	4603      	mov	r3, r0
 80116f8:	6039      	str	r1, [r7, #0]
 80116fa:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80116fc:	88fb      	ldrh	r3, [r7, #6]
 80116fe:	2b7f      	cmp	r3, #127	; 0x7f
 8011700:	d802      	bhi.n	8011708 <ff_convert+0x18>
		c = chr;
 8011702:	88fb      	ldrh	r3, [r7, #6]
 8011704:	81fb      	strh	r3, [r7, #14]
 8011706:	e025      	b.n	8011754 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00b      	beq.n	8011726 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801170e:	88fb      	ldrh	r3, [r7, #6]
 8011710:	2bff      	cmp	r3, #255	; 0xff
 8011712:	d805      	bhi.n	8011720 <ff_convert+0x30>
 8011714:	88fb      	ldrh	r3, [r7, #6]
 8011716:	3b80      	subs	r3, #128	; 0x80
 8011718:	4a12      	ldr	r2, [pc, #72]	; (8011764 <ff_convert+0x74>)
 801171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801171e:	e000      	b.n	8011722 <ff_convert+0x32>
 8011720:	2300      	movs	r3, #0
 8011722:	81fb      	strh	r3, [r7, #14]
 8011724:	e016      	b.n	8011754 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011726:	2300      	movs	r3, #0
 8011728:	81fb      	strh	r3, [r7, #14]
 801172a:	e009      	b.n	8011740 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801172c:	89fb      	ldrh	r3, [r7, #14]
 801172e:	4a0d      	ldr	r2, [pc, #52]	; (8011764 <ff_convert+0x74>)
 8011730:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011734:	88fa      	ldrh	r2, [r7, #6]
 8011736:	429a      	cmp	r2, r3
 8011738:	d006      	beq.n	8011748 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801173a:	89fb      	ldrh	r3, [r7, #14]
 801173c:	3301      	adds	r3, #1
 801173e:	81fb      	strh	r3, [r7, #14]
 8011740:	89fb      	ldrh	r3, [r7, #14]
 8011742:	2b7f      	cmp	r3, #127	; 0x7f
 8011744:	d9f2      	bls.n	801172c <ff_convert+0x3c>
 8011746:	e000      	b.n	801174a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011748:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801174a:	89fb      	ldrh	r3, [r7, #14]
 801174c:	3380      	adds	r3, #128	; 0x80
 801174e:	b29b      	uxth	r3, r3
 8011750:	b2db      	uxtb	r3, r3
 8011752:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011754:	89fb      	ldrh	r3, [r7, #14]
}
 8011756:	4618      	mov	r0, r3
 8011758:	3714      	adds	r7, #20
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	0801be30 	.word	0x0801be30

08011768 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011768:	b480      	push	{r7}
 801176a:	b087      	sub	sp, #28
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011772:	88fb      	ldrh	r3, [r7, #6]
 8011774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011778:	d201      	bcs.n	801177e <ff_wtoupper+0x16>
 801177a:	4b3e      	ldr	r3, [pc, #248]	; (8011874 <ff_wtoupper+0x10c>)
 801177c:	e000      	b.n	8011780 <ff_wtoupper+0x18>
 801177e:	4b3e      	ldr	r3, [pc, #248]	; (8011878 <ff_wtoupper+0x110>)
 8011780:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	1c9a      	adds	r2, r3, #2
 8011786:	617a      	str	r2, [r7, #20]
 8011788:	881b      	ldrh	r3, [r3, #0]
 801178a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801178c:	8a7b      	ldrh	r3, [r7, #18]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d068      	beq.n	8011864 <ff_wtoupper+0xfc>
 8011792:	88fa      	ldrh	r2, [r7, #6]
 8011794:	8a7b      	ldrh	r3, [r7, #18]
 8011796:	429a      	cmp	r2, r3
 8011798:	d364      	bcc.n	8011864 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	1c9a      	adds	r2, r3, #2
 801179e:	617a      	str	r2, [r7, #20]
 80117a0:	881b      	ldrh	r3, [r3, #0]
 80117a2:	823b      	strh	r3, [r7, #16]
 80117a4:	8a3b      	ldrh	r3, [r7, #16]
 80117a6:	0a1b      	lsrs	r3, r3, #8
 80117a8:	81fb      	strh	r3, [r7, #14]
 80117aa:	8a3b      	ldrh	r3, [r7, #16]
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80117b0:	88fa      	ldrh	r2, [r7, #6]
 80117b2:	8a79      	ldrh	r1, [r7, #18]
 80117b4:	8a3b      	ldrh	r3, [r7, #16]
 80117b6:	440b      	add	r3, r1
 80117b8:	429a      	cmp	r2, r3
 80117ba:	da49      	bge.n	8011850 <ff_wtoupper+0xe8>
			switch (cmd) {
 80117bc:	89fb      	ldrh	r3, [r7, #14]
 80117be:	2b08      	cmp	r3, #8
 80117c0:	d84f      	bhi.n	8011862 <ff_wtoupper+0xfa>
 80117c2:	a201      	add	r2, pc, #4	; (adr r2, 80117c8 <ff_wtoupper+0x60>)
 80117c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c8:	080117ed 	.word	0x080117ed
 80117cc:	080117ff 	.word	0x080117ff
 80117d0:	08011815 	.word	0x08011815
 80117d4:	0801181d 	.word	0x0801181d
 80117d8:	08011825 	.word	0x08011825
 80117dc:	0801182d 	.word	0x0801182d
 80117e0:	08011835 	.word	0x08011835
 80117e4:	0801183d 	.word	0x0801183d
 80117e8:	08011845 	.word	0x08011845
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80117ec:	88fa      	ldrh	r2, [r7, #6]
 80117ee:	8a7b      	ldrh	r3, [r7, #18]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	005b      	lsls	r3, r3, #1
 80117f4:	697a      	ldr	r2, [r7, #20]
 80117f6:	4413      	add	r3, r2
 80117f8:	881b      	ldrh	r3, [r3, #0]
 80117fa:	80fb      	strh	r3, [r7, #6]
 80117fc:	e027      	b.n	801184e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80117fe:	88fa      	ldrh	r2, [r7, #6]
 8011800:	8a7b      	ldrh	r3, [r7, #18]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	b29b      	uxth	r3, r3
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	b29b      	uxth	r3, r3
 801180c:	88fa      	ldrh	r2, [r7, #6]
 801180e:	1ad3      	subs	r3, r2, r3
 8011810:	80fb      	strh	r3, [r7, #6]
 8011812:	e01c      	b.n	801184e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011814:	88fb      	ldrh	r3, [r7, #6]
 8011816:	3b10      	subs	r3, #16
 8011818:	80fb      	strh	r3, [r7, #6]
 801181a:	e018      	b.n	801184e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801181c:	88fb      	ldrh	r3, [r7, #6]
 801181e:	3b20      	subs	r3, #32
 8011820:	80fb      	strh	r3, [r7, #6]
 8011822:	e014      	b.n	801184e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011824:	88fb      	ldrh	r3, [r7, #6]
 8011826:	3b30      	subs	r3, #48	; 0x30
 8011828:	80fb      	strh	r3, [r7, #6]
 801182a:	e010      	b.n	801184e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801182c:	88fb      	ldrh	r3, [r7, #6]
 801182e:	3b1a      	subs	r3, #26
 8011830:	80fb      	strh	r3, [r7, #6]
 8011832:	e00c      	b.n	801184e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	3308      	adds	r3, #8
 8011838:	80fb      	strh	r3, [r7, #6]
 801183a:	e008      	b.n	801184e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801183c:	88fb      	ldrh	r3, [r7, #6]
 801183e:	3b50      	subs	r3, #80	; 0x50
 8011840:	80fb      	strh	r3, [r7, #6]
 8011842:	e004      	b.n	801184e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011844:	88fb      	ldrh	r3, [r7, #6]
 8011846:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801184a:	80fb      	strh	r3, [r7, #6]
 801184c:	bf00      	nop
			}
			break;
 801184e:	e008      	b.n	8011862 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011850:	89fb      	ldrh	r3, [r7, #14]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d195      	bne.n	8011782 <ff_wtoupper+0x1a>
 8011856:	8a3b      	ldrh	r3, [r7, #16]
 8011858:	005b      	lsls	r3, r3, #1
 801185a:	697a      	ldr	r2, [r7, #20]
 801185c:	4413      	add	r3, r2
 801185e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011860:	e78f      	b.n	8011782 <ff_wtoupper+0x1a>
			break;
 8011862:	bf00      	nop
	}

	return chr;
 8011864:	88fb      	ldrh	r3, [r7, #6]
}
 8011866:	4618      	mov	r0, r3
 8011868:	371c      	adds	r7, #28
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	0801bf30 	.word	0x0801bf30
 8011878:	0801c124 	.word	0x0801c124

0801187c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8011880:	2200      	movs	r2, #0
 8011882:	490e      	ldr	r1, [pc, #56]	; (80118bc <MX_USB_HOST_Init+0x40>)
 8011884:	480e      	ldr	r0, [pc, #56]	; (80118c0 <MX_USB_HOST_Init+0x44>)
 8011886:	f7fb fa15 	bl	800ccb4 <USBH_Init>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d001      	beq.n	8011894 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011890:	f7f0 fe42 	bl	8002518 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8011894:	490b      	ldr	r1, [pc, #44]	; (80118c4 <MX_USB_HOST_Init+0x48>)
 8011896:	480a      	ldr	r0, [pc, #40]	; (80118c0 <MX_USB_HOST_Init+0x44>)
 8011898:	f7fb fa9a 	bl	800cdd0 <USBH_RegisterClass>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d001      	beq.n	80118a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80118a2:	f7f0 fe39 	bl	8002518 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80118a6:	4806      	ldr	r0, [pc, #24]	; (80118c0 <MX_USB_HOST_Init+0x44>)
 80118a8:	f7fb fb1e 	bl	800cee8 <USBH_Start>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d001      	beq.n	80118b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80118b2:	f7f0 fe31 	bl	8002518 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80118b6:	bf00      	nop
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	080118dd 	.word	0x080118dd
 80118c0:	2000138c 	.word	0x2000138c
 80118c4:	2000005c 	.word	0x2000005c

080118c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80118cc:	4802      	ldr	r0, [pc, #8]	; (80118d8 <MX_USB_HOST_Process+0x10>)
 80118ce:	f7fb fb1b 	bl	800cf08 <USBH_Process>
}
 80118d2:	bf00      	nop
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	2000138c 	.word	0x2000138c

080118dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	460b      	mov	r3, r1
 80118e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
	  switch(id)
 80118e8:	78fb      	ldrb	r3, [r7, #3]
 80118ea:	3b01      	subs	r3, #1
 80118ec:	2b04      	cmp	r3, #4
 80118ee:	d833      	bhi.n	8011958 <USBH_UserProcess+0x7c>
 80118f0:	a201      	add	r2, pc, #4	; (adr r2, 80118f8 <USBH_UserProcess+0x1c>)
 80118f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f6:	bf00      	nop
 80118f8:	08011959 	.word	0x08011959
 80118fc:	0801191f 	.word	0x0801191f
 8011900:	08011959 	.word	0x08011959
 8011904:	0801192d 	.word	0x0801192d
 8011908:	0801190d 	.word	0x0801190d
	  {
	  case HOST_USER_SELECT_CONFIGURATION:
	  break;

	  case HOST_USER_DISCONNECTION:
	  Appli_state = APPLICATION_DISCONNECT;
 801190c:	4b15      	ldr	r3, [pc, #84]	; (8011964 <USBH_UserProcess+0x88>)
 801190e:	2203      	movs	r2, #3
 8011910:	701a      	strb	r2, [r3, #0]
	  if (f_mount(0, "", 0) != FR_OK)
 8011912:	2200      	movs	r2, #0
 8011914:	4914      	ldr	r1, [pc, #80]	; (8011968 <USBH_UserProcess+0x8c>)
 8011916:	2000      	movs	r0, #0
 8011918:	f7ff f93c 	bl	8010b94 <f_mount>
	  {
	    /* FatFs Initialization Error */
	  }

	  break;
 801191c:	e01d      	b.n	801195a <USBH_UserProcess+0x7e>

	  case HOST_USER_CLASS_ACTIVE:
		  printf("User Class active\r\n");
 801191e:	4813      	ldr	r0, [pc, #76]	; (801196c <USBH_UserProcess+0x90>)
 8011920:	f003 fea2 	bl	8015668 <puts>
	  Appli_state = APPLICATION_READY;
 8011924:	4b0f      	ldr	r3, [pc, #60]	; (8011964 <USBH_UserProcess+0x88>)
 8011926:	2202      	movs	r2, #2
 8011928:	701a      	strb	r2, [r3, #0]
	  break;
 801192a:	e016      	b.n	801195a <USBH_UserProcess+0x7e>

	  case HOST_USER_CONNECTION:
		  printf("HOST USER CONNECTION\r\n");
 801192c:	4810      	ldr	r0, [pc, #64]	; (8011970 <USBH_UserProcess+0x94>)
 801192e:	f003 fe9b 	bl	8015668 <puts>
	  Appli_state = APPLICATION_START;
 8011932:	4b0c      	ldr	r3, [pc, #48]	; (8011964 <USBH_UserProcess+0x88>)
 8011934:	2201      	movs	r2, #1
 8011936:	701a      	strb	r2, [r3, #0]
	  if (f_mount(&USBHFatFS, "", 0) != FR_OK)
 8011938:	2200      	movs	r2, #0
 801193a:	490b      	ldr	r1, [pc, #44]	; (8011968 <USBH_UserProcess+0x8c>)
 801193c:	480d      	ldr	r0, [pc, #52]	; (8011974 <USBH_UserProcess+0x98>)
 801193e:	f7ff f929 	bl	8010b94 <f_mount>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d003      	beq.n	8011950 <USBH_UserProcess+0x74>
	  {
	    /* FatFs Initialization Error */
		  printf("USB Mount Error\r\n");
 8011948:	480b      	ldr	r0, [pc, #44]	; (8011978 <USBH_UserProcess+0x9c>)
 801194a:	f003 fe8d 	bl	8015668 <puts>
	  }
	  else{
		  printf("USB Mount OK\r\n");
	  }

	  break;
 801194e:	e004      	b.n	801195a <USBH_UserProcess+0x7e>
		  printf("USB Mount OK\r\n");
 8011950:	480a      	ldr	r0, [pc, #40]	; (801197c <USBH_UserProcess+0xa0>)
 8011952:	f003 fe89 	bl	8015668 <puts>
	  break;
 8011956:	e000      	b.n	801195a <USBH_UserProcess+0x7e>

	  default:
	  break;
 8011958:	bf00      	nop
	  }
  /* USER CODE END CALL_BACK_1 */
}
 801195a:	bf00      	nop
 801195c:	3708      	adds	r7, #8
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	20001764 	.word	0x20001764
 8011968:	0801967c 	.word	0x0801967c
 801196c:	08019680 	.word	0x08019680
 8011970:	08019694 	.word	0x08019694
 8011974:	20000f20 	.word	0x20000f20
 8011978:	080196ac 	.word	0x080196ac
 801197c:	080196c0 	.word	0x080196c0

08011980 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b08a      	sub	sp, #40	; 0x28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011988:	f107 0314 	add.w	r3, r7, #20
 801198c:	2200      	movs	r2, #0
 801198e:	601a      	str	r2, [r3, #0]
 8011990:	605a      	str	r2, [r3, #4]
 8011992:	609a      	str	r2, [r3, #8]
 8011994:	60da      	str	r2, [r3, #12]
 8011996:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4a24      	ldr	r2, [pc, #144]	; (8011a30 <HAL_HCD_MspInit+0xb0>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d141      	bne.n	8011a26 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80119a2:	2300      	movs	r3, #0
 80119a4:	613b      	str	r3, [r7, #16]
 80119a6:	4b23      	ldr	r3, [pc, #140]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 80119a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119aa:	4a22      	ldr	r2, [pc, #136]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 80119ac:	f043 0302 	orr.w	r3, r3, #2
 80119b0:	6313      	str	r3, [r2, #48]	; 0x30
 80119b2:	4b20      	ldr	r3, [pc, #128]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 80119b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119b6:	f003 0302 	and.w	r3, r3, #2
 80119ba:	613b      	str	r3, [r7, #16]
 80119bc:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80119be:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80119c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119c4:	2302      	movs	r3, #2
 80119c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80119cc:	2300      	movs	r3, #0
 80119ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80119d0:	230c      	movs	r3, #12
 80119d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80119d4:	f107 0314 	add.w	r3, r7, #20
 80119d8:	4619      	mov	r1, r3
 80119da:	4817      	ldr	r0, [pc, #92]	; (8011a38 <HAL_HCD_MspInit+0xb8>)
 80119dc:	f7f3 f9e8 	bl	8004db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80119e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80119e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80119e6:	2300      	movs	r3, #0
 80119e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119ea:	2300      	movs	r3, #0
 80119ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80119ee:	f107 0314 	add.w	r3, r7, #20
 80119f2:	4619      	mov	r1, r3
 80119f4:	4810      	ldr	r0, [pc, #64]	; (8011a38 <HAL_HCD_MspInit+0xb8>)
 80119f6:	f7f3 f9db 	bl	8004db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80119fa:	2300      	movs	r3, #0
 80119fc:	60fb      	str	r3, [r7, #12]
 80119fe:	4b0d      	ldr	r3, [pc, #52]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 8011a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a02:	4a0c      	ldr	r2, [pc, #48]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 8011a04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011a08:	6313      	str	r3, [r2, #48]	; 0x30
 8011a0a:	4b0a      	ldr	r3, [pc, #40]	; (8011a34 <HAL_HCD_MspInit+0xb4>)
 8011a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011a16:	2200      	movs	r2, #0
 8011a18:	2100      	movs	r1, #0
 8011a1a:	204d      	movs	r0, #77	; 0x4d
 8011a1c:	f7f2 fc28 	bl	8004270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011a20:	204d      	movs	r0, #77	; 0x4d
 8011a22:	f7f2 fc41 	bl	80042a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011a26:	bf00      	nop
 8011a28:	3728      	adds	r7, #40	; 0x28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}
 8011a2e:	bf00      	nop
 8011a30:	40040000 	.word	0x40040000
 8011a34:	40023800 	.word	0x40023800
 8011a38:	40020400 	.word	0x40020400

08011a3c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fb fe2f 	bl	800d6ae <USBH_LL_IncTimer>
}
 8011a50:	bf00      	nop
 8011a52:	3708      	adds	r7, #8
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fb fe67 	bl	800d73a <USBH_LL_Connect>
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fb fe70 	bl	800d768 <USBH_LL_Disconnect>
}
 8011a88:	bf00      	nop
 8011a8a:	3708      	adds	r7, #8
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011a90:	b480      	push	{r7}
 8011a92:	b083      	sub	sp, #12
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	460b      	mov	r3, r1
 8011a9a:	70fb      	strb	r3, [r7, #3]
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b082      	sub	sp, #8
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fb fe21 	bl	800d702 <USBH_LL_PortEnabled>
}
 8011ac0:	bf00      	nop
 8011ac2:	3708      	adds	r7, #8
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd80      	pop	{r7, pc}

08011ac8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fb fe21 	bl	800d71e <USBH_LL_PortDisabled>
}
 8011adc:	bf00      	nop
 8011ade:	3708      	adds	r7, #8
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d132      	bne.n	8011b5c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8011af6:	4a1c      	ldr	r2, [pc, #112]	; (8011b68 <USBH_LL_Init+0x84>)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_HS;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4a19      	ldr	r2, [pc, #100]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b02:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011b06:	4b18      	ldr	r3, [pc, #96]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b08:	4a18      	ldr	r2, [pc, #96]	; (8011b6c <USBH_LL_Init+0x88>)
 8011b0a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8011b0c:	4b16      	ldr	r3, [pc, #88]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b0e:	220c      	movs	r2, #12
 8011b10:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8011b12:	4b15      	ldr	r3, [pc, #84]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b14:	2201      	movs	r2, #1
 8011b16:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011b18:	4b13      	ldr	r3, [pc, #76]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011b1e:	4b12      	ldr	r3, [pc, #72]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b20:	2202      	movs	r2, #2
 8011b22:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011b24:	4b10      	ldr	r3, [pc, #64]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b26:	2200      	movs	r2, #0
 8011b28:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011b2a:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b32:	2200      	movs	r2, #0
 8011b34:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011b36:	4b0c      	ldr	r3, [pc, #48]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b38:	2200      	movs	r2, #0
 8011b3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8011b3c:	480a      	ldr	r0, [pc, #40]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b3e:	f7f3 fc2c 	bl	800539a <HAL_HCD_Init>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8011b48:	f7f0 fce6 	bl	8002518 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8011b4c:	4806      	ldr	r0, [pc, #24]	; (8011b68 <USBH_LL_Init+0x84>)
 8011b4e:	f7f4 f82f 	bl	8005bb0 <HAL_HCD_GetCurrentFrame>
 8011b52:	4603      	mov	r3, r0
 8011b54:	4619      	mov	r1, r3
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7fb fd9a 	bl	800d690 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011b5c:	2300      	movs	r3, #0
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3708      	adds	r7, #8
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	20001768 	.word	0x20001768
 8011b6c:	40040000 	.word	0x40040000

08011b70 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f3 ff9a 	bl	8005ac0 <HAL_HCD_Start>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b90:	7bfb      	ldrb	r3, [r7, #15]
 8011b92:	4618      	mov	r0, r3
 8011b94:	f000 f992 	bl	8011ebc <USBH_Get_USB_Status>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b084      	sub	sp, #16
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f3 ffa2 	bl	8005b06 <HAL_HCD_Stop>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f000 f977 	bl	8011ebc <USBH_Get_USB_Status>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b084      	sub	sp, #16
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011be4:	2301      	movs	r3, #1
 8011be6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7f3 ffec 	bl	8005bcc <HAL_HCD_GetCurrentSpeed>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	2b02      	cmp	r3, #2
 8011bf8:	d00c      	beq.n	8011c14 <USBH_LL_GetSpeed+0x38>
 8011bfa:	2b02      	cmp	r3, #2
 8011bfc:	d80d      	bhi.n	8011c1a <USBH_LL_GetSpeed+0x3e>
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d002      	beq.n	8011c08 <USBH_LL_GetSpeed+0x2c>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d003      	beq.n	8011c0e <USBH_LL_GetSpeed+0x32>
 8011c06:	e008      	b.n	8011c1a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c0c:	e008      	b.n	8011c20 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	73fb      	strb	r3, [r7, #15]
    break;
 8011c12:	e005      	b.n	8011c20 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011c14:	2302      	movs	r3, #2
 8011c16:	73fb      	strb	r3, [r7, #15]
    break;
 8011c18:	e002      	b.n	8011c20 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c1e:	bf00      	nop
  }
  return  speed;
 8011c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3710      	adds	r7, #16
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}

08011c2a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011c2a:	b580      	push	{r7, lr}
 8011c2c:	b084      	sub	sp, #16
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c32:	2300      	movs	r3, #0
 8011c34:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f3 ff7d 	bl	8005b40 <HAL_HCD_ResetPort>
 8011c46:	4603      	mov	r3, r0
 8011c48:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f000 f935 	bl	8011ebc <USBH_Get_USB_Status>
 8011c52:	4603      	mov	r3, r0
 8011c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3710      	adds	r7, #16
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b082      	sub	sp, #8
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	460b      	mov	r3, r1
 8011c6a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c72:	78fa      	ldrb	r2, [r7, #3]
 8011c74:	4611      	mov	r1, r2
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7f3 ff85 	bl	8005b86 <HAL_HCD_HC_GetXferCount>
 8011c7c:	4603      	mov	r3, r0
}
 8011c7e:	4618      	mov	r0, r3
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011c86:	b590      	push	{r4, r7, lr}
 8011c88:	b089      	sub	sp, #36	; 0x24
 8011c8a:	af04      	add	r7, sp, #16
 8011c8c:	6078      	str	r0, [r7, #4]
 8011c8e:	4608      	mov	r0, r1
 8011c90:	4611      	mov	r1, r2
 8011c92:	461a      	mov	r2, r3
 8011c94:	4603      	mov	r3, r0
 8011c96:	70fb      	strb	r3, [r7, #3]
 8011c98:	460b      	mov	r3, r1
 8011c9a:	70bb      	strb	r3, [r7, #2]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011cae:	787c      	ldrb	r4, [r7, #1]
 8011cb0:	78ba      	ldrb	r2, [r7, #2]
 8011cb2:	78f9      	ldrb	r1, [r7, #3]
 8011cb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011cb6:	9302      	str	r3, [sp, #8]
 8011cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cbc:	9301      	str	r3, [sp, #4]
 8011cbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011cc2:	9300      	str	r3, [sp, #0]
 8011cc4:	4623      	mov	r3, r4
 8011cc6:	f7f3 fbca 	bl	800545e <HAL_HCD_HC_Init>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011cce:	7bfb      	ldrb	r3, [r7, #15]
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f000 f8f3 	bl	8011ebc <USBH_Get_USB_Status>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3714      	adds	r7, #20
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd90      	pop	{r4, r7, pc}

08011ce4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	460b      	mov	r3, r1
 8011cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011cfe:	78fa      	ldrb	r2, [r7, #3]
 8011d00:	4611      	mov	r1, r2
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f3 fc43 	bl	800558e <HAL_HCD_HC_Halt>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d0c:	7bfb      	ldrb	r3, [r7, #15]
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f000 f8d4 	bl	8011ebc <USBH_Get_USB_Status>
 8011d14:	4603      	mov	r3, r0
 8011d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}

08011d22 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011d22:	b590      	push	{r4, r7, lr}
 8011d24:	b089      	sub	sp, #36	; 0x24
 8011d26:	af04      	add	r7, sp, #16
 8011d28:	6078      	str	r0, [r7, #4]
 8011d2a:	4608      	mov	r0, r1
 8011d2c:	4611      	mov	r1, r2
 8011d2e:	461a      	mov	r2, r3
 8011d30:	4603      	mov	r3, r0
 8011d32:	70fb      	strb	r3, [r7, #3]
 8011d34:	460b      	mov	r3, r1
 8011d36:	70bb      	strb	r3, [r7, #2]
 8011d38:	4613      	mov	r3, r2
 8011d3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d40:	2300      	movs	r3, #0
 8011d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011d4a:	787c      	ldrb	r4, [r7, #1]
 8011d4c:	78ba      	ldrb	r2, [r7, #2]
 8011d4e:	78f9      	ldrb	r1, [r7, #3]
 8011d50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011d54:	9303      	str	r3, [sp, #12]
 8011d56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d58:	9302      	str	r3, [sp, #8]
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	9301      	str	r3, [sp, #4]
 8011d5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d62:	9300      	str	r3, [sp, #0]
 8011d64:	4623      	mov	r3, r4
 8011d66:	f7f3 fc35 	bl	80055d4 <HAL_HCD_HC_SubmitRequest>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011d6e:	7bfb      	ldrb	r3, [r7, #15]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f000 f8a3 	bl	8011ebc <USBH_Get_USB_Status>
 8011d76:	4603      	mov	r3, r0
 8011d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3714      	adds	r7, #20
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd90      	pop	{r4, r7, pc}

08011d84 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011d96:	78fa      	ldrb	r2, [r7, #3]
 8011d98:	4611      	mov	r1, r2
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7f3 fede 	bl	8005b5c <HAL_HCD_HC_GetURBState>
 8011da0:	4603      	mov	r3, r0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b082      	sub	sp, #8
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	460b      	mov	r3, r1
 8011db4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d103      	bne.n	8011dc8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8011dc0:	78fb      	ldrb	r3, [r7, #3]
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f000 f8a6 	bl	8011f14 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011dc8:	20c8      	movs	r0, #200	; 0xc8
 8011dca:	f7f2 f975 	bl	80040b8 <HAL_Delay>
  return USBH_OK;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011dd8:	b480      	push	{r7}
 8011dda:	b085      	sub	sp, #20
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
 8011de0:	460b      	mov	r3, r1
 8011de2:	70fb      	strb	r3, [r7, #3]
 8011de4:	4613      	mov	r3, r2
 8011de6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011dee:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011df0:	78fa      	ldrb	r2, [r7, #3]
 8011df2:	68f9      	ldr	r1, [r7, #12]
 8011df4:	4613      	mov	r3, r2
 8011df6:	009b      	lsls	r3, r3, #2
 8011df8:	4413      	add	r3, r2
 8011dfa:	00db      	lsls	r3, r3, #3
 8011dfc:	440b      	add	r3, r1
 8011dfe:	333b      	adds	r3, #59	; 0x3b
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d00a      	beq.n	8011e1c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011e06:	78fa      	ldrb	r2, [r7, #3]
 8011e08:	68f9      	ldr	r1, [r7, #12]
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	4413      	add	r3, r2
 8011e10:	00db      	lsls	r3, r3, #3
 8011e12:	440b      	add	r3, r1
 8011e14:	3350      	adds	r3, #80	; 0x50
 8011e16:	78ba      	ldrb	r2, [r7, #2]
 8011e18:	701a      	strb	r2, [r3, #0]
 8011e1a:	e009      	b.n	8011e30 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011e1c:	78fa      	ldrb	r2, [r7, #3]
 8011e1e:	68f9      	ldr	r1, [r7, #12]
 8011e20:	4613      	mov	r3, r2
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	4413      	add	r3, r2
 8011e26:	00db      	lsls	r3, r3, #3
 8011e28:	440b      	add	r3, r1
 8011e2a:	3351      	adds	r3, #81	; 0x51
 8011e2c:	78ba      	ldrb	r2, [r7, #2]
 8011e2e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011e30:	2300      	movs	r3, #0
}
 8011e32:	4618      	mov	r0, r3
 8011e34:	3714      	adds	r7, #20
 8011e36:	46bd      	mov	sp, r7
 8011e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3c:	4770      	bx	lr

08011e3e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011e3e:	b480      	push	{r7}
 8011e40:	b085      	sub	sp, #20
 8011e42:	af00      	add	r7, sp, #0
 8011e44:	6078      	str	r0, [r7, #4]
 8011e46:	460b      	mov	r3, r1
 8011e48:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e54:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8011e56:	78fa      	ldrb	r2, [r7, #3]
 8011e58:	68b9      	ldr	r1, [r7, #8]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	4413      	add	r3, r2
 8011e60:	00db      	lsls	r3, r3, #3
 8011e62:	440b      	add	r3, r1
 8011e64:	333b      	adds	r3, #59	; 0x3b
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00a      	beq.n	8011e82 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8011e6c:	78fa      	ldrb	r2, [r7, #3]
 8011e6e:	68b9      	ldr	r1, [r7, #8]
 8011e70:	4613      	mov	r3, r2
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	4413      	add	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	440b      	add	r3, r1
 8011e7a:	3350      	adds	r3, #80	; 0x50
 8011e7c:	781b      	ldrb	r3, [r3, #0]
 8011e7e:	73fb      	strb	r3, [r7, #15]
 8011e80:	e009      	b.n	8011e96 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011e82:	78fa      	ldrb	r2, [r7, #3]
 8011e84:	68b9      	ldr	r1, [r7, #8]
 8011e86:	4613      	mov	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4413      	add	r3, r2
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	440b      	add	r3, r1
 8011e90:	3351      	adds	r3, #81	; 0x51
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3714      	adds	r7, #20
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b082      	sub	sp, #8
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f7f2 f903 	bl	80040b8 <HAL_Delay>
}
 8011eb2:	bf00      	nop
 8011eb4:	3708      	adds	r7, #8
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
	...

08011ebc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b085      	sub	sp, #20
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011eca:	79fb      	ldrb	r3, [r7, #7]
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d817      	bhi.n	8011f00 <USBH_Get_USB_Status+0x44>
 8011ed0:	a201      	add	r2, pc, #4	; (adr r2, 8011ed8 <USBH_Get_USB_Status+0x1c>)
 8011ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ed6:	bf00      	nop
 8011ed8:	08011ee9 	.word	0x08011ee9
 8011edc:	08011eef 	.word	0x08011eef
 8011ee0:	08011ef5 	.word	0x08011ef5
 8011ee4:	08011efb 	.word	0x08011efb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	73fb      	strb	r3, [r7, #15]
    break;
 8011eec:	e00b      	b.n	8011f06 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011eee:	2302      	movs	r3, #2
 8011ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef2:	e008      	b.n	8011f06 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef8:	e005      	b.n	8011f06 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011efa:	2302      	movs	r3, #2
 8011efc:	73fb      	strb	r3, [r7, #15]
    break;
 8011efe:	e002      	b.n	8011f06 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011f00:	2302      	movs	r3, #2
 8011f02:	73fb      	strb	r3, [r7, #15]
    break;
 8011f04:	bf00      	nop
  }
  return usb_status;
 8011f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3714      	adds	r7, #20
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b084      	sub	sp, #16
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8011f22:	79fb      	ldrb	r3, [r7, #7]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d102      	bne.n	8011f2e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011f28:	2301      	movs	r3, #1
 8011f2a:	73fb      	strb	r3, [r7, #15]
 8011f2c:	e001      	b.n	8011f32 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
 8011f34:	461a      	mov	r2, r3
 8011f36:	2110      	movs	r1, #16
 8011f38:	4803      	ldr	r0, [pc, #12]	; (8011f48 <MX_DriverVbusHS+0x34>)
 8011f3a:	f7f3 f9f1 	bl	8005320 <HAL_GPIO_WritePin>
}
 8011f3e:	bf00      	nop
 8011f40:	3710      	adds	r7, #16
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	40020800 	.word	0x40020800

08011f4c <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b085      	sub	sp, #20
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	691b      	ldr	r3, [r3, #16]
 8011f5a:	3303      	adds	r3, #3
 8011f5c:	f023 0303 	bic.w	r3, r3, #3
 8011f60:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv1d_11_scratch0_array.data = AI_PTR(activations + 0);
 8011f62:	4a23      	ldr	r2, [pc, #140]	; (8011ff0 <network_configure_activations+0xa4>)
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	6093      	str	r3, [r2, #8]
    conv1d_11_scratch0_array.data_start = AI_PTR(activations + 0);
 8011f68:	4a21      	ldr	r2, [pc, #132]	; (8011ff0 <network_configure_activations+0xa4>)
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	60d3      	str	r3, [r2, #12]
    conv1d_10_scratch0_array.data = AI_PTR(activations + 0);
 8011f6e:	4a21      	ldr	r2, [pc, #132]	; (8011ff4 <network_configure_activations+0xa8>)
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	6093      	str	r3, [r2, #8]
    conv1d_10_scratch0_array.data_start = AI_PTR(activations + 0);
 8011f74:	4a1f      	ldr	r2, [pc, #124]	; (8011ff4 <network_configure_activations+0xa8>)
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	60d3      	str	r3, [r2, #12]
    conv1d_9_scratch0_array.data = AI_PTR(activations + 0);
 8011f7a:	4a1f      	ldr	r2, [pc, #124]	; (8011ff8 <network_configure_activations+0xac>)
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	6093      	str	r3, [r2, #8]
    conv1d_9_scratch0_array.data_start = AI_PTR(activations + 0);
 8011f80:	4a1d      	ldr	r2, [pc, #116]	; (8011ff8 <network_configure_activations+0xac>)
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 8011f86:	4b1d      	ldr	r3, [pc, #116]	; (8011ffc <network_configure_activations+0xb0>)
 8011f88:	2200      	movs	r2, #0
 8011f8a:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8011f8c:	4b1b      	ldr	r3, [pc, #108]	; (8011ffc <network_configure_activations+0xb0>)
 8011f8e:	2200      	movs	r2, #0
 8011f90:	60da      	str	r2, [r3, #12]
    conv1d_9_output_array.data = AI_PTR(activations + 8000);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8011f98:	4a19      	ldr	r2, [pc, #100]	; (8012000 <network_configure_activations+0xb4>)
 8011f9a:	6093      	str	r3, [r2, #8]
    conv1d_9_output_array.data_start = AI_PTR(activations + 8000);
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	f503 53fa 	add.w	r3, r3, #8000	; 0x1f40
 8011fa2:	4a17      	ldr	r2, [pc, #92]	; (8012000 <network_configure_activations+0xb4>)
 8011fa4:	60d3      	str	r3, [r2, #12]
    conv1d_10_output_array.data = AI_PTR(activations + 1000);
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011fac:	4a15      	ldr	r2, [pc, #84]	; (8012004 <network_configure_activations+0xb8>)
 8011fae:	6093      	str	r3, [r2, #8]
    conv1d_10_output_array.data_start = AI_PTR(activations + 1000);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011fb6:	4a13      	ldr	r2, [pc, #76]	; (8012004 <network_configure_activations+0xb8>)
 8011fb8:	60d3      	str	r3, [r2, #12]
    conv1d_11_output_array.data = AI_PTR(activations + 100);
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	3364      	adds	r3, #100	; 0x64
 8011fbe:	4a12      	ldr	r2, [pc, #72]	; (8012008 <network_configure_activations+0xbc>)
 8011fc0:	6093      	str	r3, [r2, #8]
    conv1d_11_output_array.data_start = AI_PTR(activations + 100);
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	3364      	adds	r3, #100	; 0x64
 8011fc6:	4a10      	ldr	r2, [pc, #64]	; (8012008 <network_configure_activations+0xbc>)
 8011fc8:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 0);
 8011fca:	4a10      	ldr	r2, [pc, #64]	; (801200c <network_configure_activations+0xc0>)
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 0);
 8011fd0:	4a0e      	ldr	r2, [pc, #56]	; (801200c <network_configure_activations+0xc0>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(NULL);
 8011fd6:	4b0e      	ldr	r3, [pc, #56]	; (8012010 <network_configure_activations+0xc4>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	609a      	str	r2, [r3, #8]
    dense_3_nl_output_array.data_start = AI_PTR(NULL);
 8011fdc:	4b0c      	ldr	r3, [pc, #48]	; (8012010 <network_configure_activations+0xc4>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8011fe2:	2301      	movs	r3, #1
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr
 8011ff0:	200000dc 	.word	0x200000dc
 8011ff4:	200000ec 	.word	0x200000ec
 8011ff8:	200000fc 	.word	0x200000fc
 8011ffc:	2000018c 	.word	0x2000018c
 8012000:	2000019c 	.word	0x2000019c
 8012004:	200001ac 	.word	0x200001ac
 8012008:	200001bc 	.word	0x200001bc
 801200c:	200001cc 	.word	0x200001cc
 8012010:	200001dc 	.word	0x200001dc

08012014 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 8012014:	b480      	push	{r7}
 8012016:	b085      	sub	sp, #20
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
 801201c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8012024:	4b48      	ldr	r3, [pc, #288]	; (8012148 <network_configure_weights+0x134>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801202c:	4a46      	ldr	r2, [pc, #280]	; (8012148 <network_configure_weights+0x134>)
 801202e:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 62900);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f503 4375 	add.w	r3, r3, #62720	; 0xf500
 8012036:	33b4      	adds	r3, #180	; 0xb4
 8012038:	4a43      	ldr	r2, [pc, #268]	; (8012148 <network_configure_weights+0x134>)
 801203a:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 62900);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f503 4375 	add.w	r3, r3, #62720	; 0xf500
 8012042:	33b4      	adds	r3, #180	; 0xb4
 8012044:	4a40      	ldr	r2, [pc, #256]	; (8012148 <network_configure_weights+0x134>)
 8012046:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8012048:	4b40      	ldr	r3, [pc, #256]	; (801214c <network_configure_weights+0x138>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012050:	4a3e      	ldr	r2, [pc, #248]	; (801214c <network_configure_weights+0x138>)
 8012052:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 62700);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 801205a:	33ec      	adds	r3, #236	; 0xec
 801205c:	4a3b      	ldr	r2, [pc, #236]	; (801214c <network_configure_weights+0x138>)
 801205e:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 62700);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 8012066:	33ec      	adds	r3, #236	; 0xec
 8012068:	4a38      	ldr	r2, [pc, #224]	; (801214c <network_configure_weights+0x138>)
 801206a:	60d3      	str	r3, [r2, #12]
    conv1d_11_bias_array.format |= AI_FMT_FLAG_CONST;
 801206c:	4b38      	ldr	r3, [pc, #224]	; (8012150 <network_configure_weights+0x13c>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012074:	4a36      	ldr	r2, [pc, #216]	; (8012150 <network_configure_weights+0x13c>)
 8012076:	6013      	str	r3, [r2, #0]
    conv1d_11_bias_array.data = AI_PTR(weights + 62600);
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 801207e:	3388      	adds	r3, #136	; 0x88
 8012080:	4a33      	ldr	r2, [pc, #204]	; (8012150 <network_configure_weights+0x13c>)
 8012082:	6093      	str	r3, [r2, #8]
    conv1d_11_bias_array.data_start = AI_PTR(weights + 62600);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	f503 4374 	add.w	r3, r3, #62464	; 0xf400
 801208a:	3388      	adds	r3, #136	; 0x88
 801208c:	4a30      	ldr	r2, [pc, #192]	; (8012150 <network_configure_weights+0x13c>)
 801208e:	60d3      	str	r3, [r2, #12]
    conv1d_11_weights_array.format |= AI_FMT_FLAG_CONST;
 8012090:	4b30      	ldr	r3, [pc, #192]	; (8012154 <network_configure_weights+0x140>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012098:	4a2e      	ldr	r2, [pc, #184]	; (8012154 <network_configure_weights+0x140>)
 801209a:	6013      	str	r3, [r2, #0]
    conv1d_11_weights_array.data = AI_PTR(weights + 52600);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80120a2:	3378      	adds	r3, #120	; 0x78
 80120a4:	4a2b      	ldr	r2, [pc, #172]	; (8012154 <network_configure_weights+0x140>)
 80120a6:	6093      	str	r3, [r2, #8]
    conv1d_11_weights_array.data_start = AI_PTR(weights + 52600);
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80120ae:	3378      	adds	r3, #120	; 0x78
 80120b0:	4a28      	ldr	r2, [pc, #160]	; (8012154 <network_configure_weights+0x140>)
 80120b2:	60d3      	str	r3, [r2, #12]
    conv1d_10_bias_array.format |= AI_FMT_FLAG_CONST;
 80120b4:	4b28      	ldr	r3, [pc, #160]	; (8012158 <network_configure_weights+0x144>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120bc:	4a26      	ldr	r2, [pc, #152]	; (8012158 <network_configure_weights+0x144>)
 80120be:	6013      	str	r3, [r2, #0]
    conv1d_10_bias_array.data = AI_PTR(weights + 52400);
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80120c6:	33b0      	adds	r3, #176	; 0xb0
 80120c8:	4a23      	ldr	r2, [pc, #140]	; (8012158 <network_configure_weights+0x144>)
 80120ca:	6093      	str	r3, [r2, #8]
    conv1d_10_bias_array.data_start = AI_PTR(weights + 52400);
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 80120d2:	33b0      	adds	r3, #176	; 0xb0
 80120d4:	4a20      	ldr	r2, [pc, #128]	; (8012158 <network_configure_weights+0x144>)
 80120d6:	60d3      	str	r3, [r2, #12]
    conv1d_10_weights_array.format |= AI_FMT_FLAG_CONST;
 80120d8:	4b20      	ldr	r3, [pc, #128]	; (801215c <network_configure_weights+0x148>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80120e0:	4a1e      	ldr	r2, [pc, #120]	; (801215c <network_configure_weights+0x148>)
 80120e2:	6013      	str	r3, [r2, #0]
    conv1d_10_weights_array.data = AI_PTR(weights + 12400);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80120ea:	3330      	adds	r3, #48	; 0x30
 80120ec:	4a1b      	ldr	r2, [pc, #108]	; (801215c <network_configure_weights+0x148>)
 80120ee:	6093      	str	r3, [r2, #8]
    conv1d_10_weights_array.data_start = AI_PTR(weights + 12400);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f503 5341 	add.w	r3, r3, #12352	; 0x3040
 80120f6:	3330      	adds	r3, #48	; 0x30
 80120f8:	4a18      	ldr	r2, [pc, #96]	; (801215c <network_configure_weights+0x148>)
 80120fa:	60d3      	str	r3, [r2, #12]
    conv1d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 80120fc:	4b18      	ldr	r3, [pc, #96]	; (8012160 <network_configure_weights+0x14c>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012104:	4a16      	ldr	r2, [pc, #88]	; (8012160 <network_configure_weights+0x14c>)
 8012106:	6013      	str	r3, [r2, #0]
    conv1d_9_bias_array.data = AI_PTR(weights + 12000);
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 801210e:	3320      	adds	r3, #32
 8012110:	4a13      	ldr	r2, [pc, #76]	; (8012160 <network_configure_weights+0x14c>)
 8012112:	6093      	str	r3, [r2, #8]
    conv1d_9_bias_array.data_start = AI_PTR(weights + 12000);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 801211a:	3320      	adds	r3, #32
 801211c:	4a10      	ldr	r2, [pc, #64]	; (8012160 <network_configure_weights+0x14c>)
 801211e:	60d3      	str	r3, [r2, #12]
    conv1d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8012120:	4b10      	ldr	r3, [pc, #64]	; (8012164 <network_configure_weights+0x150>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012128:	4a0e      	ldr	r2, [pc, #56]	; (8012164 <network_configure_weights+0x150>)
 801212a:	6013      	str	r3, [r2, #0]
    conv1d_9_weights_array.data = AI_PTR(weights + 0);
 801212c:	4a0d      	ldr	r2, [pc, #52]	; (8012164 <network_configure_weights+0x150>)
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6093      	str	r3, [r2, #8]
    conv1d_9_weights_array.data_start = AI_PTR(weights + 0);
 8012132:	4a0c      	ldr	r2, [pc, #48]	; (8012164 <network_configure_weights+0x150>)
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8012138:	2301      	movs	r3, #1
}
 801213a:	4618      	mov	r0, r3
 801213c:	3714      	adds	r7, #20
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	2000010c 	.word	0x2000010c
 801214c:	2000011c 	.word	0x2000011c
 8012150:	2000012c 	.word	0x2000012c
 8012154:	2000013c 	.word	0x2000013c
 8012158:	2000014c 	.word	0x2000014c
 801215c:	2000015c 	.word	0x2000015c
 8012160:	2000016c 	.word	0x2000016c
 8012164:	2000017c 	.word	0x2000017c

08012168 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af02      	add	r7, sp, #8
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8012172:	2300      	movs	r3, #0
 8012174:	9301      	str	r3, [sp, #4]
 8012176:	2303      	movs	r3, #3
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	2301      	movs	r3, #1
 801217c:	4a04      	ldr	r2, [pc, #16]	; (8012190 <ai_network_create+0x28>)
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 f881 	bl	8012288 <ai_platform_network_create>
 8012186:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8012188:	4618      	mov	r0, r3
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	2000007c 	.word	0x2000007c

08012194 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 801219e:	6839      	ldr	r1, [r7, #0]
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f000 f8c9 	bl	8012338 <ai_platform_network_init>
 80121a6:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d101      	bne.n	80121b2 <ai_network_init+0x1e>
 80121ae:	2300      	movs	r3, #0
 80121b0:	e02b      	b.n	801220a <ai_network_init+0x76>

  ai_bool ok = true;
 80121b2:	2301      	movs	r3, #1
 80121b4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	4619      	mov	r1, r3
 80121ba:	68f8      	ldr	r0, [r7, #12]
 80121bc:	f7ff ff2a 	bl	8012014 <network_configure_weights>
 80121c0:	4603      	mov	r3, r0
 80121c2:	461a      	mov	r2, r3
 80121c4:	7afb      	ldrb	r3, [r7, #11]
 80121c6:	4013      	ands	r3, r2
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	bf14      	ite	ne
 80121cc:	2301      	movne	r3, #1
 80121ce:	2300      	moveq	r3, #0
 80121d0:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	3318      	adds	r3, #24
 80121d6:	4619      	mov	r1, r3
 80121d8:	68f8      	ldr	r0, [r7, #12]
 80121da:	f7ff feb7 	bl	8011f4c <network_configure_activations>
 80121de:	4603      	mov	r3, r0
 80121e0:	461a      	mov	r2, r3
 80121e2:	7afb      	ldrb	r3, [r7, #11]
 80121e4:	4013      	ands	r3, r2
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	bf14      	ite	ne
 80121ea:	2301      	movne	r3, #1
 80121ec:	2300      	moveq	r3, #0
 80121ee:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f000 f91f 	bl	8012434 <ai_platform_network_post_init>
 80121f6:	4603      	mov	r3, r0
 80121f8:	461a      	mov	r2, r3
 80121fa:	7afb      	ldrb	r3, [r7, #11]
 80121fc:	4013      	ands	r3, r2
 80121fe:	2b00      	cmp	r3, #0
 8012200:	bf14      	ite	ne
 8012202:	2301      	movne	r3, #1
 8012204:	2300      	moveq	r3, #0
 8012206:	72fb      	strb	r3, [r7, #11]

  return ok;
 8012208:	7afb      	ldrb	r3, [r7, #11]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}

08012212 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8012212:	b580      	push	{r7, lr}
 8012214:	b084      	sub	sp, #16
 8012216:	af00      	add	r7, sp, #0
 8012218:	60f8      	str	r0, [r7, #12]
 801221a:	60b9      	str	r1, [r7, #8]
 801221c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801221e:	687a      	ldr	r2, [r7, #4]
 8012220:	68b9      	ldr	r1, [r7, #8]
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	f000 f94e 	bl	80124c4 <ai_platform_network_process>
 8012228:	4603      	mov	r3, r0
}
 801222a:	4618      	mov	r0, r3
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
	...

08012234 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 8012234:	b480      	push	{r7}
 8012236:	af00      	add	r7, sp, #0
    0xbf, 0x9d, 0x08, 0xbf, 0x5a, 0x3c, 0x9a, 0x3e, 0x62, 0x76,
    0x92, 0x3e, 0x60, 0xdd, 0x8e, 0x3e, 0xa1, 0x6f, 0xeb,
    0xbe, 0x9c, 0xc4, 0x9e, 0x3e, 0xe9, 0xc4, 0x9e, 0xbe
  };

  return AI_HANDLE_PTR(s_network_weights);
 8012238:	4b02      	ldr	r3, [pc, #8]	; (8012244 <ai_network_data_weights_get+0x10>)

}
 801223a:	4618      	mov	r0, r3
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr
 8012244:	0801c208 	.word	0x0801c208

08012248 <_platform_network_state_setup.isra.1>:
 8012248:	b430      	push	{r4, r5}
 801224a:	68dd      	ldr	r5, [r3, #12]
 801224c:	695c      	ldr	r4, [r3, #20]
 801224e:	68ed      	ldr	r5, [r5, #12]
 8012250:	68e4      	ldr	r4, [r4, #12]
 8012252:	fb04 f405 	mul.w	r4, r4, r5
 8012256:	6084      	str	r4, [r0, #8]
 8012258:	8809      	ldrh	r1, [r1, #0]
 801225a:	fb04 f401 	mul.w	r4, r4, r1
 801225e:	60c4      	str	r4, [r0, #12]
 8012260:	6811      	ldr	r1, [r2, #0]
 8012262:	6041      	str	r1, [r0, #4]
 8012264:	6812      	ldr	r2, [r2, #0]
 8012266:	4414      	add	r4, r2
 8012268:	6004      	str	r4, [r0, #0]
 801226a:	699a      	ldr	r2, [r3, #24]
 801226c:	6814      	ldr	r4, [r2, #0]
 801226e:	00a4      	lsls	r4, r4, #2
 8012270:	d407      	bmi.n	8012282 <_platform_network_state_setup.isra.1+0x3a>
 8012272:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8012276:	1b64      	subs	r4, r4, r5
 8012278:	4421      	add	r1, r4
 801227a:	6091      	str	r1, [r2, #8]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	6842      	ldr	r2, [r0, #4]
 8012280:	60da      	str	r2, [r3, #12]
 8012282:	bc30      	pop	{r4, r5}
 8012284:	4770      	bx	lr
	...

08012288 <ai_platform_network_create>:
 8012288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801228c:	4e23      	ldr	r6, [pc, #140]	; (801231c <ai_platform_network_create+0x94>)
 801228e:	4924      	ldr	r1, [pc, #144]	; (8012320 <ai_platform_network_create+0x98>)
 8012290:	6835      	ldr	r5, [r6, #0]
 8012292:	b082      	sub	sp, #8
 8012294:	f025 0501 	bic.w	r5, r5, #1
 8012298:	f89d 7020 	ldrb.w	r7, [sp, #32]
 801229c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80122a0:	6035      	str	r5, [r6, #0]
 80122a2:	2501      	movs	r5, #1
 80122a4:	600d      	str	r5, [r1, #0]
 80122a6:	680d      	ldr	r5, [r1, #0]
 80122a8:	2d00      	cmp	r5, #0
 80122aa:	d1fc      	bne.n	80122a6 <ai_platform_network_create+0x1e>
 80122ac:	491d      	ldr	r1, [pc, #116]	; (8012324 <ai_platform_network_create+0x9c>)
 80122ae:	4e1e      	ldr	r6, [pc, #120]	; (8012328 <ai_platform_network_create+0xa0>)
 80122b0:	600e      	str	r6, [r1, #0]
 80122b2:	680e      	ldr	r6, [r1, #0]
 80122b4:	491d      	ldr	r1, [pc, #116]	; (801232c <ai_platform_network_create+0xa4>)
 80122b6:	428e      	cmp	r6, r1
 80122b8:	d000      	beq.n	80122bc <ai_platform_network_create+0x34>
 80122ba:	e7fe      	b.n	80122ba <ai_platform_network_create+0x32>
 80122bc:	b1d0      	cbz	r0, 80122f4 <ai_platform_network_create+0x6c>
 80122be:	4698      	mov	r8, r3
 80122c0:	4613      	mov	r3, r2
 80122c2:	4a1b      	ldr	r2, [pc, #108]	; (8012330 <ai_platform_network_create+0xa8>)
 80122c4:	601a      	str	r2, [r3, #0]
 80122c6:	6003      	str	r3, [r0, #0]
 80122c8:	4606      	mov	r6, r0
 80122ca:	f000 fb05 	bl	80128d8 <core_init>
 80122ce:	b1b0      	cbz	r0, 80122fe <ai_platform_network_create+0x76>
 80122d0:	0223      	lsls	r3, r4, #8
 80122d2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80122d6:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 80122da:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 80122de:	d910      	bls.n	8012302 <ai_platform_network_create+0x7a>
 80122e0:	2201      	movs	r2, #1
 80122e2:	2300      	movs	r3, #0
 80122e4:	6033      	str	r3, [r6, #0]
 80122e6:	2310      	movs	r3, #16
 80122e8:	2000      	movs	r0, #0
 80122ea:	f362 0007 	bfi	r0, r2, #0, #8
 80122ee:	f363 201f 	bfi	r0, r3, #8, #24
 80122f2:	e001      	b.n	80122f8 <ai_platform_network_create+0x70>
 80122f4:	f241 0010 	movw	r0, #4112	; 0x1010
 80122f8:	b002      	add	sp, #8
 80122fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122fe:	2230      	movs	r2, #48	; 0x30
 8012300:	e7ef      	b.n	80122e2 <ai_platform_network_create+0x5a>
 8012302:	a802      	add	r0, sp, #8
 8012304:	4b0b      	ldr	r3, [pc, #44]	; (8012334 <ai_platform_network_create+0xac>)
 8012306:	f840 3d04 	str.w	r3, [r0, #-4]!
 801230a:	f002 f8c3 	bl	8014494 <ai_check_custom_types>
 801230e:	b110      	cbz	r0, 8012316 <ai_platform_network_create+0x8e>
 8012310:	462b      	mov	r3, r5
 8012312:	462a      	mov	r2, r5
 8012314:	e7e8      	b.n	80122e8 <ai_platform_network_create+0x60>
 8012316:	2202      	movs	r2, #2
 8012318:	e7e3      	b.n	80122e2 <ai_platform_network_create+0x5a>
 801231a:	bf00      	nop
 801231c:	e0002000 	.word	0xe0002000
 8012320:	40023008 	.word	0x40023008
 8012324:	40023000 	.word	0x40023000
 8012328:	f407a5c2 	.word	0xf407a5c2
 801232c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012330:	a1c00100 	.word	0xa1c00100
 8012334:	84048403 	.word	0x84048403

08012338 <ai_platform_network_init>:
 8012338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801233a:	460c      	mov	r4, r1
 801233c:	4605      	mov	r5, r0
 801233e:	b120      	cbz	r0, 801234a <ai_platform_network_init+0x12>
 8012340:	4b36      	ldr	r3, [pc, #216]	; (801241c <ai_platform_network_init+0xe4>)
 8012342:	6802      	ldr	r2, [r0, #0]
 8012344:	429a      	cmp	r2, r3
 8012346:	bf18      	it	ne
 8012348:	2500      	movne	r5, #0
 801234a:	4935      	ldr	r1, [pc, #212]	; (8012420 <ai_platform_network_init+0xe8>)
 801234c:	4a35      	ldr	r2, [pc, #212]	; (8012424 <ai_platform_network_init+0xec>)
 801234e:	680b      	ldr	r3, [r1, #0]
 8012350:	2001      	movs	r0, #1
 8012352:	f023 0301 	bic.w	r3, r3, #1
 8012356:	600b      	str	r3, [r1, #0]
 8012358:	4613      	mov	r3, r2
 801235a:	6010      	str	r0, [r2, #0]
 801235c:	681a      	ldr	r2, [r3, #0]
 801235e:	2a00      	cmp	r2, #0
 8012360:	d1fc      	bne.n	801235c <ai_platform_network_init+0x24>
 8012362:	4b31      	ldr	r3, [pc, #196]	; (8012428 <ai_platform_network_init+0xf0>)
 8012364:	4a31      	ldr	r2, [pc, #196]	; (801242c <ai_platform_network_init+0xf4>)
 8012366:	601a      	str	r2, [r3, #0]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	4b31      	ldr	r3, [pc, #196]	; (8012430 <ai_platform_network_init+0xf8>)
 801236c:	429a      	cmp	r2, r3
 801236e:	d000      	beq.n	8012372 <ai_platform_network_init+0x3a>
 8012370:	e7fe      	b.n	8012370 <ai_platform_network_init+0x38>
 8012372:	b33d      	cbz	r5, 80123c4 <ai_platform_network_init+0x8c>
 8012374:	b344      	cbz	r4, 80123c8 <ai_platform_network_init+0x90>
 8012376:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8012378:	6926      	ldr	r6, [r4, #16]
 801237a:	2f00      	cmp	r7, #0
 801237c:	d03d      	beq.n	80123fa <ai_platform_network_init+0xc2>
 801237e:	b35e      	cbz	r6, 80123d8 <ai_platform_network_init+0xa0>
 8012380:	4627      	mov	r7, r4
 8012382:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012384:	f105 0618 	add.w	r6, r5, #24
 8012388:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801238a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801238e:	e886 0003 	stmia.w	r6, {r0, r1}
 8012392:	3418      	adds	r4, #24
 8012394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012396:	f105 0630 	add.w	r6, r5, #48	; 0x30
 801239a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801239c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80123a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80123a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80123a6:	2303      	movs	r3, #3
 80123a8:	60eb      	str	r3, [r5, #12]
 80123aa:	b15a      	cbz	r2, 80123c4 <ai_platform_network_init+0x8c>
 80123ac:	68d3      	ldr	r3, [r2, #12]
 80123ae:	6095      	str	r5, [r2, #8]
 80123b0:	429a      	cmp	r2, r3
 80123b2:	d007      	beq.n	80123c4 <ai_platform_network_init+0x8c>
 80123b4:	b133      	cbz	r3, 80123c4 <ai_platform_network_init+0x8c>
 80123b6:	68da      	ldr	r2, [r3, #12]
 80123b8:	609d      	str	r5, [r3, #8]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d002      	beq.n	80123c4 <ai_platform_network_init+0x8c>
 80123be:	4613      	mov	r3, r2
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d1f8      	bne.n	80123b6 <ai_platform_network_init+0x7e>
 80123c4:	4628      	mov	r0, r5
 80123c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123c8:	f105 0010 	add.w	r0, r5, #16
 80123cc:	2211      	movs	r2, #17
 80123ce:	2110      	movs	r1, #16
 80123d0:	f000 fa84 	bl	80128dc <core_set_error>
 80123d4:	4625      	mov	r5, r4
 80123d6:	e7f5      	b.n	80123c4 <ai_platform_network_init+0x8c>
 80123d8:	8921      	ldrh	r1, [r4, #8]
 80123da:	88e2      	ldrh	r2, [r4, #6]
 80123dc:	68e3      	ldr	r3, [r4, #12]
 80123de:	fb02 f201 	mul.w	r2, r2, r1
 80123e2:	fb03 f302 	mul.w	r3, r3, r2
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d0ca      	beq.n	8012380 <ai_platform_network_init+0x48>
 80123ea:	f105 0010 	add.w	r0, r5, #16
 80123ee:	2212      	movs	r2, #18
 80123f0:	2110      	movs	r1, #16
 80123f2:	f000 fa73 	bl	80128dc <core_set_error>
 80123f6:	4635      	mov	r5, r6
 80123f8:	e7e4      	b.n	80123c4 <ai_platform_network_init+0x8c>
 80123fa:	8c21      	ldrh	r1, [r4, #32]
 80123fc:	8be2      	ldrh	r2, [r4, #30]
 80123fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012400:	fb02 f201 	mul.w	r2, r2, r1
 8012404:	fb03 f302 	mul.w	r3, r3, r2
 8012408:	2b00      	cmp	r3, #0
 801240a:	d0b8      	beq.n	801237e <ai_platform_network_init+0x46>
 801240c:	f105 0010 	add.w	r0, r5, #16
 8012410:	2213      	movs	r2, #19
 8012412:	2110      	movs	r1, #16
 8012414:	f000 fa62 	bl	80128dc <core_set_error>
 8012418:	463d      	mov	r5, r7
 801241a:	e7d3      	b.n	80123c4 <ai_platform_network_init+0x8c>
 801241c:	a1c00100 	.word	0xa1c00100
 8012420:	e0002000 	.word	0xe0002000
 8012424:	40023008 	.word	0x40023008
 8012428:	40023000 	.word	0x40023000
 801242c:	f407a5c2 	.word	0xf407a5c2
 8012430:	b5e8b5cd 	.word	0xb5e8b5cd

08012434 <ai_platform_network_post_init>:
 8012434:	b538      	push	{r3, r4, r5, lr}
 8012436:	4604      	mov	r4, r0
 8012438:	b120      	cbz	r0, 8012444 <ai_platform_network_post_init+0x10>
 801243a:	4b1c      	ldr	r3, [pc, #112]	; (80124ac <ai_platform_network_post_init+0x78>)
 801243c:	6802      	ldr	r2, [r0, #0]
 801243e:	429a      	cmp	r2, r3
 8012440:	bf18      	it	ne
 8012442:	2400      	movne	r4, #0
 8012444:	491a      	ldr	r1, [pc, #104]	; (80124b0 <ai_platform_network_post_init+0x7c>)
 8012446:	4a1b      	ldr	r2, [pc, #108]	; (80124b4 <ai_platform_network_post_init+0x80>)
 8012448:	680b      	ldr	r3, [r1, #0]
 801244a:	2001      	movs	r0, #1
 801244c:	f023 0301 	bic.w	r3, r3, #1
 8012450:	600b      	str	r3, [r1, #0]
 8012452:	4613      	mov	r3, r2
 8012454:	6010      	str	r0, [r2, #0]
 8012456:	681a      	ldr	r2, [r3, #0]
 8012458:	2a00      	cmp	r2, #0
 801245a:	d1fc      	bne.n	8012456 <ai_platform_network_post_init+0x22>
 801245c:	4b16      	ldr	r3, [pc, #88]	; (80124b8 <ai_platform_network_post_init+0x84>)
 801245e:	4a17      	ldr	r2, [pc, #92]	; (80124bc <ai_platform_network_post_init+0x88>)
 8012460:	601a      	str	r2, [r3, #0]
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	4b16      	ldr	r3, [pc, #88]	; (80124c0 <ai_platform_network_post_init+0x8c>)
 8012466:	429a      	cmp	r2, r3
 8012468:	d000      	beq.n	801246c <ai_platform_network_post_init+0x38>
 801246a:	e7fe      	b.n	801246a <ai_platform_network_post_init+0x36>
 801246c:	b1a4      	cbz	r4, 8012498 <ai_platform_network_post_init+0x64>
 801246e:	68e3      	ldr	r3, [r4, #12]
 8012470:	f013 0502 	ands.w	r5, r3, #2
 8012474:	d012      	beq.n	801249c <ai_platform_network_post_init+0x68>
 8012476:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012478:	b163      	cbz	r3, 8012494 <ai_platform_network_post_init+0x60>
 801247a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801247c:	b91d      	cbnz	r5, 8012486 <ai_platform_network_post_init+0x52>
 801247e:	e009      	b.n	8012494 <ai_platform_network_post_init+0x60>
 8012480:	461d      	mov	r5, r3
 8012482:	b13b      	cbz	r3, 8012494 <ai_platform_network_post_init+0x60>
 8012484:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012486:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012488:	4629      	mov	r1, r5
 801248a:	2000      	movs	r0, #0
 801248c:	4798      	blx	r3
 801248e:	68eb      	ldr	r3, [r5, #12]
 8012490:	42ab      	cmp	r3, r5
 8012492:	d1f5      	bne.n	8012480 <ai_platform_network_post_init+0x4c>
 8012494:	2001      	movs	r0, #1
 8012496:	bd38      	pop	{r3, r4, r5, pc}
 8012498:	4620      	mov	r0, r4
 801249a:	bd38      	pop	{r3, r4, r5, pc}
 801249c:	f104 0010 	add.w	r0, r4, #16
 80124a0:	2210      	movs	r2, #16
 80124a2:	2111      	movs	r1, #17
 80124a4:	f000 fa1a 	bl	80128dc <core_set_error>
 80124a8:	4628      	mov	r0, r5
 80124aa:	bd38      	pop	{r3, r4, r5, pc}
 80124ac:	a1c00100 	.word	0xa1c00100
 80124b0:	e0002000 	.word	0xe0002000
 80124b4:	40023008 	.word	0x40023008
 80124b8:	40023000 	.word	0x40023000
 80124bc:	f407a5c2 	.word	0xf407a5c2
 80124c0:	b5e8b5cd 	.word	0xb5e8b5cd

080124c4 <ai_platform_network_process>:
 80124c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124c8:	b083      	sub	sp, #12
 80124ca:	4604      	mov	r4, r0
 80124cc:	9201      	str	r2, [sp, #4]
 80124ce:	b120      	cbz	r0, 80124da <ai_platform_network_process+0x16>
 80124d0:	4ba5      	ldr	r3, [pc, #660]	; (8012768 <ai_platform_network_process+0x2a4>)
 80124d2:	6802      	ldr	r2, [r0, #0]
 80124d4:	429a      	cmp	r2, r3
 80124d6:	bf18      	it	ne
 80124d8:	2400      	movne	r4, #0
 80124da:	48a4      	ldr	r0, [pc, #656]	; (801276c <ai_platform_network_process+0x2a8>)
 80124dc:	4ba4      	ldr	r3, [pc, #656]	; (8012770 <ai_platform_network_process+0x2ac>)
 80124de:	6802      	ldr	r2, [r0, #0]
 80124e0:	f022 0201 	bic.w	r2, r2, #1
 80124e4:	6002      	str	r2, [r0, #0]
 80124e6:	2201      	movs	r2, #1
 80124e8:	601a      	str	r2, [r3, #0]
 80124ea:	681a      	ldr	r2, [r3, #0]
 80124ec:	2a00      	cmp	r2, #0
 80124ee:	d1fc      	bne.n	80124ea <ai_platform_network_process+0x26>
 80124f0:	4ba0      	ldr	r3, [pc, #640]	; (8012774 <ai_platform_network_process+0x2b0>)
 80124f2:	4aa1      	ldr	r2, [pc, #644]	; (8012778 <ai_platform_network_process+0x2b4>)
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	681a      	ldr	r2, [r3, #0]
 80124f8:	4ba0      	ldr	r3, [pc, #640]	; (801277c <ai_platform_network_process+0x2b8>)
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d000      	beq.n	8012500 <ai_platform_network_process+0x3c>
 80124fe:	e7fe      	b.n	80124fe <ai_platform_network_process+0x3a>
 8012500:	2c00      	cmp	r4, #0
 8012502:	d066      	beq.n	80125d2 <ai_platform_network_process+0x10e>
 8012504:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8012508:	b107      	cbz	r7, 801250c <ai_platform_network_process+0x48>
 801250a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801250c:	68e3      	ldr	r3, [r4, #12]
 801250e:	f003 0303 	and.w	r3, r3, #3
 8012512:	2600      	movs	r6, #0
 8012514:	2b03      	cmp	r3, #3
 8012516:	6166      	str	r6, [r4, #20]
 8012518:	f040 80fe 	bne.w	8012718 <ai_platform_network_process+0x254>
 801251c:	2900      	cmp	r1, #0
 801251e:	d07f      	beq.n	8012620 <ai_platform_network_process+0x15c>
 8012520:	2f00      	cmp	r7, #0
 8012522:	d07d      	beq.n	8012620 <ai_platform_network_process+0x15c>
 8012524:	883b      	ldrh	r3, [r7, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d07a      	beq.n	8012620 <ai_platform_network_process+0x15c>
 801252a:	460d      	mov	r5, r1
 801252c:	46a0      	mov	r8, r4
 801252e:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 8012532:	429e      	cmp	r6, r3
 8012534:	d27d      	bcs.n	8012632 <ai_platform_network_process+0x16e>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d07a      	beq.n	8012632 <ai_platform_network_process+0x16e>
 801253c:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8012540:	2c00      	cmp	r4, #0
 8012542:	d076      	beq.n	8012632 <ai_platform_network_process+0x16e>
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 801254c:	d067      	beq.n	801261e <ai_platform_network_process+0x15a>
 801254e:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8012552:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8012556:	69a0      	ldr	r0, [r4, #24]
 8012558:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801255c:	6841      	ldr	r1, [r0, #4]
 801255e:	fb0b f30e 	mul.w	r3, fp, lr
 8012562:	fb0c f303 	mul.w	r3, ip, r3
 8012566:	4299      	cmp	r1, r3
 8012568:	d350      	bcc.n	801260c <ai_platform_network_process+0x148>
 801256a:	68e3      	ldr	r3, [r4, #12]
 801256c:	68da      	ldr	r2, [r3, #12]
 801256e:	455a      	cmp	r2, fp
 8012570:	d14c      	bne.n	801260c <ai_platform_network_process+0x148>
 8012572:	689a      	ldr	r2, [r3, #8]
 8012574:	4572      	cmp	r2, lr
 8012576:	d149      	bne.n	801260c <ai_platform_network_process+0x148>
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	459c      	cmp	ip, r3
 801257c:	d146      	bne.n	801260c <ai_platform_network_process+0x148>
 801257e:	6800      	ldr	r0, [r0, #0]
 8012580:	f002 f838 	bl	80145f4 <ai_array_get_byte_size>
 8012584:	68e2      	ldr	r2, [r4, #12]
 8012586:	6963      	ldr	r3, [r4, #20]
 8012588:	68d2      	ldr	r2, [r2, #12]
 801258a:	68db      	ldr	r3, [r3, #12]
 801258c:	fb03 f302 	mul.w	r3, r3, r2
 8012590:	4298      	cmp	r0, r3
 8012592:	d33b      	bcc.n	801260c <ai_platform_network_process+0x148>
 8012594:	69a3      	ldr	r3, [r4, #24]
 8012596:	6818      	ldr	r0, [r3, #0]
 8012598:	f001 ffe0 	bl	801455c <ai_array_to_buffer_fmt>
 801259c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80125a0:	4043      	eors	r3, r0
 80125a2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80125a6:	d128      	bne.n	80125fa <ai_platform_network_process+0x136>
 80125a8:	68eb      	ldr	r3, [r5, #12]
 80125aa:	b1f3      	cbz	r3, 80125ea <ai_platform_network_process+0x126>
 80125ac:	f8b5 b000 	ldrh.w	fp, [r5]
 80125b0:	f1bb 0f00 	cmp.w	fp, #0
 80125b4:	d012      	beq.n	80125dc <ai_platform_network_process+0x118>
 80125b6:	4623      	mov	r3, r4
 80125b8:	f105 020c 	add.w	r2, r5, #12
 80125bc:	4629      	mov	r1, r5
 80125be:	4650      	mov	r0, sl
 80125c0:	f7ff fe42 	bl	8012248 <_platform_network_state_setup.isra.1>
 80125c4:	45d9      	cmp	r9, fp
 80125c6:	883b      	ldrh	r3, [r7, #0]
 80125c8:	bf38      	it	cc
 80125ca:	46d9      	movcc	r9, fp
 80125cc:	3601      	adds	r6, #1
 80125ce:	3518      	adds	r5, #24
 80125d0:	e7af      	b.n	8012532 <ai_platform_network_process+0x6e>
 80125d2:	46a3      	mov	fp, r4
 80125d4:	4658      	mov	r0, fp
 80125d6:	b003      	add	sp, #12
 80125d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125dc:	f108 0010 	add.w	r0, r8, #16
 80125e0:	2221      	movs	r2, #33	; 0x21
 80125e2:	2112      	movs	r1, #18
 80125e4:	f000 f97a 	bl	80128dc <core_set_error>
 80125e8:	e7f4      	b.n	80125d4 <ai_platform_network_process+0x110>
 80125ea:	f108 0010 	add.w	r0, r8, #16
 80125ee:	2217      	movs	r2, #23
 80125f0:	2112      	movs	r1, #18
 80125f2:	469b      	mov	fp, r3
 80125f4:	f000 f972 	bl	80128dc <core_set_error>
 80125f8:	e7ec      	b.n	80125d4 <ai_platform_network_process+0x110>
 80125fa:	f108 0010 	add.w	r0, r8, #16
 80125fe:	2219      	movs	r2, #25
 8012600:	2112      	movs	r1, #18
 8012602:	f000 f96b 	bl	80128dc <core_set_error>
 8012606:	f04f 0b00 	mov.w	fp, #0
 801260a:	e7e3      	b.n	80125d4 <ai_platform_network_process+0x110>
 801260c:	f108 0010 	add.w	r0, r8, #16
 8012610:	2218      	movs	r2, #24
 8012612:	2112      	movs	r1, #18
 8012614:	f000 f962 	bl	80128dc <core_set_error>
 8012618:	f04f 0b00 	mov.w	fp, #0
 801261c:	e7da      	b.n	80125d4 <ai_platform_network_process+0x110>
 801261e:	4644      	mov	r4, r8
 8012620:	f104 0010 	add.w	r0, r4, #16
 8012624:	2217      	movs	r2, #23
 8012626:	2112      	movs	r1, #18
 8012628:	f000 f958 	bl	80128dc <core_set_error>
 801262c:	f04f 0b00 	mov.w	fp, #0
 8012630:	e7d0      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012632:	9a01      	ldr	r2, [sp, #4]
 8012634:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8012638:	4644      	mov	r4, r8
 801263a:	2a00      	cmp	r2, #0
 801263c:	f000 80a4 	beq.w	8012788 <ai_platform_network_process+0x2c4>
 8012640:	2b01      	cmp	r3, #1
 8012642:	f240 8140 	bls.w	80128c6 <ai_platform_network_process+0x402>
 8012646:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 801264a:	f118 0f0c 	cmn.w	r8, #12
 801264e:	f000 813a 	beq.w	80128c6 <ai_platform_network_process+0x402>
 8012652:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8012656:	2b00      	cmp	r3, #0
 8012658:	f000 8135 	beq.w	80128c6 <ai_platform_network_process+0x402>
 801265c:	3204      	adds	r2, #4
 801265e:	4615      	mov	r5, r2
 8012660:	2700      	movs	r7, #0
 8012662:	429f      	cmp	r7, r3
 8012664:	f080 808c 	bcs.w	8012780 <ai_platform_network_process+0x2bc>
 8012668:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	f000 8087 	beq.w	8012780 <ai_platform_network_process+0x2bc>
 8012672:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8012676:	2e00      	cmp	r6, #0
 8012678:	f000 8082 	beq.w	8012780 <ai_platform_network_process+0x2bc>
 801267c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 8012686:	d067      	beq.n	8012758 <ai_platform_network_process+0x294>
 8012688:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801268c:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8012690:	69b0      	ldr	r0, [r6, #24]
 8012692:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8012696:	6841      	ldr	r1, [r0, #4]
 8012698:	fb0b f30e 	mul.w	r3, fp, lr
 801269c:	fb0c f303 	mul.w	r3, ip, r3
 80126a0:	4299      	cmp	r1, r3
 80126a2:	f0c0 8110 	bcc.w	80128c6 <ai_platform_network_process+0x402>
 80126a6:	68f3      	ldr	r3, [r6, #12]
 80126a8:	68da      	ldr	r2, [r3, #12]
 80126aa:	455a      	cmp	r2, fp
 80126ac:	f040 810b 	bne.w	80128c6 <ai_platform_network_process+0x402>
 80126b0:	689a      	ldr	r2, [r3, #8]
 80126b2:	4572      	cmp	r2, lr
 80126b4:	f040 8107 	bne.w	80128c6 <ai_platform_network_process+0x402>
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	459c      	cmp	ip, r3
 80126bc:	f040 8103 	bne.w	80128c6 <ai_platform_network_process+0x402>
 80126c0:	6800      	ldr	r0, [r0, #0]
 80126c2:	f001 ff97 	bl	80145f4 <ai_array_get_byte_size>
 80126c6:	68f2      	ldr	r2, [r6, #12]
 80126c8:	6973      	ldr	r3, [r6, #20]
 80126ca:	68d2      	ldr	r2, [r2, #12]
 80126cc:	68db      	ldr	r3, [r3, #12]
 80126ce:	fb03 f302 	mul.w	r3, r3, r2
 80126d2:	4298      	cmp	r0, r3
 80126d4:	f0c0 80f7 	bcc.w	80128c6 <ai_platform_network_process+0x402>
 80126d8:	69b3      	ldr	r3, [r6, #24]
 80126da:	6818      	ldr	r0, [r3, #0]
 80126dc:	f001 ff3e 	bl	801455c <ai_array_to_buffer_fmt>
 80126e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80126e4:	4043      	eors	r3, r0
 80126e6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80126ea:	d12c      	bne.n	8012746 <ai_platform_network_process+0x282>
 80126ec:	68eb      	ldr	r3, [r5, #12]
 80126ee:	b313      	cbz	r3, 8012736 <ai_platform_network_process+0x272>
 80126f0:	f8b5 b000 	ldrh.w	fp, [r5]
 80126f4:	f1bb 0f00 	cmp.w	fp, #0
 80126f8:	d016      	beq.n	8012728 <ai_platform_network_process+0x264>
 80126fa:	4633      	mov	r3, r6
 80126fc:	f105 020c 	add.w	r2, r5, #12
 8012700:	4629      	mov	r1, r5
 8012702:	4650      	mov	r0, sl
 8012704:	f7ff fda0 	bl	8012248 <_platform_network_state_setup.isra.1>
 8012708:	45d9      	cmp	r9, fp
 801270a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 801270e:	bf38      	it	cc
 8012710:	46d9      	movcc	r9, fp
 8012712:	3701      	adds	r7, #1
 8012714:	3518      	adds	r5, #24
 8012716:	e7a4      	b.n	8012662 <ai_platform_network_process+0x19e>
 8012718:	f104 0010 	add.w	r0, r4, #16
 801271c:	2230      	movs	r2, #48	; 0x30
 801271e:	2111      	movs	r1, #17
 8012720:	f000 f8dc 	bl	80128dc <core_set_error>
 8012724:	46b3      	mov	fp, r6
 8012726:	e755      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012728:	f104 0010 	add.w	r0, r4, #16
 801272c:	2221      	movs	r2, #33	; 0x21
 801272e:	2113      	movs	r1, #19
 8012730:	f000 f8d4 	bl	80128dc <core_set_error>
 8012734:	e74e      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012736:	f104 0010 	add.w	r0, r4, #16
 801273a:	2217      	movs	r2, #23
 801273c:	2113      	movs	r1, #19
 801273e:	469b      	mov	fp, r3
 8012740:	f000 f8cc 	bl	80128dc <core_set_error>
 8012744:	e746      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012746:	f104 0010 	add.w	r0, r4, #16
 801274a:	2219      	movs	r2, #25
 801274c:	2113      	movs	r1, #19
 801274e:	f000 f8c5 	bl	80128dc <core_set_error>
 8012752:	f04f 0b00 	mov.w	fp, #0
 8012756:	e73d      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012758:	f104 0010 	add.w	r0, r4, #16
 801275c:	2217      	movs	r2, #23
 801275e:	2113      	movs	r1, #19
 8012760:	f000 f8bc 	bl	80128dc <core_set_error>
 8012764:	46d3      	mov	fp, sl
 8012766:	e735      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012768:	a1c00100 	.word	0xa1c00100
 801276c:	e0002000 	.word	0xe0002000
 8012770:	40023008 	.word	0x40023008
 8012774:	40023000 	.word	0x40023000
 8012778:	f407a5c2 	.word	0xf407a5c2
 801277c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012780:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8012784:	f8a4 9014 	strh.w	r9, [r4, #20]
 8012788:	2b00      	cmp	r3, #0
 801278a:	f000 8099 	beq.w	80128c0 <ai_platform_network_process+0x3fc>
 801278e:	2b01      	cmp	r3, #1
 8012790:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8012792:	f240 8093 	bls.w	80128bc <ai_platform_network_process+0x3f8>
 8012796:	f105 070c 	add.w	r7, r5, #12
 801279a:	8ae0      	ldrh	r0, [r4, #22]
 801279c:	8aa3      	ldrh	r3, [r4, #20]
 801279e:	4283      	cmp	r3, r0
 80127a0:	d977      	bls.n	8012892 <ai_platform_network_process+0x3ce>
 80127a2:	46a3      	mov	fp, r4
 80127a4:	2d00      	cmp	r5, #0
 80127a6:	d032      	beq.n	801280e <ai_platform_network_process+0x34a>
 80127a8:	882b      	ldrh	r3, [r5, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d02f      	beq.n	801280e <ai_platform_network_process+0x34a>
 80127ae:	686b      	ldr	r3, [r5, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d02c      	beq.n	801280e <ai_platform_network_process+0x34a>
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f04f 0800 	mov.w	r8, #0
 80127ba:	b343      	cbz	r3, 801280e <ai_platform_network_process+0x34a>
 80127bc:	68a9      	ldr	r1, [r5, #8]
 80127be:	699a      	ldr	r2, [r3, #24]
 80127c0:	f8d1 a000 	ldr.w	sl, [r1]
 80127c4:	6814      	ldr	r4, [r2, #0]
 80127c6:	6890      	ldr	r0, [r2, #8]
 80127c8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80127cc:	eb0a 0609 	add.w	r6, sl, r9
 80127d0:	00a4      	lsls	r4, r4, #2
 80127d2:	6871      	ldr	r1, [r6, #4]
 80127d4:	d45f      	bmi.n	8012896 <ai_platform_network_process+0x3d2>
 80127d6:	68d4      	ldr	r4, [r2, #12]
 80127d8:	1b00      	subs	r0, r0, r4
 80127da:	4401      	add	r1, r0
 80127dc:	6091      	str	r1, [r2, #8]
 80127de:	699b      	ldr	r3, [r3, #24]
 80127e0:	6872      	ldr	r2, [r6, #4]
 80127e2:	60da      	str	r2, [r3, #12]
 80127e4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80127e8:	f85a 2009 	ldr.w	r2, [sl, r9]
 80127ec:	440b      	add	r3, r1
 80127ee:	4293      	cmp	r3, r2
 80127f0:	bf24      	itt	cs
 80127f2:	68f3      	ldrcs	r3, [r6, #12]
 80127f4:	1ad3      	subcs	r3, r2, r3
 80127f6:	6073      	str	r3, [r6, #4]
 80127f8:	882b      	ldrh	r3, [r5, #0]
 80127fa:	f108 0801 	add.w	r8, r8, #1
 80127fe:	4598      	cmp	r8, r3
 8012800:	d205      	bcs.n	801280e <ai_platform_network_process+0x34a>
 8012802:	686b      	ldr	r3, [r5, #4]
 8012804:	b11b      	cbz	r3, 801280e <ai_platform_network_process+0x34a>
 8012806:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d1d6      	bne.n	80127bc <ai_platform_network_process+0x2f8>
 801280e:	4658      	mov	r0, fp
 8012810:	f001 fe6a 	bl	80144e8 <ai_layers_forward_all>
 8012814:	2f00      	cmp	r7, #0
 8012816:	d032      	beq.n	801287e <ai_platform_network_process+0x3ba>
 8012818:	883b      	ldrh	r3, [r7, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d02f      	beq.n	801287e <ai_platform_network_process+0x3ba>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	b36b      	cbz	r3, 801287e <ai_platform_network_process+0x3ba>
 8012822:	6818      	ldr	r0, [r3, #0]
 8012824:	b358      	cbz	r0, 801287e <ai_platform_network_process+0x3ba>
 8012826:	f04f 0800 	mov.w	r8, #0
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	6981      	ldr	r1, [r0, #24]
 801282e:	f8d3 a000 	ldr.w	sl, [r3]
 8012832:	680c      	ldr	r4, [r1, #0]
 8012834:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8012838:	eb0a 0609 	add.w	r6, sl, r9
 801283c:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8012840:	00a4      	lsls	r4, r4, #2
 8012842:	eb0c 0302 	add.w	r3, ip, r2
 8012846:	d42a      	bmi.n	801289e <ai_platform_network_process+0x3da>
 8012848:	f85a 2009 	ldr.w	r2, [sl, r9]
 801284c:	4293      	cmp	r3, r2
 801284e:	bf24      	itt	cs
 8012850:	68f3      	ldrcs	r3, [r6, #12]
 8012852:	1ad3      	subcs	r3, r2, r3
 8012854:	6073      	str	r3, [r6, #4]
 8012856:	6981      	ldr	r1, [r0, #24]
 8012858:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 801285c:	1b12      	subs	r2, r2, r4
 801285e:	4413      	add	r3, r2
 8012860:	608b      	str	r3, [r1, #8]
 8012862:	6983      	ldr	r3, [r0, #24]
 8012864:	6872      	ldr	r2, [r6, #4]
 8012866:	60da      	str	r2, [r3, #12]
 8012868:	883b      	ldrh	r3, [r7, #0]
 801286a:	f108 0801 	add.w	r8, r8, #1
 801286e:	4598      	cmp	r8, r3
 8012870:	d205      	bcs.n	801287e <ai_platform_network_process+0x3ba>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	b11b      	cbz	r3, 801287e <ai_platform_network_process+0x3ba>
 8012876:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801287a:	2800      	cmp	r0, #0
 801287c:	d1d5      	bne.n	801282a <ai_platform_network_process+0x366>
 801287e:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8012882:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8012886:	3001      	adds	r0, #1
 8012888:	b280      	uxth	r0, r0
 801288a:	4283      	cmp	r3, r0
 801288c:	f8ab 0016 	strh.w	r0, [fp, #22]
 8012890:	d888      	bhi.n	80127a4 <ai_platform_network_process+0x2e0>
 8012892:	4683      	mov	fp, r0
 8012894:	e69e      	b.n	80125d4 <ai_platform_network_process+0x110>
 8012896:	68b2      	ldr	r2, [r6, #8]
 8012898:	f001 ff08 	bl	80146ac <memcpy>
 801289c:	e7a2      	b.n	80127e4 <ai_platform_network_process+0x320>
 801289e:	6889      	ldr	r1, [r1, #8]
 80128a0:	4660      	mov	r0, ip
 80128a2:	f001 ff03 	bl	80146ac <memcpy>
 80128a6:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80128aa:	f85a 2009 	ldr.w	r2, [sl, r9]
 80128ae:	440b      	add	r3, r1
 80128b0:	4293      	cmp	r3, r2
 80128b2:	bf24      	itt	cs
 80128b4:	68f3      	ldrcs	r3, [r6, #12]
 80128b6:	1ad3      	subcs	r3, r2, r3
 80128b8:	6073      	str	r3, [r6, #4]
 80128ba:	e7d5      	b.n	8012868 <ai_platform_network_process+0x3a4>
 80128bc:	2700      	movs	r7, #0
 80128be:	e76c      	b.n	801279a <ai_platform_network_process+0x2d6>
 80128c0:	461d      	mov	r5, r3
 80128c2:	461f      	mov	r7, r3
 80128c4:	e769      	b.n	801279a <ai_platform_network_process+0x2d6>
 80128c6:	f104 0010 	add.w	r0, r4, #16
 80128ca:	2218      	movs	r2, #24
 80128cc:	2113      	movs	r1, #19
 80128ce:	f000 f805 	bl	80128dc <core_set_error>
 80128d2:	f04f 0b00 	mov.w	fp, #0
 80128d6:	e67d      	b.n	80125d4 <ai_platform_network_process+0x110>

080128d8 <core_init>:
 80128d8:	2001      	movs	r0, #1
 80128da:	4770      	bx	lr

080128dc <core_set_error>:
 80128dc:	7803      	ldrb	r3, [r0, #0]
 80128de:	b933      	cbnz	r3, 80128ee <core_set_error+0x12>
 80128e0:	7001      	strb	r1, [r0, #0]
 80128e2:	6803      	ldr	r3, [r0, #0]
 80128e4:	f362 231f 	bfi	r3, r2, #8, #24
 80128e8:	6003      	str	r3, [r0, #0]
 80128ea:	2001      	movs	r0, #1
 80128ec:	4770      	bx	lr
 80128ee:	2000      	movs	r0, #0
 80128f0:	4770      	bx	lr
 80128f2:	bf00      	nop

080128f4 <func_dummy>:
 80128f4:	4770      	bx	lr
 80128f6:	bf00      	nop

080128f8 <ai_dict8_dot_array_f32>:
 80128f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128fc:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012900:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8012904:	f000 80c0 	beq.w	8012a88 <ai_dict8_dot_array_f32+0x190>
 8012908:	f101 0408 	add.w	r4, r1, #8
 801290c:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8012910:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8012a90 <ai_dict8_dot_array_f32+0x198>
 8012914:	eb04 0e09 	add.w	lr, r4, r9
 8012918:	f103 0520 	add.w	r5, r3, #32
 801291c:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8012920:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8012924:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8012928:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 801292c:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8012930:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8012934:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8012938:	ed55 3a04 	vldr	s7, [r5, #-16]
 801293c:	ed55 4a03 	vldr	s9, [r5, #-12]
 8012940:	ed55 5a02 	vldr	s11, [r5, #-8]
 8012944:	ed55 6a01 	vldr	s13, [r5, #-4]
 8012948:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801294c:	edd6 7a00 	vldr	s15, [r6]
 8012950:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8012954:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012958:	ee67 7a83 	vmul.f32	s15, s15, s6
 801295c:	ed9a 3a00 	vldr	s6, [sl]
 8012960:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8012964:	eee3 7a05 	vfma.f32	s15, s6, s10
 8012968:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801296c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012970:	ed97 3a00 	vldr	s6, [r7]
 8012974:	ed96 5a00 	vldr	s10, [r6]
 8012978:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 801297c:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8012980:	eee3 7a04 	vfma.f32	s15, s6, s8
 8012984:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012988:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801298c:	ed9a 3a00 	vldr	s6, [sl]
 8012990:	ed96 4a00 	vldr	s8, [r6]
 8012994:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8012998:	eee5 7a06 	vfma.f32	s15, s10, s12
 801299c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80129a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80129a4:	ed97 5a00 	vldr	s10, [r7]
 80129a8:	ed96 6a00 	vldr	s12, [r6]
 80129ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80129b0:	3408      	adds	r4, #8
 80129b2:	45a6      	cmp	lr, r4
 80129b4:	f105 0520 	add.w	r5, r5, #32
 80129b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80129bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80129c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80129c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129c8:	d1a8      	bne.n	801291c <ai_dict8_dot_array_f32+0x24>
 80129ca:	4449      	add	r1, r9
 80129cc:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80129d0:	f01c 0c07 	ands.w	ip, ip, #7
 80129d4:	d050      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 80129d6:	780c      	ldrb	r4, [r1, #0]
 80129d8:	edd3 6a00 	vldr	s13, [r3]
 80129dc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129e0:	edd4 7a00 	vldr	s15, [r4]
 80129e4:	f1bc 0f01 	cmp.w	ip, #1
 80129e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80129ec:	d044      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 80129ee:	784c      	ldrb	r4, [r1, #1]
 80129f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80129f4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80129f8:	edd4 7a00 	vldr	s15, [r4]
 80129fc:	f1bc 0f02 	cmp.w	ip, #2
 8012a00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a04:	d038      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 8012a06:	788c      	ldrb	r4, [r1, #2]
 8012a08:	edd3 6a02 	vldr	s13, [r3, #8]
 8012a0c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a10:	edd4 7a00 	vldr	s15, [r4]
 8012a14:	f1bc 0f03 	cmp.w	ip, #3
 8012a18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a1c:	d02c      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 8012a1e:	78cc      	ldrb	r4, [r1, #3]
 8012a20:	edd3 6a03 	vldr	s13, [r3, #12]
 8012a24:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a28:	edd4 7a00 	vldr	s15, [r4]
 8012a2c:	f1bc 0f04 	cmp.w	ip, #4
 8012a30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a34:	d020      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 8012a36:	790c      	ldrb	r4, [r1, #4]
 8012a38:	edd3 6a04 	vldr	s13, [r3, #16]
 8012a3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a40:	edd4 7a00 	vldr	s15, [r4]
 8012a44:	f1bc 0f05 	cmp.w	ip, #5
 8012a48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a4c:	d014      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 8012a4e:	794c      	ldrb	r4, [r1, #5]
 8012a50:	edd3 6a05 	vldr	s13, [r3, #20]
 8012a54:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012a58:	edd4 7a00 	vldr	s15, [r4]
 8012a5c:	f1bc 0f06 	cmp.w	ip, #6
 8012a60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a64:	d008      	beq.n	8012a78 <ai_dict8_dot_array_f32+0x180>
 8012a66:	7989      	ldrb	r1, [r1, #6]
 8012a68:	edd3 7a06 	vldr	s15, [r3, #24]
 8012a6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012a70:	edd2 6a00 	vldr	s13, [r2]
 8012a74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012a78:	edd0 7a00 	vldr	s15, [r0]
 8012a7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012a80:	ed80 7a00 	vstr	s14, [r0]
 8012a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a88:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8012a90 <ai_dict8_dot_array_f32+0x198>
 8012a8c:	e7a0      	b.n	80129d0 <ai_dict8_dot_array_f32+0xd8>
 8012a8e:	bf00      	nop
 8012a90:	00000000 	.word	0x00000000

08012a94 <ai_dict4_dot_array_f32>:
 8012a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a98:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012a9a:	f027 0c01 	bic.w	ip, r7, #1
 8012a9e:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8012aa2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8012aa6:	f000 80ae 	beq.w	8012c06 <ai_dict4_dot_array_f32+0x172>
 8012aaa:	1d0d      	adds	r5, r1, #4
 8012aac:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8012ab0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8012c0c <ai_dict4_dot_array_f32+0x178>
 8012ab4:	eb05 0e09 	add.w	lr, r5, r9
 8012ab8:	f103 0420 	add.w	r4, r3, #32
 8012abc:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8012ac0:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8012ac4:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8012ac8:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8012acc:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8012ad0:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8012ad4:	ed14 5a04 	vldr	s10, [r4, #-16]
 8012ad8:	ed54 5a03 	vldr	s11, [r4, #-12]
 8012adc:	ed14 6a02 	vldr	s12, [r4, #-8]
 8012ae0:	ed54 6a01 	vldr	s13, [r4, #-4]
 8012ae4:	f006 0a0f 	and.w	sl, r6, #15
 8012ae8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012aec:	edda 7a00 	vldr	s15, [sl]
 8012af0:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8012af4:	0936      	lsrs	r6, r6, #4
 8012af6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012afa:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012afe:	ed96 3a00 	vldr	s6, [r6]
 8012b02:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8012b06:	eee3 7a23 	vfma.f32	s15, s6, s7
 8012b0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b0e:	f00b 0b0f 	and.w	fp, fp, #15
 8012b12:	edd6 3a00 	vldr	s7, [r6]
 8012b16:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8012b1a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8012b1e:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8012b22:	3504      	adds	r5, #4
 8012b24:	ed9b 4a00 	vldr	s8, [fp]
 8012b28:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8012b2c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8012b30:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8012b34:	f00a 0a0f 	and.w	sl, sl, #15
 8012b38:	eddb 4a00 	vldr	s9, [fp]
 8012b3c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8012b40:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012b44:	45ae      	cmp	lr, r5
 8012b46:	ed9a 5a00 	vldr	s10, [sl]
 8012b4a:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8012b4e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8012b52:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8012b56:	f006 060f 	and.w	r6, r6, #15
 8012b5a:	edda 5a00 	vldr	s11, [sl]
 8012b5e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8012b62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012b66:	f104 0420 	add.w	r4, r4, #32
 8012b6a:	ed96 6a00 	vldr	s12, [r6]
 8012b6e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b76:	d1a1      	bne.n	8012abc <ai_dict4_dot_array_f32+0x28>
 8012b78:	4449      	add	r1, r9
 8012b7a:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8012b7e:	459c      	cmp	ip, r3
 8012b80:	d92d      	bls.n	8012bde <ai_dict4_dot_array_f32+0x14a>
 8012b82:	f10c 0c07 	add.w	ip, ip, #7
 8012b86:	f103 0508 	add.w	r5, r3, #8
 8012b8a:	ebac 0c05 	sub.w	ip, ip, r5
 8012b8e:	f02c 0407 	bic.w	r4, ip, #7
 8012b92:	f103 0810 	add.w	r8, r3, #16
 8012b96:	44a0      	add	r8, r4
 8012b98:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8012b9c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012ba0:	ed15 6a01 	vldr	s12, [r5, #-4]
 8012ba4:	ed55 6a02 	vldr	s13, [r5, #-8]
 8012ba8:	f004 060f 	and.w	r6, r4, #15
 8012bac:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012bb0:	0924      	lsrs	r4, r4, #4
 8012bb2:	edd6 7a00 	vldr	s15, [r6]
 8012bb6:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8012bba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012bbe:	ed94 6a00 	vldr	s12, [r4]
 8012bc2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8012bc6:	3508      	adds	r5, #8
 8012bc8:	45a8      	cmp	r8, r5
 8012bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bce:	d1e5      	bne.n	8012b9c <ai_dict4_dot_array_f32+0x108>
 8012bd0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8012bd4:	f10c 0c01 	add.w	ip, ip, #1
 8012bd8:	4461      	add	r1, ip
 8012bda:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8012bde:	07fc      	lsls	r4, r7, #31
 8012be0:	d509      	bpl.n	8012bf6 <ai_dict4_dot_array_f32+0x162>
 8012be2:	7809      	ldrb	r1, [r1, #0]
 8012be4:	edd3 7a00 	vldr	s15, [r3]
 8012be8:	090b      	lsrs	r3, r1, #4
 8012bea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012bee:	edd2 6a00 	vldr	s13, [r2]
 8012bf2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012bf6:	edd0 7a00 	vldr	s15, [r0]
 8012bfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012bfe:	ed80 7a00 	vstr	s14, [r0]
 8012c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c06:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8012c0c <ai_dict4_dot_array_f32+0x178>
 8012c0a:	e7b8      	b.n	8012b7e <ai_dict4_dot_array_f32+0xea>
 8012c0c:	00000000 	.word	0x00000000

08012c10 <ai_dict_decompress_f32>:
 8012c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c14:	9f08      	ldr	r7, [sp, #32]
 8012c16:	2b04      	cmp	r3, #4
 8012c18:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8012c1c:	d00e      	beq.n	8012c3c <ai_dict_decompress_f32+0x2c>
 8012c1e:	2b08      	cmp	r3, #8
 8012c20:	d10a      	bne.n	8012c38 <ai_dict_decompress_f32+0x28>
 8012c22:	42b8      	cmp	r0, r7
 8012c24:	d208      	bcs.n	8012c38 <ai_dict_decompress_f32+0x28>
 8012c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f840 3b04 	str.w	r3, [r0], #4
 8012c34:	4287      	cmp	r7, r0
 8012c36:	d8f6      	bhi.n	8012c26 <ai_dict_decompress_f32+0x16>
 8012c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c3c:	9b07      	ldr	r3, [sp, #28]
 8012c3e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8012c42:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8012c46:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 8012c4a:	f003 0e01 	and.w	lr, r3, #1
 8012c4e:	42b8      	cmp	r0, r7
 8012c50:	d2f2      	bcs.n	8012c38 <ai_dict_decompress_f32+0x28>
 8012c52:	f1bc 0f00 	cmp.w	ip, #0
 8012c56:	d01a      	beq.n	8012c8e <ai_dict_decompress_f32+0x7e>
 8012c58:	f100 0508 	add.w	r5, r0, #8
 8012c5c:	1e4c      	subs	r4, r1, #1
 8012c5e:	eb01 0608 	add.w	r6, r1, r8
 8012c62:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012c66:	091b      	lsrs	r3, r3, #4
 8012c68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c6c:	42a6      	cmp	r6, r4
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f845 3c08 	str.w	r3, [r5, #-8]
 8012c74:	7823      	ldrb	r3, [r4, #0]
 8012c76:	f003 030f 	and.w	r3, r3, #15
 8012c7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c7e:	f105 0508 	add.w	r5, r5, #8
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f845 3c0c 	str.w	r3, [r5, #-12]
 8012c88:	d1eb      	bne.n	8012c62 <ai_dict_decompress_f32+0x52>
 8012c8a:	4461      	add	r1, ip
 8012c8c:	4448      	add	r0, r9
 8012c8e:	f1be 0f00 	cmp.w	lr, #0
 8012c92:	d103      	bne.n	8012c9c <ai_dict_decompress_f32+0x8c>
 8012c94:	4287      	cmp	r7, r0
 8012c96:	d8dc      	bhi.n	8012c52 <ai_dict_decompress_f32+0x42>
 8012c98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012c9c:	780b      	ldrb	r3, [r1, #0]
 8012c9e:	091b      	lsrs	r3, r3, #4
 8012ca0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ca4:	3101      	adds	r1, #1
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	6003      	str	r3, [r0, #0]
 8012caa:	3004      	adds	r0, #4
 8012cac:	e7cf      	b.n	8012c4e <ai_dict_decompress_f32+0x3e>
 8012cae:	bf00      	nop

08012cb0 <forward_conv2d_nl_pool>:
 8012cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cb4:	ed2d 8b10 	vpush	{d8-d15}
 8012cb8:	b0df      	sub	sp, #380	; 0x17c
 8012cba:	6943      	ldr	r3, [r0, #20]
 8012cbc:	af0a      	add	r7, sp, #40	; 0x28
 8012cbe:	881a      	ldrh	r2, [r3, #0]
 8012cc0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012cc4:	2a00      	cmp	r2, #0
 8012cc6:	f000 879f 	beq.w	8013c08 <forward_conv2d_nl_pool+0xf58>
 8012cca:	685c      	ldr	r4, [r3, #4]
 8012ccc:	6862      	ldr	r2, [r4, #4]
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	f000 8797 	beq.w	8013c02 <forward_conv2d_nl_pool+0xf52>
 8012cd4:	f8d2 c000 	ldr.w	ip, [r2]
 8012cd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012cdc:	2a01      	cmp	r2, #1
 8012cde:	f240 878d 	bls.w	8013bfc <forward_conv2d_nl_pool+0xf4c>
 8012ce2:	6922      	ldr	r2, [r4, #16]
 8012ce4:	2a00      	cmp	r2, #0
 8012ce6:	f000 8784 	beq.w	8013bf2 <forward_conv2d_nl_pool+0xf42>
 8012cea:	f8d2 9000 	ldr.w	r9, [r2]
 8012cee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012cf2:	2a02      	cmp	r2, #2
 8012cf4:	f000 8782 	beq.w	8013bfc <forward_conv2d_nl_pool+0xf4c>
 8012cf8:	69e6      	ldr	r6, [r4, #28]
 8012cfa:	2e00      	cmp	r6, #0
 8012cfc:	f000 8772 	beq.w	8013be4 <forward_conv2d_nl_pool+0xf34>
 8012d00:	f114 0218 	adds.w	r2, r4, #24
 8012d04:	6835      	ldr	r5, [r6, #0]
 8012d06:	d004      	beq.n	8012d12 <forward_conv2d_nl_pool+0x62>
 8012d08:	8b22      	ldrh	r2, [r4, #24]
 8012d0a:	2a01      	cmp	r2, #1
 8012d0c:	f240 877f 	bls.w	8013c0e <forward_conv2d_nl_pool+0xf5e>
 8012d10:	6872      	ldr	r2, [r6, #4]
 8012d12:	68b4      	ldr	r4, [r6, #8]
 8012d14:	f8dc b018 	ldr.w	fp, [ip, #24]
 8012d18:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8012d1c:	f8db 1008 	ldr.w	r1, [fp, #8]
 8012d20:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8012d24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012d28:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8012d2c:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 8012d30:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8012d34:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8012d38:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012d3c:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8012d40:	f8de 1004 	ldr.w	r1, [lr, #4]
 8012d44:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8012d46:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 8012d4a:	f8de 100c 	ldr.w	r1, [lr, #12]
 8012d4e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8012d52:	f8de 1008 	ldr.w	r1, [lr, #8]
 8012d56:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8012d5a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8012d5e:	6831      	ldr	r1, [r6, #0]
 8012d60:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8012d64:	6871      	ldr	r1, [r6, #4]
 8012d66:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 8012d6a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8012d6e:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 8012d72:	f8da 1008 	ldr.w	r1, [sl, #8]
 8012d76:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8012d7a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012d7c:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8012d80:	6809      	ldr	r1, [r1, #0]
 8012d82:	68b6      	ldr	r6, [r6, #8]
 8012d84:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 8012d88:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8012d8a:	6849      	ldr	r1, [r1, #4]
 8012d8c:	64b9      	str	r1, [r7, #72]	; 0x48
 8012d8e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8012d92:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8012d96:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8012d98:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8012d9c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8012d9e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8012da2:	6981      	ldr	r1, [r0, #24]
 8012da4:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8012da8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8012daa:	6539      	str	r1, [r7, #80]	; 0x50
 8012dac:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8012dae:	64f9      	str	r1, [r7, #76]	; 0x4c
 8012db0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8012db2:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8012db6:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 8012dba:	2a00      	cmp	r2, #0
 8012dbc:	f000 8705 	beq.w	8013bca <forward_conv2d_nl_pool+0xf1a>
 8012dc0:	6992      	ldr	r2, [r2, #24]
 8012dc2:	6892      	ldr	r2, [r2, #8]
 8012dc4:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8012dc8:	4680      	mov	r8, r0
 8012dca:	69c2      	ldr	r2, [r0, #28]
 8012dcc:	2c00      	cmp	r4, #0
 8012dce:	f000 86f1 	beq.w	8013bb4 <forward_conv2d_nl_pool+0xf04>
 8012dd2:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 8012dd6:	6892      	ldr	r2, [r2, #8]
 8012dd8:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8012ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8012de0:	689b      	ldr	r3, [r3, #8]
 8012de2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012de6:	f001 fc05 	bl	80145f4 <ai_array_get_byte_size>
 8012dea:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012dee:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8012df2:	881a      	ldrh	r2, [r3, #0]
 8012df4:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8012df8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8012dfc:	f8b7 0140 	ldrh.w	r0, [r7, #320]	; 0x140
 8012e00:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 8012e04:	6479      	str	r1, [r7, #68]	; 0x44
 8012e06:	fa10 f586 	uxtah	r5, r0, r6
 8012e0a:	f8dc 1000 	ldr.w	r1, [ip]
 8012e0e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
 8012e12:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8012e16:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8012e1a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8012e1e:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 8012e22:	1e44      	subs	r4, r0, #1
 8012e24:	f3c1 5041 	ubfx	r0, r1, #21, #2
 8012e28:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8012e2c:	fa1f f28b 	uxth.w	r2, fp
 8012e30:	eb05 0e01 	add.w	lr, r5, r1
 8012e34:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 8012e38:	f8dc 1000 	ldr.w	r1, [ip]
 8012e3c:	3a01      	subs	r2, #1
 8012e3e:	fb04 5402 	mla	r4, r4, r2, r5
 8012e42:	fa1f f28a 	uxth.w	r2, sl
 8012e46:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8012e4a:	1e54      	subs	r4, r2, #1
 8012e4c:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 8012e50:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8012e54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e58:	f8d7 5148 	ldr.w	r5, [r7, #328]	; 0x148
 8012e5c:	fa46 f000 	asr.w	r0, r6, r0
 8012e60:	f3c1 4643 	ubfx	r6, r1, #17, #4
 8012e64:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8012e68:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8012e6c:	ebae 0202 	sub.w	r2, lr, r2
 8012e70:	fbb2 f2f1 	udiv	r2, r2, r1
 8012e74:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8012e78:	3d01      	subs	r5, #1
 8012e7a:	fb05 1104 	mla	r1, r5, r4, r1
 8012e7e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8012e82:	1c51      	adds	r1, r2, #1
 8012e84:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012e88:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8012e8c:	4977      	ldr	r1, [pc, #476]	; (801306c <forward_conv2d_nl_pool+0x3bc>)
 8012e8e:	4614      	mov	r4, r2
 8012e90:	2a00      	cmp	r2, #0
 8012e92:	bf08      	it	eq
 8012e94:	460c      	moveq	r4, r1
 8012e96:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8012e9a:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 8012e9e:	2e04      	cmp	r6, #4
 8012ea0:	b280      	uxth	r0, r0
 8012ea2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8012ea6:	f000 8373 	beq.w	8013590 <forward_conv2d_nl_pool+0x8e0>
 8012eaa:	2e08      	cmp	r6, #8
 8012eac:	f000 8370 	beq.w	8013590 <forward_conv2d_nl_pool+0x8e0>
 8012eb0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8012eb4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8012eb8:	f9b7 2138 	ldrsh.w	r2, [r7, #312]	; 0x138
 8012ebc:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 8012ec0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012ec4:	2a03      	cmp	r2, #3
 8012ec6:	f240 8699 	bls.w	8013bfc <forward_conv2d_nl_pool+0xf4c>
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	f000 835c 	beq.w	801358c <forward_conv2d_nl_pool+0x8dc>
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8012eda:	68da      	ldr	r2, [r3, #12]
 8012edc:	699b      	ldr	r3, [r3, #24]
 8012ede:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8012ee2:	6899      	ldr	r1, [r3, #8]
 8012ee4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 8012ee8:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8012eec:	6896      	ldr	r6, [r2, #8]
 8012eee:	f8c7 6138 	str.w	r6, [r7, #312]	; 0x138
 8012ef2:	4249      	negs	r1, r1
 8012ef4:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	f000 82d2 	beq.w	80134a2 <forward_conv2d_nl_pool+0x7f2>
 8012efe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012f02:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 8012f06:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8013070 <forward_conv2d_nl_pool+0x3c0>
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012f10:	fb00 f203 	mul.w	r2, r0, r3
 8012f14:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8012f18:	0083      	lsls	r3, r0, #2
 8012f1a:	fa0f f08b 	sxth.w	r0, fp
 8012f1e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8012f22:	f8b7 012c 	ldrh.w	r0, [r7, #300]	; 0x12c
 8012f26:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 8012f2a:	fa0f f58a 	sxth.w	r5, sl
 8012f2e:	fb01 f002 	mul.w	r0, r1, r2
 8012f32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8012f36:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 8012f3a:	008d      	lsls	r5, r1, #2
 8012f3c:	fb02 f303 	mul.w	r3, r2, r3
 8012f40:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
 8012f44:	4615      	mov	r5, r2
 8012f46:	0092      	lsls	r2, r2, #2
 8012f48:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8012f4c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8012f50:	67f8      	str	r0, [r7, #124]	; 0x7c
 8012f52:	4694      	mov	ip, r2
 8012f54:	fb0c f205 	mul.w	r2, ip, r5
 8012f58:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 8012f5a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8012f5e:	f04f 0c00 	mov.w	ip, #0
 8012f62:	f8c7 c0ec 	str.w	ip, [r7, #236]	; 0xec
 8012f66:	00ad      	lsls	r5, r5, #2
 8012f68:	fb06 fc03 	mul.w	ip, r6, r3
 8012f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f70:	f8c7 50a8 	str.w	r5, [r7, #168]	; 0xa8
 8012f74:	4240      	negs	r0, r0
 8012f76:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 8012f7a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8012f7e:	f8c7 c058 	str.w	ip, [r7, #88]	; 0x58
 8012f82:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8012f86:	469c      	mov	ip, r3
 8012f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012f8c:	fb0c fc05 	mul.w	ip, ip, r5
 8012f90:	460c      	mov	r4, r1
 8012f92:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 8012f96:	fb00 fc03 	mul.w	ip, r0, r3
 8012f9a:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8012f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012fa2:	fb05 fc04 	mul.w	ip, r5, r4
 8012fa6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8012faa:	f8c7 c02c 	str.w	ip, [r7, #44]	; 0x2c
 8012fae:	fb03 f404 	mul.w	r4, r3, r4
 8012fb2:	46ae      	mov	lr, r5
 8012fb4:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8012fb8:	61bc      	str	r4, [r7, #24]
 8012fba:	f8d7 40f0 	ldr.w	r4, [r7, #240]	; 0xf0
 8012fbe:	46ac      	mov	ip, r5
 8012fc0:	fb04 f403 	mul.w	r4, r4, r3
 8012fc4:	fb0c fc03 	mul.w	ip, ip, r3
 8012fc8:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 8012fcc:	617c      	str	r4, [r7, #20]
 8012fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012fd2:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8012fd6:	fb00 f101 	mul.w	r1, r0, r1
 8012fda:	fb03 f306 	mul.w	r3, r3, r6
 8012fde:	627b      	str	r3, [r7, #36]	; 0x24
 8012fe0:	008b      	lsls	r3, r1, #2
 8012fe2:	61fb      	str	r3, [r7, #28]
 8012fe4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8012fe8:	0093      	lsls	r3, r2, #2
 8012fea:	657b      	str	r3, [r7, #84]	; 0x54
 8012fec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	0080      	lsls	r0, r0, #2
 8012ff4:	6438      	str	r0, [r7, #64]	; 0x40
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	fb03 f301 	mul.w	r3, r3, r1
 8012ffc:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8013000:	00d1      	lsls	r1, r2, #3
 8013002:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013006:	0113      	lsls	r3, r2, #4
 8013008:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801300c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013010:	2500      	movs	r5, #0
 8013012:	fb00 f004 	mul.w	r0, r0, r4
 8013016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801301a:	f8c7 50cc 	str.w	r5, [r7, #204]	; 0xcc
 801301e:	66b8      	str	r0, [r7, #104]	; 0x68
 8013020:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8013024:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013028:	469a      	mov	sl, r3
 801302a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801302e:	2b00      	cmp	r3, #0
 8013030:	f340 81d1 	ble.w	80133d6 <forward_conv2d_nl_pool+0x726>
 8013034:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8013038:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801303c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013040:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8013044:	2a00      	cmp	r2, #0
 8013046:	440b      	add	r3, r1
 8013048:	bfb4      	ite	lt
 801304a:	2200      	movlt	r2, #0
 801304c:	2100      	movge	r1, #0
 801304e:	4283      	cmp	r3, r0
 8013050:	bf28      	it	cs
 8013052:	4603      	movcs	r3, r0
 8013054:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013058:	2801      	cmp	r0, #1
 801305a:	f000 8406 	beq.w	801386a <forward_conv2d_nl_pool+0xbba>
 801305e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013062:	4282      	cmp	r2, r0
 8013064:	f000 82c0 	beq.w	80135e8 <forward_conv2d_nl_pool+0x938>
 8013068:	e004      	b.n	8013074 <forward_conv2d_nl_pool+0x3c4>
 801306a:	bf00      	nop
 801306c:	080128f5 	.word	0x080128f5
 8013070:	00000000 	.word	0x00000000
 8013074:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013078:	2a00      	cmp	r2, #0
 801307a:	f000 819f 	beq.w	80133bc <forward_conv2d_nl_pool+0x70c>
 801307e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8013082:	fb91 f2f0 	sdiv	r2, r1, r0
 8013086:	fb00 1212 	mls	r2, r0, r2, r1
 801308a:	1a82      	subs	r2, r0, r2
 801308c:	1a5b      	subs	r3, r3, r1
 801308e:	fb92 f5f0 	sdiv	r5, r2, r0
 8013092:	fb00 2515 	mls	r5, r0, r5, r2
 8013096:	1b5b      	subs	r3, r3, r5
 8013098:	4602      	mov	r2, r0
 801309a:	4403      	add	r3, r0
 801309c:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80130a0:	f8d7 6100 	ldr.w	r6, [r7, #256]	; 0x100
 80130a4:	f8c7 a010 	str.w	sl, [r7, #16]
 80130a8:	4604      	mov	r4, r0
 80130aa:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80130ae:	fbb4 f4f0 	udiv	r4, r4, r0
 80130b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130b4:	f8c7 b020 	str.w	fp, [r7, #32]
 80130b8:	3b01      	subs	r3, #1
 80130ba:	fb93 f8f2 	sdiv	r8, r3, r2
 80130be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80130c2:	eba0 0c04 	sub.w	ip, r0, r4
 80130c6:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80130ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80130ce:	461c      	mov	r4, r3
 80130d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80130d4:	fbb4 f3f3 	udiv	r3, r4, r3
 80130d8:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 80130dc:	667b      	str	r3, [r7, #100]	; 0x64
 80130de:	440d      	add	r5, r1
 80130e0:	fb0e f000 	mul.w	r0, lr, r0
 80130e4:	4411      	add	r1, r2
 80130e6:	eba6 0608 	sub.w	r6, r6, r8
 80130ea:	009a      	lsls	r2, r3, #2
 80130ec:	fb04 f505 	mul.w	r5, r4, r5
 80130f0:	3901      	subs	r1, #1
 80130f2:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80130f6:	fb91 f1f4 	sdiv	r1, r1, r4
 80130fa:	fb00 f406 	mul.w	r4, r0, r6
 80130fe:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013102:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8013106:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 801310a:	ebc3 7343 	rsb	r3, r3, r3, lsl #29
 801310e:	fb00 f001 	mul.w	r0, r0, r1
 8013112:	00db      	lsls	r3, r3, #3
 8013114:	6638      	str	r0, [r7, #96]	; 0x60
 8013116:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 801311a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 801311e:	637b      	str	r3, [r7, #52]	; 0x34
 8013120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013124:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013128:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801312c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013130:	1a41      	subs	r1, r0, r1
 8013132:	0092      	lsls	r2, r2, #2
 8013134:	2300      	movs	r3, #0
 8013136:	673d      	str	r5, [r7, #112]	; 0x70
 8013138:	ea4f 098c 	mov.w	r9, ip, lsl #2
 801313c:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 8013140:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8013144:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013146:	677b      	str	r3, [r7, #116]	; 0x74
 8013148:	46c2      	mov	sl, r8
 801314a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801314e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8013152:	eb03 0c02 	add.w	ip, r3, r2
 8013156:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801315a:	2b00      	cmp	r3, #0
 801315c:	f2c0 811a 	blt.w	8013394 <forward_conv2d_nl_pool+0x6e4>
 8013160:	2000      	movs	r0, #0
 8013162:	6f3c      	ldr	r4, [r7, #112]	; 0x70
 8013164:	f8d7 80f8 	ldr.w	r8, [r7, #248]	; 0xf8
 8013168:	4605      	mov	r5, r0
 801316a:	4606      	mov	r6, r0
 801316c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013170:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013174:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013178:	4413      	add	r3, r2
 801317a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801317e:	440a      	add	r2, r1
 8013180:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8013184:	428b      	cmp	r3, r1
 8013186:	bf94      	ite	ls
 8013188:	ebc6 0303 	rsbls	r3, r6, r3
 801318c:	ebc6 0301 	rsbhi	r3, r6, r1
 8013190:	4415      	add	r5, r2
 8013192:	1a1b      	subs	r3, r3, r0
 8013194:	00a4      	lsls	r4, r4, #2
 8013196:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801319a:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 801319e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80131a2:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80131a4:	4602      	mov	r2, r0
 80131a6:	2800      	cmp	r0, #0
 80131a8:	bf08      	it	eq
 80131aa:	4662      	moveq	r2, ip
 80131ac:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80131b0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80131b4:	fb91 f1f0 	sdiv	r1, r1, r0
 80131b8:	4429      	add	r1, r5
 80131ba:	f8d7 5104 	ldr.w	r5, [r7, #260]	; 0x104
 80131be:	fb0e 5501 	mla	r5, lr, r1, r5
 80131c2:	f8d7 1134 	ldr.w	r1, [r7, #308]	; 0x134
 80131c6:	4403      	add	r3, r0
 80131c8:	fb01 6104 	mla	r1, r1, r4, r6
 80131cc:	3b01      	subs	r3, #1
 80131ce:	fb93 f6f0 	sdiv	r6, r3, r0
 80131d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d4:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 80131d8:	fb06 3110 	mls	r1, r6, r0, r3
 80131dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80131e0:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80131e4:	4562      	cmp	r2, ip
 80131e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80131ea:	bf08      	it	eq
 80131ec:	eeb0 6a48 	vmoveq.f32	s12, s16
 80131f0:	1b9b      	subs	r3, r3, r6
 80131f2:	2800      	cmp	r0, #0
 80131f4:	d070      	beq.n	80132d8 <forward_conv2d_nl_pool+0x628>
 80131f6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80131fa:	fb0e f803 	mul.w	r8, lr, r3
 80131fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013200:	fb00 fb01 	mul.w	fp, r0, r1
 8013204:	2b00      	cmp	r3, #0
 8013206:	d067      	beq.n	80132d8 <forward_conv2d_nl_pool+0x628>
 8013208:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801320c:	18d3      	adds	r3, r2, r3
 801320e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013216:	1a9b      	subs	r3, r3, r2
 8013218:	63bb      	str	r3, [r7, #56]	; 0x38
 801321a:	2300      	movs	r3, #0
 801321c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801321e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8013222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013224:	4413      	add	r3, r2
 8013226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013228:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322e:	4413      	add	r3, r2
 8013230:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013238:	ecf3 7a01 	vldmia	r3!, {s15}
 801323c:	f1ba 0f00 	cmp.w	sl, #0
 8013240:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013244:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013248:	f340 80a2 	ble.w	8013390 <forward_conv2d_nl_pool+0x6e0>
 801324c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8013250:	f04f 0c00 	mov.w	ip, #0
 8013254:	2e00      	cmp	r6, #0
 8013256:	dd19      	ble.n	801328c <forward_conv2d_nl_pool+0x5dc>
 8013258:	2100      	movs	r1, #0
 801325a:	eb00 040e 	add.w	r4, r0, lr
 801325e:	4284      	cmp	r4, r0
 8013260:	d910      	bls.n	8013284 <forward_conv2d_nl_pool+0x5d4>
 8013262:	4603      	mov	r3, r0
 8013264:	462a      	mov	r2, r5
 8013266:	ecb3 7a01 	vldmia	r3!, {s14}
 801326a:	ecf2 6a01 	vldmia	r2!, {s13}
 801326e:	429c      	cmp	r4, r3
 8013270:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013274:	d8f7      	bhi.n	8013266 <forward_conv2d_nl_pool+0x5b6>
 8013276:	43c3      	mvns	r3, r0
 8013278:	441c      	add	r4, r3
 801327a:	f024 0403 	bic.w	r4, r4, #3
 801327e:	3404      	adds	r4, #4
 8013280:	4425      	add	r5, r4
 8013282:	4420      	add	r0, r4
 8013284:	3101      	adds	r1, #1
 8013286:	428e      	cmp	r6, r1
 8013288:	4448      	add	r0, r9
 801328a:	d1e6      	bne.n	801325a <forward_conv2d_nl_pool+0x5aa>
 801328c:	f10c 0c01 	add.w	ip, ip, #1
 8013290:	45e2      	cmp	sl, ip
 8013292:	4458      	add	r0, fp
 8013294:	4445      	add	r5, r8
 8013296:	d1dd      	bne.n	8013254 <forward_conv2d_nl_pool+0x5a4>
 8013298:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801329c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132a0:	441d      	add	r5, r3
 80132a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80132a6:	ece3 7a01 	vstmia	r3!, {s15}
 80132aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80132ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d1be      	bne.n	8013234 <forward_conv2d_nl_pool+0x584>
 80132b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80132ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80132bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80132be:	4472      	add	r2, lr
 80132c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 80132c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80132c6:	1a52      	subs	r2, r2, r1
 80132c8:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 80132cc:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80132d0:	3301      	adds	r3, #1
 80132d2:	429a      	cmp	r2, r3
 80132d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80132d6:	d1a2      	bne.n	801321e <forward_conv2d_nl_pool+0x56e>
 80132d8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80132dc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80132e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80132e2:	4608      	mov	r0, r1
 80132e4:	4410      	add	r0, r2
 80132e6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80132ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 80132ee:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80132f2:	4401      	add	r1, r0
 80132f4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80132f8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80132fc:	1a8a      	subs	r2, r1, r2
 80132fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8013302:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013306:	3301      	adds	r3, #1
 8013308:	429a      	cmp	r2, r3
 801330a:	677b      	str	r3, [r7, #116]	; 0x74
 801330c:	f47f af1d 	bne.w	801314a <forward_conv2d_nl_pool+0x49a>
 8013310:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013314:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8013318:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801331c:	699b      	ldr	r3, [r3, #24]
 801331e:	f8d7 5094 	ldr.w	r5, [r7, #148]	; 0x94
 8013322:	f8d7 6144 	ldr.w	r6, [r7, #324]	; 0x144
 8013326:	f8d7 813c 	ldr.w	r8, [r7, #316]	; 0x13c
 801332a:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 801332e:	2400      	movs	r4, #0
 8013330:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8013334:	609e      	str	r6, [r3, #8]
 8013336:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801333a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801333e:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8013342:	462b      	mov	r3, r5
 8013344:	4608      	mov	r0, r1
 8013346:	47a0      	blx	r4
 8013348:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801334c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8013350:	6859      	ldr	r1, [r3, #4]
 8013352:	68da      	ldr	r2, [r3, #12]
 8013354:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8013358:	4405      	add	r5, r0
 801335a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801335e:	0089      	lsls	r1, r1, #2
 8013360:	4406      	add	r6, r0
 8013362:	eba5 0c09 	sub.w	ip, r5, r9
 8013366:	1850      	adds	r0, r2, r1
 8013368:	45a4      	cmp	ip, r4
 801336a:	bfa8      	it	ge
 801336c:	464d      	movge	r5, r9
 801336e:	4286      	cmp	r6, r0
 8013370:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8013374:	bf28      	it	cs
 8013376:	1a76      	subcs	r6, r6, r1
 8013378:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 801337c:	3001      	adds	r0, #1
 801337e:	4281      	cmp	r1, r0
 8013380:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 8013384:	d1d6      	bne.n	8013334 <forward_conv2d_nl_pool+0x684>
 8013386:	f8c7 5094 	str.w	r5, [r7, #148]	; 0x94
 801338a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 801338e:	e019      	b.n	80133c4 <forward_conv2d_nl_pool+0x714>
 8013390:	461a      	mov	r2, r3
 8013392:	e783      	b.n	801329c <forward_conv2d_nl_pool+0x5ec>
 8013394:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8013398:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801339c:	fb90 f3f2 	sdiv	r3, r0, r2
 80133a0:	fb02 0313 	mls	r3, r2, r3, r0
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	4605      	mov	r5, r0
 80133a8:	fb93 f0f2 	sdiv	r0, r3, r2
 80133ac:	fb02 3010 	mls	r0, r2, r0, r3
 80133b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80133b2:	462e      	mov	r6, r5
 80133b4:	18c4      	adds	r4, r0, r3
 80133b6:	eb02 0805 	add.w	r8, r2, r5
 80133ba:	e6d7      	b.n	801316c <forward_conv2d_nl_pool+0x4bc>
 80133bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	68da      	ldr	r2, [r3, #12]
 80133c4:	609a      	str	r2, [r3, #8]
 80133c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80133ca:	3301      	adds	r3, #1
 80133cc:	b21b      	sxth	r3, r3
 80133ce:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80133d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80133d6:	3b01      	subs	r3, #1
 80133d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80133dc:	f100 8089 	bmi.w	80134f2 <forward_conv2d_nl_pool+0x842>
 80133e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80133e4:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80133e8:	42a3      	cmp	r3, r4
 80133ea:	d867      	bhi.n	80134bc <forward_conv2d_nl_pool+0x80c>
 80133ec:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	6990      	ldr	r0, [r2, #24]
 80133f4:	9301      	str	r3, [sp, #4]
 80133f6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80133fa:	f8d7 80c0 	ldr.w	r8, [r7, #192]	; 0xc0
 80133fe:	f8b7 5090 	ldrh.w	r5, [r7, #144]	; 0x90
 8013402:	1a9b      	subs	r3, r3, r2
 8013404:	fa1f f188 	uxth.w	r1, r8
 8013408:	b29a      	uxth	r2, r3
 801340a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801340e:	9308      	str	r3, [sp, #32]
 8013410:	9105      	str	r1, [sp, #20]
 8013412:	2601      	movs	r6, #1
 8013414:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8013418:	9607      	str	r6, [sp, #28]
 801341a:	f8d7 6080 	ldr.w	r6, [r7, #128]	; 0x80
 801341e:	9506      	str	r5, [sp, #24]
 8013420:	f8b7 5048 	ldrh.w	r5, [r7, #72]	; 0x48
 8013424:	9304      	str	r3, [sp, #16]
 8013426:	1a64      	subs	r4, r4, r1
 8013428:	b2b1      	uxth	r1, r6
 801342a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8013434:	b224      	sxth	r4, r4
 8013436:	f8b7 3128 	ldrh.w	r3, [r7, #296]	; 0x128
 801343a:	f8b7 1138 	ldrh.w	r1, [r7, #312]	; 0x138
 801343e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8013442:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8013444:	47a0      	blx	r4
 8013446:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801344a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 801344e:	688a      	ldr	r2, [r1, #8]
 8013450:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8013452:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8013456:	fa0f f388 	sxth.w	r3, r8
 801345a:	1af3      	subs	r3, r6, r3
 801345c:	4422      	add	r2, r4
 801345e:	462e      	mov	r6, r5
 8013460:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8013464:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8013468:	608a      	str	r2, [r1, #8]
 801346a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801346e:	4426      	add	r6, r4
 8013470:	b21b      	sxth	r3, r3
 8013472:	1b2c      	subs	r4, r5, r4
 8013474:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8013478:	6ebd      	ldr	r5, [r7, #104]	; 0x68
 801347a:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 801347e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013486:	f8c7 6118 	str.w	r6, [r7, #280]	; 0x118
 801348a:	3001      	adds	r0, #1
 801348c:	442c      	add	r4, r5
 801348e:	4283      	cmp	r3, r0
 8013490:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 8013494:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8013498:	f63f adc7 	bhi.w	801302a <forward_conv2d_nl_pool+0x37a>
 801349c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80134a0:	699b      	ldr	r3, [r3, #24]
 80134a2:	68da      	ldr	r2, [r3, #12]
 80134a4:	609a      	str	r2, [r3, #8]
 80134a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80134aa:	68d3      	ldr	r3, [r2, #12]
 80134ac:	6093      	str	r3, [r2, #8]
 80134ae:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80134b2:	46bd      	mov	sp, r7
 80134b4:	ecbd 8b10 	vpop	{d8-d15}
 80134b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80134c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80134c4:	4611      	mov	r1, r2
 80134c6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80134ca:	4419      	add	r1, r3
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80134d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80134d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80134d8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80134dc:	4413      	add	r3, r2
 80134de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80134e2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80134e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80134ea:	4293      	cmp	r3, r2
 80134ec:	f63f ad9d 	bhi.w	801302a <forward_conv2d_nl_pool+0x37a>
 80134f0:	e7d4      	b.n	801349c <forward_conv2d_nl_pool+0x7ec>
 80134f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80134f6:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 80134fa:	699a      	ldr	r2, [r3, #24]
 80134fc:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 8013500:	68d1      	ldr	r1, [r2, #12]
 8013502:	6853      	ldr	r3, [r2, #4]
 8013504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013506:	fb00 4012 	mls	r0, r0, r2, r4
 801350a:	009b      	lsls	r3, r3, #2
 801350c:	4281      	cmp	r1, r0
 801350e:	bf88      	it	hi
 8013510:	18c0      	addhi	r0, r0, r3
 8013512:	4281      	cmp	r1, r0
 8013514:	eb01 0203 	add.w	r2, r1, r3
 8013518:	d216      	bcs.n	8013548 <forward_conv2d_nl_pool+0x898>
 801351a:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 801351e:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8013522:	42a1      	cmp	r1, r4
 8013524:	d010      	beq.n	8013548 <forward_conv2d_nl_pool+0x898>
 8013526:	4290      	cmp	r0, r2
 8013528:	d20e      	bcs.n	8013548 <forward_conv2d_nl_pool+0x898>
 801352a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 801352e:	f8d7 413c 	ldr.w	r4, [r7, #316]	; 0x13c
 8013532:	f850 3b04 	ldr.w	r3, [r0], #4
 8013536:	f841 3b04 	str.w	r3, [r1], #4
 801353a:	69a2      	ldr	r2, [r4, #24]
 801353c:	6853      	ldr	r3, [r2, #4]
 801353e:	68d2      	ldr	r2, [r2, #12]
 8013540:	009b      	lsls	r3, r3, #2
 8013542:	441a      	add	r2, r3
 8013544:	4282      	cmp	r2, r0
 8013546:	d8f4      	bhi.n	8013532 <forward_conv2d_nl_pool+0x882>
 8013548:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801354c:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8013550:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8013554:	6dbd      	ldr	r5, [r7, #88]	; 0x58
 8013556:	4420      	add	r0, r4
 8013558:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 801355c:	1a40      	subs	r0, r0, r1
 801355e:	4421      	add	r1, r4
 8013560:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
 8013564:	442c      	add	r4, r5
 8013566:	b209      	sxth	r1, r1
 8013568:	b200      	sxth	r0, r0
 801356a:	4294      	cmp	r4, r2
 801356c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8013570:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8013574:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8013578:	4621      	mov	r1, r4
 801357a:	f4ff af31 	bcc.w	80133e0 <forward_conv2d_nl_pool+0x730>
 801357e:	425b      	negs	r3, r3
 8013580:	4419      	add	r1, r3
 8013582:	4291      	cmp	r1, r2
 8013584:	d2fc      	bcs.n	8013580 <forward_conv2d_nl_pool+0x8d0>
 8013586:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 801358a:	e729      	b.n	80133e0 <forward_conv2d_nl_pool+0x730>
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	deff      	udf	#255	; 0xff
 8013590:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013594:	2a00      	cmp	r2, #0
 8013596:	f43f ac8b 	beq.w	8012eb0 <forward_conv2d_nl_pool+0x200>
 801359a:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 801359e:	2903      	cmp	r1, #3
 80135a0:	f240 832c 	bls.w	8013bfc <forward_conv2d_nl_pool+0xf4c>
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135a8:	b1db      	cbz	r3, 80135e2 <forward_conv2d_nl_pool+0x932>
 80135aa:	685b      	ldr	r3, [r3, #4]
 80135ac:	b1cb      	cbz	r3, 80135e2 <forward_conv2d_nl_pool+0x932>
 80135ae:	699b      	ldr	r3, [r3, #24]
 80135b0:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80135b4:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 80135b8:	9301      	str	r3, [sp, #4]
 80135ba:	4603      	mov	r3, r0
 80135bc:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 80135c0:	9000      	str	r0, [sp, #0]
 80135c2:	4620      	mov	r0, r4
 80135c4:	f7ff fb24 	bl	8012c10 <ai_dict_decompress_f32>
 80135c8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80135cc:	b12c      	cbz	r4, 80135da <forward_conv2d_nl_pool+0x92a>
 80135ce:	f8c7 4104 	str.w	r4, [r7, #260]	; 0x104
 80135d2:	881a      	ldrh	r2, [r3, #0]
 80135d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80135d8:	e46a      	b.n	8012eb0 <forward_conv2d_nl_pool+0x200>
 80135da:	881a      	ldrh	r2, [r3, #0]
 80135dc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80135e0:	e466      	b.n	8012eb0 <forward_conv2d_nl_pool+0x200>
 80135e2:	2300      	movs	r3, #0
 80135e4:	699b      	ldr	r3, [r3, #24]
 80135e6:	deff      	udf	#255	; 0xff
 80135e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80135ea:	2a01      	cmp	r2, #1
 80135ec:	f47f ad42 	bne.w	8013074 <forward_conv2d_nl_pool+0x3c4>
 80135f0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80135f4:	2a00      	cmp	r2, #0
 80135f6:	f43f aee1 	beq.w	80133bc <forward_conv2d_nl_pool+0x70c>
 80135fa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80135fe:	f8d7 6148 	ldr.w	r6, [r7, #328]	; 0x148
 8013602:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013606:	1a5b      	subs	r3, r3, r1
 8013608:	1ad4      	subs	r4, r2, r3
 801360a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801360e:	00b3      	lsls	r3, r6, #2
 8013610:	fb03 f304 	mul.w	r3, r3, r4
 8013614:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013618:	fbb2 f2f0 	udiv	r2, r2, r0
 801361c:	ebc2 7082 	rsb	r0, r2, r2, lsl #30
 8013620:	4615      	mov	r5, r2
 8013622:	63ba      	str	r2, [r7, #56]	; 0x38
 8013624:	637b      	str	r3, [r7, #52]	; 0x34
 8013626:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 801362a:	0083      	lsls	r3, r0, #2
 801362c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801362e:	00d3      	lsls	r3, r2, #3
 8013630:	607b      	str	r3, [r7, #4]
 8013632:	00ab      	lsls	r3, r5, #2
 8013634:	60bb      	str	r3, [r7, #8]
 8013636:	fb01 f306 	mul.w	r3, r1, r6
 801363a:	677b      	str	r3, [r7, #116]	; 0x74
 801363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801363e:	fb01 f303 	mul.w	r3, r1, r3
 8013642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013648:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801364c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013650:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8013654:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013658:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801365c:	2300      	movs	r3, #0
 801365e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013666:	2b00      	cmp	r3, #0
 8013668:	f2c0 828e 	blt.w	8013b88 <forward_conv2d_nl_pool+0xed8>
 801366c:	2100      	movs	r1, #0
 801366e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013670:	460a      	mov	r2, r1
 8013672:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8013676:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 801367a:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 801367e:	4420      	add	r0, r4
 8013680:	4408      	add	r0, r1
 8013682:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8013686:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801368a:	190c      	adds	r4, r1, r4
 801368c:	42ac      	cmp	r4, r5
 801368e:	bf28      	it	cs
 8013690:	462c      	movcs	r4, r5
 8013692:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 8013696:	0080      	lsls	r0, r0, #2
 8013698:	1aa4      	subs	r4, r4, r2
 801369a:	2d00      	cmp	r5, #0
 801369c:	f000 8265 	beq.w	8013b6a <forward_conv2d_nl_pool+0xeba>
 80136a0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80136a4:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 80136a8:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80136ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80136b0:	42b5      	cmp	r5, r6
 80136b2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80136b6:	eba3 0204 	sub.w	r2, r3, r4
 80136ba:	eba1 0104 	sub.w	r1, r1, r4
 80136be:	bf08      	it	eq
 80136c0:	eef0 3a48 	vmoveq.f32	s7, s16
 80136c4:	462b      	mov	r3, r5
 80136c6:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 80136c8:	f8d7 60bc 	ldr.w	r6, [r7, #188]	; 0xbc
 80136cc:	4428      	add	r0, r5
 80136ce:	f8d7 5134 	ldr.w	r5, [r7, #308]	; 0x134
 80136d2:	fb05 6e00 	mla	lr, r5, r0, r6
 80136d6:	eb0e 000b 	add.w	r0, lr, fp
 80136da:	4586      	cmp	lr, r0
 80136dc:	6238      	str	r0, [r7, #32]
 80136de:	f080 80a5 	bcs.w	801382c <forward_conv2d_nl_pool+0xb7c>
 80136e2:	0092      	lsls	r2, r2, #2
 80136e4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80136e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136ea:	fb01 f10b 	mul.w	r1, r1, fp
 80136ee:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80136f2:	f024 0803 	bic.w	r8, r4, #3
 80136f6:	2a00      	cmp	r2, #0
 80136f8:	f000 8098 	beq.w	801382c <forward_conv2d_nl_pool+0xb7c>
 80136fc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8013700:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013702:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8013706:	0892      	lsrs	r2, r2, #2
 8013708:	3201      	adds	r2, #1
 801370a:	4401      	add	r1, r0
 801370c:	fb02 f00a 	mul.w	r0, r2, sl
 8013710:	6678      	str	r0, [r7, #100]	; 0x64
 8013712:	0110      	lsls	r0, r2, #4
 8013714:	0092      	lsls	r2, r2, #2
 8013716:	663a      	str	r2, [r7, #96]	; 0x60
 8013718:	1aca      	subs	r2, r1, r3
 801371a:	613a      	str	r2, [r7, #16]
 801371c:	68ba      	ldr	r2, [r7, #8]
 801371e:	66f8      	str	r0, [r7, #108]	; 0x6c
 8013720:	4413      	add	r3, r2
 8013722:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013726:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801372a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801372c:	4413      	add	r3, r2
 801372e:	60fb      	str	r3, [r7, #12]
 8013730:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013734:	693b      	ldr	r3, [r7, #16]
 8013736:	4413      	add	r3, r2
 8013738:	673b      	str	r3, [r7, #112]	; 0x70
 801373a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801373e:	ecf3 6a01 	vldmia	r3!, {s13}
 8013742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801374a:	2b00      	cmp	r3, #0
 801374c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8013750:	dd57      	ble.n	8013802 <forward_conv2d_nl_pool+0xb52>
 8013752:	4676      	mov	r6, lr
 8013754:	f04f 0c00 	mov.w	ip, #0
 8013758:	f1b8 0f00 	cmp.w	r8, #0
 801375c:	f340 8203 	ble.w	8013b66 <forward_conv2d_nl_pool+0xeb6>
 8013760:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8013764:	f109 0310 	add.w	r3, r9, #16
 8013768:	18b1      	adds	r1, r6, r2
 801376a:	2000      	movs	r0, #0
 801376c:	4632      	mov	r2, r6
 801376e:	eb02 050b 	add.w	r5, r2, fp
 8013772:	ed95 7a00 	vldr	s14, [r5]
 8013776:	ed53 7a03 	vldr	s15, [r3, #-12]
 801377a:	ed13 4a04 	vldr	s8, [r3, #-16]
 801377e:	edd2 4a00 	vldr	s9, [r2]
 8013782:	ed13 5a02 	vldr	s10, [r3, #-8]
 8013786:	edd1 5a00 	vldr	s11, [r1]
 801378a:	ed13 6a01 	vldr	s12, [r3, #-4]
 801378e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013792:	eb01 050b 	add.w	r5, r1, fp
 8013796:	eee4 7a24 	vfma.f32	s15, s8, s9
 801379a:	3004      	adds	r0, #4
 801379c:	4540      	cmp	r0, r8
 801379e:	ed95 7a00 	vldr	s14, [r5]
 80137a2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80137a6:	4452      	add	r2, sl
 80137a8:	4451      	add	r1, sl
 80137aa:	f103 0310 	add.w	r3, r3, #16
 80137ae:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80137b6:	dbda      	blt.n	801376e <forward_conv2d_nl_pool+0xabe>
 80137b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80137ba:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80137bc:	441e      	add	r6, r3
 80137be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80137c0:	4499      	add	r9, r3
 80137c2:	42a0      	cmp	r0, r4
 80137c4:	da11      	bge.n	80137ea <forward_conv2d_nl_pool+0xb3a>
 80137c6:	4602      	mov	r2, r0
 80137c8:	4633      	mov	r3, r6
 80137ca:	4649      	mov	r1, r9
 80137cc:	edd3 7a00 	vldr	s15, [r3]
 80137d0:	ecb1 7a01 	vldmia	r1!, {s14}
 80137d4:	3201      	adds	r2, #1
 80137d6:	42a2      	cmp	r2, r4
 80137d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80137dc:	445b      	add	r3, fp
 80137de:	d1f5      	bne.n	80137cc <forward_conv2d_nl_pool+0xb1c>
 80137e0:	1a20      	subs	r0, r4, r0
 80137e2:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 80137e6:	fb00 660b 	mla	r6, r0, fp, r6
 80137ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80137ee:	441e      	add	r6, r3
 80137f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137f4:	4499      	add	r9, r3
 80137f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80137fa:	f10c 0c01 	add.w	ip, ip, #1
 80137fe:	4563      	cmp	r3, ip
 8013800:	d1aa      	bne.n	8013758 <forward_conv2d_nl_pool+0xaa8>
 8013802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013804:	4499      	add	r9, r3
 8013806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013808:	ece3 6a01 	vstmia	r3!, {s13}
 801380c:	673b      	str	r3, [r7, #112]	; 0x70
 801380e:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8013812:	4293      	cmp	r3, r2
 8013814:	d191      	bne.n	801373a <forward_conv2d_nl_pool+0xa8a>
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	687a      	ldr	r2, [r7, #4]
 801381a:	1a9b      	subs	r3, r3, r2
 801381c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013820:	6a3b      	ldr	r3, [r7, #32]
 8013822:	f10e 0e04 	add.w	lr, lr, #4
 8013826:	459e      	cmp	lr, r3
 8013828:	f4ff af7d 	bcc.w	8013726 <forward_conv2d_nl_pool+0xa76>
 801382c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013830:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8013834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013838:	440a      	add	r2, r1
 801383a:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 801383e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8013842:	4608      	mov	r0, r1
 8013844:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013848:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801384c:	4410      	add	r0, r2
 801384e:	1a8a      	subs	r2, r1, r2
 8013850:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8013854:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013858:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 801385c:	3301      	adds	r3, #1
 801385e:	429a      	cmp	r2, r3
 8013860:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013864:	f47f aefd 	bne.w	8013662 <forward_conv2d_nl_pool+0x9b2>
 8013868:	e556      	b.n	8013318 <forward_conv2d_nl_pool+0x668>
 801386a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 801386c:	2801      	cmp	r0, #1
 801386e:	f47f ac01 	bne.w	8013074 <forward_conv2d_nl_pool+0x3c4>
 8013872:	1a5b      	subs	r3, r3, r1
 8013874:	69f8      	ldr	r0, [r7, #28]
 8013876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801387a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801387e:	fb00 f202 	mul.w	r2, r0, r2
 8013882:	677a      	str	r2, [r7, #116]	; 0x74
 8013884:	2b00      	cmp	r3, #0
 8013886:	f000 8164 	beq.w	8013b52 <forward_conv2d_nl_pool+0xea2>
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	6978      	ldr	r0, [r7, #20]
 801388e:	f8c7 b020 	str.w	fp, [r7, #32]
 8013892:	fb03 f101 	mul.w	r1, r3, r1
 8013896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801389a:	6679      	str	r1, [r7, #100]	; 0x64
 801389c:	330a      	adds	r3, #10
 801389e:	f023 0307 	bic.w	r3, r3, #7
 80138a2:	637b      	str	r3, [r7, #52]	; 0x34
 80138a4:	1813      	adds	r3, r2, r0
 80138a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80138a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80138ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80138b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80138b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80138b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80138bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80138c0:	1a09      	subs	r1, r1, r0
 80138c2:	2300      	movs	r3, #0
 80138c4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80138c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80138ca:	f8c7 a010 	str.w	sl, [r7, #16]
 80138ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d0:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 80138d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80138d6:	ebad 0d03 	sub.w	sp, sp, r3
 80138da:	ab0a      	add	r3, sp, #40	; 0x28
 80138dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80138de:	b132      	cbz	r2, 80138ee <forward_conv2d_nl_pool+0xc3e>
 80138e0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80138e4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 fedf 	bl	80146ac <memcpy>
 80138ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f000 815b 	beq.w	8013bae <forward_conv2d_nl_pool+0xefe>
 80138f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80138fc:	edd3 fa00 	vldr	s31, [r3]
 8013900:	3304      	adds	r3, #4
 8013902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013906:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801390a:	2b00      	cmp	r3, #0
 801390c:	f000 8105 	beq.w	8013b1a <forward_conv2d_nl_pool+0xe6a>
 8013910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013914:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8013918:	eb03 0802 	add.w	r8, r3, r2
 801391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801391e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013924:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801392c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013930:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8013934:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013938:	f04f 0b00 	mov.w	fp, #0
 801393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013940:	2b00      	cmp	r3, #0
 8013942:	f2c0 812c 	blt.w	8013b9e <forward_conv2d_nl_pool+0xeee>
 8013946:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801394a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801394c:	2300      	movs	r3, #0
 801394e:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8013952:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 8013956:	4422      	add	r2, r4
 8013958:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 801395a:	4421      	add	r1, r4
 801395c:	f8d7 4130 	ldr.w	r4, [r7, #304]	; 0x130
 8013960:	4540      	cmp	r0, r8
 8013962:	bf94      	ite	ls
 8013964:	ebc3 0300 	rsbls	r3, r3, r0
 8013968:	ebc3 0308 	rsbhi	r3, r3, r8
 801396c:	eba4 0903 	sub.w	r9, r4, r3
 8013970:	1ac4      	subs	r4, r0, r3
 8013972:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8013976:	fb03 f300 	mul.w	r3, r3, r0
 801397a:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 801397e:	2800      	cmp	r0, #0
 8013980:	f340 810a 	ble.w	8013b98 <forward_conv2d_nl_pool+0xee8>
 8013984:	f023 0c0f 	bic.w	ip, r3, #15
 8013988:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 801398c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8013990:	0900      	lsrs	r0, r0, #4
 8013992:	3001      	adds	r0, #1
 8013994:	fb05 f404 	mul.w	r4, r5, r4
 8013998:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801399c:	0100      	lsls	r0, r0, #4
 801399e:	fb05 f909 	mul.w	r9, r5, r9
 80139a2:	663c      	str	r4, [r7, #96]	; 0x60
 80139a4:	63b8      	str	r0, [r7, #56]	; 0x38
 80139a6:	eef0 6a6f 	vmov.f32	s13, s31
 80139aa:	f04f 0e00 	mov.w	lr, #0
 80139ae:	f1bc 0f00 	cmp.w	ip, #0
 80139b2:	f340 80ef 	ble.w	8013b94 <forward_conv2d_nl_pool+0xee4>
 80139b6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80139ba:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80139be:	2500      	movs	r5, #0
 80139c0:	ed14 fa0f 	vldr	s30, [r4, #-60]	; 0xffffffc4
 80139c4:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 80139c8:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 80139cc:	ed10 ea10 	vldr	s28, [r0, #-64]	; 0xffffffc0
 80139d0:	ed50 da0e 	vldr	s27, [r0, #-56]	; 0xffffffc8
 80139d4:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 80139d8:	ed54 ca0d 	vldr	s25, [r4, #-52]	; 0xffffffcc
 80139dc:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 80139e0:	ed54 ba0c 	vldr	s23, [r4, #-48]	; 0xffffffd0
 80139e4:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 80139e8:	ed54 aa0b 	vldr	s21, [r4, #-44]	; 0xffffffd4
 80139ec:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80139f0:	ed54 9a0a 	vldr	s19, [r4, #-40]	; 0xffffffd8
 80139f4:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80139f8:	ed54 8a09 	vldr	s17, [r4, #-36]	; 0xffffffdc
 80139fc:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8013a00:	ed50 0a08 	vldr	s1, [r0, #-32]	; 0xffffffe0
 8013a04:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8013a08:	ed54 1a07 	vldr	s3, [r4, #-28]	; 0xffffffe4
 8013a0c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8013a10:	ed50 2a06 	vldr	s5, [r0, #-24]	; 0xffffffe8
 8013a14:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8013a18:	ed54 3a05 	vldr	s7, [r4, #-20]	; 0xffffffec
 8013a1c:	ed14 4a04 	vldr	s8, [r4, #-16]
 8013a20:	ed50 4a04 	vldr	s9, [r0, #-16]
 8013a24:	ed14 5a03 	vldr	s10, [r4, #-12]
 8013a28:	ed50 5a03 	vldr	s11, [r0, #-12]
 8013a2c:	ed10 6a02 	vldr	s12, [r0, #-8]
 8013a30:	ed14 7a02 	vldr	s14, [r4, #-8]
 8013a34:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8013a38:	ed14 fa0e 	vldr	s30, [r4, #-56]	; 0xffffffc8
 8013a3c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013a40:	3510      	adds	r5, #16
 8013a42:	4565      	cmp	r5, ip
 8013a44:	ed50 ea01 	vldr	s29, [r0, #-4]
 8013a48:	ed14 ea01 	vldr	s28, [r4, #-4]
 8013a4c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8013a50:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8013a54:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8013a58:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8013a5c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8013a60:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8013a64:	eeea 7a29 	vfma.f32	s15, s20, s19
 8013a68:	eee9 7a28 	vfma.f32	s15, s18, s17
 8013a6c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8013a70:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013a74:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013a78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013a7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013a80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013a84:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013a88:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013a8c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013a90:	db96      	blt.n	80139c0 <forward_conv2d_nl_pool+0xd10>
 8013a92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013a94:	4452      	add	r2, sl
 8013a96:	4451      	add	r1, sl
 8013a98:	4283      	cmp	r3, r0
 8013a9a:	dd0f      	ble.n	8013abc <forward_conv2d_nl_pool+0xe0c>
 8013a9c:	4604      	mov	r4, r0
 8013a9e:	4616      	mov	r6, r2
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	ecb5 7a01 	vldmia	r5!, {s14}
 8013aa6:	ecf6 7a01 	vldmia	r6!, {s15}
 8013aaa:	3401      	adds	r4, #1
 8013aac:	42a3      	cmp	r3, r4
 8013aae:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ab2:	d1f6      	bne.n	8013aa2 <forward_conv2d_nl_pool+0xdf2>
 8013ab4:	1a18      	subs	r0, r3, r0
 8013ab6:	0080      	lsls	r0, r0, #2
 8013ab8:	4401      	add	r1, r0
 8013aba:	4402      	add	r2, r0
 8013abc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8013abe:	4401      	add	r1, r0
 8013ac0:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8013ac4:	f10e 0e01 	add.w	lr, lr, #1
 8013ac8:	4570      	cmp	r0, lr
 8013aca:	444a      	add	r2, r9
 8013acc:	f47f af6f 	bne.w	80139ae <forward_conv2d_nl_pool+0xcfe>
 8013ad0:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8013ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013ad8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8013adc:	edc3 6a00 	vstr	s13, [r3]
 8013ae0:	4608      	mov	r0, r1
 8013ae2:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8013ae6:	440b      	add	r3, r1
 8013ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013aec:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af2:	1ac9      	subs	r1, r1, r3
 8013af4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8013af8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8013afc:	4419      	add	r1, r3
 8013afe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8013b02:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8013b06:	f10b 0b01 	add.w	fp, fp, #1
 8013b0a:	4410      	add	r0, r2
 8013b0c:	455b      	cmp	r3, fp
 8013b0e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8013b12:	eba8 0802 	sub.w	r8, r8, r2
 8013b16:	f47f af11 	bne.w	801393c <forward_conv2d_nl_pool+0xc8c>
 8013b1a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013b1e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013b26:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 8013b2a:	440a      	add	r2, r1
 8013b2c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8013b30:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013b34:	3204      	adds	r2, #4
 8013b36:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8013b3a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8013b3e:	3301      	adds	r3, #1
 8013b40:	429a      	cmp	r2, r3
 8013b42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013b46:	f47f aec2 	bne.w	80138ce <forward_conv2d_nl_pool+0xc1e>
 8013b4a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013b4e:	f8d7 a010 	ldr.w	sl, [r7, #16]
 8013b52:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8013b56:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8013b5a:	699b      	ldr	r3, [r3, #24]
 8013b5c:	2a00      	cmp	r2, #0
 8013b5e:	f47f abde 	bne.w	801331e <forward_conv2d_nl_pool+0x66e>
 8013b62:	68da      	ldr	r2, [r3, #12]
 8013b64:	e42e      	b.n	80133c4 <forward_conv2d_nl_pool+0x714>
 8013b66:	2000      	movs	r0, #0
 8013b68:	e62b      	b.n	80137c2 <forward_conv2d_nl_pool+0xb12>
 8013b6a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8013b6e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8013b72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013b76:	1b19      	subs	r1, r3, r4
 8013b78:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013b7c:	eef0 3a48 	vmov.f32	s7, s16
 8013b80:	1b1a      	subs	r2, r3, r4
 8013b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013b86:	e59e      	b.n	80136c6 <forward_conv2d_nl_pool+0xa16>
 8013b88:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8013b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013b8e:	460a      	mov	r2, r1
 8013b90:	440b      	add	r3, r1
 8013b92:	e56e      	b.n	8013672 <forward_conv2d_nl_pool+0x9c2>
 8013b94:	2000      	movs	r0, #0
 8013b96:	e77f      	b.n	8013a98 <forward_conv2d_nl_pool+0xde8>
 8013b98:	eef0 6a6f 	vmov.f32	s13, s31
 8013b9c:	e798      	b.n	8013ad0 <forward_conv2d_nl_pool+0xe20>
 8013b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013ba2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013ba4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8013ba8:	eba8 0303 	sub.w	r3, r8, r3
 8013bac:	e6cf      	b.n	801394e <forward_conv2d_nl_pool+0xc9e>
 8013bae:	eef0 fa48 	vmov.f32	s31, s16
 8013bb2:	e6a8      	b.n	8013906 <forward_conv2d_nl_pool+0xc56>
 8013bb4:	b16a      	cbz	r2, 8013bd2 <forward_conv2d_nl_pool+0xf22>
 8013bb6:	6892      	ldr	r2, [r2, #8]
 8013bb8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8013bc2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8013bc6:	f7ff b919 	b.w	8012dfc <forward_conv2d_nl_pool+0x14c>
 8013bca:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8013bce:	f7ff b8fb 	b.w	8012dc8 <forward_conv2d_nl_pool+0x118>
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8013bd8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8013bdc:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8013be0:	f7ff b90c 	b.w	8012dfc <forward_conv2d_nl_pool+0x14c>
 8013be4:	3418      	adds	r4, #24
 8013be6:	d007      	beq.n	8013bf8 <forward_conv2d_nl_pool+0xf48>
 8013be8:	4632      	mov	r2, r6
 8013bea:	4635      	mov	r5, r6
 8013bec:	4634      	mov	r4, r6
 8013bee:	f7ff b891 	b.w	8012d14 <forward_conv2d_nl_pool+0x64>
 8013bf2:	4691      	mov	r9, r2
 8013bf4:	f7ff b87b 	b.w	8012cee <forward_conv2d_nl_pool+0x3e>
 8013bf8:	68e3      	ldr	r3, [r4, #12]
 8013bfa:	deff      	udf	#255	; 0xff
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	685b      	ldr	r3, [r3, #4]
 8013c00:	deff      	udf	#255	; 0xff
 8013c02:	4694      	mov	ip, r2
 8013c04:	f7ff b868 	b.w	8012cd8 <forward_conv2d_nl_pool+0x28>
 8013c08:	4613      	mov	r3, r2
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	deff      	udf	#255	; 0xff
 8013c0e:	2200      	movs	r2, #0
 8013c10:	f7ff b87f 	b.w	8012d12 <forward_conv2d_nl_pool+0x62>

08013c14 <forward_dense>:
 8013c14:	6942      	ldr	r2, [r0, #20]
 8013c16:	8813      	ldrh	r3, [r2, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f000 81ca 	beq.w	8013fb2 <forward_dense+0x39e>
 8013c1e:	6852      	ldr	r2, [r2, #4]
 8013c20:	6850      	ldr	r0, [r2, #4]
 8013c22:	b100      	cbz	r0, 8013c26 <forward_dense+0x12>
 8013c24:	6800      	ldr	r0, [r0, #0]
 8013c26:	2b01      	cmp	r3, #1
 8013c28:	f240 81c0 	bls.w	8013fac <forward_dense+0x398>
 8013c2c:	6911      	ldr	r1, [r2, #16]
 8013c2e:	b101      	cbz	r1, 8013c32 <forward_dense+0x1e>
 8013c30:	6809      	ldr	r1, [r1, #0]
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	f000 81bf 	beq.w	8013fb6 <forward_dense+0x3a2>
 8013c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c3c:	ed2d 8b10 	vpush	{d8-d15}
 8013c40:	69d3      	ldr	r3, [r2, #28]
 8013c42:	b091      	sub	sp, #68	; 0x44
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 820b 	beq.w	8014060 <forward_dense+0x44c>
 8013c4a:	681c      	ldr	r4, [r3, #0]
 8013c4c:	9408      	str	r4, [sp, #32]
 8013c4e:	f112 0418 	adds.w	r4, r2, #24
 8013c52:	f000 81df 	beq.w	8014014 <forward_dense+0x400>
 8013c56:	8b12      	ldrh	r2, [r2, #24]
 8013c58:	2a01      	cmp	r2, #1
 8013c5a:	f240 81fe 	bls.w	801405a <forward_dense+0x446>
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f000 81da 	beq.w	8014018 <forward_dense+0x404>
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	9306      	str	r3, [sp, #24]
 8013c68:	9b08      	ldr	r3, [sp, #32]
 8013c6a:	68cc      	ldr	r4, [r1, #12]
 8013c6c:	699b      	ldr	r3, [r3, #24]
 8013c6e:	68c5      	ldr	r5, [r0, #12]
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8013c76:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8013c7a:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 8013c7e:	f3c2 5541 	ubfx	r5, r2, #21, #2
 8013c82:	fa4c f505 	asr.w	r5, ip, r5
 8013c86:	f3c2 4243 	ubfx	r2, r2, #17, #4
 8013c8a:	950b      	str	r5, [sp, #44]	; 0x2c
 8013c8c:	2a04      	cmp	r2, #4
 8013c8e:	fb07 f506 	mul.w	r5, r7, r6
 8013c92:	6864      	ldr	r4, [r4, #4]
 8013c94:	9507      	str	r5, [sp, #28]
 8013c96:	f000 81dd 	beq.w	8014054 <forward_dense+0x440>
 8013c9a:	2a08      	cmp	r2, #8
 8013c9c:	f000 81da 	beq.w	8014054 <forward_dense+0x440>
 8013ca0:	f04f 0a00 	mov.w	sl, #0
 8013ca4:	698a      	ldr	r2, [r1, #24]
 8013ca6:	6981      	ldr	r1, [r0, #24]
 8013ca8:	6890      	ldr	r0, [r2, #8]
 8013caa:	9a08      	ldr	r2, [sp, #32]
 8013cac:	9004      	str	r0, [sp, #16]
 8013cae:	6952      	ldr	r2, [r2, #20]
 8013cb0:	688f      	ldr	r7, [r1, #8]
 8013cb2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8013cb6:	00a2      	lsls	r2, r4, #2
 8013cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8013cba:	1886      	adds	r6, r0, r2
 8013cbc:	9a07      	ldr	r2, [sp, #28]
 8013cbe:	2a00      	cmp	r2, #0
 8013cc0:	f000 81c3 	beq.w	801404a <forward_dense+0x436>
 8013cc4:	f1a8 0210 	sub.w	r2, r8, #16
 8013cc8:	0912      	lsrs	r2, r2, #4
 8013cca:	3201      	adds	r2, #1
 8013ccc:	0192      	lsls	r2, r2, #6
 8013cce:	920c      	str	r2, [sp, #48]	; 0x30
 8013cd0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8013cd4:	920a      	str	r2, [sp, #40]	; 0x28
 8013cd6:	689d      	ldr	r5, [r3, #8]
 8013cd8:	9b06      	ldr	r3, [sp, #24]
 8013cda:	eddf aad0 	vldr	s21, [pc, #832]	; 801401c <forward_dense+0x408>
 8013cde:	2200      	movs	r2, #0
 8013ce0:	9205      	str	r2, [sp, #20]
 8013ce2:	f008 020f 	and.w	r2, r8, #15
 8013ce6:	920d      	str	r2, [sp, #52]	; 0x34
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d043      	beq.n	8013d74 <forward_dense+0x160>
 8013cec:	699b      	ldr	r3, [r3, #24]
 8013cee:	689c      	ldr	r4, [r3, #8]
 8013cf0:	9b04      	ldr	r3, [sp, #16]
 8013cf2:	f1ba 0f00 	cmp.w	sl, #0
 8013cf6:	d042      	beq.n	8013d7e <forward_dense+0x16a>
 8013cf8:	42b3      	cmp	r3, r6
 8013cfa:	d22a      	bcs.n	8013d52 <forward_dense+0x13e>
 8013cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013cfe:	469b      	mov	fp, r3
 8013d00:	ab0f      	add	r3, sp, #60	; 0x3c
 8013d02:	9303      	str	r3, [sp, #12]
 8013d04:	2a04      	cmp	r2, #4
 8013d06:	4633      	mov	r3, r6
 8013d08:	4646      	mov	r6, r8
 8013d0a:	4698      	mov	r8, r3
 8013d0c:	f000 8156 	beq.w	8013fbc <forward_dense+0x3a8>
 8013d10:	2c00      	cmp	r4, #0
 8013d12:	f000 8185 	beq.w	8014020 <forward_dense+0x40c>
 8013d16:	f8d4 c000 	ldr.w	ip, [r4]
 8013d1a:	9803      	ldr	r0, [sp, #12]
 8013d1c:	9600      	str	r6, [sp, #0]
 8013d1e:	463b      	mov	r3, r7
 8013d20:	4629      	mov	r1, r5
 8013d22:	4652      	mov	r2, sl
 8013d24:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8013d28:	f7fe fde6 	bl	80128f8 <ai_dict8_dot_array_f32>
 8013d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d2e:	f84b 3b04 	str.w	r3, [fp], #4
 8013d32:	45c3      	cmp	fp, r8
 8013d34:	f104 0404 	add.w	r4, r4, #4
 8013d38:	444d      	add	r5, r9
 8013d3a:	d3e9      	bcc.n	8013d10 <forward_dense+0xfc>
 8013d3c:	4643      	mov	r3, r8
 8013d3e:	46b0      	mov	r8, r6
 8013d40:	461e      	mov	r6, r3
 8013d42:	9a04      	ldr	r2, [sp, #16]
 8013d44:	43d3      	mvns	r3, r2
 8013d46:	4433      	add	r3, r6
 8013d48:	f023 0303 	bic.w	r3, r3, #3
 8013d4c:	3304      	adds	r3, #4
 8013d4e:	18d3      	adds	r3, r2, r3
 8013d50:	9304      	str	r3, [sp, #16]
 8013d52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d54:	9b05      	ldr	r3, [sp, #20]
 8013d56:	4417      	add	r7, r2
 8013d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d5a:	4416      	add	r6, r2
 8013d5c:	9a07      	ldr	r2, [sp, #28]
 8013d5e:	3301      	adds	r3, #1
 8013d60:	4293      	cmp	r3, r2
 8013d62:	9305      	str	r3, [sp, #20]
 8013d64:	f000 8171 	beq.w	801404a <forward_dense+0x436>
 8013d68:	9b08      	ldr	r3, [sp, #32]
 8013d6a:	699b      	ldr	r3, [r3, #24]
 8013d6c:	689d      	ldr	r5, [r3, #8]
 8013d6e:	9b06      	ldr	r3, [sp, #24]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1bb      	bne.n	8013cec <forward_dense+0xd8>
 8013d74:	461c      	mov	r4, r3
 8013d76:	9b04      	ldr	r3, [sp, #16]
 8013d78:	f1ba 0f00 	cmp.w	sl, #0
 8013d7c:	d1bc      	bne.n	8013cf8 <forward_dense+0xe4>
 8013d7e:	42b3      	cmp	r3, r6
 8013d80:	d2e7      	bcs.n	8013d52 <forward_dense+0x13e>
 8013d82:	4618      	mov	r0, r3
 8013d84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d86:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013d8a:	eb07 0c03 	add.w	ip, r7, r3
 8013d8e:	469e      	mov	lr, r3
 8013d90:	2c00      	cmp	r4, #0
 8013d92:	f000 80ff 	beq.w	8013f94 <forward_dense+0x380>
 8013d96:	f1b8 0f0f 	cmp.w	r8, #15
 8013d9a:	edd4 fa00 	vldr	s31, [r4]
 8013d9e:	eddf 6a9f 	vldr	s13, [pc, #636]	; 801401c <forward_dense+0x408>
 8013da2:	f104 0404 	add.w	r4, r4, #4
 8013da6:	f240 80fd 	bls.w	8013fa4 <forward_dense+0x390>
 8013daa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8013dae:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8013db2:	4641      	mov	r1, r8
 8013db4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8013db8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8013dbc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8013dc0:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8013dc4:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8013dc8:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8013dcc:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8013dd0:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8013dd4:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8013dd8:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8013ddc:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8013de0:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8013de4:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8013de8:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8013dec:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8013df0:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8013df4:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8013df8:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8013dfc:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8013e00:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8013e04:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8013e08:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8013e0c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8013e10:	ed13 4a04 	vldr	s8, [r3, #-16]
 8013e14:	ed52 4a04 	vldr	s9, [r2, #-16]
 8013e18:	ed12 5a03 	vldr	s10, [r2, #-12]
 8013e1c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8013e20:	ed12 6a02 	vldr	s12, [r2, #-8]
 8013e24:	ed13 7a02 	vldr	s14, [r3, #-8]
 8013e28:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8013e2c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8013e30:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013e34:	3910      	subs	r1, #16
 8013e36:	290f      	cmp	r1, #15
 8013e38:	ed53 ea01 	vldr	s29, [r3, #-4]
 8013e3c:	ed12 ea01 	vldr	s28, [r2, #-4]
 8013e40:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8013e44:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8013e48:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8013e4c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8013e50:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8013e54:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8013e58:	eee9 7a89 	vfma.f32	s15, s19, s18
 8013e5c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8013e60:	eee0 7a20 	vfma.f32	s15, s0, s1
 8013e64:	eee1 7a21 	vfma.f32	s15, s2, s3
 8013e68:	eee2 7a22 	vfma.f32	s15, s4, s5
 8013e6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8013e70:	eee4 7a24 	vfma.f32	s15, s8, s9
 8013e74:	eee5 7a25 	vfma.f32	s15, s10, s11
 8013e78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013e7c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8013e80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8013e84:	d896      	bhi.n	8013db4 <forward_dense+0x1a0>
 8013e86:	eb05 010e 	add.w	r1, r5, lr
 8013e8a:	465b      	mov	r3, fp
 8013e8c:	4662      	mov	r2, ip
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d075      	beq.n	8013f7e <forward_dense+0x36a>
 8013e92:	ed91 7a00 	vldr	s14, [r1]
 8013e96:	edd2 7a00 	vldr	s15, [r2]
 8013e9a:	2b01      	cmp	r3, #1
 8013e9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ea0:	d06d      	beq.n	8013f7e <forward_dense+0x36a>
 8013ea2:	ed91 7a01 	vldr	s14, [r1, #4]
 8013ea6:	edd2 7a01 	vldr	s15, [r2, #4]
 8013eaa:	2b02      	cmp	r3, #2
 8013eac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013eb0:	d065      	beq.n	8013f7e <forward_dense+0x36a>
 8013eb2:	ed91 7a02 	vldr	s14, [r1, #8]
 8013eb6:	edd2 7a02 	vldr	s15, [r2, #8]
 8013eba:	2b03      	cmp	r3, #3
 8013ebc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ec0:	d05d      	beq.n	8013f7e <forward_dense+0x36a>
 8013ec2:	ed91 7a03 	vldr	s14, [r1, #12]
 8013ec6:	edd2 7a03 	vldr	s15, [r2, #12]
 8013eca:	2b04      	cmp	r3, #4
 8013ecc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ed0:	d055      	beq.n	8013f7e <forward_dense+0x36a>
 8013ed2:	ed91 7a04 	vldr	s14, [r1, #16]
 8013ed6:	edd2 7a04 	vldr	s15, [r2, #16]
 8013eda:	2b05      	cmp	r3, #5
 8013edc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ee0:	d04d      	beq.n	8013f7e <forward_dense+0x36a>
 8013ee2:	ed91 7a05 	vldr	s14, [r1, #20]
 8013ee6:	edd2 7a05 	vldr	s15, [r2, #20]
 8013eea:	2b06      	cmp	r3, #6
 8013eec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013ef0:	d045      	beq.n	8013f7e <forward_dense+0x36a>
 8013ef2:	ed91 7a06 	vldr	s14, [r1, #24]
 8013ef6:	edd2 7a06 	vldr	s15, [r2, #24]
 8013efa:	2b07      	cmp	r3, #7
 8013efc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f00:	d03d      	beq.n	8013f7e <forward_dense+0x36a>
 8013f02:	ed91 7a07 	vldr	s14, [r1, #28]
 8013f06:	edd2 7a07 	vldr	s15, [r2, #28]
 8013f0a:	2b08      	cmp	r3, #8
 8013f0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f10:	d035      	beq.n	8013f7e <forward_dense+0x36a>
 8013f12:	ed91 7a08 	vldr	s14, [r1, #32]
 8013f16:	edd2 7a08 	vldr	s15, [r2, #32]
 8013f1a:	2b09      	cmp	r3, #9
 8013f1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f20:	d02d      	beq.n	8013f7e <forward_dense+0x36a>
 8013f22:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8013f26:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8013f2a:	2b0a      	cmp	r3, #10
 8013f2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f30:	d025      	beq.n	8013f7e <forward_dense+0x36a>
 8013f32:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8013f36:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8013f3a:	2b0b      	cmp	r3, #11
 8013f3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f40:	d01d      	beq.n	8013f7e <forward_dense+0x36a>
 8013f42:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8013f46:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8013f4a:	2b0c      	cmp	r3, #12
 8013f4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f50:	d015      	beq.n	8013f7e <forward_dense+0x36a>
 8013f52:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8013f56:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8013f5a:	2b0d      	cmp	r3, #13
 8013f5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f60:	d00d      	beq.n	8013f7e <forward_dense+0x36a>
 8013f62:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013f66:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8013f6a:	2b0e      	cmp	r3, #14
 8013f6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f70:	d005      	beq.n	8013f7e <forward_dense+0x36a>
 8013f72:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8013f76:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8013f7a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013f7e:	444d      	add	r5, r9
 8013f80:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8013f84:	ece0 6a01 	vstmia	r0!, {s13}
 8013f88:	42b0      	cmp	r0, r6
 8013f8a:	f4bf aeda 	bcs.w	8013d42 <forward_dense+0x12e>
 8013f8e:	2c00      	cmp	r4, #0
 8013f90:	f47f af01 	bne.w	8013d96 <forward_dense+0x182>
 8013f94:	f1b8 0f0f 	cmp.w	r8, #15
 8013f98:	eef0 fa6a 	vmov.f32	s31, s21
 8013f9c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801401c <forward_dense+0x408>
 8013fa0:	f63f af03 	bhi.w	8013daa <forward_dense+0x196>
 8013fa4:	4643      	mov	r3, r8
 8013fa6:	4629      	mov	r1, r5
 8013fa8:	463a      	mov	r2, r7
 8013faa:	e770      	b.n	8013e8e <forward_dense+0x27a>
 8013fac:	2300      	movs	r3, #0
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	deff      	udf	#255	; 0xff
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	deff      	udf	#255	; 0xff
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	685b      	ldr	r3, [r3, #4]
 8013fba:	deff      	udf	#255	; 0xff
 8013fbc:	b1ac      	cbz	r4, 8013fea <forward_dense+0x3d6>
 8013fbe:	f8d4 c000 	ldr.w	ip, [r4]
 8013fc2:	9803      	ldr	r0, [sp, #12]
 8013fc4:	9600      	str	r6, [sp, #0]
 8013fc6:	463b      	mov	r3, r7
 8013fc8:	4629      	mov	r1, r5
 8013fca:	4652      	mov	r2, sl
 8013fcc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8013fd0:	f7fe fd60 	bl	8012a94 <ai_dict4_dot_array_f32>
 8013fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013fd6:	f84b 3b04 	str.w	r3, [fp], #4
 8013fda:	45c3      	cmp	fp, r8
 8013fdc:	f104 0404 	add.w	r4, r4, #4
 8013fe0:	444d      	add	r5, r9
 8013fe2:	f4bf aeab 	bcs.w	8013d3c <forward_dense+0x128>
 8013fe6:	2c00      	cmp	r4, #0
 8013fe8:	d1e9      	bne.n	8013fbe <forward_dense+0x3aa>
 8013fea:	4634      	mov	r4, r6
 8013fec:	4646      	mov	r6, r8
 8013fee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013ff2:	9400      	str	r4, [sp, #0]
 8013ff4:	463b      	mov	r3, r7
 8013ff6:	4629      	mov	r1, r5
 8013ff8:	4652      	mov	r2, sl
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8014000:	f7fe fd48 	bl	8012a94 <ai_dict4_dot_array_f32>
 8014004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014006:	f84b 3b04 	str.w	r3, [fp], #4
 801400a:	45b3      	cmp	fp, r6
 801400c:	444d      	add	r5, r9
 801400e:	d3f0      	bcc.n	8013ff2 <forward_dense+0x3de>
 8014010:	46a0      	mov	r8, r4
 8014012:	e696      	b.n	8013d42 <forward_dense+0x12e>
 8014014:	9406      	str	r4, [sp, #24]
 8014016:	e627      	b.n	8013c68 <forward_dense+0x54>
 8014018:	9306      	str	r3, [sp, #24]
 801401a:	e625      	b.n	8013c68 <forward_dense+0x54>
 801401c:	00000000 	.word	0x00000000
 8014020:	4634      	mov	r4, r6
 8014022:	4646      	mov	r6, r8
 8014024:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014028:	9400      	str	r4, [sp, #0]
 801402a:	463b      	mov	r3, r7
 801402c:	4629      	mov	r1, r5
 801402e:	4652      	mov	r2, sl
 8014030:	4640      	mov	r0, r8
 8014032:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8014036:	f7fe fc5f 	bl	80128f8 <ai_dict8_dot_array_f32>
 801403a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801403c:	f84b 3b04 	str.w	r3, [fp], #4
 8014040:	45b3      	cmp	fp, r6
 8014042:	444d      	add	r5, r9
 8014044:	d3f0      	bcc.n	8014028 <forward_dense+0x414>
 8014046:	46a0      	mov	r8, r4
 8014048:	e67b      	b.n	8013d42 <forward_dense+0x12e>
 801404a:	b011      	add	sp, #68	; 0x44
 801404c:	ecbd 8b10 	vpop	{d8-d15}
 8014050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014054:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8014058:	e624      	b.n	8013ca4 <forward_dense+0x90>
 801405a:	2300      	movs	r3, #0
 801405c:	9306      	str	r3, [sp, #24]
 801405e:	e603      	b.n	8013c68 <forward_dense+0x54>
 8014060:	9308      	str	r3, [sp, #32]
 8014062:	e5f4      	b.n	8013c4e <forward_dense+0x3a>

08014064 <nl_func_relu_array_f32>:
 8014064:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8014068:	3a01      	subs	r2, #1
 801406a:	688b      	ldr	r3, [r1, #8]
 801406c:	6880      	ldr	r0, [r0, #8]
 801406e:	0092      	lsls	r2, r2, #2
 8014070:	189b      	adds	r3, r3, r2
 8014072:	d21a      	bcs.n	80140aa <nl_func_relu_array_f32+0x46>
 8014074:	b410      	push	{r4}
 8014076:	3204      	adds	r2, #4
 8014078:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80140ac <nl_func_relu_array_f32+0x48>
 801407c:	4410      	add	r0, r2
 801407e:	3304      	adds	r3, #4
 8014080:	ed53 7a01 	vldr	s15, [r3, #-4]
 8014084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801408c:	bfb8      	it	lt
 801408e:	eef0 7a47 	vmovlt.f32	s15, s14
 8014092:	ed60 7a01 	vstmdb	r0!, {s15}
 8014096:	688c      	ldr	r4, [r1, #8]
 8014098:	f1a3 0208 	sub.w	r2, r3, #8
 801409c:	4294      	cmp	r4, r2
 801409e:	f1a3 0304 	sub.w	r3, r3, #4
 80140a2:	d9ed      	bls.n	8014080 <nl_func_relu_array_f32+0x1c>
 80140a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a8:	4770      	bx	lr
 80140aa:	4770      	bx	lr
 80140ac:	00000000 	.word	0x00000000

080140b0 <forward_sm>:
 80140b0:	6942      	ldr	r2, [r0, #20]
 80140b2:	8813      	ldrh	r3, [r2, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 808a 	beq.w	80141ce <forward_sm+0x11e>
 80140ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140be:	ed2d 8b04 	vpush	{d8-d9}
 80140c2:	6852      	ldr	r2, [r2, #4]
 80140c4:	6855      	ldr	r5, [r2, #4]
 80140c6:	b085      	sub	sp, #20
 80140c8:	b105      	cbz	r5, 80140cc <forward_sm+0x1c>
 80140ca:	682d      	ldr	r5, [r5, #0]
 80140cc:	2b01      	cmp	r3, #1
 80140ce:	d976      	bls.n	80141be <forward_sm+0x10e>
 80140d0:	6913      	ldr	r3, [r2, #16]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d071      	beq.n	80141ba <forward_sm+0x10a>
 80140d6:	681f      	ldr	r7, [r3, #0]
 80140d8:	68ec      	ldr	r4, [r5, #12]
 80140da:	68fa      	ldr	r2, [r7, #12]
 80140dc:	68ab      	ldr	r3, [r5, #8]
 80140de:	6850      	ldr	r0, [r2, #4]
 80140e0:	6862      	ldr	r2, [r4, #4]
 80140e2:	9201      	str	r2, [sp, #4]
 80140e4:	0a1b      	lsrs	r3, r3, #8
 80140e6:	d074      	beq.n	80141d2 <forward_sm+0x122>
 80140e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80140ec:	2201      	movs	r2, #1
 80140ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80140f2:	429c      	cmp	r4, r3
 80140f4:	fb01 f202 	mul.w	r2, r1, r2
 80140f8:	d1f9      	bne.n	80140ee <forward_sm+0x3e>
 80140fa:	69ae      	ldr	r6, [r5, #24]
 80140fc:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8014100:	9f01      	ldr	r7, [sp, #4]
 8014102:	68b5      	ldr	r5, [r6, #8]
 8014104:	68f3      	ldr	r3, [r6, #12]
 8014106:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801410a:	1bd1      	subs	r1, r2, r7
 801410c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8014110:	1a12      	subs	r2, r2, r0
 8014112:	429d      	cmp	r5, r3
 8014114:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8014118:	d345      	bcc.n	80141a6 <forward_sm+0xf6>
 801411a:	00bb      	lsls	r3, r7, #2
 801411c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8014120:	9300      	str	r3, [sp, #0]
 8014122:	f1c8 0200 	rsb	r2, r8, #0
 8014126:	425b      	negs	r3, r3
 8014128:	9203      	str	r2, [sp, #12]
 801412a:	9302      	str	r3, [sp, #8]
 801412c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014130:	60b5      	str	r5, [r6, #8]
 8014132:	9b01      	ldr	r3, [sp, #4]
 8014134:	f8c9 4008 	str.w	r4, [r9, #8]
 8014138:	68b2      	ldr	r2, [r6, #8]
 801413a:	2b01      	cmp	r3, #1
 801413c:	ed92 8a00 	vldr	s16, [r2]
 8014140:	d940      	bls.n	80141c4 <forward_sm+0x114>
 8014142:	9900      	ldr	r1, [sp, #0]
 8014144:	1d13      	adds	r3, r2, #4
 8014146:	1857      	adds	r7, r2, r1
 8014148:	ecf3 7a01 	vldmia	r3!, {s15}
 801414c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014154:	bfb8      	it	lt
 8014156:	eeb0 8a67 	vmovlt.f32	s16, s15
 801415a:	429f      	cmp	r7, r3
 801415c:	d1f4      	bne.n	8014148 <forward_sm+0x98>
 801415e:	eddf 8a1e 	vldr	s17, [pc, #120]	; 80141d8 <forward_sm+0x128>
 8014162:	4692      	mov	sl, r2
 8014164:	46a3      	mov	fp, r4
 8014166:	46a0      	mov	r8, r4
 8014168:	ecba 0a01 	vldmia	sl!, {s0}
 801416c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8014170:	f004 ffe8 	bl	8019144 <expf>
 8014174:	4557      	cmp	r7, sl
 8014176:	eca8 0a01 	vstmia	r8!, {s0}
 801417a:	ee78 8a80 	vadd.f32	s17, s17, s0
 801417e:	d1f3      	bne.n	8014168 <forward_sm+0xb8>
 8014180:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8014184:	9b00      	ldr	r3, [sp, #0]
 8014186:	18e2      	adds	r2, r4, r3
 8014188:	eddb 7a00 	vldr	s15, [fp]
 801418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014190:	eceb 7a01 	vstmia	fp!, {s15}
 8014194:	455a      	cmp	r2, fp
 8014196:	d1f7      	bne.n	8014188 <forward_sm+0xd8>
 8014198:	9a02      	ldr	r2, [sp, #8]
 801419a:	68f3      	ldr	r3, [r6, #12]
 801419c:	4415      	add	r5, r2
 801419e:	9a03      	ldr	r2, [sp, #12]
 80141a0:	429d      	cmp	r5, r3
 80141a2:	4414      	add	r4, r2
 80141a4:	d2c4      	bcs.n	8014130 <forward_sm+0x80>
 80141a6:	60b3      	str	r3, [r6, #8]
 80141a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80141ac:	f8c9 3008 	str.w	r3, [r9, #8]
 80141b0:	b005      	add	sp, #20
 80141b2:	ecbd 8b04 	vpop	{d8-d9}
 80141b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ba:	68db      	ldr	r3, [r3, #12]
 80141bc:	deff      	udf	#255	; 0xff
 80141be:	2300      	movs	r3, #0
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	deff      	udf	#255	; 0xff
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d0e7      	beq.n	8014198 <forward_sm+0xe8>
 80141c8:	9b00      	ldr	r3, [sp, #0]
 80141ca:	18d7      	adds	r7, r2, r3
 80141cc:	e7c7      	b.n	801415e <forward_sm+0xae>
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	deff      	udf	#255	; 0xff
 80141d2:	2201      	movs	r2, #1
 80141d4:	e791      	b.n	80140fa <forward_sm+0x4a>
 80141d6:	bf00      	nop
 80141d8:	00000000 	.word	0x00000000

080141dc <pool_func_mp_array_f32>:
 80141dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141e0:	b093      	sub	sp, #76	; 0x4c
 80141e2:	f8d0 b008 	ldr.w	fp, [r0, #8]
 80141e6:	9d24      	ldr	r5, [sp, #144]	; 0x90
 80141e8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 80141ec:	68a8      	ldr	r0, [r5, #8]
 80141ee:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 80141f2:	9508      	str	r5, [sp, #32]
 80141f4:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 80141f8:	9002      	str	r0, [sp, #8]
 80141fa:	950d      	str	r5, [sp, #52]	; 0x34
 80141fc:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8014200:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8014204:	9004      	str	r0, [sp, #16]
 8014206:	9506      	str	r5, [sp, #24]
 8014208:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 801420c:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8014210:	9009      	str	r0, [sp, #36]	; 0x24
 8014212:	950b      	str	r5, [sp, #44]	; 0x2c
 8014214:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8014218:	9200      	str	r2, [sp, #0]
 801421a:	468a      	mov	sl, r1
 801421c:	4699      	mov	r9, r3
 801421e:	b95c      	cbnz	r4, 8014238 <pool_func_mp_array_f32+0x5c>
 8014220:	b950      	cbnz	r0, 8014238 <pool_func_mp_array_f32+0x5c>
 8014222:	9b04      	ldr	r3, [sp, #16]
 8014224:	1a5a      	subs	r2, r3, r1
 8014226:	9b06      	ldr	r3, [sp, #24]
 8014228:	9908      	ldr	r1, [sp, #32]
 801422a:	3a01      	subs	r2, #1
 801422c:	3b01      	subs	r3, #1
 801422e:	fb13 2301 	smlabb	r3, r3, r1, r2
 8014232:	041a      	lsls	r2, r3, #16
 8014234:	f100 809b 	bmi.w	801436e <pool_func_mp_array_f32+0x192>
 8014238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 808b 	beq.w	8014356 <pool_func_mp_array_f32+0x17a>
 8014240:	9b06      	ldr	r3, [sp, #24]
 8014242:	2b00      	cmp	r3, #0
 8014244:	f000 8087 	beq.w	8014356 <pool_func_mp_array_f32+0x17a>
 8014248:	f1b9 0f00 	cmp.w	r9, #0
 801424c:	f000 8083 	beq.w	8014356 <pool_func_mp_array_f32+0x17a>
 8014250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014252:	1b1c      	subs	r4, r3, r4
 8014254:	9b04      	ldr	r3, [sp, #16]
 8014256:	1a1b      	subs	r3, r3, r0
 8014258:	b29b      	uxth	r3, r3
 801425a:	4240      	negs	r0, r0
 801425c:	2200      	movs	r2, #0
 801425e:	b2a1      	uxth	r1, r4
 8014260:	930f      	str	r3, [sp, #60]	; 0x3c
 8014262:	b283      	uxth	r3, r0
 8014264:	920e      	str	r2, [sp, #56]	; 0x38
 8014266:	910c      	str	r1, [sp, #48]	; 0x30
 8014268:	9310      	str	r3, [sp, #64]	; 0x40
 801426a:	9c06      	ldr	r4, [sp, #24]
 801426c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801426e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014270:	fb02 f204 	mul.w	r2, r2, r4
 8014274:	1acb      	subs	r3, r1, r3
 8014276:	920a      	str	r2, [sp, #40]	; 0x28
 8014278:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801427a:	9205      	str	r2, [sp, #20]
 801427c:	2000      	movs	r0, #0
 801427e:	b21b      	sxth	r3, r3
 8014280:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014282:	9303      	str	r3, [sp, #12]
 8014284:	9007      	str	r0, [sp, #28]
 8014286:	4603      	mov	r3, r0
 8014288:	fa0f f881 	sxth.w	r8, r1
 801428c:	9204      	str	r2, [sp, #16]
 801428e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014290:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8014294:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8014298:	4413      	add	r3, r2
 801429a:	f04f 0e00 	mov.w	lr, #0
 801429e:	fb09 f303 	mul.w	r3, r9, r3
 80142a2:	9301      	str	r3, [sp, #4]
 80142a4:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 80142a8:	4675      	mov	r5, lr
 80142aa:	9903      	ldr	r1, [sp, #12]
 80142ac:	eddf 7a78 	vldr	s15, [pc, #480]	; 8014490 <pool_func_mp_array_f32+0x2b4>
 80142b0:	4588      	cmp	r8, r1
 80142b2:	dd24      	ble.n	80142fe <pool_func_mp_array_f32+0x122>
 80142b4:	4564      	cmp	r4, ip
 80142b6:	dd1e      	ble.n	80142f6 <pool_func_mp_array_f32+0x11a>
 80142b8:	2900      	cmp	r1, #0
 80142ba:	fb0a f601 	mul.w	r6, sl, r1
 80142be:	db1a      	blt.n	80142f6 <pool_func_mp_array_f32+0x11a>
 80142c0:	9b00      	ldr	r3, [sp, #0]
 80142c2:	4299      	cmp	r1, r3
 80142c4:	da17      	bge.n	80142f6 <pool_func_mp_array_f32+0x11a>
 80142c6:	f1bc 0f00 	cmp.w	ip, #0
 80142ca:	4663      	mov	r3, ip
 80142cc:	db46      	blt.n	801435c <pool_func_mp_array_f32+0x180>
 80142ce:	18f2      	adds	r2, r6, r3
 80142d0:	fb09 5202 	mla	r2, r9, r2, r5
 80142d4:	1c58      	adds	r0, r3, #1
 80142d6:	459a      	cmp	sl, r3
 80142d8:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 80142dc:	b203      	sxth	r3, r0
 80142de:	dd08      	ble.n	80142f2 <pool_func_mp_array_f32+0x116>
 80142e0:	ed92 7a00 	vldr	s14, [r2]
 80142e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80142e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ec:	bfb8      	it	lt
 80142ee:	eef0 7a47 	vmovlt.f32	s15, s14
 80142f2:	429c      	cmp	r4, r3
 80142f4:	dceb      	bgt.n	80142ce <pool_func_mp_array_f32+0xf2>
 80142f6:	3101      	adds	r1, #1
 80142f8:	b209      	sxth	r1, r1
 80142fa:	4588      	cmp	r8, r1
 80142fc:	dcda      	bgt.n	80142b4 <pool_func_mp_array_f32+0xd8>
 80142fe:	9b01      	ldr	r3, [sp, #4]
 8014300:	f10e 0e01 	add.w	lr, lr, #1
 8014304:	441d      	add	r5, r3
 8014306:	9b02      	ldr	r3, [sp, #8]
 8014308:	fa0f fe8e 	sxth.w	lr, lr
 801430c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8014310:	45ce      	cmp	lr, r9
 8014312:	edc5 7a00 	vstr	s15, [r5]
 8014316:	4675      	mov	r5, lr
 8014318:	dbc7      	blt.n	80142aa <pool_func_mp_array_f32+0xce>
 801431a:	9b07      	ldr	r3, [sp, #28]
 801431c:	9808      	ldr	r0, [sp, #32]
 801431e:	3301      	adds	r3, #1
 8014320:	b219      	sxth	r1, r3
 8014322:	9b05      	ldr	r3, [sp, #20]
 8014324:	9107      	str	r1, [sp, #28]
 8014326:	461a      	mov	r2, r3
 8014328:	4402      	add	r2, r0
 801432a:	9b04      	ldr	r3, [sp, #16]
 801432c:	b292      	uxth	r2, r2
 801432e:	9205      	str	r2, [sp, #20]
 8014330:	9a06      	ldr	r2, [sp, #24]
 8014332:	4403      	add	r3, r0
 8014334:	b29b      	uxth	r3, r3
 8014336:	428a      	cmp	r2, r1
 8014338:	9304      	str	r3, [sp, #16]
 801433a:	460b      	mov	r3, r1
 801433c:	dca7      	bgt.n	801428e <pool_func_mp_array_f32+0xb2>
 801433e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014340:	3301      	adds	r3, #1
 8014342:	b21a      	sxth	r2, r3
 8014344:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8014348:	440b      	add	r3, r1
 801434a:	b29b      	uxth	r3, r3
 801434c:	930c      	str	r3, [sp, #48]	; 0x30
 801434e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014350:	920e      	str	r2, [sp, #56]	; 0x38
 8014352:	4293      	cmp	r3, r2
 8014354:	dc89      	bgt.n	801426a <pool_func_mp_array_f32+0x8e>
 8014356:	b013      	add	sp, #76	; 0x4c
 8014358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801435c:	3301      	adds	r3, #1
 801435e:	b21b      	sxth	r3, r3
 8014360:	42bb      	cmp	r3, r7
 8014362:	dac6      	bge.n	80142f2 <pool_func_mp_array_f32+0x116>
 8014364:	3301      	adds	r3, #1
 8014366:	b21b      	sxth	r3, r3
 8014368:	42bb      	cmp	r3, r7
 801436a:	dbf7      	blt.n	801435c <pool_func_mp_array_f32+0x180>
 801436c:	e7c1      	b.n	80142f2 <pool_func_mp_array_f32+0x116>
 801436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014370:	9a00      	ldr	r2, [sp, #0]
 8014372:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014374:	1a9a      	subs	r2, r3, r2
 8014376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014378:	3a01      	subs	r2, #1
 801437a:	3b01      	subs	r3, #1
 801437c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8014380:	041b      	lsls	r3, r3, #16
 8014382:	f57f af59 	bpl.w	8014238 <pool_func_mp_array_f32+0x5c>
 8014386:	fb0a f309 	mul.w	r3, sl, r9
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8014390:	930e      	str	r3, [sp, #56]	; 0x38
 8014392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014394:	9001      	str	r0, [sp, #4]
 8014396:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 801439a:	9300      	str	r3, [sp, #0]
 801439c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80143a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143a2:	429a      	cmp	r2, r3
 80143a4:	ddd7      	ble.n	8014356 <pool_func_mp_array_f32+0x17a>
 80143a6:	9a00      	ldr	r2, [sp, #0]
 80143a8:	9906      	ldr	r1, [sp, #24]
 80143aa:	fa0f f882 	sxth.w	r8, r2
 80143ae:	2900      	cmp	r1, #0
 80143b0:	d062      	beq.n	8014478 <pool_func_mp_array_f32+0x29c>
 80143b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143b4:	fb01 f303 	mul.w	r3, r1, r3
 80143b8:	1a12      	subs	r2, r2, r0
 80143ba:	9305      	str	r3, [sp, #20]
 80143bc:	b213      	sxth	r3, r2
 80143be:	9307      	str	r3, [sp, #28]
 80143c0:	f1b9 0f00 	cmp.w	r9, #0
 80143c4:	d058      	beq.n	8014478 <pool_func_mp_array_f32+0x29c>
 80143c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143c8:	fb02 f303 	mul.w	r3, r2, r3
 80143cc:	2600      	movs	r6, #0
 80143ce:	930c      	str	r3, [sp, #48]	; 0x30
 80143d0:	9b04      	ldr	r3, [sp, #16]
 80143d2:	9303      	str	r3, [sp, #12]
 80143d4:	4637      	mov	r7, r6
 80143d6:	46b2      	mov	sl, r6
 80143d8:	9b05      	ldr	r3, [sp, #20]
 80143da:	9611      	str	r6, [sp, #68]	; 0x44
 80143dc:	eb0a 0b03 	add.w	fp, sl, r3
 80143e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143e2:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80143e6:	b235      	sxth	r5, r6
 80143e8:	18eb      	adds	r3, r5, r3
 80143ea:	f04f 0a00 	mov.w	sl, #0
 80143ee:	fb09 f303 	mul.w	r3, r9, r3
 80143f2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80143f4:	930a      	str	r3, [sp, #40]	; 0x28
 80143f6:	fb09 fb0b 	mul.w	fp, r9, fp
 80143fa:	46d6      	mov	lr, sl
 80143fc:	9807      	ldr	r0, [sp, #28]
 80143fe:	4580      	cmp	r8, r0
 8014400:	dd43      	ble.n	801448a <pool_func_mp_array_f32+0x2ae>
 8014402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014404:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014490 <pool_func_mp_array_f32+0x2b4>
 8014408:	eb0e 0403 	add.w	r4, lr, r3
 801440c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801440e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014412:	42a9      	cmp	r1, r5
 8014414:	dd0f      	ble.n	8014436 <pool_func_mp_array_f32+0x25a>
 8014416:	4622      	mov	r2, r4
 8014418:	462b      	mov	r3, r5
 801441a:	ed92 7a00 	vldr	s14, [r2]
 801441e:	3301      	adds	r3, #1
 8014420:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014428:	b21b      	sxth	r3, r3
 801442a:	bfb8      	it	lt
 801442c:	eef0 7a47 	vmovlt.f32	s15, s14
 8014430:	4299      	cmp	r1, r3
 8014432:	4462      	add	r2, ip
 8014434:	d1f1      	bne.n	801441a <pool_func_mp_array_f32+0x23e>
 8014436:	3001      	adds	r0, #1
 8014438:	b200      	sxth	r0, r0
 801443a:	4580      	cmp	r8, r0
 801443c:	4434      	add	r4, r6
 801443e:	d1e8      	bne.n	8014412 <pool_func_mp_array_f32+0x236>
 8014440:	f10a 0a01 	add.w	sl, sl, #1
 8014444:	9a02      	ldr	r2, [sp, #8]
 8014446:	eb0b 030e 	add.w	r3, fp, lr
 801444a:	fa0f fa8a 	sxth.w	sl, sl
 801444e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014452:	45ca      	cmp	sl, r9
 8014454:	edc3 7a00 	vstr	s15, [r3]
 8014458:	46d6      	mov	lr, sl
 801445a:	dbcf      	blt.n	80143fc <pool_func_mp_array_f32+0x220>
 801445c:	9b03      	ldr	r3, [sp, #12]
 801445e:	9a08      	ldr	r2, [sp, #32]
 8014460:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014462:	4413      	add	r3, r2
 8014464:	b29b      	uxth	r3, r3
 8014466:	3701      	adds	r7, #1
 8014468:	9303      	str	r3, [sp, #12]
 801446a:	9b06      	ldr	r3, [sp, #24]
 801446c:	b23f      	sxth	r7, r7
 801446e:	4416      	add	r6, r2
 8014470:	42bb      	cmp	r3, r7
 8014472:	b2b6      	uxth	r6, r6
 8014474:	46ba      	mov	sl, r7
 8014476:	dcaf      	bgt.n	80143d8 <pool_func_mp_array_f32+0x1fc>
 8014478:	9b00      	ldr	r3, [sp, #0]
 801447a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801447c:	4413      	add	r3, r2
 801447e:	b29b      	uxth	r3, r3
 8014480:	9300      	str	r3, [sp, #0]
 8014482:	9b01      	ldr	r3, [sp, #4]
 8014484:	3301      	adds	r3, #1
 8014486:	9301      	str	r3, [sp, #4]
 8014488:	e788      	b.n	801439c <pool_func_mp_array_f32+0x1c0>
 801448a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8014490 <pool_func_mp_array_f32+0x2b4>
 801448e:	e7d7      	b.n	8014440 <pool_func_mp_array_f32+0x264>
 8014490:	cf000000 	.word	0xcf000000

08014494 <ai_check_custom_types>:
 8014494:	4b13      	ldr	r3, [pc, #76]	; (80144e4 <ai_check_custom_types+0x50>)
 8014496:	b082      	sub	sp, #8
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	9301      	str	r3, [sp, #4]
 801449c:	b118      	cbz	r0, 80144a6 <ai_check_custom_types+0x12>
 801449e:	7803      	ldrb	r3, [r0, #0]
 80144a0:	2b03      	cmp	r3, #3
 80144a2:	d002      	beq.n	80144aa <ai_check_custom_types+0x16>
 80144a4:	2000      	movs	r0, #0
 80144a6:	b002      	add	sp, #8
 80144a8:	4770      	bx	lr
 80144aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d004      	beq.n	80144bc <ai_check_custom_types+0x28>
 80144b2:	2001      	movs	r0, #1
 80144b4:	f080 0001 	eor.w	r0, r0, #1
 80144b8:	b002      	add	sp, #8
 80144ba:	4770      	bx	lr
 80144bc:	7842      	ldrb	r2, [r0, #1]
 80144be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80144c2:	429a      	cmp	r2, r3
 80144c4:	f100 0001 	add.w	r0, r0, #1
 80144c8:	d1f3      	bne.n	80144b2 <ai_check_custom_types+0x1e>
 80144ca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80144ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d1ed      	bne.n	80144b2 <ai_check_custom_types+0x1e>
 80144d6:	7842      	ldrb	r2, [r0, #1]
 80144d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d1e8      	bne.n	80144b2 <ai_check_custom_types+0x1e>
 80144e0:	2000      	movs	r0, #0
 80144e2:	e7e7      	b.n	80144b4 <ai_check_custom_types+0x20>
 80144e4:	080196d0 	.word	0x080196d0

080144e8 <ai_layers_forward_all>:
 80144e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144ea:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80144ec:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80144ee:	4604      	mov	r4, r0
 80144f0:	b31e      	cbz	r6, 801453a <ai_layers_forward_all+0x52>
 80144f2:	b1cd      	cbz	r5, 8014528 <ai_layers_forward_all+0x40>
 80144f4:	6545      	str	r5, [r0, #84]	; 0x54
 80144f6:	4629      	mov	r1, r5
 80144f8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80144fa:	2001      	movs	r0, #1
 80144fc:	47b0      	blx	r6
 80144fe:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014500:	2700      	movs	r7, #0
 8014502:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8014504:	2002      	movs	r0, #2
 8014506:	47b0      	blx	r6
 8014508:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801450a:	692b      	ldr	r3, [r5, #16]
 801450c:	4628      	mov	r0, r5
 801450e:	4798      	blx	r3
 8014510:	68eb      	ldr	r3, [r5, #12]
 8014512:	429d      	cmp	r5, r3
 8014514:	f04f 0003 	mov.w	r0, #3
 8014518:	4619      	mov	r1, r3
 801451a:	d006      	beq.n	801452a <ai_layers_forward_all+0x42>
 801451c:	6563      	str	r3, [r4, #84]	; 0x54
 801451e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8014520:	47b0      	blx	r6
 8014522:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014524:	2900      	cmp	r1, #0
 8014526:	d1ec      	bne.n	8014502 <ai_layers_forward_all+0x1a>
 8014528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801452a:	2100      	movs	r1, #0
 801452c:	6567      	str	r7, [r4, #84]	; 0x54
 801452e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8014530:	47b0      	blx	r6
 8014532:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8014534:	2900      	cmp	r1, #0
 8014536:	d1e4      	bne.n	8014502 <ai_layers_forward_all+0x1a>
 8014538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453a:	2d00      	cmp	r5, #0
 801453c:	d0f4      	beq.n	8014528 <ai_layers_forward_all+0x40>
 801453e:	6545      	str	r5, [r0, #84]	; 0x54
 8014540:	692b      	ldr	r3, [r5, #16]
 8014542:	4628      	mov	r0, r5
 8014544:	4798      	blx	r3
 8014546:	68eb      	ldr	r3, [r5, #12]
 8014548:	42ab      	cmp	r3, r5
 801454a:	d004      	beq.n	8014556 <ai_layers_forward_all+0x6e>
 801454c:	6563      	str	r3, [r4, #84]	; 0x54
 801454e:	461d      	mov	r5, r3
 8014550:	2b00      	cmp	r3, #0
 8014552:	d1f5      	bne.n	8014540 <ai_layers_forward_all+0x58>
 8014554:	e7e8      	b.n	8014528 <ai_layers_forward_all+0x40>
 8014556:	2300      	movs	r3, #0
 8014558:	6563      	str	r3, [r4, #84]	; 0x54
 801455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801455c <ai_array_to_buffer_fmt>:
 801455c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8014560:	2b02      	cmp	r3, #2
 8014562:	d01f      	beq.n	80145a4 <ai_array_to_buffer_fmt+0x48>
 8014564:	4a1c      	ldr	r2, [pc, #112]	; (80145d8 <ai_array_to_buffer_fmt+0x7c>)
 8014566:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801456a:	4293      	cmp	r3, r2
 801456c:	d00a      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 801456e:	dc0d      	bgt.n	801458c <ai_array_to_buffer_fmt+0x30>
 8014570:	4a1a      	ldr	r2, [pc, #104]	; (80145dc <ai_array_to_buffer_fmt+0x80>)
 8014572:	4293      	cmp	r3, r2
 8014574:	d006      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 8014576:	dd1d      	ble.n	80145b4 <ai_array_to_buffer_fmt+0x58>
 8014578:	4a19      	ldr	r2, [pc, #100]	; (80145e0 <ai_array_to_buffer_fmt+0x84>)
 801457a:	4293      	cmp	r3, r2
 801457c:	d002      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 801457e:	320f      	adds	r2, #15
 8014580:	4293      	cmp	r3, r2
 8014582:	d10d      	bne.n	80145a0 <ai_array_to_buffer_fmt+0x44>
 8014584:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8014588:	4318      	orrs	r0, r3
 801458a:	4770      	bx	lr
 801458c:	4a15      	ldr	r2, [pc, #84]	; (80145e4 <ai_array_to_buffer_fmt+0x88>)
 801458e:	4293      	cmp	r3, r2
 8014590:	d0f8      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 8014592:	dd18      	ble.n	80145c6 <ai_array_to_buffer_fmt+0x6a>
 8014594:	4a14      	ldr	r2, [pc, #80]	; (80145e8 <ai_array_to_buffer_fmt+0x8c>)
 8014596:	4293      	cmp	r3, r2
 8014598:	d0f4      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 801459a:	4a14      	ldr	r2, [pc, #80]	; (80145ec <ai_array_to_buffer_fmt+0x90>)
 801459c:	4293      	cmp	r3, r2
 801459e:	d0f1      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145a0:	2340      	movs	r3, #64	; 0x40
 80145a2:	e7ef      	b.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145a4:	4b12      	ldr	r3, [pc, #72]	; (80145f0 <ai_array_to_buffer_fmt+0x94>)
 80145a6:	4003      	ands	r3, r0
 80145a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80145ac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80145b0:	4318      	orrs	r0, r3
 80145b2:	4770      	bx	lr
 80145b4:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d0e3      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d0df      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145c4:	e7ec      	b.n	80145a0 <ai_array_to_buffer_fmt+0x44>
 80145c6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d0da      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145ce:	3207      	adds	r2, #7
 80145d0:	4293      	cmp	r3, r2
 80145d2:	d0d7      	beq.n	8014584 <ai_array_to_buffer_fmt+0x28>
 80145d4:	e7e4      	b.n	80145a0 <ai_array_to_buffer_fmt+0x44>
 80145d6:	bf00      	nop
 80145d8:	00840040 	.word	0x00840040
 80145dc:	00040447 	.word	0x00040447
 80145e0:	00040840 	.word	0x00040840
 80145e4:	00840840 	.word	0x00840840
 80145e8:	0084084f 	.word	0x0084084f
 80145ec:	01821040 	.word	0x01821040
 80145f0:	00803fff 	.word	0x00803fff

080145f4 <ai_array_get_byte_size>:
 80145f4:	b1c1      	cbz	r1, 8014628 <ai_array_get_byte_size+0x34>
 80145f6:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80145fa:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80145fe:	4413      	add	r3, r2
 8014600:	fb01 f103 	mul.w	r1, r1, r3
 8014604:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8014608:	3107      	adds	r1, #7
 801460a:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801460e:	f021 0107 	bic.w	r1, r1, #7
 8014612:	2804      	cmp	r0, #4
 8014614:	fa21 f102 	lsr.w	r1, r1, r2
 8014618:	d008      	beq.n	801462c <ai_array_get_byte_size+0x38>
 801461a:	2808      	cmp	r0, #8
 801461c:	d101      	bne.n	8014622 <ai_array_get_byte_size+0x2e>
 801461e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8014622:	3107      	adds	r1, #7
 8014624:	08c8      	lsrs	r0, r1, #3
 8014626:	4770      	bx	lr
 8014628:	4608      	mov	r0, r1
 801462a:	4770      	bx	lr
 801462c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8014630:	3107      	adds	r1, #7
 8014632:	08c8      	lsrs	r0, r1, #3
 8014634:	4770      	bx	lr
 8014636:	bf00      	nop

08014638 <__errno>:
 8014638:	4b01      	ldr	r3, [pc, #4]	; (8014640 <__errno+0x8>)
 801463a:	6818      	ldr	r0, [r3, #0]
 801463c:	4770      	bx	lr
 801463e:	bf00      	nop
 8014640:	200008ac 	.word	0x200008ac

08014644 <__libc_init_array>:
 8014644:	b570      	push	{r4, r5, r6, lr}
 8014646:	4d0d      	ldr	r5, [pc, #52]	; (801467c <__libc_init_array+0x38>)
 8014648:	4c0d      	ldr	r4, [pc, #52]	; (8014680 <__libc_init_array+0x3c>)
 801464a:	1b64      	subs	r4, r4, r5
 801464c:	10a4      	asrs	r4, r4, #2
 801464e:	2600      	movs	r6, #0
 8014650:	42a6      	cmp	r6, r4
 8014652:	d109      	bne.n	8014668 <__libc_init_array+0x24>
 8014654:	4d0b      	ldr	r5, [pc, #44]	; (8014684 <__libc_init_array+0x40>)
 8014656:	4c0c      	ldr	r4, [pc, #48]	; (8014688 <__libc_init_array+0x44>)
 8014658:	f004 fea8 	bl	80193ac <_init>
 801465c:	1b64      	subs	r4, r4, r5
 801465e:	10a4      	asrs	r4, r4, #2
 8014660:	2600      	movs	r6, #0
 8014662:	42a6      	cmp	r6, r4
 8014664:	d105      	bne.n	8014672 <__libc_init_array+0x2e>
 8014666:	bd70      	pop	{r4, r5, r6, pc}
 8014668:	f855 3b04 	ldr.w	r3, [r5], #4
 801466c:	4798      	blx	r3
 801466e:	3601      	adds	r6, #1
 8014670:	e7ee      	b.n	8014650 <__libc_init_array+0xc>
 8014672:	f855 3b04 	ldr.w	r3, [r5], #4
 8014676:	4798      	blx	r3
 8014678:	3601      	adds	r6, #1
 801467a:	e7f2      	b.n	8014662 <__libc_init_array+0x1e>
 801467c:	0802bcf0 	.word	0x0802bcf0
 8014680:	0802bcf0 	.word	0x0802bcf0
 8014684:	0802bcf0 	.word	0x0802bcf0
 8014688:	0802bcf4 	.word	0x0802bcf4

0801468c <malloc>:
 801468c:	4b02      	ldr	r3, [pc, #8]	; (8014698 <malloc+0xc>)
 801468e:	4601      	mov	r1, r0
 8014690:	6818      	ldr	r0, [r3, #0]
 8014692:	f000 b88d 	b.w	80147b0 <_malloc_r>
 8014696:	bf00      	nop
 8014698:	200008ac 	.word	0x200008ac

0801469c <free>:
 801469c:	4b02      	ldr	r3, [pc, #8]	; (80146a8 <free+0xc>)
 801469e:	4601      	mov	r1, r0
 80146a0:	6818      	ldr	r0, [r3, #0]
 80146a2:	f000 b819 	b.w	80146d8 <_free_r>
 80146a6:	bf00      	nop
 80146a8:	200008ac 	.word	0x200008ac

080146ac <memcpy>:
 80146ac:	440a      	add	r2, r1
 80146ae:	4291      	cmp	r1, r2
 80146b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80146b4:	d100      	bne.n	80146b8 <memcpy+0xc>
 80146b6:	4770      	bx	lr
 80146b8:	b510      	push	{r4, lr}
 80146ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80146be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80146c2:	4291      	cmp	r1, r2
 80146c4:	d1f9      	bne.n	80146ba <memcpy+0xe>
 80146c6:	bd10      	pop	{r4, pc}

080146c8 <memset>:
 80146c8:	4402      	add	r2, r0
 80146ca:	4603      	mov	r3, r0
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d100      	bne.n	80146d2 <memset+0xa>
 80146d0:	4770      	bx	lr
 80146d2:	f803 1b01 	strb.w	r1, [r3], #1
 80146d6:	e7f9      	b.n	80146cc <memset+0x4>

080146d8 <_free_r>:
 80146d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80146da:	2900      	cmp	r1, #0
 80146dc:	d044      	beq.n	8014768 <_free_r+0x90>
 80146de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80146e2:	9001      	str	r0, [sp, #4]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f1a1 0404 	sub.w	r4, r1, #4
 80146ea:	bfb8      	it	lt
 80146ec:	18e4      	addlt	r4, r4, r3
 80146ee:	f003 fc1f 	bl	8017f30 <__malloc_lock>
 80146f2:	4a1e      	ldr	r2, [pc, #120]	; (801476c <_free_r+0x94>)
 80146f4:	9801      	ldr	r0, [sp, #4]
 80146f6:	6813      	ldr	r3, [r2, #0]
 80146f8:	b933      	cbnz	r3, 8014708 <_free_r+0x30>
 80146fa:	6063      	str	r3, [r4, #4]
 80146fc:	6014      	str	r4, [r2, #0]
 80146fe:	b003      	add	sp, #12
 8014700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014704:	f003 bc1a 	b.w	8017f3c <__malloc_unlock>
 8014708:	42a3      	cmp	r3, r4
 801470a:	d908      	bls.n	801471e <_free_r+0x46>
 801470c:	6825      	ldr	r5, [r4, #0]
 801470e:	1961      	adds	r1, r4, r5
 8014710:	428b      	cmp	r3, r1
 8014712:	bf01      	itttt	eq
 8014714:	6819      	ldreq	r1, [r3, #0]
 8014716:	685b      	ldreq	r3, [r3, #4]
 8014718:	1949      	addeq	r1, r1, r5
 801471a:	6021      	streq	r1, [r4, #0]
 801471c:	e7ed      	b.n	80146fa <_free_r+0x22>
 801471e:	461a      	mov	r2, r3
 8014720:	685b      	ldr	r3, [r3, #4]
 8014722:	b10b      	cbz	r3, 8014728 <_free_r+0x50>
 8014724:	42a3      	cmp	r3, r4
 8014726:	d9fa      	bls.n	801471e <_free_r+0x46>
 8014728:	6811      	ldr	r1, [r2, #0]
 801472a:	1855      	adds	r5, r2, r1
 801472c:	42a5      	cmp	r5, r4
 801472e:	d10b      	bne.n	8014748 <_free_r+0x70>
 8014730:	6824      	ldr	r4, [r4, #0]
 8014732:	4421      	add	r1, r4
 8014734:	1854      	adds	r4, r2, r1
 8014736:	42a3      	cmp	r3, r4
 8014738:	6011      	str	r1, [r2, #0]
 801473a:	d1e0      	bne.n	80146fe <_free_r+0x26>
 801473c:	681c      	ldr	r4, [r3, #0]
 801473e:	685b      	ldr	r3, [r3, #4]
 8014740:	6053      	str	r3, [r2, #4]
 8014742:	4421      	add	r1, r4
 8014744:	6011      	str	r1, [r2, #0]
 8014746:	e7da      	b.n	80146fe <_free_r+0x26>
 8014748:	d902      	bls.n	8014750 <_free_r+0x78>
 801474a:	230c      	movs	r3, #12
 801474c:	6003      	str	r3, [r0, #0]
 801474e:	e7d6      	b.n	80146fe <_free_r+0x26>
 8014750:	6825      	ldr	r5, [r4, #0]
 8014752:	1961      	adds	r1, r4, r5
 8014754:	428b      	cmp	r3, r1
 8014756:	bf04      	itt	eq
 8014758:	6819      	ldreq	r1, [r3, #0]
 801475a:	685b      	ldreq	r3, [r3, #4]
 801475c:	6063      	str	r3, [r4, #4]
 801475e:	bf04      	itt	eq
 8014760:	1949      	addeq	r1, r1, r5
 8014762:	6021      	streq	r1, [r4, #0]
 8014764:	6054      	str	r4, [r2, #4]
 8014766:	e7ca      	b.n	80146fe <_free_r+0x26>
 8014768:	b003      	add	sp, #12
 801476a:	bd30      	pop	{r4, r5, pc}
 801476c:	20001af8 	.word	0x20001af8

08014770 <sbrk_aligned>:
 8014770:	b570      	push	{r4, r5, r6, lr}
 8014772:	4e0e      	ldr	r6, [pc, #56]	; (80147ac <sbrk_aligned+0x3c>)
 8014774:	460c      	mov	r4, r1
 8014776:	6831      	ldr	r1, [r6, #0]
 8014778:	4605      	mov	r5, r0
 801477a:	b911      	cbnz	r1, 8014782 <sbrk_aligned+0x12>
 801477c:	f000 ff7c 	bl	8015678 <_sbrk_r>
 8014780:	6030      	str	r0, [r6, #0]
 8014782:	4621      	mov	r1, r4
 8014784:	4628      	mov	r0, r5
 8014786:	f000 ff77 	bl	8015678 <_sbrk_r>
 801478a:	1c43      	adds	r3, r0, #1
 801478c:	d00a      	beq.n	80147a4 <sbrk_aligned+0x34>
 801478e:	1cc4      	adds	r4, r0, #3
 8014790:	f024 0403 	bic.w	r4, r4, #3
 8014794:	42a0      	cmp	r0, r4
 8014796:	d007      	beq.n	80147a8 <sbrk_aligned+0x38>
 8014798:	1a21      	subs	r1, r4, r0
 801479a:	4628      	mov	r0, r5
 801479c:	f000 ff6c 	bl	8015678 <_sbrk_r>
 80147a0:	3001      	adds	r0, #1
 80147a2:	d101      	bne.n	80147a8 <sbrk_aligned+0x38>
 80147a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80147a8:	4620      	mov	r0, r4
 80147aa:	bd70      	pop	{r4, r5, r6, pc}
 80147ac:	20001afc 	.word	0x20001afc

080147b0 <_malloc_r>:
 80147b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147b4:	1ccd      	adds	r5, r1, #3
 80147b6:	f025 0503 	bic.w	r5, r5, #3
 80147ba:	3508      	adds	r5, #8
 80147bc:	2d0c      	cmp	r5, #12
 80147be:	bf38      	it	cc
 80147c0:	250c      	movcc	r5, #12
 80147c2:	2d00      	cmp	r5, #0
 80147c4:	4607      	mov	r7, r0
 80147c6:	db01      	blt.n	80147cc <_malloc_r+0x1c>
 80147c8:	42a9      	cmp	r1, r5
 80147ca:	d905      	bls.n	80147d8 <_malloc_r+0x28>
 80147cc:	230c      	movs	r3, #12
 80147ce:	603b      	str	r3, [r7, #0]
 80147d0:	2600      	movs	r6, #0
 80147d2:	4630      	mov	r0, r6
 80147d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d8:	4e2e      	ldr	r6, [pc, #184]	; (8014894 <_malloc_r+0xe4>)
 80147da:	f003 fba9 	bl	8017f30 <__malloc_lock>
 80147de:	6833      	ldr	r3, [r6, #0]
 80147e0:	461c      	mov	r4, r3
 80147e2:	bb34      	cbnz	r4, 8014832 <_malloc_r+0x82>
 80147e4:	4629      	mov	r1, r5
 80147e6:	4638      	mov	r0, r7
 80147e8:	f7ff ffc2 	bl	8014770 <sbrk_aligned>
 80147ec:	1c43      	adds	r3, r0, #1
 80147ee:	4604      	mov	r4, r0
 80147f0:	d14d      	bne.n	801488e <_malloc_r+0xde>
 80147f2:	6834      	ldr	r4, [r6, #0]
 80147f4:	4626      	mov	r6, r4
 80147f6:	2e00      	cmp	r6, #0
 80147f8:	d140      	bne.n	801487c <_malloc_r+0xcc>
 80147fa:	6823      	ldr	r3, [r4, #0]
 80147fc:	4631      	mov	r1, r6
 80147fe:	4638      	mov	r0, r7
 8014800:	eb04 0803 	add.w	r8, r4, r3
 8014804:	f000 ff38 	bl	8015678 <_sbrk_r>
 8014808:	4580      	cmp	r8, r0
 801480a:	d13a      	bne.n	8014882 <_malloc_r+0xd2>
 801480c:	6821      	ldr	r1, [r4, #0]
 801480e:	3503      	adds	r5, #3
 8014810:	1a6d      	subs	r5, r5, r1
 8014812:	f025 0503 	bic.w	r5, r5, #3
 8014816:	3508      	adds	r5, #8
 8014818:	2d0c      	cmp	r5, #12
 801481a:	bf38      	it	cc
 801481c:	250c      	movcc	r5, #12
 801481e:	4629      	mov	r1, r5
 8014820:	4638      	mov	r0, r7
 8014822:	f7ff ffa5 	bl	8014770 <sbrk_aligned>
 8014826:	3001      	adds	r0, #1
 8014828:	d02b      	beq.n	8014882 <_malloc_r+0xd2>
 801482a:	6823      	ldr	r3, [r4, #0]
 801482c:	442b      	add	r3, r5
 801482e:	6023      	str	r3, [r4, #0]
 8014830:	e00e      	b.n	8014850 <_malloc_r+0xa0>
 8014832:	6822      	ldr	r2, [r4, #0]
 8014834:	1b52      	subs	r2, r2, r5
 8014836:	d41e      	bmi.n	8014876 <_malloc_r+0xc6>
 8014838:	2a0b      	cmp	r2, #11
 801483a:	d916      	bls.n	801486a <_malloc_r+0xba>
 801483c:	1961      	adds	r1, r4, r5
 801483e:	42a3      	cmp	r3, r4
 8014840:	6025      	str	r5, [r4, #0]
 8014842:	bf18      	it	ne
 8014844:	6059      	strne	r1, [r3, #4]
 8014846:	6863      	ldr	r3, [r4, #4]
 8014848:	bf08      	it	eq
 801484a:	6031      	streq	r1, [r6, #0]
 801484c:	5162      	str	r2, [r4, r5]
 801484e:	604b      	str	r3, [r1, #4]
 8014850:	4638      	mov	r0, r7
 8014852:	f104 060b 	add.w	r6, r4, #11
 8014856:	f003 fb71 	bl	8017f3c <__malloc_unlock>
 801485a:	f026 0607 	bic.w	r6, r6, #7
 801485e:	1d23      	adds	r3, r4, #4
 8014860:	1af2      	subs	r2, r6, r3
 8014862:	d0b6      	beq.n	80147d2 <_malloc_r+0x22>
 8014864:	1b9b      	subs	r3, r3, r6
 8014866:	50a3      	str	r3, [r4, r2]
 8014868:	e7b3      	b.n	80147d2 <_malloc_r+0x22>
 801486a:	6862      	ldr	r2, [r4, #4]
 801486c:	42a3      	cmp	r3, r4
 801486e:	bf0c      	ite	eq
 8014870:	6032      	streq	r2, [r6, #0]
 8014872:	605a      	strne	r2, [r3, #4]
 8014874:	e7ec      	b.n	8014850 <_malloc_r+0xa0>
 8014876:	4623      	mov	r3, r4
 8014878:	6864      	ldr	r4, [r4, #4]
 801487a:	e7b2      	b.n	80147e2 <_malloc_r+0x32>
 801487c:	4634      	mov	r4, r6
 801487e:	6876      	ldr	r6, [r6, #4]
 8014880:	e7b9      	b.n	80147f6 <_malloc_r+0x46>
 8014882:	230c      	movs	r3, #12
 8014884:	603b      	str	r3, [r7, #0]
 8014886:	4638      	mov	r0, r7
 8014888:	f003 fb58 	bl	8017f3c <__malloc_unlock>
 801488c:	e7a1      	b.n	80147d2 <_malloc_r+0x22>
 801488e:	6025      	str	r5, [r4, #0]
 8014890:	e7de      	b.n	8014850 <_malloc_r+0xa0>
 8014892:	bf00      	nop
 8014894:	20001af8 	.word	0x20001af8

08014898 <__cvt>:
 8014898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801489c:	ec55 4b10 	vmov	r4, r5, d0
 80148a0:	2d00      	cmp	r5, #0
 80148a2:	460e      	mov	r6, r1
 80148a4:	4619      	mov	r1, r3
 80148a6:	462b      	mov	r3, r5
 80148a8:	bfbb      	ittet	lt
 80148aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80148ae:	461d      	movlt	r5, r3
 80148b0:	2300      	movge	r3, #0
 80148b2:	232d      	movlt	r3, #45	; 0x2d
 80148b4:	700b      	strb	r3, [r1, #0]
 80148b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80148bc:	4691      	mov	r9, r2
 80148be:	f023 0820 	bic.w	r8, r3, #32
 80148c2:	bfbc      	itt	lt
 80148c4:	4622      	movlt	r2, r4
 80148c6:	4614      	movlt	r4, r2
 80148c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80148cc:	d005      	beq.n	80148da <__cvt+0x42>
 80148ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80148d2:	d100      	bne.n	80148d6 <__cvt+0x3e>
 80148d4:	3601      	adds	r6, #1
 80148d6:	2102      	movs	r1, #2
 80148d8:	e000      	b.n	80148dc <__cvt+0x44>
 80148da:	2103      	movs	r1, #3
 80148dc:	ab03      	add	r3, sp, #12
 80148de:	9301      	str	r3, [sp, #4]
 80148e0:	ab02      	add	r3, sp, #8
 80148e2:	9300      	str	r3, [sp, #0]
 80148e4:	ec45 4b10 	vmov	d0, r4, r5
 80148e8:	4653      	mov	r3, sl
 80148ea:	4632      	mov	r2, r6
 80148ec:	f001 ff7c 	bl	80167e8 <_dtoa_r>
 80148f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80148f4:	4607      	mov	r7, r0
 80148f6:	d102      	bne.n	80148fe <__cvt+0x66>
 80148f8:	f019 0f01 	tst.w	r9, #1
 80148fc:	d022      	beq.n	8014944 <__cvt+0xac>
 80148fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014902:	eb07 0906 	add.w	r9, r7, r6
 8014906:	d110      	bne.n	801492a <__cvt+0x92>
 8014908:	783b      	ldrb	r3, [r7, #0]
 801490a:	2b30      	cmp	r3, #48	; 0x30
 801490c:	d10a      	bne.n	8014924 <__cvt+0x8c>
 801490e:	2200      	movs	r2, #0
 8014910:	2300      	movs	r3, #0
 8014912:	4620      	mov	r0, r4
 8014914:	4629      	mov	r1, r5
 8014916:	f7ec f8e7 	bl	8000ae8 <__aeabi_dcmpeq>
 801491a:	b918      	cbnz	r0, 8014924 <__cvt+0x8c>
 801491c:	f1c6 0601 	rsb	r6, r6, #1
 8014920:	f8ca 6000 	str.w	r6, [sl]
 8014924:	f8da 3000 	ldr.w	r3, [sl]
 8014928:	4499      	add	r9, r3
 801492a:	2200      	movs	r2, #0
 801492c:	2300      	movs	r3, #0
 801492e:	4620      	mov	r0, r4
 8014930:	4629      	mov	r1, r5
 8014932:	f7ec f8d9 	bl	8000ae8 <__aeabi_dcmpeq>
 8014936:	b108      	cbz	r0, 801493c <__cvt+0xa4>
 8014938:	f8cd 900c 	str.w	r9, [sp, #12]
 801493c:	2230      	movs	r2, #48	; 0x30
 801493e:	9b03      	ldr	r3, [sp, #12]
 8014940:	454b      	cmp	r3, r9
 8014942:	d307      	bcc.n	8014954 <__cvt+0xbc>
 8014944:	9b03      	ldr	r3, [sp, #12]
 8014946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014948:	1bdb      	subs	r3, r3, r7
 801494a:	4638      	mov	r0, r7
 801494c:	6013      	str	r3, [r2, #0]
 801494e:	b004      	add	sp, #16
 8014950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014954:	1c59      	adds	r1, r3, #1
 8014956:	9103      	str	r1, [sp, #12]
 8014958:	701a      	strb	r2, [r3, #0]
 801495a:	e7f0      	b.n	801493e <__cvt+0xa6>

0801495c <__exponent>:
 801495c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801495e:	4603      	mov	r3, r0
 8014960:	2900      	cmp	r1, #0
 8014962:	bfb8      	it	lt
 8014964:	4249      	neglt	r1, r1
 8014966:	f803 2b02 	strb.w	r2, [r3], #2
 801496a:	bfb4      	ite	lt
 801496c:	222d      	movlt	r2, #45	; 0x2d
 801496e:	222b      	movge	r2, #43	; 0x2b
 8014970:	2909      	cmp	r1, #9
 8014972:	7042      	strb	r2, [r0, #1]
 8014974:	dd2a      	ble.n	80149cc <__exponent+0x70>
 8014976:	f10d 0407 	add.w	r4, sp, #7
 801497a:	46a4      	mov	ip, r4
 801497c:	270a      	movs	r7, #10
 801497e:	46a6      	mov	lr, r4
 8014980:	460a      	mov	r2, r1
 8014982:	fb91 f6f7 	sdiv	r6, r1, r7
 8014986:	fb07 1516 	mls	r5, r7, r6, r1
 801498a:	3530      	adds	r5, #48	; 0x30
 801498c:	2a63      	cmp	r2, #99	; 0x63
 801498e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014996:	4631      	mov	r1, r6
 8014998:	dcf1      	bgt.n	801497e <__exponent+0x22>
 801499a:	3130      	adds	r1, #48	; 0x30
 801499c:	f1ae 0502 	sub.w	r5, lr, #2
 80149a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80149a4:	1c44      	adds	r4, r0, #1
 80149a6:	4629      	mov	r1, r5
 80149a8:	4561      	cmp	r1, ip
 80149aa:	d30a      	bcc.n	80149c2 <__exponent+0x66>
 80149ac:	f10d 0209 	add.w	r2, sp, #9
 80149b0:	eba2 020e 	sub.w	r2, r2, lr
 80149b4:	4565      	cmp	r5, ip
 80149b6:	bf88      	it	hi
 80149b8:	2200      	movhi	r2, #0
 80149ba:	4413      	add	r3, r2
 80149bc:	1a18      	subs	r0, r3, r0
 80149be:	b003      	add	sp, #12
 80149c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80149c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80149ca:	e7ed      	b.n	80149a8 <__exponent+0x4c>
 80149cc:	2330      	movs	r3, #48	; 0x30
 80149ce:	3130      	adds	r1, #48	; 0x30
 80149d0:	7083      	strb	r3, [r0, #2]
 80149d2:	70c1      	strb	r1, [r0, #3]
 80149d4:	1d03      	adds	r3, r0, #4
 80149d6:	e7f1      	b.n	80149bc <__exponent+0x60>

080149d8 <_printf_float>:
 80149d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149dc:	ed2d 8b02 	vpush	{d8}
 80149e0:	b08d      	sub	sp, #52	; 0x34
 80149e2:	460c      	mov	r4, r1
 80149e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80149e8:	4616      	mov	r6, r2
 80149ea:	461f      	mov	r7, r3
 80149ec:	4605      	mov	r5, r0
 80149ee:	f003 fa21 	bl	8017e34 <_localeconv_r>
 80149f2:	f8d0 a000 	ldr.w	sl, [r0]
 80149f6:	4650      	mov	r0, sl
 80149f8:	f7eb fbfa 	bl	80001f0 <strlen>
 80149fc:	2300      	movs	r3, #0
 80149fe:	930a      	str	r3, [sp, #40]	; 0x28
 8014a00:	6823      	ldr	r3, [r4, #0]
 8014a02:	9305      	str	r3, [sp, #20]
 8014a04:	f8d8 3000 	ldr.w	r3, [r8]
 8014a08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014a0c:	3307      	adds	r3, #7
 8014a0e:	f023 0307 	bic.w	r3, r3, #7
 8014a12:	f103 0208 	add.w	r2, r3, #8
 8014a16:	f8c8 2000 	str.w	r2, [r8]
 8014a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014a22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014a26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014a2a:	9307      	str	r3, [sp, #28]
 8014a2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8014a30:	ee08 0a10 	vmov	s16, r0
 8014a34:	4b9f      	ldr	r3, [pc, #636]	; (8014cb4 <_printf_float+0x2dc>)
 8014a36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a3e:	f7ec f885 	bl	8000b4c <__aeabi_dcmpun>
 8014a42:	bb88      	cbnz	r0, 8014aa8 <_printf_float+0xd0>
 8014a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a48:	4b9a      	ldr	r3, [pc, #616]	; (8014cb4 <_printf_float+0x2dc>)
 8014a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a4e:	f7ec f85f 	bl	8000b10 <__aeabi_dcmple>
 8014a52:	bb48      	cbnz	r0, 8014aa8 <_printf_float+0xd0>
 8014a54:	2200      	movs	r2, #0
 8014a56:	2300      	movs	r3, #0
 8014a58:	4640      	mov	r0, r8
 8014a5a:	4649      	mov	r1, r9
 8014a5c:	f7ec f84e 	bl	8000afc <__aeabi_dcmplt>
 8014a60:	b110      	cbz	r0, 8014a68 <_printf_float+0x90>
 8014a62:	232d      	movs	r3, #45	; 0x2d
 8014a64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a68:	4b93      	ldr	r3, [pc, #588]	; (8014cb8 <_printf_float+0x2e0>)
 8014a6a:	4894      	ldr	r0, [pc, #592]	; (8014cbc <_printf_float+0x2e4>)
 8014a6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014a70:	bf94      	ite	ls
 8014a72:	4698      	movls	r8, r3
 8014a74:	4680      	movhi	r8, r0
 8014a76:	2303      	movs	r3, #3
 8014a78:	6123      	str	r3, [r4, #16]
 8014a7a:	9b05      	ldr	r3, [sp, #20]
 8014a7c:	f023 0204 	bic.w	r2, r3, #4
 8014a80:	6022      	str	r2, [r4, #0]
 8014a82:	f04f 0900 	mov.w	r9, #0
 8014a86:	9700      	str	r7, [sp, #0]
 8014a88:	4633      	mov	r3, r6
 8014a8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8014a8c:	4621      	mov	r1, r4
 8014a8e:	4628      	mov	r0, r5
 8014a90:	f000 f9d8 	bl	8014e44 <_printf_common>
 8014a94:	3001      	adds	r0, #1
 8014a96:	f040 8090 	bne.w	8014bba <_printf_float+0x1e2>
 8014a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a9e:	b00d      	add	sp, #52	; 0x34
 8014aa0:	ecbd 8b02 	vpop	{d8}
 8014aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aa8:	4642      	mov	r2, r8
 8014aaa:	464b      	mov	r3, r9
 8014aac:	4640      	mov	r0, r8
 8014aae:	4649      	mov	r1, r9
 8014ab0:	f7ec f84c 	bl	8000b4c <__aeabi_dcmpun>
 8014ab4:	b140      	cbz	r0, 8014ac8 <_printf_float+0xf0>
 8014ab6:	464b      	mov	r3, r9
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	bfbc      	itt	lt
 8014abc:	232d      	movlt	r3, #45	; 0x2d
 8014abe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014ac2:	487f      	ldr	r0, [pc, #508]	; (8014cc0 <_printf_float+0x2e8>)
 8014ac4:	4b7f      	ldr	r3, [pc, #508]	; (8014cc4 <_printf_float+0x2ec>)
 8014ac6:	e7d1      	b.n	8014a6c <_printf_float+0x94>
 8014ac8:	6863      	ldr	r3, [r4, #4]
 8014aca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014ace:	9206      	str	r2, [sp, #24]
 8014ad0:	1c5a      	adds	r2, r3, #1
 8014ad2:	d13f      	bne.n	8014b54 <_printf_float+0x17c>
 8014ad4:	2306      	movs	r3, #6
 8014ad6:	6063      	str	r3, [r4, #4]
 8014ad8:	9b05      	ldr	r3, [sp, #20]
 8014ada:	6861      	ldr	r1, [r4, #4]
 8014adc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	9303      	str	r3, [sp, #12]
 8014ae4:	ab0a      	add	r3, sp, #40	; 0x28
 8014ae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014aea:	ab09      	add	r3, sp, #36	; 0x24
 8014aec:	ec49 8b10 	vmov	d0, r8, r9
 8014af0:	9300      	str	r3, [sp, #0]
 8014af2:	6022      	str	r2, [r4, #0]
 8014af4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014af8:	4628      	mov	r0, r5
 8014afa:	f7ff fecd 	bl	8014898 <__cvt>
 8014afe:	9b06      	ldr	r3, [sp, #24]
 8014b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b02:	2b47      	cmp	r3, #71	; 0x47
 8014b04:	4680      	mov	r8, r0
 8014b06:	d108      	bne.n	8014b1a <_printf_float+0x142>
 8014b08:	1cc8      	adds	r0, r1, #3
 8014b0a:	db02      	blt.n	8014b12 <_printf_float+0x13a>
 8014b0c:	6863      	ldr	r3, [r4, #4]
 8014b0e:	4299      	cmp	r1, r3
 8014b10:	dd41      	ble.n	8014b96 <_printf_float+0x1be>
 8014b12:	f1ab 0b02 	sub.w	fp, fp, #2
 8014b16:	fa5f fb8b 	uxtb.w	fp, fp
 8014b1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014b1e:	d820      	bhi.n	8014b62 <_printf_float+0x18a>
 8014b20:	3901      	subs	r1, #1
 8014b22:	465a      	mov	r2, fp
 8014b24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014b28:	9109      	str	r1, [sp, #36]	; 0x24
 8014b2a:	f7ff ff17 	bl	801495c <__exponent>
 8014b2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014b30:	1813      	adds	r3, r2, r0
 8014b32:	2a01      	cmp	r2, #1
 8014b34:	4681      	mov	r9, r0
 8014b36:	6123      	str	r3, [r4, #16]
 8014b38:	dc02      	bgt.n	8014b40 <_printf_float+0x168>
 8014b3a:	6822      	ldr	r2, [r4, #0]
 8014b3c:	07d2      	lsls	r2, r2, #31
 8014b3e:	d501      	bpl.n	8014b44 <_printf_float+0x16c>
 8014b40:	3301      	adds	r3, #1
 8014b42:	6123      	str	r3, [r4, #16]
 8014b44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d09c      	beq.n	8014a86 <_printf_float+0xae>
 8014b4c:	232d      	movs	r3, #45	; 0x2d
 8014b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b52:	e798      	b.n	8014a86 <_printf_float+0xae>
 8014b54:	9a06      	ldr	r2, [sp, #24]
 8014b56:	2a47      	cmp	r2, #71	; 0x47
 8014b58:	d1be      	bne.n	8014ad8 <_printf_float+0x100>
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d1bc      	bne.n	8014ad8 <_printf_float+0x100>
 8014b5e:	2301      	movs	r3, #1
 8014b60:	e7b9      	b.n	8014ad6 <_printf_float+0xfe>
 8014b62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014b66:	d118      	bne.n	8014b9a <_printf_float+0x1c2>
 8014b68:	2900      	cmp	r1, #0
 8014b6a:	6863      	ldr	r3, [r4, #4]
 8014b6c:	dd0b      	ble.n	8014b86 <_printf_float+0x1ae>
 8014b6e:	6121      	str	r1, [r4, #16]
 8014b70:	b913      	cbnz	r3, 8014b78 <_printf_float+0x1a0>
 8014b72:	6822      	ldr	r2, [r4, #0]
 8014b74:	07d0      	lsls	r0, r2, #31
 8014b76:	d502      	bpl.n	8014b7e <_printf_float+0x1a6>
 8014b78:	3301      	adds	r3, #1
 8014b7a:	440b      	add	r3, r1
 8014b7c:	6123      	str	r3, [r4, #16]
 8014b7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014b80:	f04f 0900 	mov.w	r9, #0
 8014b84:	e7de      	b.n	8014b44 <_printf_float+0x16c>
 8014b86:	b913      	cbnz	r3, 8014b8e <_printf_float+0x1b6>
 8014b88:	6822      	ldr	r2, [r4, #0]
 8014b8a:	07d2      	lsls	r2, r2, #31
 8014b8c:	d501      	bpl.n	8014b92 <_printf_float+0x1ba>
 8014b8e:	3302      	adds	r3, #2
 8014b90:	e7f4      	b.n	8014b7c <_printf_float+0x1a4>
 8014b92:	2301      	movs	r3, #1
 8014b94:	e7f2      	b.n	8014b7c <_printf_float+0x1a4>
 8014b96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b9c:	4299      	cmp	r1, r3
 8014b9e:	db05      	blt.n	8014bac <_printf_float+0x1d4>
 8014ba0:	6823      	ldr	r3, [r4, #0]
 8014ba2:	6121      	str	r1, [r4, #16]
 8014ba4:	07d8      	lsls	r0, r3, #31
 8014ba6:	d5ea      	bpl.n	8014b7e <_printf_float+0x1a6>
 8014ba8:	1c4b      	adds	r3, r1, #1
 8014baa:	e7e7      	b.n	8014b7c <_printf_float+0x1a4>
 8014bac:	2900      	cmp	r1, #0
 8014bae:	bfd4      	ite	le
 8014bb0:	f1c1 0202 	rsble	r2, r1, #2
 8014bb4:	2201      	movgt	r2, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	e7e0      	b.n	8014b7c <_printf_float+0x1a4>
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	055a      	lsls	r2, r3, #21
 8014bbe:	d407      	bmi.n	8014bd0 <_printf_float+0x1f8>
 8014bc0:	6923      	ldr	r3, [r4, #16]
 8014bc2:	4642      	mov	r2, r8
 8014bc4:	4631      	mov	r1, r6
 8014bc6:	4628      	mov	r0, r5
 8014bc8:	47b8      	blx	r7
 8014bca:	3001      	adds	r0, #1
 8014bcc:	d12c      	bne.n	8014c28 <_printf_float+0x250>
 8014bce:	e764      	b.n	8014a9a <_printf_float+0xc2>
 8014bd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014bd4:	f240 80e0 	bls.w	8014d98 <_printf_float+0x3c0>
 8014bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014bdc:	2200      	movs	r2, #0
 8014bde:	2300      	movs	r3, #0
 8014be0:	f7eb ff82 	bl	8000ae8 <__aeabi_dcmpeq>
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d034      	beq.n	8014c52 <_printf_float+0x27a>
 8014be8:	4a37      	ldr	r2, [pc, #220]	; (8014cc8 <_printf_float+0x2f0>)
 8014bea:	2301      	movs	r3, #1
 8014bec:	4631      	mov	r1, r6
 8014bee:	4628      	mov	r0, r5
 8014bf0:	47b8      	blx	r7
 8014bf2:	3001      	adds	r0, #1
 8014bf4:	f43f af51 	beq.w	8014a9a <_printf_float+0xc2>
 8014bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	db02      	blt.n	8014c06 <_printf_float+0x22e>
 8014c00:	6823      	ldr	r3, [r4, #0]
 8014c02:	07d8      	lsls	r0, r3, #31
 8014c04:	d510      	bpl.n	8014c28 <_printf_float+0x250>
 8014c06:	ee18 3a10 	vmov	r3, s16
 8014c0a:	4652      	mov	r2, sl
 8014c0c:	4631      	mov	r1, r6
 8014c0e:	4628      	mov	r0, r5
 8014c10:	47b8      	blx	r7
 8014c12:	3001      	adds	r0, #1
 8014c14:	f43f af41 	beq.w	8014a9a <_printf_float+0xc2>
 8014c18:	f04f 0800 	mov.w	r8, #0
 8014c1c:	f104 091a 	add.w	r9, r4, #26
 8014c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c22:	3b01      	subs	r3, #1
 8014c24:	4543      	cmp	r3, r8
 8014c26:	dc09      	bgt.n	8014c3c <_printf_float+0x264>
 8014c28:	6823      	ldr	r3, [r4, #0]
 8014c2a:	079b      	lsls	r3, r3, #30
 8014c2c:	f100 8105 	bmi.w	8014e3a <_printf_float+0x462>
 8014c30:	68e0      	ldr	r0, [r4, #12]
 8014c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c34:	4298      	cmp	r0, r3
 8014c36:	bfb8      	it	lt
 8014c38:	4618      	movlt	r0, r3
 8014c3a:	e730      	b.n	8014a9e <_printf_float+0xc6>
 8014c3c:	2301      	movs	r3, #1
 8014c3e:	464a      	mov	r2, r9
 8014c40:	4631      	mov	r1, r6
 8014c42:	4628      	mov	r0, r5
 8014c44:	47b8      	blx	r7
 8014c46:	3001      	adds	r0, #1
 8014c48:	f43f af27 	beq.w	8014a9a <_printf_float+0xc2>
 8014c4c:	f108 0801 	add.w	r8, r8, #1
 8014c50:	e7e6      	b.n	8014c20 <_printf_float+0x248>
 8014c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	dc39      	bgt.n	8014ccc <_printf_float+0x2f4>
 8014c58:	4a1b      	ldr	r2, [pc, #108]	; (8014cc8 <_printf_float+0x2f0>)
 8014c5a:	2301      	movs	r3, #1
 8014c5c:	4631      	mov	r1, r6
 8014c5e:	4628      	mov	r0, r5
 8014c60:	47b8      	blx	r7
 8014c62:	3001      	adds	r0, #1
 8014c64:	f43f af19 	beq.w	8014a9a <_printf_float+0xc2>
 8014c68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014c6c:	4313      	orrs	r3, r2
 8014c6e:	d102      	bne.n	8014c76 <_printf_float+0x29e>
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	07d9      	lsls	r1, r3, #31
 8014c74:	d5d8      	bpl.n	8014c28 <_printf_float+0x250>
 8014c76:	ee18 3a10 	vmov	r3, s16
 8014c7a:	4652      	mov	r2, sl
 8014c7c:	4631      	mov	r1, r6
 8014c7e:	4628      	mov	r0, r5
 8014c80:	47b8      	blx	r7
 8014c82:	3001      	adds	r0, #1
 8014c84:	f43f af09 	beq.w	8014a9a <_printf_float+0xc2>
 8014c88:	f04f 0900 	mov.w	r9, #0
 8014c8c:	f104 0a1a 	add.w	sl, r4, #26
 8014c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c92:	425b      	negs	r3, r3
 8014c94:	454b      	cmp	r3, r9
 8014c96:	dc01      	bgt.n	8014c9c <_printf_float+0x2c4>
 8014c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c9a:	e792      	b.n	8014bc2 <_printf_float+0x1ea>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	4652      	mov	r2, sl
 8014ca0:	4631      	mov	r1, r6
 8014ca2:	4628      	mov	r0, r5
 8014ca4:	47b8      	blx	r7
 8014ca6:	3001      	adds	r0, #1
 8014ca8:	f43f aef7 	beq.w	8014a9a <_printf_float+0xc2>
 8014cac:	f109 0901 	add.w	r9, r9, #1
 8014cb0:	e7ee      	b.n	8014c90 <_printf_float+0x2b8>
 8014cb2:	bf00      	nop
 8014cb4:	7fefffff 	.word	0x7fefffff
 8014cb8:	0802b7c8 	.word	0x0802b7c8
 8014cbc:	0802b7cc 	.word	0x0802b7cc
 8014cc0:	0802b7d4 	.word	0x0802b7d4
 8014cc4:	0802b7d0 	.word	0x0802b7d0
 8014cc8:	0802b7d8 	.word	0x0802b7d8
 8014ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014cce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	bfa8      	it	ge
 8014cd4:	461a      	movge	r2, r3
 8014cd6:	2a00      	cmp	r2, #0
 8014cd8:	4691      	mov	r9, r2
 8014cda:	dc37      	bgt.n	8014d4c <_printf_float+0x374>
 8014cdc:	f04f 0b00 	mov.w	fp, #0
 8014ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014ce4:	f104 021a 	add.w	r2, r4, #26
 8014ce8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014cea:	9305      	str	r3, [sp, #20]
 8014cec:	eba3 0309 	sub.w	r3, r3, r9
 8014cf0:	455b      	cmp	r3, fp
 8014cf2:	dc33      	bgt.n	8014d5c <_printf_float+0x384>
 8014cf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	db3b      	blt.n	8014d74 <_printf_float+0x39c>
 8014cfc:	6823      	ldr	r3, [r4, #0]
 8014cfe:	07da      	lsls	r2, r3, #31
 8014d00:	d438      	bmi.n	8014d74 <_printf_float+0x39c>
 8014d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d04:	9a05      	ldr	r2, [sp, #20]
 8014d06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014d08:	1a9a      	subs	r2, r3, r2
 8014d0a:	eba3 0901 	sub.w	r9, r3, r1
 8014d0e:	4591      	cmp	r9, r2
 8014d10:	bfa8      	it	ge
 8014d12:	4691      	movge	r9, r2
 8014d14:	f1b9 0f00 	cmp.w	r9, #0
 8014d18:	dc35      	bgt.n	8014d86 <_printf_float+0x3ae>
 8014d1a:	f04f 0800 	mov.w	r8, #0
 8014d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d22:	f104 0a1a 	add.w	sl, r4, #26
 8014d26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d2a:	1a9b      	subs	r3, r3, r2
 8014d2c:	eba3 0309 	sub.w	r3, r3, r9
 8014d30:	4543      	cmp	r3, r8
 8014d32:	f77f af79 	ble.w	8014c28 <_printf_float+0x250>
 8014d36:	2301      	movs	r3, #1
 8014d38:	4652      	mov	r2, sl
 8014d3a:	4631      	mov	r1, r6
 8014d3c:	4628      	mov	r0, r5
 8014d3e:	47b8      	blx	r7
 8014d40:	3001      	adds	r0, #1
 8014d42:	f43f aeaa 	beq.w	8014a9a <_printf_float+0xc2>
 8014d46:	f108 0801 	add.w	r8, r8, #1
 8014d4a:	e7ec      	b.n	8014d26 <_printf_float+0x34e>
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	4631      	mov	r1, r6
 8014d50:	4642      	mov	r2, r8
 8014d52:	4628      	mov	r0, r5
 8014d54:	47b8      	blx	r7
 8014d56:	3001      	adds	r0, #1
 8014d58:	d1c0      	bne.n	8014cdc <_printf_float+0x304>
 8014d5a:	e69e      	b.n	8014a9a <_printf_float+0xc2>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	4631      	mov	r1, r6
 8014d60:	4628      	mov	r0, r5
 8014d62:	9205      	str	r2, [sp, #20]
 8014d64:	47b8      	blx	r7
 8014d66:	3001      	adds	r0, #1
 8014d68:	f43f ae97 	beq.w	8014a9a <_printf_float+0xc2>
 8014d6c:	9a05      	ldr	r2, [sp, #20]
 8014d6e:	f10b 0b01 	add.w	fp, fp, #1
 8014d72:	e7b9      	b.n	8014ce8 <_printf_float+0x310>
 8014d74:	ee18 3a10 	vmov	r3, s16
 8014d78:	4652      	mov	r2, sl
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b8      	blx	r7
 8014d80:	3001      	adds	r0, #1
 8014d82:	d1be      	bne.n	8014d02 <_printf_float+0x32a>
 8014d84:	e689      	b.n	8014a9a <_printf_float+0xc2>
 8014d86:	9a05      	ldr	r2, [sp, #20]
 8014d88:	464b      	mov	r3, r9
 8014d8a:	4442      	add	r2, r8
 8014d8c:	4631      	mov	r1, r6
 8014d8e:	4628      	mov	r0, r5
 8014d90:	47b8      	blx	r7
 8014d92:	3001      	adds	r0, #1
 8014d94:	d1c1      	bne.n	8014d1a <_printf_float+0x342>
 8014d96:	e680      	b.n	8014a9a <_printf_float+0xc2>
 8014d98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d9a:	2a01      	cmp	r2, #1
 8014d9c:	dc01      	bgt.n	8014da2 <_printf_float+0x3ca>
 8014d9e:	07db      	lsls	r3, r3, #31
 8014da0:	d538      	bpl.n	8014e14 <_printf_float+0x43c>
 8014da2:	2301      	movs	r3, #1
 8014da4:	4642      	mov	r2, r8
 8014da6:	4631      	mov	r1, r6
 8014da8:	4628      	mov	r0, r5
 8014daa:	47b8      	blx	r7
 8014dac:	3001      	adds	r0, #1
 8014dae:	f43f ae74 	beq.w	8014a9a <_printf_float+0xc2>
 8014db2:	ee18 3a10 	vmov	r3, s16
 8014db6:	4652      	mov	r2, sl
 8014db8:	4631      	mov	r1, r6
 8014dba:	4628      	mov	r0, r5
 8014dbc:	47b8      	blx	r7
 8014dbe:	3001      	adds	r0, #1
 8014dc0:	f43f ae6b 	beq.w	8014a9a <_printf_float+0xc2>
 8014dc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014dc8:	2200      	movs	r2, #0
 8014dca:	2300      	movs	r3, #0
 8014dcc:	f7eb fe8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8014dd0:	b9d8      	cbnz	r0, 8014e0a <_printf_float+0x432>
 8014dd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dd4:	f108 0201 	add.w	r2, r8, #1
 8014dd8:	3b01      	subs	r3, #1
 8014dda:	4631      	mov	r1, r6
 8014ddc:	4628      	mov	r0, r5
 8014dde:	47b8      	blx	r7
 8014de0:	3001      	adds	r0, #1
 8014de2:	d10e      	bne.n	8014e02 <_printf_float+0x42a>
 8014de4:	e659      	b.n	8014a9a <_printf_float+0xc2>
 8014de6:	2301      	movs	r3, #1
 8014de8:	4652      	mov	r2, sl
 8014dea:	4631      	mov	r1, r6
 8014dec:	4628      	mov	r0, r5
 8014dee:	47b8      	blx	r7
 8014df0:	3001      	adds	r0, #1
 8014df2:	f43f ae52 	beq.w	8014a9a <_printf_float+0xc2>
 8014df6:	f108 0801 	add.w	r8, r8, #1
 8014dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dfc:	3b01      	subs	r3, #1
 8014dfe:	4543      	cmp	r3, r8
 8014e00:	dcf1      	bgt.n	8014de6 <_printf_float+0x40e>
 8014e02:	464b      	mov	r3, r9
 8014e04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014e08:	e6dc      	b.n	8014bc4 <_printf_float+0x1ec>
 8014e0a:	f04f 0800 	mov.w	r8, #0
 8014e0e:	f104 0a1a 	add.w	sl, r4, #26
 8014e12:	e7f2      	b.n	8014dfa <_printf_float+0x422>
 8014e14:	2301      	movs	r3, #1
 8014e16:	4642      	mov	r2, r8
 8014e18:	e7df      	b.n	8014dda <_printf_float+0x402>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	464a      	mov	r2, r9
 8014e1e:	4631      	mov	r1, r6
 8014e20:	4628      	mov	r0, r5
 8014e22:	47b8      	blx	r7
 8014e24:	3001      	adds	r0, #1
 8014e26:	f43f ae38 	beq.w	8014a9a <_printf_float+0xc2>
 8014e2a:	f108 0801 	add.w	r8, r8, #1
 8014e2e:	68e3      	ldr	r3, [r4, #12]
 8014e30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014e32:	1a5b      	subs	r3, r3, r1
 8014e34:	4543      	cmp	r3, r8
 8014e36:	dcf0      	bgt.n	8014e1a <_printf_float+0x442>
 8014e38:	e6fa      	b.n	8014c30 <_printf_float+0x258>
 8014e3a:	f04f 0800 	mov.w	r8, #0
 8014e3e:	f104 0919 	add.w	r9, r4, #25
 8014e42:	e7f4      	b.n	8014e2e <_printf_float+0x456>

08014e44 <_printf_common>:
 8014e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e48:	4616      	mov	r6, r2
 8014e4a:	4699      	mov	r9, r3
 8014e4c:	688a      	ldr	r2, [r1, #8]
 8014e4e:	690b      	ldr	r3, [r1, #16]
 8014e50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e54:	4293      	cmp	r3, r2
 8014e56:	bfb8      	it	lt
 8014e58:	4613      	movlt	r3, r2
 8014e5a:	6033      	str	r3, [r6, #0]
 8014e5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e60:	4607      	mov	r7, r0
 8014e62:	460c      	mov	r4, r1
 8014e64:	b10a      	cbz	r2, 8014e6a <_printf_common+0x26>
 8014e66:	3301      	adds	r3, #1
 8014e68:	6033      	str	r3, [r6, #0]
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	0699      	lsls	r1, r3, #26
 8014e6e:	bf42      	ittt	mi
 8014e70:	6833      	ldrmi	r3, [r6, #0]
 8014e72:	3302      	addmi	r3, #2
 8014e74:	6033      	strmi	r3, [r6, #0]
 8014e76:	6825      	ldr	r5, [r4, #0]
 8014e78:	f015 0506 	ands.w	r5, r5, #6
 8014e7c:	d106      	bne.n	8014e8c <_printf_common+0x48>
 8014e7e:	f104 0a19 	add.w	sl, r4, #25
 8014e82:	68e3      	ldr	r3, [r4, #12]
 8014e84:	6832      	ldr	r2, [r6, #0]
 8014e86:	1a9b      	subs	r3, r3, r2
 8014e88:	42ab      	cmp	r3, r5
 8014e8a:	dc26      	bgt.n	8014eda <_printf_common+0x96>
 8014e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014e90:	1e13      	subs	r3, r2, #0
 8014e92:	6822      	ldr	r2, [r4, #0]
 8014e94:	bf18      	it	ne
 8014e96:	2301      	movne	r3, #1
 8014e98:	0692      	lsls	r2, r2, #26
 8014e9a:	d42b      	bmi.n	8014ef4 <_printf_common+0xb0>
 8014e9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ea0:	4649      	mov	r1, r9
 8014ea2:	4638      	mov	r0, r7
 8014ea4:	47c0      	blx	r8
 8014ea6:	3001      	adds	r0, #1
 8014ea8:	d01e      	beq.n	8014ee8 <_printf_common+0xa4>
 8014eaa:	6823      	ldr	r3, [r4, #0]
 8014eac:	68e5      	ldr	r5, [r4, #12]
 8014eae:	6832      	ldr	r2, [r6, #0]
 8014eb0:	f003 0306 	and.w	r3, r3, #6
 8014eb4:	2b04      	cmp	r3, #4
 8014eb6:	bf08      	it	eq
 8014eb8:	1aad      	subeq	r5, r5, r2
 8014eba:	68a3      	ldr	r3, [r4, #8]
 8014ebc:	6922      	ldr	r2, [r4, #16]
 8014ebe:	bf0c      	ite	eq
 8014ec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ec4:	2500      	movne	r5, #0
 8014ec6:	4293      	cmp	r3, r2
 8014ec8:	bfc4      	itt	gt
 8014eca:	1a9b      	subgt	r3, r3, r2
 8014ecc:	18ed      	addgt	r5, r5, r3
 8014ece:	2600      	movs	r6, #0
 8014ed0:	341a      	adds	r4, #26
 8014ed2:	42b5      	cmp	r5, r6
 8014ed4:	d11a      	bne.n	8014f0c <_printf_common+0xc8>
 8014ed6:	2000      	movs	r0, #0
 8014ed8:	e008      	b.n	8014eec <_printf_common+0xa8>
 8014eda:	2301      	movs	r3, #1
 8014edc:	4652      	mov	r2, sl
 8014ede:	4649      	mov	r1, r9
 8014ee0:	4638      	mov	r0, r7
 8014ee2:	47c0      	blx	r8
 8014ee4:	3001      	adds	r0, #1
 8014ee6:	d103      	bne.n	8014ef0 <_printf_common+0xac>
 8014ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ef0:	3501      	adds	r5, #1
 8014ef2:	e7c6      	b.n	8014e82 <_printf_common+0x3e>
 8014ef4:	18e1      	adds	r1, r4, r3
 8014ef6:	1c5a      	adds	r2, r3, #1
 8014ef8:	2030      	movs	r0, #48	; 0x30
 8014efa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014efe:	4422      	add	r2, r4
 8014f00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f08:	3302      	adds	r3, #2
 8014f0a:	e7c7      	b.n	8014e9c <_printf_common+0x58>
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	4622      	mov	r2, r4
 8014f10:	4649      	mov	r1, r9
 8014f12:	4638      	mov	r0, r7
 8014f14:	47c0      	blx	r8
 8014f16:	3001      	adds	r0, #1
 8014f18:	d0e6      	beq.n	8014ee8 <_printf_common+0xa4>
 8014f1a:	3601      	adds	r6, #1
 8014f1c:	e7d9      	b.n	8014ed2 <_printf_common+0x8e>
	...

08014f20 <_printf_i>:
 8014f20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f24:	7e0f      	ldrb	r7, [r1, #24]
 8014f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f28:	2f78      	cmp	r7, #120	; 0x78
 8014f2a:	4691      	mov	r9, r2
 8014f2c:	4680      	mov	r8, r0
 8014f2e:	460c      	mov	r4, r1
 8014f30:	469a      	mov	sl, r3
 8014f32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f36:	d807      	bhi.n	8014f48 <_printf_i+0x28>
 8014f38:	2f62      	cmp	r7, #98	; 0x62
 8014f3a:	d80a      	bhi.n	8014f52 <_printf_i+0x32>
 8014f3c:	2f00      	cmp	r7, #0
 8014f3e:	f000 80d8 	beq.w	80150f2 <_printf_i+0x1d2>
 8014f42:	2f58      	cmp	r7, #88	; 0x58
 8014f44:	f000 80a3 	beq.w	801508e <_printf_i+0x16e>
 8014f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f50:	e03a      	b.n	8014fc8 <_printf_i+0xa8>
 8014f52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f56:	2b15      	cmp	r3, #21
 8014f58:	d8f6      	bhi.n	8014f48 <_printf_i+0x28>
 8014f5a:	a101      	add	r1, pc, #4	; (adr r1, 8014f60 <_printf_i+0x40>)
 8014f5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f60:	08014fb9 	.word	0x08014fb9
 8014f64:	08014fcd 	.word	0x08014fcd
 8014f68:	08014f49 	.word	0x08014f49
 8014f6c:	08014f49 	.word	0x08014f49
 8014f70:	08014f49 	.word	0x08014f49
 8014f74:	08014f49 	.word	0x08014f49
 8014f78:	08014fcd 	.word	0x08014fcd
 8014f7c:	08014f49 	.word	0x08014f49
 8014f80:	08014f49 	.word	0x08014f49
 8014f84:	08014f49 	.word	0x08014f49
 8014f88:	08014f49 	.word	0x08014f49
 8014f8c:	080150d9 	.word	0x080150d9
 8014f90:	08014ffd 	.word	0x08014ffd
 8014f94:	080150bb 	.word	0x080150bb
 8014f98:	08014f49 	.word	0x08014f49
 8014f9c:	08014f49 	.word	0x08014f49
 8014fa0:	080150fb 	.word	0x080150fb
 8014fa4:	08014f49 	.word	0x08014f49
 8014fa8:	08014ffd 	.word	0x08014ffd
 8014fac:	08014f49 	.word	0x08014f49
 8014fb0:	08014f49 	.word	0x08014f49
 8014fb4:	080150c3 	.word	0x080150c3
 8014fb8:	682b      	ldr	r3, [r5, #0]
 8014fba:	1d1a      	adds	r2, r3, #4
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	602a      	str	r2, [r5, #0]
 8014fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e0a3      	b.n	8015114 <_printf_i+0x1f4>
 8014fcc:	6820      	ldr	r0, [r4, #0]
 8014fce:	6829      	ldr	r1, [r5, #0]
 8014fd0:	0606      	lsls	r6, r0, #24
 8014fd2:	f101 0304 	add.w	r3, r1, #4
 8014fd6:	d50a      	bpl.n	8014fee <_printf_i+0xce>
 8014fd8:	680e      	ldr	r6, [r1, #0]
 8014fda:	602b      	str	r3, [r5, #0]
 8014fdc:	2e00      	cmp	r6, #0
 8014fde:	da03      	bge.n	8014fe8 <_printf_i+0xc8>
 8014fe0:	232d      	movs	r3, #45	; 0x2d
 8014fe2:	4276      	negs	r6, r6
 8014fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014fe8:	485e      	ldr	r0, [pc, #376]	; (8015164 <_printf_i+0x244>)
 8014fea:	230a      	movs	r3, #10
 8014fec:	e019      	b.n	8015022 <_printf_i+0x102>
 8014fee:	680e      	ldr	r6, [r1, #0]
 8014ff0:	602b      	str	r3, [r5, #0]
 8014ff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014ff6:	bf18      	it	ne
 8014ff8:	b236      	sxthne	r6, r6
 8014ffa:	e7ef      	b.n	8014fdc <_printf_i+0xbc>
 8014ffc:	682b      	ldr	r3, [r5, #0]
 8014ffe:	6820      	ldr	r0, [r4, #0]
 8015000:	1d19      	adds	r1, r3, #4
 8015002:	6029      	str	r1, [r5, #0]
 8015004:	0601      	lsls	r1, r0, #24
 8015006:	d501      	bpl.n	801500c <_printf_i+0xec>
 8015008:	681e      	ldr	r6, [r3, #0]
 801500a:	e002      	b.n	8015012 <_printf_i+0xf2>
 801500c:	0646      	lsls	r6, r0, #25
 801500e:	d5fb      	bpl.n	8015008 <_printf_i+0xe8>
 8015010:	881e      	ldrh	r6, [r3, #0]
 8015012:	4854      	ldr	r0, [pc, #336]	; (8015164 <_printf_i+0x244>)
 8015014:	2f6f      	cmp	r7, #111	; 0x6f
 8015016:	bf0c      	ite	eq
 8015018:	2308      	moveq	r3, #8
 801501a:	230a      	movne	r3, #10
 801501c:	2100      	movs	r1, #0
 801501e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015022:	6865      	ldr	r5, [r4, #4]
 8015024:	60a5      	str	r5, [r4, #8]
 8015026:	2d00      	cmp	r5, #0
 8015028:	bfa2      	ittt	ge
 801502a:	6821      	ldrge	r1, [r4, #0]
 801502c:	f021 0104 	bicge.w	r1, r1, #4
 8015030:	6021      	strge	r1, [r4, #0]
 8015032:	b90e      	cbnz	r6, 8015038 <_printf_i+0x118>
 8015034:	2d00      	cmp	r5, #0
 8015036:	d04d      	beq.n	80150d4 <_printf_i+0x1b4>
 8015038:	4615      	mov	r5, r2
 801503a:	fbb6 f1f3 	udiv	r1, r6, r3
 801503e:	fb03 6711 	mls	r7, r3, r1, r6
 8015042:	5dc7      	ldrb	r7, [r0, r7]
 8015044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015048:	4637      	mov	r7, r6
 801504a:	42bb      	cmp	r3, r7
 801504c:	460e      	mov	r6, r1
 801504e:	d9f4      	bls.n	801503a <_printf_i+0x11a>
 8015050:	2b08      	cmp	r3, #8
 8015052:	d10b      	bne.n	801506c <_printf_i+0x14c>
 8015054:	6823      	ldr	r3, [r4, #0]
 8015056:	07de      	lsls	r6, r3, #31
 8015058:	d508      	bpl.n	801506c <_printf_i+0x14c>
 801505a:	6923      	ldr	r3, [r4, #16]
 801505c:	6861      	ldr	r1, [r4, #4]
 801505e:	4299      	cmp	r1, r3
 8015060:	bfde      	ittt	le
 8015062:	2330      	movle	r3, #48	; 0x30
 8015064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015068:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801506c:	1b52      	subs	r2, r2, r5
 801506e:	6122      	str	r2, [r4, #16]
 8015070:	f8cd a000 	str.w	sl, [sp]
 8015074:	464b      	mov	r3, r9
 8015076:	aa03      	add	r2, sp, #12
 8015078:	4621      	mov	r1, r4
 801507a:	4640      	mov	r0, r8
 801507c:	f7ff fee2 	bl	8014e44 <_printf_common>
 8015080:	3001      	adds	r0, #1
 8015082:	d14c      	bne.n	801511e <_printf_i+0x1fe>
 8015084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015088:	b004      	add	sp, #16
 801508a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801508e:	4835      	ldr	r0, [pc, #212]	; (8015164 <_printf_i+0x244>)
 8015090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015094:	6829      	ldr	r1, [r5, #0]
 8015096:	6823      	ldr	r3, [r4, #0]
 8015098:	f851 6b04 	ldr.w	r6, [r1], #4
 801509c:	6029      	str	r1, [r5, #0]
 801509e:	061d      	lsls	r5, r3, #24
 80150a0:	d514      	bpl.n	80150cc <_printf_i+0x1ac>
 80150a2:	07df      	lsls	r7, r3, #31
 80150a4:	bf44      	itt	mi
 80150a6:	f043 0320 	orrmi.w	r3, r3, #32
 80150aa:	6023      	strmi	r3, [r4, #0]
 80150ac:	b91e      	cbnz	r6, 80150b6 <_printf_i+0x196>
 80150ae:	6823      	ldr	r3, [r4, #0]
 80150b0:	f023 0320 	bic.w	r3, r3, #32
 80150b4:	6023      	str	r3, [r4, #0]
 80150b6:	2310      	movs	r3, #16
 80150b8:	e7b0      	b.n	801501c <_printf_i+0xfc>
 80150ba:	6823      	ldr	r3, [r4, #0]
 80150bc:	f043 0320 	orr.w	r3, r3, #32
 80150c0:	6023      	str	r3, [r4, #0]
 80150c2:	2378      	movs	r3, #120	; 0x78
 80150c4:	4828      	ldr	r0, [pc, #160]	; (8015168 <_printf_i+0x248>)
 80150c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80150ca:	e7e3      	b.n	8015094 <_printf_i+0x174>
 80150cc:	0659      	lsls	r1, r3, #25
 80150ce:	bf48      	it	mi
 80150d0:	b2b6      	uxthmi	r6, r6
 80150d2:	e7e6      	b.n	80150a2 <_printf_i+0x182>
 80150d4:	4615      	mov	r5, r2
 80150d6:	e7bb      	b.n	8015050 <_printf_i+0x130>
 80150d8:	682b      	ldr	r3, [r5, #0]
 80150da:	6826      	ldr	r6, [r4, #0]
 80150dc:	6961      	ldr	r1, [r4, #20]
 80150de:	1d18      	adds	r0, r3, #4
 80150e0:	6028      	str	r0, [r5, #0]
 80150e2:	0635      	lsls	r5, r6, #24
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	d501      	bpl.n	80150ec <_printf_i+0x1cc>
 80150e8:	6019      	str	r1, [r3, #0]
 80150ea:	e002      	b.n	80150f2 <_printf_i+0x1d2>
 80150ec:	0670      	lsls	r0, r6, #25
 80150ee:	d5fb      	bpl.n	80150e8 <_printf_i+0x1c8>
 80150f0:	8019      	strh	r1, [r3, #0]
 80150f2:	2300      	movs	r3, #0
 80150f4:	6123      	str	r3, [r4, #16]
 80150f6:	4615      	mov	r5, r2
 80150f8:	e7ba      	b.n	8015070 <_printf_i+0x150>
 80150fa:	682b      	ldr	r3, [r5, #0]
 80150fc:	1d1a      	adds	r2, r3, #4
 80150fe:	602a      	str	r2, [r5, #0]
 8015100:	681d      	ldr	r5, [r3, #0]
 8015102:	6862      	ldr	r2, [r4, #4]
 8015104:	2100      	movs	r1, #0
 8015106:	4628      	mov	r0, r5
 8015108:	f7eb f87a 	bl	8000200 <memchr>
 801510c:	b108      	cbz	r0, 8015112 <_printf_i+0x1f2>
 801510e:	1b40      	subs	r0, r0, r5
 8015110:	6060      	str	r0, [r4, #4]
 8015112:	6863      	ldr	r3, [r4, #4]
 8015114:	6123      	str	r3, [r4, #16]
 8015116:	2300      	movs	r3, #0
 8015118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801511c:	e7a8      	b.n	8015070 <_printf_i+0x150>
 801511e:	6923      	ldr	r3, [r4, #16]
 8015120:	462a      	mov	r2, r5
 8015122:	4649      	mov	r1, r9
 8015124:	4640      	mov	r0, r8
 8015126:	47d0      	blx	sl
 8015128:	3001      	adds	r0, #1
 801512a:	d0ab      	beq.n	8015084 <_printf_i+0x164>
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	079b      	lsls	r3, r3, #30
 8015130:	d413      	bmi.n	801515a <_printf_i+0x23a>
 8015132:	68e0      	ldr	r0, [r4, #12]
 8015134:	9b03      	ldr	r3, [sp, #12]
 8015136:	4298      	cmp	r0, r3
 8015138:	bfb8      	it	lt
 801513a:	4618      	movlt	r0, r3
 801513c:	e7a4      	b.n	8015088 <_printf_i+0x168>
 801513e:	2301      	movs	r3, #1
 8015140:	4632      	mov	r2, r6
 8015142:	4649      	mov	r1, r9
 8015144:	4640      	mov	r0, r8
 8015146:	47d0      	blx	sl
 8015148:	3001      	adds	r0, #1
 801514a:	d09b      	beq.n	8015084 <_printf_i+0x164>
 801514c:	3501      	adds	r5, #1
 801514e:	68e3      	ldr	r3, [r4, #12]
 8015150:	9903      	ldr	r1, [sp, #12]
 8015152:	1a5b      	subs	r3, r3, r1
 8015154:	42ab      	cmp	r3, r5
 8015156:	dcf2      	bgt.n	801513e <_printf_i+0x21e>
 8015158:	e7eb      	b.n	8015132 <_printf_i+0x212>
 801515a:	2500      	movs	r5, #0
 801515c:	f104 0619 	add.w	r6, r4, #25
 8015160:	e7f5      	b.n	801514e <_printf_i+0x22e>
 8015162:	bf00      	nop
 8015164:	0802b7da 	.word	0x0802b7da
 8015168:	0802b7eb 	.word	0x0802b7eb

0801516c <_scanf_float>:
 801516c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015170:	b087      	sub	sp, #28
 8015172:	4617      	mov	r7, r2
 8015174:	9303      	str	r3, [sp, #12]
 8015176:	688b      	ldr	r3, [r1, #8]
 8015178:	1e5a      	subs	r2, r3, #1
 801517a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801517e:	bf83      	ittte	hi
 8015180:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015184:	195b      	addhi	r3, r3, r5
 8015186:	9302      	strhi	r3, [sp, #8]
 8015188:	2300      	movls	r3, #0
 801518a:	bf86      	itte	hi
 801518c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015190:	608b      	strhi	r3, [r1, #8]
 8015192:	9302      	strls	r3, [sp, #8]
 8015194:	680b      	ldr	r3, [r1, #0]
 8015196:	468b      	mov	fp, r1
 8015198:	2500      	movs	r5, #0
 801519a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801519e:	f84b 3b1c 	str.w	r3, [fp], #28
 80151a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80151a6:	4680      	mov	r8, r0
 80151a8:	460c      	mov	r4, r1
 80151aa:	465e      	mov	r6, fp
 80151ac:	46aa      	mov	sl, r5
 80151ae:	46a9      	mov	r9, r5
 80151b0:	9501      	str	r5, [sp, #4]
 80151b2:	68a2      	ldr	r2, [r4, #8]
 80151b4:	b152      	cbz	r2, 80151cc <_scanf_float+0x60>
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	2b4e      	cmp	r3, #78	; 0x4e
 80151bc:	d864      	bhi.n	8015288 <_scanf_float+0x11c>
 80151be:	2b40      	cmp	r3, #64	; 0x40
 80151c0:	d83c      	bhi.n	801523c <_scanf_float+0xd0>
 80151c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80151c6:	b2c8      	uxtb	r0, r1
 80151c8:	280e      	cmp	r0, #14
 80151ca:	d93a      	bls.n	8015242 <_scanf_float+0xd6>
 80151cc:	f1b9 0f00 	cmp.w	r9, #0
 80151d0:	d003      	beq.n	80151da <_scanf_float+0x6e>
 80151d2:	6823      	ldr	r3, [r4, #0]
 80151d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80151d8:	6023      	str	r3, [r4, #0]
 80151da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80151de:	f1ba 0f01 	cmp.w	sl, #1
 80151e2:	f200 8113 	bhi.w	801540c <_scanf_float+0x2a0>
 80151e6:	455e      	cmp	r6, fp
 80151e8:	f200 8105 	bhi.w	80153f6 <_scanf_float+0x28a>
 80151ec:	2501      	movs	r5, #1
 80151ee:	4628      	mov	r0, r5
 80151f0:	b007      	add	sp, #28
 80151f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80151fa:	2a0d      	cmp	r2, #13
 80151fc:	d8e6      	bhi.n	80151cc <_scanf_float+0x60>
 80151fe:	a101      	add	r1, pc, #4	; (adr r1, 8015204 <_scanf_float+0x98>)
 8015200:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015204:	08015343 	.word	0x08015343
 8015208:	080151cd 	.word	0x080151cd
 801520c:	080151cd 	.word	0x080151cd
 8015210:	080151cd 	.word	0x080151cd
 8015214:	080153a3 	.word	0x080153a3
 8015218:	0801537b 	.word	0x0801537b
 801521c:	080151cd 	.word	0x080151cd
 8015220:	080151cd 	.word	0x080151cd
 8015224:	08015351 	.word	0x08015351
 8015228:	080151cd 	.word	0x080151cd
 801522c:	080151cd 	.word	0x080151cd
 8015230:	080151cd 	.word	0x080151cd
 8015234:	080151cd 	.word	0x080151cd
 8015238:	08015309 	.word	0x08015309
 801523c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015240:	e7db      	b.n	80151fa <_scanf_float+0x8e>
 8015242:	290e      	cmp	r1, #14
 8015244:	d8c2      	bhi.n	80151cc <_scanf_float+0x60>
 8015246:	a001      	add	r0, pc, #4	; (adr r0, 801524c <_scanf_float+0xe0>)
 8015248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801524c:	080152fb 	.word	0x080152fb
 8015250:	080151cd 	.word	0x080151cd
 8015254:	080152fb 	.word	0x080152fb
 8015258:	0801538f 	.word	0x0801538f
 801525c:	080151cd 	.word	0x080151cd
 8015260:	080152a9 	.word	0x080152a9
 8015264:	080152e5 	.word	0x080152e5
 8015268:	080152e5 	.word	0x080152e5
 801526c:	080152e5 	.word	0x080152e5
 8015270:	080152e5 	.word	0x080152e5
 8015274:	080152e5 	.word	0x080152e5
 8015278:	080152e5 	.word	0x080152e5
 801527c:	080152e5 	.word	0x080152e5
 8015280:	080152e5 	.word	0x080152e5
 8015284:	080152e5 	.word	0x080152e5
 8015288:	2b6e      	cmp	r3, #110	; 0x6e
 801528a:	d809      	bhi.n	80152a0 <_scanf_float+0x134>
 801528c:	2b60      	cmp	r3, #96	; 0x60
 801528e:	d8b2      	bhi.n	80151f6 <_scanf_float+0x8a>
 8015290:	2b54      	cmp	r3, #84	; 0x54
 8015292:	d077      	beq.n	8015384 <_scanf_float+0x218>
 8015294:	2b59      	cmp	r3, #89	; 0x59
 8015296:	d199      	bne.n	80151cc <_scanf_float+0x60>
 8015298:	2d07      	cmp	r5, #7
 801529a:	d197      	bne.n	80151cc <_scanf_float+0x60>
 801529c:	2508      	movs	r5, #8
 801529e:	e029      	b.n	80152f4 <_scanf_float+0x188>
 80152a0:	2b74      	cmp	r3, #116	; 0x74
 80152a2:	d06f      	beq.n	8015384 <_scanf_float+0x218>
 80152a4:	2b79      	cmp	r3, #121	; 0x79
 80152a6:	e7f6      	b.n	8015296 <_scanf_float+0x12a>
 80152a8:	6821      	ldr	r1, [r4, #0]
 80152aa:	05c8      	lsls	r0, r1, #23
 80152ac:	d51a      	bpl.n	80152e4 <_scanf_float+0x178>
 80152ae:	9b02      	ldr	r3, [sp, #8]
 80152b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80152b4:	6021      	str	r1, [r4, #0]
 80152b6:	f109 0901 	add.w	r9, r9, #1
 80152ba:	b11b      	cbz	r3, 80152c4 <_scanf_float+0x158>
 80152bc:	3b01      	subs	r3, #1
 80152be:	3201      	adds	r2, #1
 80152c0:	9302      	str	r3, [sp, #8]
 80152c2:	60a2      	str	r2, [r4, #8]
 80152c4:	68a3      	ldr	r3, [r4, #8]
 80152c6:	3b01      	subs	r3, #1
 80152c8:	60a3      	str	r3, [r4, #8]
 80152ca:	6923      	ldr	r3, [r4, #16]
 80152cc:	3301      	adds	r3, #1
 80152ce:	6123      	str	r3, [r4, #16]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	3b01      	subs	r3, #1
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	607b      	str	r3, [r7, #4]
 80152d8:	f340 8084 	ble.w	80153e4 <_scanf_float+0x278>
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	3301      	adds	r3, #1
 80152e0:	603b      	str	r3, [r7, #0]
 80152e2:	e766      	b.n	80151b2 <_scanf_float+0x46>
 80152e4:	eb1a 0f05 	cmn.w	sl, r5
 80152e8:	f47f af70 	bne.w	80151cc <_scanf_float+0x60>
 80152ec:	6822      	ldr	r2, [r4, #0]
 80152ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80152f2:	6022      	str	r2, [r4, #0]
 80152f4:	f806 3b01 	strb.w	r3, [r6], #1
 80152f8:	e7e4      	b.n	80152c4 <_scanf_float+0x158>
 80152fa:	6822      	ldr	r2, [r4, #0]
 80152fc:	0610      	lsls	r0, r2, #24
 80152fe:	f57f af65 	bpl.w	80151cc <_scanf_float+0x60>
 8015302:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015306:	e7f4      	b.n	80152f2 <_scanf_float+0x186>
 8015308:	f1ba 0f00 	cmp.w	sl, #0
 801530c:	d10e      	bne.n	801532c <_scanf_float+0x1c0>
 801530e:	f1b9 0f00 	cmp.w	r9, #0
 8015312:	d10e      	bne.n	8015332 <_scanf_float+0x1c6>
 8015314:	6822      	ldr	r2, [r4, #0]
 8015316:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801531a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801531e:	d108      	bne.n	8015332 <_scanf_float+0x1c6>
 8015320:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8015324:	6022      	str	r2, [r4, #0]
 8015326:	f04f 0a01 	mov.w	sl, #1
 801532a:	e7e3      	b.n	80152f4 <_scanf_float+0x188>
 801532c:	f1ba 0f02 	cmp.w	sl, #2
 8015330:	d055      	beq.n	80153de <_scanf_float+0x272>
 8015332:	2d01      	cmp	r5, #1
 8015334:	d002      	beq.n	801533c <_scanf_float+0x1d0>
 8015336:	2d04      	cmp	r5, #4
 8015338:	f47f af48 	bne.w	80151cc <_scanf_float+0x60>
 801533c:	3501      	adds	r5, #1
 801533e:	b2ed      	uxtb	r5, r5
 8015340:	e7d8      	b.n	80152f4 <_scanf_float+0x188>
 8015342:	f1ba 0f01 	cmp.w	sl, #1
 8015346:	f47f af41 	bne.w	80151cc <_scanf_float+0x60>
 801534a:	f04f 0a02 	mov.w	sl, #2
 801534e:	e7d1      	b.n	80152f4 <_scanf_float+0x188>
 8015350:	b97d      	cbnz	r5, 8015372 <_scanf_float+0x206>
 8015352:	f1b9 0f00 	cmp.w	r9, #0
 8015356:	f47f af3c 	bne.w	80151d2 <_scanf_float+0x66>
 801535a:	6822      	ldr	r2, [r4, #0]
 801535c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8015360:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8015364:	f47f af39 	bne.w	80151da <_scanf_float+0x6e>
 8015368:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801536c:	6022      	str	r2, [r4, #0]
 801536e:	2501      	movs	r5, #1
 8015370:	e7c0      	b.n	80152f4 <_scanf_float+0x188>
 8015372:	2d03      	cmp	r5, #3
 8015374:	d0e2      	beq.n	801533c <_scanf_float+0x1d0>
 8015376:	2d05      	cmp	r5, #5
 8015378:	e7de      	b.n	8015338 <_scanf_float+0x1cc>
 801537a:	2d02      	cmp	r5, #2
 801537c:	f47f af26 	bne.w	80151cc <_scanf_float+0x60>
 8015380:	2503      	movs	r5, #3
 8015382:	e7b7      	b.n	80152f4 <_scanf_float+0x188>
 8015384:	2d06      	cmp	r5, #6
 8015386:	f47f af21 	bne.w	80151cc <_scanf_float+0x60>
 801538a:	2507      	movs	r5, #7
 801538c:	e7b2      	b.n	80152f4 <_scanf_float+0x188>
 801538e:	6822      	ldr	r2, [r4, #0]
 8015390:	0591      	lsls	r1, r2, #22
 8015392:	f57f af1b 	bpl.w	80151cc <_scanf_float+0x60>
 8015396:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801539a:	6022      	str	r2, [r4, #0]
 801539c:	f8cd 9004 	str.w	r9, [sp, #4]
 80153a0:	e7a8      	b.n	80152f4 <_scanf_float+0x188>
 80153a2:	6822      	ldr	r2, [r4, #0]
 80153a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80153a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80153ac:	d006      	beq.n	80153bc <_scanf_float+0x250>
 80153ae:	0550      	lsls	r0, r2, #21
 80153b0:	f57f af0c 	bpl.w	80151cc <_scanf_float+0x60>
 80153b4:	f1b9 0f00 	cmp.w	r9, #0
 80153b8:	f43f af0f 	beq.w	80151da <_scanf_float+0x6e>
 80153bc:	0591      	lsls	r1, r2, #22
 80153be:	bf58      	it	pl
 80153c0:	9901      	ldrpl	r1, [sp, #4]
 80153c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80153c6:	bf58      	it	pl
 80153c8:	eba9 0101 	subpl.w	r1, r9, r1
 80153cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80153d0:	bf58      	it	pl
 80153d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80153d6:	6022      	str	r2, [r4, #0]
 80153d8:	f04f 0900 	mov.w	r9, #0
 80153dc:	e78a      	b.n	80152f4 <_scanf_float+0x188>
 80153de:	f04f 0a03 	mov.w	sl, #3
 80153e2:	e787      	b.n	80152f4 <_scanf_float+0x188>
 80153e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80153e8:	4639      	mov	r1, r7
 80153ea:	4640      	mov	r0, r8
 80153ec:	4798      	blx	r3
 80153ee:	2800      	cmp	r0, #0
 80153f0:	f43f aedf 	beq.w	80151b2 <_scanf_float+0x46>
 80153f4:	e6ea      	b.n	80151cc <_scanf_float+0x60>
 80153f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80153fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80153fe:	463a      	mov	r2, r7
 8015400:	4640      	mov	r0, r8
 8015402:	4798      	blx	r3
 8015404:	6923      	ldr	r3, [r4, #16]
 8015406:	3b01      	subs	r3, #1
 8015408:	6123      	str	r3, [r4, #16]
 801540a:	e6ec      	b.n	80151e6 <_scanf_float+0x7a>
 801540c:	1e6b      	subs	r3, r5, #1
 801540e:	2b06      	cmp	r3, #6
 8015410:	d825      	bhi.n	801545e <_scanf_float+0x2f2>
 8015412:	2d02      	cmp	r5, #2
 8015414:	d836      	bhi.n	8015484 <_scanf_float+0x318>
 8015416:	455e      	cmp	r6, fp
 8015418:	f67f aee8 	bls.w	80151ec <_scanf_float+0x80>
 801541c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015420:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015424:	463a      	mov	r2, r7
 8015426:	4640      	mov	r0, r8
 8015428:	4798      	blx	r3
 801542a:	6923      	ldr	r3, [r4, #16]
 801542c:	3b01      	subs	r3, #1
 801542e:	6123      	str	r3, [r4, #16]
 8015430:	e7f1      	b.n	8015416 <_scanf_float+0x2aa>
 8015432:	9802      	ldr	r0, [sp, #8]
 8015434:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015438:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801543c:	9002      	str	r0, [sp, #8]
 801543e:	463a      	mov	r2, r7
 8015440:	4640      	mov	r0, r8
 8015442:	4798      	blx	r3
 8015444:	6923      	ldr	r3, [r4, #16]
 8015446:	3b01      	subs	r3, #1
 8015448:	6123      	str	r3, [r4, #16]
 801544a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801544e:	fa5f fa8a 	uxtb.w	sl, sl
 8015452:	f1ba 0f02 	cmp.w	sl, #2
 8015456:	d1ec      	bne.n	8015432 <_scanf_float+0x2c6>
 8015458:	3d03      	subs	r5, #3
 801545a:	b2ed      	uxtb	r5, r5
 801545c:	1b76      	subs	r6, r6, r5
 801545e:	6823      	ldr	r3, [r4, #0]
 8015460:	05da      	lsls	r2, r3, #23
 8015462:	d52f      	bpl.n	80154c4 <_scanf_float+0x358>
 8015464:	055b      	lsls	r3, r3, #21
 8015466:	d510      	bpl.n	801548a <_scanf_float+0x31e>
 8015468:	455e      	cmp	r6, fp
 801546a:	f67f aebf 	bls.w	80151ec <_scanf_float+0x80>
 801546e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015472:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8015476:	463a      	mov	r2, r7
 8015478:	4640      	mov	r0, r8
 801547a:	4798      	blx	r3
 801547c:	6923      	ldr	r3, [r4, #16]
 801547e:	3b01      	subs	r3, #1
 8015480:	6123      	str	r3, [r4, #16]
 8015482:	e7f1      	b.n	8015468 <_scanf_float+0x2fc>
 8015484:	46aa      	mov	sl, r5
 8015486:	9602      	str	r6, [sp, #8]
 8015488:	e7df      	b.n	801544a <_scanf_float+0x2de>
 801548a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801548e:	6923      	ldr	r3, [r4, #16]
 8015490:	2965      	cmp	r1, #101	; 0x65
 8015492:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8015496:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801549a:	6123      	str	r3, [r4, #16]
 801549c:	d00c      	beq.n	80154b8 <_scanf_float+0x34c>
 801549e:	2945      	cmp	r1, #69	; 0x45
 80154a0:	d00a      	beq.n	80154b8 <_scanf_float+0x34c>
 80154a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154a6:	463a      	mov	r2, r7
 80154a8:	4640      	mov	r0, r8
 80154aa:	4798      	blx	r3
 80154ac:	6923      	ldr	r3, [r4, #16]
 80154ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80154b2:	3b01      	subs	r3, #1
 80154b4:	1eb5      	subs	r5, r6, #2
 80154b6:	6123      	str	r3, [r4, #16]
 80154b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154bc:	463a      	mov	r2, r7
 80154be:	4640      	mov	r0, r8
 80154c0:	4798      	blx	r3
 80154c2:	462e      	mov	r6, r5
 80154c4:	6825      	ldr	r5, [r4, #0]
 80154c6:	f015 0510 	ands.w	r5, r5, #16
 80154ca:	d159      	bne.n	8015580 <_scanf_float+0x414>
 80154cc:	7035      	strb	r5, [r6, #0]
 80154ce:	6823      	ldr	r3, [r4, #0]
 80154d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80154d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154d8:	d11b      	bne.n	8015512 <_scanf_float+0x3a6>
 80154da:	9b01      	ldr	r3, [sp, #4]
 80154dc:	454b      	cmp	r3, r9
 80154de:	eba3 0209 	sub.w	r2, r3, r9
 80154e2:	d123      	bne.n	801552c <_scanf_float+0x3c0>
 80154e4:	2200      	movs	r2, #0
 80154e6:	4659      	mov	r1, fp
 80154e8:	4640      	mov	r0, r8
 80154ea:	f000 ff1f 	bl	801632c <_strtod_r>
 80154ee:	6822      	ldr	r2, [r4, #0]
 80154f0:	9b03      	ldr	r3, [sp, #12]
 80154f2:	f012 0f02 	tst.w	r2, #2
 80154f6:	ec57 6b10 	vmov	r6, r7, d0
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	d021      	beq.n	8015542 <_scanf_float+0x3d6>
 80154fe:	9903      	ldr	r1, [sp, #12]
 8015500:	1d1a      	adds	r2, r3, #4
 8015502:	600a      	str	r2, [r1, #0]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	e9c3 6700 	strd	r6, r7, [r3]
 801550a:	68e3      	ldr	r3, [r4, #12]
 801550c:	3301      	adds	r3, #1
 801550e:	60e3      	str	r3, [r4, #12]
 8015510:	e66d      	b.n	80151ee <_scanf_float+0x82>
 8015512:	9b04      	ldr	r3, [sp, #16]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d0e5      	beq.n	80154e4 <_scanf_float+0x378>
 8015518:	9905      	ldr	r1, [sp, #20]
 801551a:	230a      	movs	r3, #10
 801551c:	462a      	mov	r2, r5
 801551e:	3101      	adds	r1, #1
 8015520:	4640      	mov	r0, r8
 8015522:	f000 fff3 	bl	801650c <_strtol_r>
 8015526:	9b04      	ldr	r3, [sp, #16]
 8015528:	9e05      	ldr	r6, [sp, #20]
 801552a:	1ac2      	subs	r2, r0, r3
 801552c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015530:	429e      	cmp	r6, r3
 8015532:	bf28      	it	cs
 8015534:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8015538:	4912      	ldr	r1, [pc, #72]	; (8015584 <_scanf_float+0x418>)
 801553a:	4630      	mov	r0, r6
 801553c:	f000 f8b2 	bl	80156a4 <siprintf>
 8015540:	e7d0      	b.n	80154e4 <_scanf_float+0x378>
 8015542:	9903      	ldr	r1, [sp, #12]
 8015544:	f012 0f04 	tst.w	r2, #4
 8015548:	f103 0204 	add.w	r2, r3, #4
 801554c:	600a      	str	r2, [r1, #0]
 801554e:	d1d9      	bne.n	8015504 <_scanf_float+0x398>
 8015550:	f8d3 8000 	ldr.w	r8, [r3]
 8015554:	ee10 2a10 	vmov	r2, s0
 8015558:	ee10 0a10 	vmov	r0, s0
 801555c:	463b      	mov	r3, r7
 801555e:	4639      	mov	r1, r7
 8015560:	f7eb faf4 	bl	8000b4c <__aeabi_dcmpun>
 8015564:	b128      	cbz	r0, 8015572 <_scanf_float+0x406>
 8015566:	4808      	ldr	r0, [pc, #32]	; (8015588 <_scanf_float+0x41c>)
 8015568:	f000 f896 	bl	8015698 <nanf>
 801556c:	ed88 0a00 	vstr	s0, [r8]
 8015570:	e7cb      	b.n	801550a <_scanf_float+0x39e>
 8015572:	4630      	mov	r0, r6
 8015574:	4639      	mov	r1, r7
 8015576:	f7eb fb47 	bl	8000c08 <__aeabi_d2f>
 801557a:	f8c8 0000 	str.w	r0, [r8]
 801557e:	e7c4      	b.n	801550a <_scanf_float+0x39e>
 8015580:	2500      	movs	r5, #0
 8015582:	e634      	b.n	80151ee <_scanf_float+0x82>
 8015584:	0802b7fc 	.word	0x0802b7fc
 8015588:	0802b907 	.word	0x0802b907

0801558c <_puts_r>:
 801558c:	b570      	push	{r4, r5, r6, lr}
 801558e:	460e      	mov	r6, r1
 8015590:	4605      	mov	r5, r0
 8015592:	b118      	cbz	r0, 801559c <_puts_r+0x10>
 8015594:	6983      	ldr	r3, [r0, #24]
 8015596:	b90b      	cbnz	r3, 801559c <_puts_r+0x10>
 8015598:	f002 f82e 	bl	80175f8 <__sinit>
 801559c:	69ab      	ldr	r3, [r5, #24]
 801559e:	68ac      	ldr	r4, [r5, #8]
 80155a0:	b913      	cbnz	r3, 80155a8 <_puts_r+0x1c>
 80155a2:	4628      	mov	r0, r5
 80155a4:	f002 f828 	bl	80175f8 <__sinit>
 80155a8:	4b2c      	ldr	r3, [pc, #176]	; (801565c <_puts_r+0xd0>)
 80155aa:	429c      	cmp	r4, r3
 80155ac:	d120      	bne.n	80155f0 <_puts_r+0x64>
 80155ae:	686c      	ldr	r4, [r5, #4]
 80155b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80155b2:	07db      	lsls	r3, r3, #31
 80155b4:	d405      	bmi.n	80155c2 <_puts_r+0x36>
 80155b6:	89a3      	ldrh	r3, [r4, #12]
 80155b8:	0598      	lsls	r0, r3, #22
 80155ba:	d402      	bmi.n	80155c2 <_puts_r+0x36>
 80155bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80155be:	f002 fc3e 	bl	8017e3e <__retarget_lock_acquire_recursive>
 80155c2:	89a3      	ldrh	r3, [r4, #12]
 80155c4:	0719      	lsls	r1, r3, #28
 80155c6:	d51d      	bpl.n	8015604 <_puts_r+0x78>
 80155c8:	6923      	ldr	r3, [r4, #16]
 80155ca:	b1db      	cbz	r3, 8015604 <_puts_r+0x78>
 80155cc:	3e01      	subs	r6, #1
 80155ce:	68a3      	ldr	r3, [r4, #8]
 80155d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80155d4:	3b01      	subs	r3, #1
 80155d6:	60a3      	str	r3, [r4, #8]
 80155d8:	bb39      	cbnz	r1, 801562a <_puts_r+0x9e>
 80155da:	2b00      	cmp	r3, #0
 80155dc:	da38      	bge.n	8015650 <_puts_r+0xc4>
 80155de:	4622      	mov	r2, r4
 80155e0:	210a      	movs	r1, #10
 80155e2:	4628      	mov	r0, r5
 80155e4:	f000 ff94 	bl	8016510 <__swbuf_r>
 80155e8:	3001      	adds	r0, #1
 80155ea:	d011      	beq.n	8015610 <_puts_r+0x84>
 80155ec:	250a      	movs	r5, #10
 80155ee:	e011      	b.n	8015614 <_puts_r+0x88>
 80155f0:	4b1b      	ldr	r3, [pc, #108]	; (8015660 <_puts_r+0xd4>)
 80155f2:	429c      	cmp	r4, r3
 80155f4:	d101      	bne.n	80155fa <_puts_r+0x6e>
 80155f6:	68ac      	ldr	r4, [r5, #8]
 80155f8:	e7da      	b.n	80155b0 <_puts_r+0x24>
 80155fa:	4b1a      	ldr	r3, [pc, #104]	; (8015664 <_puts_r+0xd8>)
 80155fc:	429c      	cmp	r4, r3
 80155fe:	bf08      	it	eq
 8015600:	68ec      	ldreq	r4, [r5, #12]
 8015602:	e7d5      	b.n	80155b0 <_puts_r+0x24>
 8015604:	4621      	mov	r1, r4
 8015606:	4628      	mov	r0, r5
 8015608:	f000 ffd4 	bl	80165b4 <__swsetup_r>
 801560c:	2800      	cmp	r0, #0
 801560e:	d0dd      	beq.n	80155cc <_puts_r+0x40>
 8015610:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015616:	07da      	lsls	r2, r3, #31
 8015618:	d405      	bmi.n	8015626 <_puts_r+0x9a>
 801561a:	89a3      	ldrh	r3, [r4, #12]
 801561c:	059b      	lsls	r3, r3, #22
 801561e:	d402      	bmi.n	8015626 <_puts_r+0x9a>
 8015620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015622:	f002 fc0d 	bl	8017e40 <__retarget_lock_release_recursive>
 8015626:	4628      	mov	r0, r5
 8015628:	bd70      	pop	{r4, r5, r6, pc}
 801562a:	2b00      	cmp	r3, #0
 801562c:	da04      	bge.n	8015638 <_puts_r+0xac>
 801562e:	69a2      	ldr	r2, [r4, #24]
 8015630:	429a      	cmp	r2, r3
 8015632:	dc06      	bgt.n	8015642 <_puts_r+0xb6>
 8015634:	290a      	cmp	r1, #10
 8015636:	d004      	beq.n	8015642 <_puts_r+0xb6>
 8015638:	6823      	ldr	r3, [r4, #0]
 801563a:	1c5a      	adds	r2, r3, #1
 801563c:	6022      	str	r2, [r4, #0]
 801563e:	7019      	strb	r1, [r3, #0]
 8015640:	e7c5      	b.n	80155ce <_puts_r+0x42>
 8015642:	4622      	mov	r2, r4
 8015644:	4628      	mov	r0, r5
 8015646:	f000 ff63 	bl	8016510 <__swbuf_r>
 801564a:	3001      	adds	r0, #1
 801564c:	d1bf      	bne.n	80155ce <_puts_r+0x42>
 801564e:	e7df      	b.n	8015610 <_puts_r+0x84>
 8015650:	6823      	ldr	r3, [r4, #0]
 8015652:	250a      	movs	r5, #10
 8015654:	1c5a      	adds	r2, r3, #1
 8015656:	6022      	str	r2, [r4, #0]
 8015658:	701d      	strb	r5, [r3, #0]
 801565a:	e7db      	b.n	8015614 <_puts_r+0x88>
 801565c:	0802baa4 	.word	0x0802baa4
 8015660:	0802bac4 	.word	0x0802bac4
 8015664:	0802ba84 	.word	0x0802ba84

08015668 <puts>:
 8015668:	4b02      	ldr	r3, [pc, #8]	; (8015674 <puts+0xc>)
 801566a:	4601      	mov	r1, r0
 801566c:	6818      	ldr	r0, [r3, #0]
 801566e:	f7ff bf8d 	b.w	801558c <_puts_r>
 8015672:	bf00      	nop
 8015674:	200008ac 	.word	0x200008ac

08015678 <_sbrk_r>:
 8015678:	b538      	push	{r3, r4, r5, lr}
 801567a:	4d06      	ldr	r5, [pc, #24]	; (8015694 <_sbrk_r+0x1c>)
 801567c:	2300      	movs	r3, #0
 801567e:	4604      	mov	r4, r0
 8015680:	4608      	mov	r0, r1
 8015682:	602b      	str	r3, [r5, #0]
 8015684:	f7ed f94c 	bl	8002920 <_sbrk>
 8015688:	1c43      	adds	r3, r0, #1
 801568a:	d102      	bne.n	8015692 <_sbrk_r+0x1a>
 801568c:	682b      	ldr	r3, [r5, #0]
 801568e:	b103      	cbz	r3, 8015692 <_sbrk_r+0x1a>
 8015690:	6023      	str	r3, [r4, #0]
 8015692:	bd38      	pop	{r3, r4, r5, pc}
 8015694:	20001b04 	.word	0x20001b04

08015698 <nanf>:
 8015698:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80156a0 <nanf+0x8>
 801569c:	4770      	bx	lr
 801569e:	bf00      	nop
 80156a0:	7fc00000 	.word	0x7fc00000

080156a4 <siprintf>:
 80156a4:	b40e      	push	{r1, r2, r3}
 80156a6:	b500      	push	{lr}
 80156a8:	b09c      	sub	sp, #112	; 0x70
 80156aa:	ab1d      	add	r3, sp, #116	; 0x74
 80156ac:	9002      	str	r0, [sp, #8]
 80156ae:	9006      	str	r0, [sp, #24]
 80156b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80156b4:	4809      	ldr	r0, [pc, #36]	; (80156dc <siprintf+0x38>)
 80156b6:	9107      	str	r1, [sp, #28]
 80156b8:	9104      	str	r1, [sp, #16]
 80156ba:	4909      	ldr	r1, [pc, #36]	; (80156e0 <siprintf+0x3c>)
 80156bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80156c0:	9105      	str	r1, [sp, #20]
 80156c2:	6800      	ldr	r0, [r0, #0]
 80156c4:	9301      	str	r3, [sp, #4]
 80156c6:	a902      	add	r1, sp, #8
 80156c8:	f003 f9a0 	bl	8018a0c <_svfiprintf_r>
 80156cc:	9b02      	ldr	r3, [sp, #8]
 80156ce:	2200      	movs	r2, #0
 80156d0:	701a      	strb	r2, [r3, #0]
 80156d2:	b01c      	add	sp, #112	; 0x70
 80156d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80156d8:	b003      	add	sp, #12
 80156da:	4770      	bx	lr
 80156dc:	200008ac 	.word	0x200008ac
 80156e0:	ffff0208 	.word	0xffff0208

080156e4 <sulp>:
 80156e4:	b570      	push	{r4, r5, r6, lr}
 80156e6:	4604      	mov	r4, r0
 80156e8:	460d      	mov	r5, r1
 80156ea:	ec45 4b10 	vmov	d0, r4, r5
 80156ee:	4616      	mov	r6, r2
 80156f0:	f002 ff9c 	bl	801862c <__ulp>
 80156f4:	ec51 0b10 	vmov	r0, r1, d0
 80156f8:	b17e      	cbz	r6, 801571a <sulp+0x36>
 80156fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80156fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015702:	2b00      	cmp	r3, #0
 8015704:	dd09      	ble.n	801571a <sulp+0x36>
 8015706:	051b      	lsls	r3, r3, #20
 8015708:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801570c:	2400      	movs	r4, #0
 801570e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015712:	4622      	mov	r2, r4
 8015714:	462b      	mov	r3, r5
 8015716:	f7ea ff7f 	bl	8000618 <__aeabi_dmul>
 801571a:	bd70      	pop	{r4, r5, r6, pc}
 801571c:	0000      	movs	r0, r0
	...

08015720 <_strtod_l>:
 8015720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015724:	ed2d 8b02 	vpush	{d8}
 8015728:	b09d      	sub	sp, #116	; 0x74
 801572a:	461f      	mov	r7, r3
 801572c:	2300      	movs	r3, #0
 801572e:	9318      	str	r3, [sp, #96]	; 0x60
 8015730:	4ba2      	ldr	r3, [pc, #648]	; (80159bc <_strtod_l+0x29c>)
 8015732:	9213      	str	r2, [sp, #76]	; 0x4c
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	9305      	str	r3, [sp, #20]
 8015738:	4604      	mov	r4, r0
 801573a:	4618      	mov	r0, r3
 801573c:	4688      	mov	r8, r1
 801573e:	f7ea fd57 	bl	80001f0 <strlen>
 8015742:	f04f 0a00 	mov.w	sl, #0
 8015746:	4605      	mov	r5, r0
 8015748:	f04f 0b00 	mov.w	fp, #0
 801574c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8015750:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015752:	781a      	ldrb	r2, [r3, #0]
 8015754:	2a2b      	cmp	r2, #43	; 0x2b
 8015756:	d04e      	beq.n	80157f6 <_strtod_l+0xd6>
 8015758:	d83b      	bhi.n	80157d2 <_strtod_l+0xb2>
 801575a:	2a0d      	cmp	r2, #13
 801575c:	d834      	bhi.n	80157c8 <_strtod_l+0xa8>
 801575e:	2a08      	cmp	r2, #8
 8015760:	d834      	bhi.n	80157cc <_strtod_l+0xac>
 8015762:	2a00      	cmp	r2, #0
 8015764:	d03e      	beq.n	80157e4 <_strtod_l+0xc4>
 8015766:	2300      	movs	r3, #0
 8015768:	930a      	str	r3, [sp, #40]	; 0x28
 801576a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801576c:	7833      	ldrb	r3, [r6, #0]
 801576e:	2b30      	cmp	r3, #48	; 0x30
 8015770:	f040 80b0 	bne.w	80158d4 <_strtod_l+0x1b4>
 8015774:	7873      	ldrb	r3, [r6, #1]
 8015776:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801577a:	2b58      	cmp	r3, #88	; 0x58
 801577c:	d168      	bne.n	8015850 <_strtod_l+0x130>
 801577e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015780:	9301      	str	r3, [sp, #4]
 8015782:	ab18      	add	r3, sp, #96	; 0x60
 8015784:	9702      	str	r7, [sp, #8]
 8015786:	9300      	str	r3, [sp, #0]
 8015788:	4a8d      	ldr	r2, [pc, #564]	; (80159c0 <_strtod_l+0x2a0>)
 801578a:	ab19      	add	r3, sp, #100	; 0x64
 801578c:	a917      	add	r1, sp, #92	; 0x5c
 801578e:	4620      	mov	r0, r4
 8015790:	f002 f848 	bl	8017824 <__gethex>
 8015794:	f010 0707 	ands.w	r7, r0, #7
 8015798:	4605      	mov	r5, r0
 801579a:	d005      	beq.n	80157a8 <_strtod_l+0x88>
 801579c:	2f06      	cmp	r7, #6
 801579e:	d12c      	bne.n	80157fa <_strtod_l+0xda>
 80157a0:	3601      	adds	r6, #1
 80157a2:	2300      	movs	r3, #0
 80157a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80157a6:	930a      	str	r3, [sp, #40]	; 0x28
 80157a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	f040 8590 	bne.w	80162d0 <_strtod_l+0xbb0>
 80157b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157b2:	b1eb      	cbz	r3, 80157f0 <_strtod_l+0xd0>
 80157b4:	4652      	mov	r2, sl
 80157b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157ba:	ec43 2b10 	vmov	d0, r2, r3
 80157be:	b01d      	add	sp, #116	; 0x74
 80157c0:	ecbd 8b02 	vpop	{d8}
 80157c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157c8:	2a20      	cmp	r2, #32
 80157ca:	d1cc      	bne.n	8015766 <_strtod_l+0x46>
 80157cc:	3301      	adds	r3, #1
 80157ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80157d0:	e7be      	b.n	8015750 <_strtod_l+0x30>
 80157d2:	2a2d      	cmp	r2, #45	; 0x2d
 80157d4:	d1c7      	bne.n	8015766 <_strtod_l+0x46>
 80157d6:	2201      	movs	r2, #1
 80157d8:	920a      	str	r2, [sp, #40]	; 0x28
 80157da:	1c5a      	adds	r2, r3, #1
 80157dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80157de:	785b      	ldrb	r3, [r3, #1]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d1c2      	bne.n	801576a <_strtod_l+0x4a>
 80157e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80157e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f040 856e 	bne.w	80162cc <_strtod_l+0xbac>
 80157f0:	4652      	mov	r2, sl
 80157f2:	465b      	mov	r3, fp
 80157f4:	e7e1      	b.n	80157ba <_strtod_l+0x9a>
 80157f6:	2200      	movs	r2, #0
 80157f8:	e7ee      	b.n	80157d8 <_strtod_l+0xb8>
 80157fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80157fc:	b13a      	cbz	r2, 801580e <_strtod_l+0xee>
 80157fe:	2135      	movs	r1, #53	; 0x35
 8015800:	a81a      	add	r0, sp, #104	; 0x68
 8015802:	f003 f81e 	bl	8018842 <__copybits>
 8015806:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015808:	4620      	mov	r0, r4
 801580a:	f002 fbdd 	bl	8017fc8 <_Bfree>
 801580e:	3f01      	subs	r7, #1
 8015810:	2f04      	cmp	r7, #4
 8015812:	d806      	bhi.n	8015822 <_strtod_l+0x102>
 8015814:	e8df f007 	tbb	[pc, r7]
 8015818:	1714030a 	.word	0x1714030a
 801581c:	0a          	.byte	0x0a
 801581d:	00          	.byte	0x00
 801581e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8015822:	0728      	lsls	r0, r5, #28
 8015824:	d5c0      	bpl.n	80157a8 <_strtod_l+0x88>
 8015826:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801582a:	e7bd      	b.n	80157a8 <_strtod_l+0x88>
 801582c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8015830:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015832:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015836:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801583a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801583e:	e7f0      	b.n	8015822 <_strtod_l+0x102>
 8015840:	f8df b180 	ldr.w	fp, [pc, #384]	; 80159c4 <_strtod_l+0x2a4>
 8015844:	e7ed      	b.n	8015822 <_strtod_l+0x102>
 8015846:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801584a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801584e:	e7e8      	b.n	8015822 <_strtod_l+0x102>
 8015850:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015852:	1c5a      	adds	r2, r3, #1
 8015854:	9217      	str	r2, [sp, #92]	; 0x5c
 8015856:	785b      	ldrb	r3, [r3, #1]
 8015858:	2b30      	cmp	r3, #48	; 0x30
 801585a:	d0f9      	beq.n	8015850 <_strtod_l+0x130>
 801585c:	2b00      	cmp	r3, #0
 801585e:	d0a3      	beq.n	80157a8 <_strtod_l+0x88>
 8015860:	2301      	movs	r3, #1
 8015862:	f04f 0900 	mov.w	r9, #0
 8015866:	9304      	str	r3, [sp, #16]
 8015868:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801586a:	9308      	str	r3, [sp, #32]
 801586c:	f8cd 901c 	str.w	r9, [sp, #28]
 8015870:	464f      	mov	r7, r9
 8015872:	220a      	movs	r2, #10
 8015874:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8015876:	7806      	ldrb	r6, [r0, #0]
 8015878:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801587c:	b2d9      	uxtb	r1, r3
 801587e:	2909      	cmp	r1, #9
 8015880:	d92a      	bls.n	80158d8 <_strtod_l+0x1b8>
 8015882:	9905      	ldr	r1, [sp, #20]
 8015884:	462a      	mov	r2, r5
 8015886:	f003 fb66 	bl	8018f56 <strncmp>
 801588a:	b398      	cbz	r0, 80158f4 <_strtod_l+0x1d4>
 801588c:	2000      	movs	r0, #0
 801588e:	4632      	mov	r2, r6
 8015890:	463d      	mov	r5, r7
 8015892:	9005      	str	r0, [sp, #20]
 8015894:	4603      	mov	r3, r0
 8015896:	2a65      	cmp	r2, #101	; 0x65
 8015898:	d001      	beq.n	801589e <_strtod_l+0x17e>
 801589a:	2a45      	cmp	r2, #69	; 0x45
 801589c:	d118      	bne.n	80158d0 <_strtod_l+0x1b0>
 801589e:	b91d      	cbnz	r5, 80158a8 <_strtod_l+0x188>
 80158a0:	9a04      	ldr	r2, [sp, #16]
 80158a2:	4302      	orrs	r2, r0
 80158a4:	d09e      	beq.n	80157e4 <_strtod_l+0xc4>
 80158a6:	2500      	movs	r5, #0
 80158a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80158ac:	f108 0201 	add.w	r2, r8, #1
 80158b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80158b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80158b6:	2a2b      	cmp	r2, #43	; 0x2b
 80158b8:	d075      	beq.n	80159a6 <_strtod_l+0x286>
 80158ba:	2a2d      	cmp	r2, #45	; 0x2d
 80158bc:	d07b      	beq.n	80159b6 <_strtod_l+0x296>
 80158be:	f04f 0c00 	mov.w	ip, #0
 80158c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80158c6:	2909      	cmp	r1, #9
 80158c8:	f240 8082 	bls.w	80159d0 <_strtod_l+0x2b0>
 80158cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80158d0:	2600      	movs	r6, #0
 80158d2:	e09d      	b.n	8015a10 <_strtod_l+0x2f0>
 80158d4:	2300      	movs	r3, #0
 80158d6:	e7c4      	b.n	8015862 <_strtod_l+0x142>
 80158d8:	2f08      	cmp	r7, #8
 80158da:	bfd8      	it	le
 80158dc:	9907      	ldrle	r1, [sp, #28]
 80158de:	f100 0001 	add.w	r0, r0, #1
 80158e2:	bfda      	itte	le
 80158e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80158e8:	9307      	strle	r3, [sp, #28]
 80158ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80158ee:	3701      	adds	r7, #1
 80158f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80158f2:	e7bf      	b.n	8015874 <_strtod_l+0x154>
 80158f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80158f6:	195a      	adds	r2, r3, r5
 80158f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80158fa:	5d5a      	ldrb	r2, [r3, r5]
 80158fc:	2f00      	cmp	r7, #0
 80158fe:	d037      	beq.n	8015970 <_strtod_l+0x250>
 8015900:	9005      	str	r0, [sp, #20]
 8015902:	463d      	mov	r5, r7
 8015904:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015908:	2b09      	cmp	r3, #9
 801590a:	d912      	bls.n	8015932 <_strtod_l+0x212>
 801590c:	2301      	movs	r3, #1
 801590e:	e7c2      	b.n	8015896 <_strtod_l+0x176>
 8015910:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015912:	1c5a      	adds	r2, r3, #1
 8015914:	9217      	str	r2, [sp, #92]	; 0x5c
 8015916:	785a      	ldrb	r2, [r3, #1]
 8015918:	3001      	adds	r0, #1
 801591a:	2a30      	cmp	r2, #48	; 0x30
 801591c:	d0f8      	beq.n	8015910 <_strtod_l+0x1f0>
 801591e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015922:	2b08      	cmp	r3, #8
 8015924:	f200 84d9 	bhi.w	80162da <_strtod_l+0xbba>
 8015928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801592a:	9005      	str	r0, [sp, #20]
 801592c:	2000      	movs	r0, #0
 801592e:	9308      	str	r3, [sp, #32]
 8015930:	4605      	mov	r5, r0
 8015932:	3a30      	subs	r2, #48	; 0x30
 8015934:	f100 0301 	add.w	r3, r0, #1
 8015938:	d014      	beq.n	8015964 <_strtod_l+0x244>
 801593a:	9905      	ldr	r1, [sp, #20]
 801593c:	4419      	add	r1, r3
 801593e:	9105      	str	r1, [sp, #20]
 8015940:	462b      	mov	r3, r5
 8015942:	eb00 0e05 	add.w	lr, r0, r5
 8015946:	210a      	movs	r1, #10
 8015948:	4573      	cmp	r3, lr
 801594a:	d113      	bne.n	8015974 <_strtod_l+0x254>
 801594c:	182b      	adds	r3, r5, r0
 801594e:	2b08      	cmp	r3, #8
 8015950:	f105 0501 	add.w	r5, r5, #1
 8015954:	4405      	add	r5, r0
 8015956:	dc1c      	bgt.n	8015992 <_strtod_l+0x272>
 8015958:	9907      	ldr	r1, [sp, #28]
 801595a:	230a      	movs	r3, #10
 801595c:	fb03 2301 	mla	r3, r3, r1, r2
 8015960:	9307      	str	r3, [sp, #28]
 8015962:	2300      	movs	r3, #0
 8015964:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015966:	1c51      	adds	r1, r2, #1
 8015968:	9117      	str	r1, [sp, #92]	; 0x5c
 801596a:	7852      	ldrb	r2, [r2, #1]
 801596c:	4618      	mov	r0, r3
 801596e:	e7c9      	b.n	8015904 <_strtod_l+0x1e4>
 8015970:	4638      	mov	r0, r7
 8015972:	e7d2      	b.n	801591a <_strtod_l+0x1fa>
 8015974:	2b08      	cmp	r3, #8
 8015976:	dc04      	bgt.n	8015982 <_strtod_l+0x262>
 8015978:	9e07      	ldr	r6, [sp, #28]
 801597a:	434e      	muls	r6, r1
 801597c:	9607      	str	r6, [sp, #28]
 801597e:	3301      	adds	r3, #1
 8015980:	e7e2      	b.n	8015948 <_strtod_l+0x228>
 8015982:	f103 0c01 	add.w	ip, r3, #1
 8015986:	f1bc 0f10 	cmp.w	ip, #16
 801598a:	bfd8      	it	le
 801598c:	fb01 f909 	mulle.w	r9, r1, r9
 8015990:	e7f5      	b.n	801597e <_strtod_l+0x25e>
 8015992:	2d10      	cmp	r5, #16
 8015994:	bfdc      	itt	le
 8015996:	230a      	movle	r3, #10
 8015998:	fb03 2909 	mlale	r9, r3, r9, r2
 801599c:	e7e1      	b.n	8015962 <_strtod_l+0x242>
 801599e:	2300      	movs	r3, #0
 80159a0:	9305      	str	r3, [sp, #20]
 80159a2:	2301      	movs	r3, #1
 80159a4:	e77c      	b.n	80158a0 <_strtod_l+0x180>
 80159a6:	f04f 0c00 	mov.w	ip, #0
 80159aa:	f108 0202 	add.w	r2, r8, #2
 80159ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80159b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80159b4:	e785      	b.n	80158c2 <_strtod_l+0x1a2>
 80159b6:	f04f 0c01 	mov.w	ip, #1
 80159ba:	e7f6      	b.n	80159aa <_strtod_l+0x28a>
 80159bc:	0802bb4c 	.word	0x0802bb4c
 80159c0:	0802b804 	.word	0x0802b804
 80159c4:	7ff00000 	.word	0x7ff00000
 80159c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80159ca:	1c51      	adds	r1, r2, #1
 80159cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80159ce:	7852      	ldrb	r2, [r2, #1]
 80159d0:	2a30      	cmp	r2, #48	; 0x30
 80159d2:	d0f9      	beq.n	80159c8 <_strtod_l+0x2a8>
 80159d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80159d8:	2908      	cmp	r1, #8
 80159da:	f63f af79 	bhi.w	80158d0 <_strtod_l+0x1b0>
 80159de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80159e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80159e4:	9206      	str	r2, [sp, #24]
 80159e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80159e8:	1c51      	adds	r1, r2, #1
 80159ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80159ec:	7852      	ldrb	r2, [r2, #1]
 80159ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80159f2:	2e09      	cmp	r6, #9
 80159f4:	d937      	bls.n	8015a66 <_strtod_l+0x346>
 80159f6:	9e06      	ldr	r6, [sp, #24]
 80159f8:	1b89      	subs	r1, r1, r6
 80159fa:	2908      	cmp	r1, #8
 80159fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015a00:	dc02      	bgt.n	8015a08 <_strtod_l+0x2e8>
 8015a02:	4576      	cmp	r6, lr
 8015a04:	bfa8      	it	ge
 8015a06:	4676      	movge	r6, lr
 8015a08:	f1bc 0f00 	cmp.w	ip, #0
 8015a0c:	d000      	beq.n	8015a10 <_strtod_l+0x2f0>
 8015a0e:	4276      	negs	r6, r6
 8015a10:	2d00      	cmp	r5, #0
 8015a12:	d14d      	bne.n	8015ab0 <_strtod_l+0x390>
 8015a14:	9904      	ldr	r1, [sp, #16]
 8015a16:	4301      	orrs	r1, r0
 8015a18:	f47f aec6 	bne.w	80157a8 <_strtod_l+0x88>
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	f47f aee1 	bne.w	80157e4 <_strtod_l+0xc4>
 8015a22:	2a69      	cmp	r2, #105	; 0x69
 8015a24:	d027      	beq.n	8015a76 <_strtod_l+0x356>
 8015a26:	dc24      	bgt.n	8015a72 <_strtod_l+0x352>
 8015a28:	2a49      	cmp	r2, #73	; 0x49
 8015a2a:	d024      	beq.n	8015a76 <_strtod_l+0x356>
 8015a2c:	2a4e      	cmp	r2, #78	; 0x4e
 8015a2e:	f47f aed9 	bne.w	80157e4 <_strtod_l+0xc4>
 8015a32:	499f      	ldr	r1, [pc, #636]	; (8015cb0 <_strtod_l+0x590>)
 8015a34:	a817      	add	r0, sp, #92	; 0x5c
 8015a36:	f002 f94d 	bl	8017cd4 <__match>
 8015a3a:	2800      	cmp	r0, #0
 8015a3c:	f43f aed2 	beq.w	80157e4 <_strtod_l+0xc4>
 8015a40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	2b28      	cmp	r3, #40	; 0x28
 8015a46:	d12d      	bne.n	8015aa4 <_strtod_l+0x384>
 8015a48:	499a      	ldr	r1, [pc, #616]	; (8015cb4 <_strtod_l+0x594>)
 8015a4a:	aa1a      	add	r2, sp, #104	; 0x68
 8015a4c:	a817      	add	r0, sp, #92	; 0x5c
 8015a4e:	f002 f955 	bl	8017cfc <__hexnan>
 8015a52:	2805      	cmp	r0, #5
 8015a54:	d126      	bne.n	8015aa4 <_strtod_l+0x384>
 8015a56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a58:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8015a5c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015a60:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015a64:	e6a0      	b.n	80157a8 <_strtod_l+0x88>
 8015a66:	210a      	movs	r1, #10
 8015a68:	fb01 2e0e 	mla	lr, r1, lr, r2
 8015a6c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a70:	e7b9      	b.n	80159e6 <_strtod_l+0x2c6>
 8015a72:	2a6e      	cmp	r2, #110	; 0x6e
 8015a74:	e7db      	b.n	8015a2e <_strtod_l+0x30e>
 8015a76:	4990      	ldr	r1, [pc, #576]	; (8015cb8 <_strtod_l+0x598>)
 8015a78:	a817      	add	r0, sp, #92	; 0x5c
 8015a7a:	f002 f92b 	bl	8017cd4 <__match>
 8015a7e:	2800      	cmp	r0, #0
 8015a80:	f43f aeb0 	beq.w	80157e4 <_strtod_l+0xc4>
 8015a84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a86:	498d      	ldr	r1, [pc, #564]	; (8015cbc <_strtod_l+0x59c>)
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	a817      	add	r0, sp, #92	; 0x5c
 8015a8c:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a8e:	f002 f921 	bl	8017cd4 <__match>
 8015a92:	b910      	cbnz	r0, 8015a9a <_strtod_l+0x37a>
 8015a94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a96:	3301      	adds	r3, #1
 8015a98:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a9a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8015ccc <_strtod_l+0x5ac>
 8015a9e:	f04f 0a00 	mov.w	sl, #0
 8015aa2:	e681      	b.n	80157a8 <_strtod_l+0x88>
 8015aa4:	4886      	ldr	r0, [pc, #536]	; (8015cc0 <_strtod_l+0x5a0>)
 8015aa6:	f003 fa0b 	bl	8018ec0 <nan>
 8015aaa:	ec5b ab10 	vmov	sl, fp, d0
 8015aae:	e67b      	b.n	80157a8 <_strtod_l+0x88>
 8015ab0:	9b05      	ldr	r3, [sp, #20]
 8015ab2:	9807      	ldr	r0, [sp, #28]
 8015ab4:	1af3      	subs	r3, r6, r3
 8015ab6:	2f00      	cmp	r7, #0
 8015ab8:	bf08      	it	eq
 8015aba:	462f      	moveq	r7, r5
 8015abc:	2d10      	cmp	r5, #16
 8015abe:	9306      	str	r3, [sp, #24]
 8015ac0:	46a8      	mov	r8, r5
 8015ac2:	bfa8      	it	ge
 8015ac4:	f04f 0810 	movge.w	r8, #16
 8015ac8:	f7ea fd2c 	bl	8000524 <__aeabi_ui2d>
 8015acc:	2d09      	cmp	r5, #9
 8015ace:	4682      	mov	sl, r0
 8015ad0:	468b      	mov	fp, r1
 8015ad2:	dd13      	ble.n	8015afc <_strtod_l+0x3dc>
 8015ad4:	4b7b      	ldr	r3, [pc, #492]	; (8015cc4 <_strtod_l+0x5a4>)
 8015ad6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015ada:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015ade:	f7ea fd9b 	bl	8000618 <__aeabi_dmul>
 8015ae2:	4682      	mov	sl, r0
 8015ae4:	4648      	mov	r0, r9
 8015ae6:	468b      	mov	fp, r1
 8015ae8:	f7ea fd1c 	bl	8000524 <__aeabi_ui2d>
 8015aec:	4602      	mov	r2, r0
 8015aee:	460b      	mov	r3, r1
 8015af0:	4650      	mov	r0, sl
 8015af2:	4659      	mov	r1, fp
 8015af4:	f7ea fbda 	bl	80002ac <__adddf3>
 8015af8:	4682      	mov	sl, r0
 8015afa:	468b      	mov	fp, r1
 8015afc:	2d0f      	cmp	r5, #15
 8015afe:	dc38      	bgt.n	8015b72 <_strtod_l+0x452>
 8015b00:	9b06      	ldr	r3, [sp, #24]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	f43f ae50 	beq.w	80157a8 <_strtod_l+0x88>
 8015b08:	dd24      	ble.n	8015b54 <_strtod_l+0x434>
 8015b0a:	2b16      	cmp	r3, #22
 8015b0c:	dc0b      	bgt.n	8015b26 <_strtod_l+0x406>
 8015b0e:	496d      	ldr	r1, [pc, #436]	; (8015cc4 <_strtod_l+0x5a4>)
 8015b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b18:	4652      	mov	r2, sl
 8015b1a:	465b      	mov	r3, fp
 8015b1c:	f7ea fd7c 	bl	8000618 <__aeabi_dmul>
 8015b20:	4682      	mov	sl, r0
 8015b22:	468b      	mov	fp, r1
 8015b24:	e640      	b.n	80157a8 <_strtod_l+0x88>
 8015b26:	9a06      	ldr	r2, [sp, #24]
 8015b28:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	db20      	blt.n	8015b72 <_strtod_l+0x452>
 8015b30:	4c64      	ldr	r4, [pc, #400]	; (8015cc4 <_strtod_l+0x5a4>)
 8015b32:	f1c5 050f 	rsb	r5, r5, #15
 8015b36:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015b3a:	4652      	mov	r2, sl
 8015b3c:	465b      	mov	r3, fp
 8015b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b42:	f7ea fd69 	bl	8000618 <__aeabi_dmul>
 8015b46:	9b06      	ldr	r3, [sp, #24]
 8015b48:	1b5d      	subs	r5, r3, r5
 8015b4a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015b4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015b52:	e7e3      	b.n	8015b1c <_strtod_l+0x3fc>
 8015b54:	9b06      	ldr	r3, [sp, #24]
 8015b56:	3316      	adds	r3, #22
 8015b58:	db0b      	blt.n	8015b72 <_strtod_l+0x452>
 8015b5a:	9b05      	ldr	r3, [sp, #20]
 8015b5c:	1b9e      	subs	r6, r3, r6
 8015b5e:	4b59      	ldr	r3, [pc, #356]	; (8015cc4 <_strtod_l+0x5a4>)
 8015b60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8015b64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015b68:	4650      	mov	r0, sl
 8015b6a:	4659      	mov	r1, fp
 8015b6c:	f7ea fe7e 	bl	800086c <__aeabi_ddiv>
 8015b70:	e7d6      	b.n	8015b20 <_strtod_l+0x400>
 8015b72:	9b06      	ldr	r3, [sp, #24]
 8015b74:	eba5 0808 	sub.w	r8, r5, r8
 8015b78:	4498      	add	r8, r3
 8015b7a:	f1b8 0f00 	cmp.w	r8, #0
 8015b7e:	dd74      	ble.n	8015c6a <_strtod_l+0x54a>
 8015b80:	f018 030f 	ands.w	r3, r8, #15
 8015b84:	d00a      	beq.n	8015b9c <_strtod_l+0x47c>
 8015b86:	494f      	ldr	r1, [pc, #316]	; (8015cc4 <_strtod_l+0x5a4>)
 8015b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b8c:	4652      	mov	r2, sl
 8015b8e:	465b      	mov	r3, fp
 8015b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b94:	f7ea fd40 	bl	8000618 <__aeabi_dmul>
 8015b98:	4682      	mov	sl, r0
 8015b9a:	468b      	mov	fp, r1
 8015b9c:	f038 080f 	bics.w	r8, r8, #15
 8015ba0:	d04f      	beq.n	8015c42 <_strtod_l+0x522>
 8015ba2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015ba6:	dd22      	ble.n	8015bee <_strtod_l+0x4ce>
 8015ba8:	2500      	movs	r5, #0
 8015baa:	462e      	mov	r6, r5
 8015bac:	9507      	str	r5, [sp, #28]
 8015bae:	9505      	str	r5, [sp, #20]
 8015bb0:	2322      	movs	r3, #34	; 0x22
 8015bb2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8015ccc <_strtod_l+0x5ac>
 8015bb6:	6023      	str	r3, [r4, #0]
 8015bb8:	f04f 0a00 	mov.w	sl, #0
 8015bbc:	9b07      	ldr	r3, [sp, #28]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f43f adf2 	beq.w	80157a8 <_strtod_l+0x88>
 8015bc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	f002 f9fe 	bl	8017fc8 <_Bfree>
 8015bcc:	9905      	ldr	r1, [sp, #20]
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f002 f9fa 	bl	8017fc8 <_Bfree>
 8015bd4:	4631      	mov	r1, r6
 8015bd6:	4620      	mov	r0, r4
 8015bd8:	f002 f9f6 	bl	8017fc8 <_Bfree>
 8015bdc:	9907      	ldr	r1, [sp, #28]
 8015bde:	4620      	mov	r0, r4
 8015be0:	f002 f9f2 	bl	8017fc8 <_Bfree>
 8015be4:	4629      	mov	r1, r5
 8015be6:	4620      	mov	r0, r4
 8015be8:	f002 f9ee 	bl	8017fc8 <_Bfree>
 8015bec:	e5dc      	b.n	80157a8 <_strtod_l+0x88>
 8015bee:	4b36      	ldr	r3, [pc, #216]	; (8015cc8 <_strtod_l+0x5a8>)
 8015bf0:	9304      	str	r3, [sp, #16]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015bf8:	4650      	mov	r0, sl
 8015bfa:	4659      	mov	r1, fp
 8015bfc:	4699      	mov	r9, r3
 8015bfe:	f1b8 0f01 	cmp.w	r8, #1
 8015c02:	dc21      	bgt.n	8015c48 <_strtod_l+0x528>
 8015c04:	b10b      	cbz	r3, 8015c0a <_strtod_l+0x4ea>
 8015c06:	4682      	mov	sl, r0
 8015c08:	468b      	mov	fp, r1
 8015c0a:	4b2f      	ldr	r3, [pc, #188]	; (8015cc8 <_strtod_l+0x5a8>)
 8015c0c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015c10:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8015c14:	4652      	mov	r2, sl
 8015c16:	465b      	mov	r3, fp
 8015c18:	e9d9 0100 	ldrd	r0, r1, [r9]
 8015c1c:	f7ea fcfc 	bl	8000618 <__aeabi_dmul>
 8015c20:	4b2a      	ldr	r3, [pc, #168]	; (8015ccc <_strtod_l+0x5ac>)
 8015c22:	460a      	mov	r2, r1
 8015c24:	400b      	ands	r3, r1
 8015c26:	492a      	ldr	r1, [pc, #168]	; (8015cd0 <_strtod_l+0x5b0>)
 8015c28:	428b      	cmp	r3, r1
 8015c2a:	4682      	mov	sl, r0
 8015c2c:	d8bc      	bhi.n	8015ba8 <_strtod_l+0x488>
 8015c2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015c32:	428b      	cmp	r3, r1
 8015c34:	bf86      	itte	hi
 8015c36:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8015cd4 <_strtod_l+0x5b4>
 8015c3a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8015c3e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015c42:	2300      	movs	r3, #0
 8015c44:	9304      	str	r3, [sp, #16]
 8015c46:	e084      	b.n	8015d52 <_strtod_l+0x632>
 8015c48:	f018 0f01 	tst.w	r8, #1
 8015c4c:	d005      	beq.n	8015c5a <_strtod_l+0x53a>
 8015c4e:	9b04      	ldr	r3, [sp, #16]
 8015c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c54:	f7ea fce0 	bl	8000618 <__aeabi_dmul>
 8015c58:	2301      	movs	r3, #1
 8015c5a:	9a04      	ldr	r2, [sp, #16]
 8015c5c:	3208      	adds	r2, #8
 8015c5e:	f109 0901 	add.w	r9, r9, #1
 8015c62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c66:	9204      	str	r2, [sp, #16]
 8015c68:	e7c9      	b.n	8015bfe <_strtod_l+0x4de>
 8015c6a:	d0ea      	beq.n	8015c42 <_strtod_l+0x522>
 8015c6c:	f1c8 0800 	rsb	r8, r8, #0
 8015c70:	f018 020f 	ands.w	r2, r8, #15
 8015c74:	d00a      	beq.n	8015c8c <_strtod_l+0x56c>
 8015c76:	4b13      	ldr	r3, [pc, #76]	; (8015cc4 <_strtod_l+0x5a4>)
 8015c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c7c:	4650      	mov	r0, sl
 8015c7e:	4659      	mov	r1, fp
 8015c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c84:	f7ea fdf2 	bl	800086c <__aeabi_ddiv>
 8015c88:	4682      	mov	sl, r0
 8015c8a:	468b      	mov	fp, r1
 8015c8c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015c90:	d0d7      	beq.n	8015c42 <_strtod_l+0x522>
 8015c92:	f1b8 0f1f 	cmp.w	r8, #31
 8015c96:	dd1f      	ble.n	8015cd8 <_strtod_l+0x5b8>
 8015c98:	2500      	movs	r5, #0
 8015c9a:	462e      	mov	r6, r5
 8015c9c:	9507      	str	r5, [sp, #28]
 8015c9e:	9505      	str	r5, [sp, #20]
 8015ca0:	2322      	movs	r3, #34	; 0x22
 8015ca2:	f04f 0a00 	mov.w	sl, #0
 8015ca6:	f04f 0b00 	mov.w	fp, #0
 8015caa:	6023      	str	r3, [r4, #0]
 8015cac:	e786      	b.n	8015bbc <_strtod_l+0x49c>
 8015cae:	bf00      	nop
 8015cb0:	0802b7d5 	.word	0x0802b7d5
 8015cb4:	0802b818 	.word	0x0802b818
 8015cb8:	0802b7cd 	.word	0x0802b7cd
 8015cbc:	0802ba0c 	.word	0x0802ba0c
 8015cc0:	0802b907 	.word	0x0802b907
 8015cc4:	0802bbe8 	.word	0x0802bbe8
 8015cc8:	0802bbc0 	.word	0x0802bbc0
 8015ccc:	7ff00000 	.word	0x7ff00000
 8015cd0:	7ca00000 	.word	0x7ca00000
 8015cd4:	7fefffff 	.word	0x7fefffff
 8015cd8:	f018 0310 	ands.w	r3, r8, #16
 8015cdc:	bf18      	it	ne
 8015cde:	236a      	movne	r3, #106	; 0x6a
 8015ce0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8016090 <_strtod_l+0x970>
 8015ce4:	9304      	str	r3, [sp, #16]
 8015ce6:	4650      	mov	r0, sl
 8015ce8:	4659      	mov	r1, fp
 8015cea:	2300      	movs	r3, #0
 8015cec:	f018 0f01 	tst.w	r8, #1
 8015cf0:	d004      	beq.n	8015cfc <_strtod_l+0x5dc>
 8015cf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015cf6:	f7ea fc8f 	bl	8000618 <__aeabi_dmul>
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015d00:	f109 0908 	add.w	r9, r9, #8
 8015d04:	d1f2      	bne.n	8015cec <_strtod_l+0x5cc>
 8015d06:	b10b      	cbz	r3, 8015d0c <_strtod_l+0x5ec>
 8015d08:	4682      	mov	sl, r0
 8015d0a:	468b      	mov	fp, r1
 8015d0c:	9b04      	ldr	r3, [sp, #16]
 8015d0e:	b1c3      	cbz	r3, 8015d42 <_strtod_l+0x622>
 8015d10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015d14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	4659      	mov	r1, fp
 8015d1c:	dd11      	ble.n	8015d42 <_strtod_l+0x622>
 8015d1e:	2b1f      	cmp	r3, #31
 8015d20:	f340 8124 	ble.w	8015f6c <_strtod_l+0x84c>
 8015d24:	2b34      	cmp	r3, #52	; 0x34
 8015d26:	bfde      	ittt	le
 8015d28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015d2c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8015d30:	fa03 f202 	lslle.w	r2, r3, r2
 8015d34:	f04f 0a00 	mov.w	sl, #0
 8015d38:	bfcc      	ite	gt
 8015d3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015d3e:	ea02 0b01 	andle.w	fp, r2, r1
 8015d42:	2200      	movs	r2, #0
 8015d44:	2300      	movs	r3, #0
 8015d46:	4650      	mov	r0, sl
 8015d48:	4659      	mov	r1, fp
 8015d4a:	f7ea fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d1a2      	bne.n	8015c98 <_strtod_l+0x578>
 8015d52:	9b07      	ldr	r3, [sp, #28]
 8015d54:	9300      	str	r3, [sp, #0]
 8015d56:	9908      	ldr	r1, [sp, #32]
 8015d58:	462b      	mov	r3, r5
 8015d5a:	463a      	mov	r2, r7
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f002 f99b 	bl	8018098 <__s2b>
 8015d62:	9007      	str	r0, [sp, #28]
 8015d64:	2800      	cmp	r0, #0
 8015d66:	f43f af1f 	beq.w	8015ba8 <_strtod_l+0x488>
 8015d6a:	9b05      	ldr	r3, [sp, #20]
 8015d6c:	1b9e      	subs	r6, r3, r6
 8015d6e:	9b06      	ldr	r3, [sp, #24]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	bfb4      	ite	lt
 8015d74:	4633      	movlt	r3, r6
 8015d76:	2300      	movge	r3, #0
 8015d78:	930c      	str	r3, [sp, #48]	; 0x30
 8015d7a:	9b06      	ldr	r3, [sp, #24]
 8015d7c:	2500      	movs	r5, #0
 8015d7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d82:	9312      	str	r3, [sp, #72]	; 0x48
 8015d84:	462e      	mov	r6, r5
 8015d86:	9b07      	ldr	r3, [sp, #28]
 8015d88:	4620      	mov	r0, r4
 8015d8a:	6859      	ldr	r1, [r3, #4]
 8015d8c:	f002 f8dc 	bl	8017f48 <_Balloc>
 8015d90:	9005      	str	r0, [sp, #20]
 8015d92:	2800      	cmp	r0, #0
 8015d94:	f43f af0c 	beq.w	8015bb0 <_strtod_l+0x490>
 8015d98:	9b07      	ldr	r3, [sp, #28]
 8015d9a:	691a      	ldr	r2, [r3, #16]
 8015d9c:	3202      	adds	r2, #2
 8015d9e:	f103 010c 	add.w	r1, r3, #12
 8015da2:	0092      	lsls	r2, r2, #2
 8015da4:	300c      	adds	r0, #12
 8015da6:	f7fe fc81 	bl	80146ac <memcpy>
 8015daa:	ec4b ab10 	vmov	d0, sl, fp
 8015dae:	aa1a      	add	r2, sp, #104	; 0x68
 8015db0:	a919      	add	r1, sp, #100	; 0x64
 8015db2:	4620      	mov	r0, r4
 8015db4:	f002 fcb6 	bl	8018724 <__d2b>
 8015db8:	ec4b ab18 	vmov	d8, sl, fp
 8015dbc:	9018      	str	r0, [sp, #96]	; 0x60
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	f43f aef6 	beq.w	8015bb0 <_strtod_l+0x490>
 8015dc4:	2101      	movs	r1, #1
 8015dc6:	4620      	mov	r0, r4
 8015dc8:	f002 fa00 	bl	80181cc <__i2b>
 8015dcc:	4606      	mov	r6, r0
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	f43f aeee 	beq.w	8015bb0 <_strtod_l+0x490>
 8015dd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015dd6:	9904      	ldr	r1, [sp, #16]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	bfab      	itete	ge
 8015ddc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8015dde:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8015de0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8015de2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8015de6:	bfac      	ite	ge
 8015de8:	eb03 0902 	addge.w	r9, r3, r2
 8015dec:	1ad7      	sublt	r7, r2, r3
 8015dee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015df0:	eba3 0801 	sub.w	r8, r3, r1
 8015df4:	4490      	add	r8, r2
 8015df6:	4ba1      	ldr	r3, [pc, #644]	; (801607c <_strtod_l+0x95c>)
 8015df8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8015dfc:	4598      	cmp	r8, r3
 8015dfe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015e02:	f280 80c7 	bge.w	8015f94 <_strtod_l+0x874>
 8015e06:	eba3 0308 	sub.w	r3, r3, r8
 8015e0a:	2b1f      	cmp	r3, #31
 8015e0c:	eba2 0203 	sub.w	r2, r2, r3
 8015e10:	f04f 0101 	mov.w	r1, #1
 8015e14:	f300 80b1 	bgt.w	8015f7a <_strtod_l+0x85a>
 8015e18:	fa01 f303 	lsl.w	r3, r1, r3
 8015e1c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e1e:	2300      	movs	r3, #0
 8015e20:	9308      	str	r3, [sp, #32]
 8015e22:	eb09 0802 	add.w	r8, r9, r2
 8015e26:	9b04      	ldr	r3, [sp, #16]
 8015e28:	45c1      	cmp	r9, r8
 8015e2a:	4417      	add	r7, r2
 8015e2c:	441f      	add	r7, r3
 8015e2e:	464b      	mov	r3, r9
 8015e30:	bfa8      	it	ge
 8015e32:	4643      	movge	r3, r8
 8015e34:	42bb      	cmp	r3, r7
 8015e36:	bfa8      	it	ge
 8015e38:	463b      	movge	r3, r7
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	bfc2      	ittt	gt
 8015e3e:	eba8 0803 	subgt.w	r8, r8, r3
 8015e42:	1aff      	subgt	r7, r7, r3
 8015e44:	eba9 0903 	subgt.w	r9, r9, r3
 8015e48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	dd17      	ble.n	8015e7e <_strtod_l+0x75e>
 8015e4e:	4631      	mov	r1, r6
 8015e50:	461a      	mov	r2, r3
 8015e52:	4620      	mov	r0, r4
 8015e54:	f002 fa7a 	bl	801834c <__pow5mult>
 8015e58:	4606      	mov	r6, r0
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	f43f aea8 	beq.w	8015bb0 <_strtod_l+0x490>
 8015e60:	4601      	mov	r1, r0
 8015e62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e64:	4620      	mov	r0, r4
 8015e66:	f002 f9c7 	bl	80181f8 <__multiply>
 8015e6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	f43f ae9f 	beq.w	8015bb0 <_strtod_l+0x490>
 8015e72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015e74:	4620      	mov	r0, r4
 8015e76:	f002 f8a7 	bl	8017fc8 <_Bfree>
 8015e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015e7c:	9318      	str	r3, [sp, #96]	; 0x60
 8015e7e:	f1b8 0f00 	cmp.w	r8, #0
 8015e82:	f300 808c 	bgt.w	8015f9e <_strtod_l+0x87e>
 8015e86:	9b06      	ldr	r3, [sp, #24]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	dd08      	ble.n	8015e9e <_strtod_l+0x77e>
 8015e8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015e8e:	9905      	ldr	r1, [sp, #20]
 8015e90:	4620      	mov	r0, r4
 8015e92:	f002 fa5b 	bl	801834c <__pow5mult>
 8015e96:	9005      	str	r0, [sp, #20]
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	f43f ae89 	beq.w	8015bb0 <_strtod_l+0x490>
 8015e9e:	2f00      	cmp	r7, #0
 8015ea0:	dd08      	ble.n	8015eb4 <_strtod_l+0x794>
 8015ea2:	9905      	ldr	r1, [sp, #20]
 8015ea4:	463a      	mov	r2, r7
 8015ea6:	4620      	mov	r0, r4
 8015ea8:	f002 faaa 	bl	8018400 <__lshift>
 8015eac:	9005      	str	r0, [sp, #20]
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	f43f ae7e 	beq.w	8015bb0 <_strtod_l+0x490>
 8015eb4:	f1b9 0f00 	cmp.w	r9, #0
 8015eb8:	dd08      	ble.n	8015ecc <_strtod_l+0x7ac>
 8015eba:	4631      	mov	r1, r6
 8015ebc:	464a      	mov	r2, r9
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	f002 fa9e 	bl	8018400 <__lshift>
 8015ec4:	4606      	mov	r6, r0
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f43f ae72 	beq.w	8015bb0 <_strtod_l+0x490>
 8015ecc:	9a05      	ldr	r2, [sp, #20]
 8015ece:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f002 fb21 	bl	8018518 <__mdiff>
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	2800      	cmp	r0, #0
 8015eda:	f43f ae69 	beq.w	8015bb0 <_strtod_l+0x490>
 8015ede:	68c3      	ldr	r3, [r0, #12]
 8015ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	60c3      	str	r3, [r0, #12]
 8015ee6:	4631      	mov	r1, r6
 8015ee8:	f002 fafa 	bl	80184e0 <__mcmp>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	da60      	bge.n	8015fb2 <_strtod_l+0x892>
 8015ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ef2:	ea53 030a 	orrs.w	r3, r3, sl
 8015ef6:	f040 8082 	bne.w	8015ffe <_strtod_l+0x8de>
 8015efa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d17d      	bne.n	8015ffe <_strtod_l+0x8de>
 8015f02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f06:	0d1b      	lsrs	r3, r3, #20
 8015f08:	051b      	lsls	r3, r3, #20
 8015f0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015f0e:	d976      	bls.n	8015ffe <_strtod_l+0x8de>
 8015f10:	696b      	ldr	r3, [r5, #20]
 8015f12:	b913      	cbnz	r3, 8015f1a <_strtod_l+0x7fa>
 8015f14:	692b      	ldr	r3, [r5, #16]
 8015f16:	2b01      	cmp	r3, #1
 8015f18:	dd71      	ble.n	8015ffe <_strtod_l+0x8de>
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	2201      	movs	r2, #1
 8015f1e:	4620      	mov	r0, r4
 8015f20:	f002 fa6e 	bl	8018400 <__lshift>
 8015f24:	4631      	mov	r1, r6
 8015f26:	4605      	mov	r5, r0
 8015f28:	f002 fada 	bl	80184e0 <__mcmp>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	dd66      	ble.n	8015ffe <_strtod_l+0x8de>
 8015f30:	9904      	ldr	r1, [sp, #16]
 8015f32:	4a53      	ldr	r2, [pc, #332]	; (8016080 <_strtod_l+0x960>)
 8015f34:	465b      	mov	r3, fp
 8015f36:	2900      	cmp	r1, #0
 8015f38:	f000 8081 	beq.w	801603e <_strtod_l+0x91e>
 8015f3c:	ea02 010b 	and.w	r1, r2, fp
 8015f40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015f44:	dc7b      	bgt.n	801603e <_strtod_l+0x91e>
 8015f46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015f4a:	f77f aea9 	ble.w	8015ca0 <_strtod_l+0x580>
 8015f4e:	4b4d      	ldr	r3, [pc, #308]	; (8016084 <_strtod_l+0x964>)
 8015f50:	4650      	mov	r0, sl
 8015f52:	4659      	mov	r1, fp
 8015f54:	2200      	movs	r2, #0
 8015f56:	f7ea fb5f 	bl	8000618 <__aeabi_dmul>
 8015f5a:	460b      	mov	r3, r1
 8015f5c:	4303      	orrs	r3, r0
 8015f5e:	bf08      	it	eq
 8015f60:	2322      	moveq	r3, #34	; 0x22
 8015f62:	4682      	mov	sl, r0
 8015f64:	468b      	mov	fp, r1
 8015f66:	bf08      	it	eq
 8015f68:	6023      	streq	r3, [r4, #0]
 8015f6a:	e62b      	b.n	8015bc4 <_strtod_l+0x4a4>
 8015f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f70:	fa02 f303 	lsl.w	r3, r2, r3
 8015f74:	ea03 0a0a 	and.w	sl, r3, sl
 8015f78:	e6e3      	b.n	8015d42 <_strtod_l+0x622>
 8015f7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015f7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015f82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015f86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015f8a:	fa01 f308 	lsl.w	r3, r1, r8
 8015f8e:	9308      	str	r3, [sp, #32]
 8015f90:	910d      	str	r1, [sp, #52]	; 0x34
 8015f92:	e746      	b.n	8015e22 <_strtod_l+0x702>
 8015f94:	2300      	movs	r3, #0
 8015f96:	9308      	str	r3, [sp, #32]
 8015f98:	2301      	movs	r3, #1
 8015f9a:	930d      	str	r3, [sp, #52]	; 0x34
 8015f9c:	e741      	b.n	8015e22 <_strtod_l+0x702>
 8015f9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8015fa0:	4642      	mov	r2, r8
 8015fa2:	4620      	mov	r0, r4
 8015fa4:	f002 fa2c 	bl	8018400 <__lshift>
 8015fa8:	9018      	str	r0, [sp, #96]	; 0x60
 8015faa:	2800      	cmp	r0, #0
 8015fac:	f47f af6b 	bne.w	8015e86 <_strtod_l+0x766>
 8015fb0:	e5fe      	b.n	8015bb0 <_strtod_l+0x490>
 8015fb2:	465f      	mov	r7, fp
 8015fb4:	d16e      	bne.n	8016094 <_strtod_l+0x974>
 8015fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015fb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015fbc:	b342      	cbz	r2, 8016010 <_strtod_l+0x8f0>
 8015fbe:	4a32      	ldr	r2, [pc, #200]	; (8016088 <_strtod_l+0x968>)
 8015fc0:	4293      	cmp	r3, r2
 8015fc2:	d128      	bne.n	8016016 <_strtod_l+0x8f6>
 8015fc4:	9b04      	ldr	r3, [sp, #16]
 8015fc6:	4651      	mov	r1, sl
 8015fc8:	b1eb      	cbz	r3, 8016006 <_strtod_l+0x8e6>
 8015fca:	4b2d      	ldr	r3, [pc, #180]	; (8016080 <_strtod_l+0x960>)
 8015fcc:	403b      	ands	r3, r7
 8015fce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015fd6:	d819      	bhi.n	801600c <_strtod_l+0x8ec>
 8015fd8:	0d1b      	lsrs	r3, r3, #20
 8015fda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015fde:	fa02 f303 	lsl.w	r3, r2, r3
 8015fe2:	4299      	cmp	r1, r3
 8015fe4:	d117      	bne.n	8016016 <_strtod_l+0x8f6>
 8015fe6:	4b29      	ldr	r3, [pc, #164]	; (801608c <_strtod_l+0x96c>)
 8015fe8:	429f      	cmp	r7, r3
 8015fea:	d102      	bne.n	8015ff2 <_strtod_l+0x8d2>
 8015fec:	3101      	adds	r1, #1
 8015fee:	f43f addf 	beq.w	8015bb0 <_strtod_l+0x490>
 8015ff2:	4b23      	ldr	r3, [pc, #140]	; (8016080 <_strtod_l+0x960>)
 8015ff4:	403b      	ands	r3, r7
 8015ff6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015ffa:	f04f 0a00 	mov.w	sl, #0
 8015ffe:	9b04      	ldr	r3, [sp, #16]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d1a4      	bne.n	8015f4e <_strtod_l+0x82e>
 8016004:	e5de      	b.n	8015bc4 <_strtod_l+0x4a4>
 8016006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801600a:	e7ea      	b.n	8015fe2 <_strtod_l+0x8c2>
 801600c:	4613      	mov	r3, r2
 801600e:	e7e8      	b.n	8015fe2 <_strtod_l+0x8c2>
 8016010:	ea53 030a 	orrs.w	r3, r3, sl
 8016014:	d08c      	beq.n	8015f30 <_strtod_l+0x810>
 8016016:	9b08      	ldr	r3, [sp, #32]
 8016018:	b1db      	cbz	r3, 8016052 <_strtod_l+0x932>
 801601a:	423b      	tst	r3, r7
 801601c:	d0ef      	beq.n	8015ffe <_strtod_l+0x8de>
 801601e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016020:	9a04      	ldr	r2, [sp, #16]
 8016022:	4650      	mov	r0, sl
 8016024:	4659      	mov	r1, fp
 8016026:	b1c3      	cbz	r3, 801605a <_strtod_l+0x93a>
 8016028:	f7ff fb5c 	bl	80156e4 <sulp>
 801602c:	4602      	mov	r2, r0
 801602e:	460b      	mov	r3, r1
 8016030:	ec51 0b18 	vmov	r0, r1, d8
 8016034:	f7ea f93a 	bl	80002ac <__adddf3>
 8016038:	4682      	mov	sl, r0
 801603a:	468b      	mov	fp, r1
 801603c:	e7df      	b.n	8015ffe <_strtod_l+0x8de>
 801603e:	4013      	ands	r3, r2
 8016040:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016044:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016048:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801604c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8016050:	e7d5      	b.n	8015ffe <_strtod_l+0x8de>
 8016052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016054:	ea13 0f0a 	tst.w	r3, sl
 8016058:	e7e0      	b.n	801601c <_strtod_l+0x8fc>
 801605a:	f7ff fb43 	bl	80156e4 <sulp>
 801605e:	4602      	mov	r2, r0
 8016060:	460b      	mov	r3, r1
 8016062:	ec51 0b18 	vmov	r0, r1, d8
 8016066:	f7ea f91f 	bl	80002a8 <__aeabi_dsub>
 801606a:	2200      	movs	r2, #0
 801606c:	2300      	movs	r3, #0
 801606e:	4682      	mov	sl, r0
 8016070:	468b      	mov	fp, r1
 8016072:	f7ea fd39 	bl	8000ae8 <__aeabi_dcmpeq>
 8016076:	2800      	cmp	r0, #0
 8016078:	d0c1      	beq.n	8015ffe <_strtod_l+0x8de>
 801607a:	e611      	b.n	8015ca0 <_strtod_l+0x580>
 801607c:	fffffc02 	.word	0xfffffc02
 8016080:	7ff00000 	.word	0x7ff00000
 8016084:	39500000 	.word	0x39500000
 8016088:	000fffff 	.word	0x000fffff
 801608c:	7fefffff 	.word	0x7fefffff
 8016090:	0802b830 	.word	0x0802b830
 8016094:	4631      	mov	r1, r6
 8016096:	4628      	mov	r0, r5
 8016098:	f002 fba0 	bl	80187dc <__ratio>
 801609c:	ec59 8b10 	vmov	r8, r9, d0
 80160a0:	ee10 0a10 	vmov	r0, s0
 80160a4:	2200      	movs	r2, #0
 80160a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80160aa:	4649      	mov	r1, r9
 80160ac:	f7ea fd30 	bl	8000b10 <__aeabi_dcmple>
 80160b0:	2800      	cmp	r0, #0
 80160b2:	d07a      	beq.n	80161aa <_strtod_l+0xa8a>
 80160b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d04a      	beq.n	8016150 <_strtod_l+0xa30>
 80160ba:	4b95      	ldr	r3, [pc, #596]	; (8016310 <_strtod_l+0xbf0>)
 80160bc:	2200      	movs	r2, #0
 80160be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80160c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8016310 <_strtod_l+0xbf0>
 80160c6:	f04f 0800 	mov.w	r8, #0
 80160ca:	4b92      	ldr	r3, [pc, #584]	; (8016314 <_strtod_l+0xbf4>)
 80160cc:	403b      	ands	r3, r7
 80160ce:	930d      	str	r3, [sp, #52]	; 0x34
 80160d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160d2:	4b91      	ldr	r3, [pc, #580]	; (8016318 <_strtod_l+0xbf8>)
 80160d4:	429a      	cmp	r2, r3
 80160d6:	f040 80b0 	bne.w	801623a <_strtod_l+0xb1a>
 80160da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80160de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80160e2:	ec4b ab10 	vmov	d0, sl, fp
 80160e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80160ea:	f002 fa9f 	bl	801862c <__ulp>
 80160ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80160f2:	ec53 2b10 	vmov	r2, r3, d0
 80160f6:	f7ea fa8f 	bl	8000618 <__aeabi_dmul>
 80160fa:	4652      	mov	r2, sl
 80160fc:	465b      	mov	r3, fp
 80160fe:	f7ea f8d5 	bl	80002ac <__adddf3>
 8016102:	460b      	mov	r3, r1
 8016104:	4983      	ldr	r1, [pc, #524]	; (8016314 <_strtod_l+0xbf4>)
 8016106:	4a85      	ldr	r2, [pc, #532]	; (801631c <_strtod_l+0xbfc>)
 8016108:	4019      	ands	r1, r3
 801610a:	4291      	cmp	r1, r2
 801610c:	4682      	mov	sl, r0
 801610e:	d960      	bls.n	80161d2 <_strtod_l+0xab2>
 8016110:	ee18 3a90 	vmov	r3, s17
 8016114:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016118:	4293      	cmp	r3, r2
 801611a:	d104      	bne.n	8016126 <_strtod_l+0xa06>
 801611c:	ee18 3a10 	vmov	r3, s16
 8016120:	3301      	adds	r3, #1
 8016122:	f43f ad45 	beq.w	8015bb0 <_strtod_l+0x490>
 8016126:	f8df b200 	ldr.w	fp, [pc, #512]	; 8016328 <_strtod_l+0xc08>
 801612a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801612e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016130:	4620      	mov	r0, r4
 8016132:	f001 ff49 	bl	8017fc8 <_Bfree>
 8016136:	9905      	ldr	r1, [sp, #20]
 8016138:	4620      	mov	r0, r4
 801613a:	f001 ff45 	bl	8017fc8 <_Bfree>
 801613e:	4631      	mov	r1, r6
 8016140:	4620      	mov	r0, r4
 8016142:	f001 ff41 	bl	8017fc8 <_Bfree>
 8016146:	4629      	mov	r1, r5
 8016148:	4620      	mov	r0, r4
 801614a:	f001 ff3d 	bl	8017fc8 <_Bfree>
 801614e:	e61a      	b.n	8015d86 <_strtod_l+0x666>
 8016150:	f1ba 0f00 	cmp.w	sl, #0
 8016154:	d11b      	bne.n	801618e <_strtod_l+0xa6e>
 8016156:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801615a:	b9f3      	cbnz	r3, 801619a <_strtod_l+0xa7a>
 801615c:	4b6c      	ldr	r3, [pc, #432]	; (8016310 <_strtod_l+0xbf0>)
 801615e:	2200      	movs	r2, #0
 8016160:	4640      	mov	r0, r8
 8016162:	4649      	mov	r1, r9
 8016164:	f7ea fcca 	bl	8000afc <__aeabi_dcmplt>
 8016168:	b9d0      	cbnz	r0, 80161a0 <_strtod_l+0xa80>
 801616a:	4640      	mov	r0, r8
 801616c:	4649      	mov	r1, r9
 801616e:	4b6c      	ldr	r3, [pc, #432]	; (8016320 <_strtod_l+0xc00>)
 8016170:	2200      	movs	r2, #0
 8016172:	f7ea fa51 	bl	8000618 <__aeabi_dmul>
 8016176:	4680      	mov	r8, r0
 8016178:	4689      	mov	r9, r1
 801617a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801617e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8016182:	9315      	str	r3, [sp, #84]	; 0x54
 8016184:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016188:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801618c:	e79d      	b.n	80160ca <_strtod_l+0x9aa>
 801618e:	f1ba 0f01 	cmp.w	sl, #1
 8016192:	d102      	bne.n	801619a <_strtod_l+0xa7a>
 8016194:	2f00      	cmp	r7, #0
 8016196:	f43f ad83 	beq.w	8015ca0 <_strtod_l+0x580>
 801619a:	4b62      	ldr	r3, [pc, #392]	; (8016324 <_strtod_l+0xc04>)
 801619c:	2200      	movs	r2, #0
 801619e:	e78e      	b.n	80160be <_strtod_l+0x99e>
 80161a0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8016320 <_strtod_l+0xc00>
 80161a4:	f04f 0800 	mov.w	r8, #0
 80161a8:	e7e7      	b.n	801617a <_strtod_l+0xa5a>
 80161aa:	4b5d      	ldr	r3, [pc, #372]	; (8016320 <_strtod_l+0xc00>)
 80161ac:	4640      	mov	r0, r8
 80161ae:	4649      	mov	r1, r9
 80161b0:	2200      	movs	r2, #0
 80161b2:	f7ea fa31 	bl	8000618 <__aeabi_dmul>
 80161b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80161b8:	4680      	mov	r8, r0
 80161ba:	4689      	mov	r9, r1
 80161bc:	b933      	cbnz	r3, 80161cc <_strtod_l+0xaac>
 80161be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161c2:	900e      	str	r0, [sp, #56]	; 0x38
 80161c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80161c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80161ca:	e7dd      	b.n	8016188 <_strtod_l+0xa68>
 80161cc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80161d0:	e7f9      	b.n	80161c6 <_strtod_l+0xaa6>
 80161d2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80161d6:	9b04      	ldr	r3, [sp, #16]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d1a8      	bne.n	801612e <_strtod_l+0xa0e>
 80161dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80161e2:	0d1b      	lsrs	r3, r3, #20
 80161e4:	051b      	lsls	r3, r3, #20
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d1a1      	bne.n	801612e <_strtod_l+0xa0e>
 80161ea:	4640      	mov	r0, r8
 80161ec:	4649      	mov	r1, r9
 80161ee:	f7ea fd73 	bl	8000cd8 <__aeabi_d2lz>
 80161f2:	f7ea f9e3 	bl	80005bc <__aeabi_l2d>
 80161f6:	4602      	mov	r2, r0
 80161f8:	460b      	mov	r3, r1
 80161fa:	4640      	mov	r0, r8
 80161fc:	4649      	mov	r1, r9
 80161fe:	f7ea f853 	bl	80002a8 <__aeabi_dsub>
 8016202:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016208:	ea43 030a 	orr.w	r3, r3, sl
 801620c:	4313      	orrs	r3, r2
 801620e:	4680      	mov	r8, r0
 8016210:	4689      	mov	r9, r1
 8016212:	d055      	beq.n	80162c0 <_strtod_l+0xba0>
 8016214:	a336      	add	r3, pc, #216	; (adr r3, 80162f0 <_strtod_l+0xbd0>)
 8016216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621a:	f7ea fc6f 	bl	8000afc <__aeabi_dcmplt>
 801621e:	2800      	cmp	r0, #0
 8016220:	f47f acd0 	bne.w	8015bc4 <_strtod_l+0x4a4>
 8016224:	a334      	add	r3, pc, #208	; (adr r3, 80162f8 <_strtod_l+0xbd8>)
 8016226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801622a:	4640      	mov	r0, r8
 801622c:	4649      	mov	r1, r9
 801622e:	f7ea fc83 	bl	8000b38 <__aeabi_dcmpgt>
 8016232:	2800      	cmp	r0, #0
 8016234:	f43f af7b 	beq.w	801612e <_strtod_l+0xa0e>
 8016238:	e4c4      	b.n	8015bc4 <_strtod_l+0x4a4>
 801623a:	9b04      	ldr	r3, [sp, #16]
 801623c:	b333      	cbz	r3, 801628c <_strtod_l+0xb6c>
 801623e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016240:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016244:	d822      	bhi.n	801628c <_strtod_l+0xb6c>
 8016246:	a32e      	add	r3, pc, #184	; (adr r3, 8016300 <_strtod_l+0xbe0>)
 8016248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624c:	4640      	mov	r0, r8
 801624e:	4649      	mov	r1, r9
 8016250:	f7ea fc5e 	bl	8000b10 <__aeabi_dcmple>
 8016254:	b1a0      	cbz	r0, 8016280 <_strtod_l+0xb60>
 8016256:	4649      	mov	r1, r9
 8016258:	4640      	mov	r0, r8
 801625a:	f7ea fcb5 	bl	8000bc8 <__aeabi_d2uiz>
 801625e:	2801      	cmp	r0, #1
 8016260:	bf38      	it	cc
 8016262:	2001      	movcc	r0, #1
 8016264:	f7ea f95e 	bl	8000524 <__aeabi_ui2d>
 8016268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801626a:	4680      	mov	r8, r0
 801626c:	4689      	mov	r9, r1
 801626e:	bb23      	cbnz	r3, 80162ba <_strtod_l+0xb9a>
 8016270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016274:	9010      	str	r0, [sp, #64]	; 0x40
 8016276:	9311      	str	r3, [sp, #68]	; 0x44
 8016278:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801627c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016282:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016284:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016288:	1a9b      	subs	r3, r3, r2
 801628a:	9309      	str	r3, [sp, #36]	; 0x24
 801628c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016290:	eeb0 0a48 	vmov.f32	s0, s16
 8016294:	eef0 0a68 	vmov.f32	s1, s17
 8016298:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801629c:	f002 f9c6 	bl	801862c <__ulp>
 80162a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162a4:	ec53 2b10 	vmov	r2, r3, d0
 80162a8:	f7ea f9b6 	bl	8000618 <__aeabi_dmul>
 80162ac:	ec53 2b18 	vmov	r2, r3, d8
 80162b0:	f7e9 fffc 	bl	80002ac <__adddf3>
 80162b4:	4682      	mov	sl, r0
 80162b6:	468b      	mov	fp, r1
 80162b8:	e78d      	b.n	80161d6 <_strtod_l+0xab6>
 80162ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80162be:	e7db      	b.n	8016278 <_strtod_l+0xb58>
 80162c0:	a311      	add	r3, pc, #68	; (adr r3, 8016308 <_strtod_l+0xbe8>)
 80162c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c6:	f7ea fc19 	bl	8000afc <__aeabi_dcmplt>
 80162ca:	e7b2      	b.n	8016232 <_strtod_l+0xb12>
 80162cc:	2300      	movs	r3, #0
 80162ce:	930a      	str	r3, [sp, #40]	; 0x28
 80162d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80162d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162d4:	6013      	str	r3, [r2, #0]
 80162d6:	f7ff ba6b 	b.w	80157b0 <_strtod_l+0x90>
 80162da:	2a65      	cmp	r2, #101	; 0x65
 80162dc:	f43f ab5f 	beq.w	801599e <_strtod_l+0x27e>
 80162e0:	2a45      	cmp	r2, #69	; 0x45
 80162e2:	f43f ab5c 	beq.w	801599e <_strtod_l+0x27e>
 80162e6:	2301      	movs	r3, #1
 80162e8:	f7ff bb94 	b.w	8015a14 <_strtod_l+0x2f4>
 80162ec:	f3af 8000 	nop.w
 80162f0:	94a03595 	.word	0x94a03595
 80162f4:	3fdfffff 	.word	0x3fdfffff
 80162f8:	35afe535 	.word	0x35afe535
 80162fc:	3fe00000 	.word	0x3fe00000
 8016300:	ffc00000 	.word	0xffc00000
 8016304:	41dfffff 	.word	0x41dfffff
 8016308:	94a03595 	.word	0x94a03595
 801630c:	3fcfffff 	.word	0x3fcfffff
 8016310:	3ff00000 	.word	0x3ff00000
 8016314:	7ff00000 	.word	0x7ff00000
 8016318:	7fe00000 	.word	0x7fe00000
 801631c:	7c9fffff 	.word	0x7c9fffff
 8016320:	3fe00000 	.word	0x3fe00000
 8016324:	bff00000 	.word	0xbff00000
 8016328:	7fefffff 	.word	0x7fefffff

0801632c <_strtod_r>:
 801632c:	4b01      	ldr	r3, [pc, #4]	; (8016334 <_strtod_r+0x8>)
 801632e:	f7ff b9f7 	b.w	8015720 <_strtod_l>
 8016332:	bf00      	nop
 8016334:	20000914 	.word	0x20000914

08016338 <strtod>:
 8016338:	460a      	mov	r2, r1
 801633a:	4601      	mov	r1, r0
 801633c:	4802      	ldr	r0, [pc, #8]	; (8016348 <strtod+0x10>)
 801633e:	4b03      	ldr	r3, [pc, #12]	; (801634c <strtod+0x14>)
 8016340:	6800      	ldr	r0, [r0, #0]
 8016342:	f7ff b9ed 	b.w	8015720 <_strtod_l>
 8016346:	bf00      	nop
 8016348:	200008ac 	.word	0x200008ac
 801634c:	20000914 	.word	0x20000914

08016350 <strtok>:
 8016350:	4b16      	ldr	r3, [pc, #88]	; (80163ac <strtok+0x5c>)
 8016352:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016354:	681e      	ldr	r6, [r3, #0]
 8016356:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8016358:	4605      	mov	r5, r0
 801635a:	b9fc      	cbnz	r4, 801639c <strtok+0x4c>
 801635c:	2050      	movs	r0, #80	; 0x50
 801635e:	9101      	str	r1, [sp, #4]
 8016360:	f7fe f994 	bl	801468c <malloc>
 8016364:	9901      	ldr	r1, [sp, #4]
 8016366:	65b0      	str	r0, [r6, #88]	; 0x58
 8016368:	4602      	mov	r2, r0
 801636a:	b920      	cbnz	r0, 8016376 <strtok+0x26>
 801636c:	4b10      	ldr	r3, [pc, #64]	; (80163b0 <strtok+0x60>)
 801636e:	4811      	ldr	r0, [pc, #68]	; (80163b4 <strtok+0x64>)
 8016370:	2157      	movs	r1, #87	; 0x57
 8016372:	f000 f98d 	bl	8016690 <__assert_func>
 8016376:	e9c0 4400 	strd	r4, r4, [r0]
 801637a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801637e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8016382:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8016386:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801638a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801638e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8016392:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8016396:	6184      	str	r4, [r0, #24]
 8016398:	7704      	strb	r4, [r0, #28]
 801639a:	6244      	str	r4, [r0, #36]	; 0x24
 801639c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801639e:	2301      	movs	r3, #1
 80163a0:	4628      	mov	r0, r5
 80163a2:	b002      	add	sp, #8
 80163a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a8:	f000 b806 	b.w	80163b8 <__strtok_r>
 80163ac:	200008ac 	.word	0x200008ac
 80163b0:	0802b858 	.word	0x0802b858
 80163b4:	0802b86f 	.word	0x0802b86f

080163b8 <__strtok_r>:
 80163b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ba:	b908      	cbnz	r0, 80163c0 <__strtok_r+0x8>
 80163bc:	6810      	ldr	r0, [r2, #0]
 80163be:	b188      	cbz	r0, 80163e4 <__strtok_r+0x2c>
 80163c0:	4604      	mov	r4, r0
 80163c2:	4620      	mov	r0, r4
 80163c4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80163c8:	460f      	mov	r7, r1
 80163ca:	f817 6b01 	ldrb.w	r6, [r7], #1
 80163ce:	b91e      	cbnz	r6, 80163d8 <__strtok_r+0x20>
 80163d0:	b965      	cbnz	r5, 80163ec <__strtok_r+0x34>
 80163d2:	6015      	str	r5, [r2, #0]
 80163d4:	4628      	mov	r0, r5
 80163d6:	e005      	b.n	80163e4 <__strtok_r+0x2c>
 80163d8:	42b5      	cmp	r5, r6
 80163da:	d1f6      	bne.n	80163ca <__strtok_r+0x12>
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1f0      	bne.n	80163c2 <__strtok_r+0xa>
 80163e0:	6014      	str	r4, [r2, #0]
 80163e2:	7003      	strb	r3, [r0, #0]
 80163e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163e6:	461c      	mov	r4, r3
 80163e8:	e00c      	b.n	8016404 <__strtok_r+0x4c>
 80163ea:	b915      	cbnz	r5, 80163f2 <__strtok_r+0x3a>
 80163ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80163f0:	460e      	mov	r6, r1
 80163f2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80163f6:	42ab      	cmp	r3, r5
 80163f8:	d1f7      	bne.n	80163ea <__strtok_r+0x32>
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d0f3      	beq.n	80163e6 <__strtok_r+0x2e>
 80163fe:	2300      	movs	r3, #0
 8016400:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016404:	6014      	str	r4, [r2, #0]
 8016406:	e7ed      	b.n	80163e4 <__strtok_r+0x2c>

08016408 <_strtol_l.constprop.0>:
 8016408:	2b01      	cmp	r3, #1
 801640a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801640e:	d001      	beq.n	8016414 <_strtol_l.constprop.0+0xc>
 8016410:	2b24      	cmp	r3, #36	; 0x24
 8016412:	d906      	bls.n	8016422 <_strtol_l.constprop.0+0x1a>
 8016414:	f7fe f910 	bl	8014638 <__errno>
 8016418:	2316      	movs	r3, #22
 801641a:	6003      	str	r3, [r0, #0]
 801641c:	2000      	movs	r0, #0
 801641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016422:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016508 <_strtol_l.constprop.0+0x100>
 8016426:	460d      	mov	r5, r1
 8016428:	462e      	mov	r6, r5
 801642a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801642e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016432:	f017 0708 	ands.w	r7, r7, #8
 8016436:	d1f7      	bne.n	8016428 <_strtol_l.constprop.0+0x20>
 8016438:	2c2d      	cmp	r4, #45	; 0x2d
 801643a:	d132      	bne.n	80164a2 <_strtol_l.constprop.0+0x9a>
 801643c:	782c      	ldrb	r4, [r5, #0]
 801643e:	2701      	movs	r7, #1
 8016440:	1cb5      	adds	r5, r6, #2
 8016442:	2b00      	cmp	r3, #0
 8016444:	d05b      	beq.n	80164fe <_strtol_l.constprop.0+0xf6>
 8016446:	2b10      	cmp	r3, #16
 8016448:	d109      	bne.n	801645e <_strtol_l.constprop.0+0x56>
 801644a:	2c30      	cmp	r4, #48	; 0x30
 801644c:	d107      	bne.n	801645e <_strtol_l.constprop.0+0x56>
 801644e:	782c      	ldrb	r4, [r5, #0]
 8016450:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016454:	2c58      	cmp	r4, #88	; 0x58
 8016456:	d14d      	bne.n	80164f4 <_strtol_l.constprop.0+0xec>
 8016458:	786c      	ldrb	r4, [r5, #1]
 801645a:	2310      	movs	r3, #16
 801645c:	3502      	adds	r5, #2
 801645e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016462:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8016466:	f04f 0c00 	mov.w	ip, #0
 801646a:	fbb8 f9f3 	udiv	r9, r8, r3
 801646e:	4666      	mov	r6, ip
 8016470:	fb03 8a19 	mls	sl, r3, r9, r8
 8016474:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016478:	f1be 0f09 	cmp.w	lr, #9
 801647c:	d816      	bhi.n	80164ac <_strtol_l.constprop.0+0xa4>
 801647e:	4674      	mov	r4, lr
 8016480:	42a3      	cmp	r3, r4
 8016482:	dd24      	ble.n	80164ce <_strtol_l.constprop.0+0xc6>
 8016484:	f1bc 0f00 	cmp.w	ip, #0
 8016488:	db1e      	blt.n	80164c8 <_strtol_l.constprop.0+0xc0>
 801648a:	45b1      	cmp	r9, r6
 801648c:	d31c      	bcc.n	80164c8 <_strtol_l.constprop.0+0xc0>
 801648e:	d101      	bne.n	8016494 <_strtol_l.constprop.0+0x8c>
 8016490:	45a2      	cmp	sl, r4
 8016492:	db19      	blt.n	80164c8 <_strtol_l.constprop.0+0xc0>
 8016494:	fb06 4603 	mla	r6, r6, r3, r4
 8016498:	f04f 0c01 	mov.w	ip, #1
 801649c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164a0:	e7e8      	b.n	8016474 <_strtol_l.constprop.0+0x6c>
 80164a2:	2c2b      	cmp	r4, #43	; 0x2b
 80164a4:	bf04      	itt	eq
 80164a6:	782c      	ldrbeq	r4, [r5, #0]
 80164a8:	1cb5      	addeq	r5, r6, #2
 80164aa:	e7ca      	b.n	8016442 <_strtol_l.constprop.0+0x3a>
 80164ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80164b0:	f1be 0f19 	cmp.w	lr, #25
 80164b4:	d801      	bhi.n	80164ba <_strtol_l.constprop.0+0xb2>
 80164b6:	3c37      	subs	r4, #55	; 0x37
 80164b8:	e7e2      	b.n	8016480 <_strtol_l.constprop.0+0x78>
 80164ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80164be:	f1be 0f19 	cmp.w	lr, #25
 80164c2:	d804      	bhi.n	80164ce <_strtol_l.constprop.0+0xc6>
 80164c4:	3c57      	subs	r4, #87	; 0x57
 80164c6:	e7db      	b.n	8016480 <_strtol_l.constprop.0+0x78>
 80164c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80164cc:	e7e6      	b.n	801649c <_strtol_l.constprop.0+0x94>
 80164ce:	f1bc 0f00 	cmp.w	ip, #0
 80164d2:	da05      	bge.n	80164e0 <_strtol_l.constprop.0+0xd8>
 80164d4:	2322      	movs	r3, #34	; 0x22
 80164d6:	6003      	str	r3, [r0, #0]
 80164d8:	4646      	mov	r6, r8
 80164da:	b942      	cbnz	r2, 80164ee <_strtol_l.constprop.0+0xe6>
 80164dc:	4630      	mov	r0, r6
 80164de:	e79e      	b.n	801641e <_strtol_l.constprop.0+0x16>
 80164e0:	b107      	cbz	r7, 80164e4 <_strtol_l.constprop.0+0xdc>
 80164e2:	4276      	negs	r6, r6
 80164e4:	2a00      	cmp	r2, #0
 80164e6:	d0f9      	beq.n	80164dc <_strtol_l.constprop.0+0xd4>
 80164e8:	f1bc 0f00 	cmp.w	ip, #0
 80164ec:	d000      	beq.n	80164f0 <_strtol_l.constprop.0+0xe8>
 80164ee:	1e69      	subs	r1, r5, #1
 80164f0:	6011      	str	r1, [r2, #0]
 80164f2:	e7f3      	b.n	80164dc <_strtol_l.constprop.0+0xd4>
 80164f4:	2430      	movs	r4, #48	; 0x30
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d1b1      	bne.n	801645e <_strtol_l.constprop.0+0x56>
 80164fa:	2308      	movs	r3, #8
 80164fc:	e7af      	b.n	801645e <_strtol_l.constprop.0+0x56>
 80164fe:	2c30      	cmp	r4, #48	; 0x30
 8016500:	d0a5      	beq.n	801644e <_strtol_l.constprop.0+0x46>
 8016502:	230a      	movs	r3, #10
 8016504:	e7ab      	b.n	801645e <_strtol_l.constprop.0+0x56>
 8016506:	bf00      	nop
 8016508:	0802b909 	.word	0x0802b909

0801650c <_strtol_r>:
 801650c:	f7ff bf7c 	b.w	8016408 <_strtol_l.constprop.0>

08016510 <__swbuf_r>:
 8016510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016512:	460e      	mov	r6, r1
 8016514:	4614      	mov	r4, r2
 8016516:	4605      	mov	r5, r0
 8016518:	b118      	cbz	r0, 8016522 <__swbuf_r+0x12>
 801651a:	6983      	ldr	r3, [r0, #24]
 801651c:	b90b      	cbnz	r3, 8016522 <__swbuf_r+0x12>
 801651e:	f001 f86b 	bl	80175f8 <__sinit>
 8016522:	4b21      	ldr	r3, [pc, #132]	; (80165a8 <__swbuf_r+0x98>)
 8016524:	429c      	cmp	r4, r3
 8016526:	d12b      	bne.n	8016580 <__swbuf_r+0x70>
 8016528:	686c      	ldr	r4, [r5, #4]
 801652a:	69a3      	ldr	r3, [r4, #24]
 801652c:	60a3      	str	r3, [r4, #8]
 801652e:	89a3      	ldrh	r3, [r4, #12]
 8016530:	071a      	lsls	r2, r3, #28
 8016532:	d52f      	bpl.n	8016594 <__swbuf_r+0x84>
 8016534:	6923      	ldr	r3, [r4, #16]
 8016536:	b36b      	cbz	r3, 8016594 <__swbuf_r+0x84>
 8016538:	6923      	ldr	r3, [r4, #16]
 801653a:	6820      	ldr	r0, [r4, #0]
 801653c:	1ac0      	subs	r0, r0, r3
 801653e:	6963      	ldr	r3, [r4, #20]
 8016540:	b2f6      	uxtb	r6, r6
 8016542:	4283      	cmp	r3, r0
 8016544:	4637      	mov	r7, r6
 8016546:	dc04      	bgt.n	8016552 <__swbuf_r+0x42>
 8016548:	4621      	mov	r1, r4
 801654a:	4628      	mov	r0, r5
 801654c:	f000 ffc0 	bl	80174d0 <_fflush_r>
 8016550:	bb30      	cbnz	r0, 80165a0 <__swbuf_r+0x90>
 8016552:	68a3      	ldr	r3, [r4, #8]
 8016554:	3b01      	subs	r3, #1
 8016556:	60a3      	str	r3, [r4, #8]
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	1c5a      	adds	r2, r3, #1
 801655c:	6022      	str	r2, [r4, #0]
 801655e:	701e      	strb	r6, [r3, #0]
 8016560:	6963      	ldr	r3, [r4, #20]
 8016562:	3001      	adds	r0, #1
 8016564:	4283      	cmp	r3, r0
 8016566:	d004      	beq.n	8016572 <__swbuf_r+0x62>
 8016568:	89a3      	ldrh	r3, [r4, #12]
 801656a:	07db      	lsls	r3, r3, #31
 801656c:	d506      	bpl.n	801657c <__swbuf_r+0x6c>
 801656e:	2e0a      	cmp	r6, #10
 8016570:	d104      	bne.n	801657c <__swbuf_r+0x6c>
 8016572:	4621      	mov	r1, r4
 8016574:	4628      	mov	r0, r5
 8016576:	f000 ffab 	bl	80174d0 <_fflush_r>
 801657a:	b988      	cbnz	r0, 80165a0 <__swbuf_r+0x90>
 801657c:	4638      	mov	r0, r7
 801657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016580:	4b0a      	ldr	r3, [pc, #40]	; (80165ac <__swbuf_r+0x9c>)
 8016582:	429c      	cmp	r4, r3
 8016584:	d101      	bne.n	801658a <__swbuf_r+0x7a>
 8016586:	68ac      	ldr	r4, [r5, #8]
 8016588:	e7cf      	b.n	801652a <__swbuf_r+0x1a>
 801658a:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <__swbuf_r+0xa0>)
 801658c:	429c      	cmp	r4, r3
 801658e:	bf08      	it	eq
 8016590:	68ec      	ldreq	r4, [r5, #12]
 8016592:	e7ca      	b.n	801652a <__swbuf_r+0x1a>
 8016594:	4621      	mov	r1, r4
 8016596:	4628      	mov	r0, r5
 8016598:	f000 f80c 	bl	80165b4 <__swsetup_r>
 801659c:	2800      	cmp	r0, #0
 801659e:	d0cb      	beq.n	8016538 <__swbuf_r+0x28>
 80165a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80165a4:	e7ea      	b.n	801657c <__swbuf_r+0x6c>
 80165a6:	bf00      	nop
 80165a8:	0802baa4 	.word	0x0802baa4
 80165ac:	0802bac4 	.word	0x0802bac4
 80165b0:	0802ba84 	.word	0x0802ba84

080165b4 <__swsetup_r>:
 80165b4:	4b32      	ldr	r3, [pc, #200]	; (8016680 <__swsetup_r+0xcc>)
 80165b6:	b570      	push	{r4, r5, r6, lr}
 80165b8:	681d      	ldr	r5, [r3, #0]
 80165ba:	4606      	mov	r6, r0
 80165bc:	460c      	mov	r4, r1
 80165be:	b125      	cbz	r5, 80165ca <__swsetup_r+0x16>
 80165c0:	69ab      	ldr	r3, [r5, #24]
 80165c2:	b913      	cbnz	r3, 80165ca <__swsetup_r+0x16>
 80165c4:	4628      	mov	r0, r5
 80165c6:	f001 f817 	bl	80175f8 <__sinit>
 80165ca:	4b2e      	ldr	r3, [pc, #184]	; (8016684 <__swsetup_r+0xd0>)
 80165cc:	429c      	cmp	r4, r3
 80165ce:	d10f      	bne.n	80165f0 <__swsetup_r+0x3c>
 80165d0:	686c      	ldr	r4, [r5, #4]
 80165d2:	89a3      	ldrh	r3, [r4, #12]
 80165d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165d8:	0719      	lsls	r1, r3, #28
 80165da:	d42c      	bmi.n	8016636 <__swsetup_r+0x82>
 80165dc:	06dd      	lsls	r5, r3, #27
 80165de:	d411      	bmi.n	8016604 <__swsetup_r+0x50>
 80165e0:	2309      	movs	r3, #9
 80165e2:	6033      	str	r3, [r6, #0]
 80165e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165e8:	81a3      	strh	r3, [r4, #12]
 80165ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165ee:	e03e      	b.n	801666e <__swsetup_r+0xba>
 80165f0:	4b25      	ldr	r3, [pc, #148]	; (8016688 <__swsetup_r+0xd4>)
 80165f2:	429c      	cmp	r4, r3
 80165f4:	d101      	bne.n	80165fa <__swsetup_r+0x46>
 80165f6:	68ac      	ldr	r4, [r5, #8]
 80165f8:	e7eb      	b.n	80165d2 <__swsetup_r+0x1e>
 80165fa:	4b24      	ldr	r3, [pc, #144]	; (801668c <__swsetup_r+0xd8>)
 80165fc:	429c      	cmp	r4, r3
 80165fe:	bf08      	it	eq
 8016600:	68ec      	ldreq	r4, [r5, #12]
 8016602:	e7e6      	b.n	80165d2 <__swsetup_r+0x1e>
 8016604:	0758      	lsls	r0, r3, #29
 8016606:	d512      	bpl.n	801662e <__swsetup_r+0x7a>
 8016608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801660a:	b141      	cbz	r1, 801661e <__swsetup_r+0x6a>
 801660c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016610:	4299      	cmp	r1, r3
 8016612:	d002      	beq.n	801661a <__swsetup_r+0x66>
 8016614:	4630      	mov	r0, r6
 8016616:	f7fe f85f 	bl	80146d8 <_free_r>
 801661a:	2300      	movs	r3, #0
 801661c:	6363      	str	r3, [r4, #52]	; 0x34
 801661e:	89a3      	ldrh	r3, [r4, #12]
 8016620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016624:	81a3      	strh	r3, [r4, #12]
 8016626:	2300      	movs	r3, #0
 8016628:	6063      	str	r3, [r4, #4]
 801662a:	6923      	ldr	r3, [r4, #16]
 801662c:	6023      	str	r3, [r4, #0]
 801662e:	89a3      	ldrh	r3, [r4, #12]
 8016630:	f043 0308 	orr.w	r3, r3, #8
 8016634:	81a3      	strh	r3, [r4, #12]
 8016636:	6923      	ldr	r3, [r4, #16]
 8016638:	b94b      	cbnz	r3, 801664e <__swsetup_r+0x9a>
 801663a:	89a3      	ldrh	r3, [r4, #12]
 801663c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016644:	d003      	beq.n	801664e <__swsetup_r+0x9a>
 8016646:	4621      	mov	r1, r4
 8016648:	4630      	mov	r0, r6
 801664a:	f001 fc1f 	bl	8017e8c <__smakebuf_r>
 801664e:	89a0      	ldrh	r0, [r4, #12]
 8016650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016654:	f010 0301 	ands.w	r3, r0, #1
 8016658:	d00a      	beq.n	8016670 <__swsetup_r+0xbc>
 801665a:	2300      	movs	r3, #0
 801665c:	60a3      	str	r3, [r4, #8]
 801665e:	6963      	ldr	r3, [r4, #20]
 8016660:	425b      	negs	r3, r3
 8016662:	61a3      	str	r3, [r4, #24]
 8016664:	6923      	ldr	r3, [r4, #16]
 8016666:	b943      	cbnz	r3, 801667a <__swsetup_r+0xc6>
 8016668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801666c:	d1ba      	bne.n	80165e4 <__swsetup_r+0x30>
 801666e:	bd70      	pop	{r4, r5, r6, pc}
 8016670:	0781      	lsls	r1, r0, #30
 8016672:	bf58      	it	pl
 8016674:	6963      	ldrpl	r3, [r4, #20]
 8016676:	60a3      	str	r3, [r4, #8]
 8016678:	e7f4      	b.n	8016664 <__swsetup_r+0xb0>
 801667a:	2000      	movs	r0, #0
 801667c:	e7f7      	b.n	801666e <__swsetup_r+0xba>
 801667e:	bf00      	nop
 8016680:	200008ac 	.word	0x200008ac
 8016684:	0802baa4 	.word	0x0802baa4
 8016688:	0802bac4 	.word	0x0802bac4
 801668c:	0802ba84 	.word	0x0802ba84

08016690 <__assert_func>:
 8016690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016692:	4614      	mov	r4, r2
 8016694:	461a      	mov	r2, r3
 8016696:	4b09      	ldr	r3, [pc, #36]	; (80166bc <__assert_func+0x2c>)
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	4605      	mov	r5, r0
 801669c:	68d8      	ldr	r0, [r3, #12]
 801669e:	b14c      	cbz	r4, 80166b4 <__assert_func+0x24>
 80166a0:	4b07      	ldr	r3, [pc, #28]	; (80166c0 <__assert_func+0x30>)
 80166a2:	9100      	str	r1, [sp, #0]
 80166a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80166a8:	4906      	ldr	r1, [pc, #24]	; (80166c4 <__assert_func+0x34>)
 80166aa:	462b      	mov	r3, r5
 80166ac:	f001 f822 	bl	80176f4 <fiprintf>
 80166b0:	f002 fc84 	bl	8018fbc <abort>
 80166b4:	4b04      	ldr	r3, [pc, #16]	; (80166c8 <__assert_func+0x38>)
 80166b6:	461c      	mov	r4, r3
 80166b8:	e7f3      	b.n	80166a2 <__assert_func+0x12>
 80166ba:	bf00      	nop
 80166bc:	200008ac 	.word	0x200008ac
 80166c0:	0802b8cc 	.word	0x0802b8cc
 80166c4:	0802b8d9 	.word	0x0802b8d9
 80166c8:	0802b907 	.word	0x0802b907

080166cc <quorem>:
 80166cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166d0:	6903      	ldr	r3, [r0, #16]
 80166d2:	690c      	ldr	r4, [r1, #16]
 80166d4:	42a3      	cmp	r3, r4
 80166d6:	4607      	mov	r7, r0
 80166d8:	f2c0 8081 	blt.w	80167de <quorem+0x112>
 80166dc:	3c01      	subs	r4, #1
 80166de:	f101 0814 	add.w	r8, r1, #20
 80166e2:	f100 0514 	add.w	r5, r0, #20
 80166e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80166ea:	9301      	str	r3, [sp, #4]
 80166ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80166f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80166f4:	3301      	adds	r3, #1
 80166f6:	429a      	cmp	r2, r3
 80166f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80166fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016700:	fbb2 f6f3 	udiv	r6, r2, r3
 8016704:	d331      	bcc.n	801676a <quorem+0x9e>
 8016706:	f04f 0e00 	mov.w	lr, #0
 801670a:	4640      	mov	r0, r8
 801670c:	46ac      	mov	ip, r5
 801670e:	46f2      	mov	sl, lr
 8016710:	f850 2b04 	ldr.w	r2, [r0], #4
 8016714:	b293      	uxth	r3, r2
 8016716:	fb06 e303 	mla	r3, r6, r3, lr
 801671a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801671e:	b29b      	uxth	r3, r3
 8016720:	ebaa 0303 	sub.w	r3, sl, r3
 8016724:	f8dc a000 	ldr.w	sl, [ip]
 8016728:	0c12      	lsrs	r2, r2, #16
 801672a:	fa13 f38a 	uxtah	r3, r3, sl
 801672e:	fb06 e202 	mla	r2, r6, r2, lr
 8016732:	9300      	str	r3, [sp, #0]
 8016734:	9b00      	ldr	r3, [sp, #0]
 8016736:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801673a:	b292      	uxth	r2, r2
 801673c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016744:	f8bd 3000 	ldrh.w	r3, [sp]
 8016748:	4581      	cmp	r9, r0
 801674a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801674e:	f84c 3b04 	str.w	r3, [ip], #4
 8016752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016756:	d2db      	bcs.n	8016710 <quorem+0x44>
 8016758:	f855 300b 	ldr.w	r3, [r5, fp]
 801675c:	b92b      	cbnz	r3, 801676a <quorem+0x9e>
 801675e:	9b01      	ldr	r3, [sp, #4]
 8016760:	3b04      	subs	r3, #4
 8016762:	429d      	cmp	r5, r3
 8016764:	461a      	mov	r2, r3
 8016766:	d32e      	bcc.n	80167c6 <quorem+0xfa>
 8016768:	613c      	str	r4, [r7, #16]
 801676a:	4638      	mov	r0, r7
 801676c:	f001 feb8 	bl	80184e0 <__mcmp>
 8016770:	2800      	cmp	r0, #0
 8016772:	db24      	blt.n	80167be <quorem+0xf2>
 8016774:	3601      	adds	r6, #1
 8016776:	4628      	mov	r0, r5
 8016778:	f04f 0c00 	mov.w	ip, #0
 801677c:	f858 2b04 	ldr.w	r2, [r8], #4
 8016780:	f8d0 e000 	ldr.w	lr, [r0]
 8016784:	b293      	uxth	r3, r2
 8016786:	ebac 0303 	sub.w	r3, ip, r3
 801678a:	0c12      	lsrs	r2, r2, #16
 801678c:	fa13 f38e 	uxtah	r3, r3, lr
 8016790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016798:	b29b      	uxth	r3, r3
 801679a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801679e:	45c1      	cmp	r9, r8
 80167a0:	f840 3b04 	str.w	r3, [r0], #4
 80167a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80167a8:	d2e8      	bcs.n	801677c <quorem+0xb0>
 80167aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80167ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80167b2:	b922      	cbnz	r2, 80167be <quorem+0xf2>
 80167b4:	3b04      	subs	r3, #4
 80167b6:	429d      	cmp	r5, r3
 80167b8:	461a      	mov	r2, r3
 80167ba:	d30a      	bcc.n	80167d2 <quorem+0x106>
 80167bc:	613c      	str	r4, [r7, #16]
 80167be:	4630      	mov	r0, r6
 80167c0:	b003      	add	sp, #12
 80167c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167c6:	6812      	ldr	r2, [r2, #0]
 80167c8:	3b04      	subs	r3, #4
 80167ca:	2a00      	cmp	r2, #0
 80167cc:	d1cc      	bne.n	8016768 <quorem+0x9c>
 80167ce:	3c01      	subs	r4, #1
 80167d0:	e7c7      	b.n	8016762 <quorem+0x96>
 80167d2:	6812      	ldr	r2, [r2, #0]
 80167d4:	3b04      	subs	r3, #4
 80167d6:	2a00      	cmp	r2, #0
 80167d8:	d1f0      	bne.n	80167bc <quorem+0xf0>
 80167da:	3c01      	subs	r4, #1
 80167dc:	e7eb      	b.n	80167b6 <quorem+0xea>
 80167de:	2000      	movs	r0, #0
 80167e0:	e7ee      	b.n	80167c0 <quorem+0xf4>
 80167e2:	0000      	movs	r0, r0
 80167e4:	0000      	movs	r0, r0
	...

080167e8 <_dtoa_r>:
 80167e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ec:	ed2d 8b04 	vpush	{d8-d9}
 80167f0:	ec57 6b10 	vmov	r6, r7, d0
 80167f4:	b093      	sub	sp, #76	; 0x4c
 80167f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80167f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80167fc:	9106      	str	r1, [sp, #24]
 80167fe:	ee10 aa10 	vmov	sl, s0
 8016802:	4604      	mov	r4, r0
 8016804:	9209      	str	r2, [sp, #36]	; 0x24
 8016806:	930c      	str	r3, [sp, #48]	; 0x30
 8016808:	46bb      	mov	fp, r7
 801680a:	b975      	cbnz	r5, 801682a <_dtoa_r+0x42>
 801680c:	2010      	movs	r0, #16
 801680e:	f7fd ff3d 	bl	801468c <malloc>
 8016812:	4602      	mov	r2, r0
 8016814:	6260      	str	r0, [r4, #36]	; 0x24
 8016816:	b920      	cbnz	r0, 8016822 <_dtoa_r+0x3a>
 8016818:	4ba7      	ldr	r3, [pc, #668]	; (8016ab8 <_dtoa_r+0x2d0>)
 801681a:	21ea      	movs	r1, #234	; 0xea
 801681c:	48a7      	ldr	r0, [pc, #668]	; (8016abc <_dtoa_r+0x2d4>)
 801681e:	f7ff ff37 	bl	8016690 <__assert_func>
 8016822:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016826:	6005      	str	r5, [r0, #0]
 8016828:	60c5      	str	r5, [r0, #12]
 801682a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801682c:	6819      	ldr	r1, [r3, #0]
 801682e:	b151      	cbz	r1, 8016846 <_dtoa_r+0x5e>
 8016830:	685a      	ldr	r2, [r3, #4]
 8016832:	604a      	str	r2, [r1, #4]
 8016834:	2301      	movs	r3, #1
 8016836:	4093      	lsls	r3, r2
 8016838:	608b      	str	r3, [r1, #8]
 801683a:	4620      	mov	r0, r4
 801683c:	f001 fbc4 	bl	8017fc8 <_Bfree>
 8016840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016842:	2200      	movs	r2, #0
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	1e3b      	subs	r3, r7, #0
 8016848:	bfaa      	itet	ge
 801684a:	2300      	movge	r3, #0
 801684c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016850:	f8c8 3000 	strge.w	r3, [r8]
 8016854:	4b9a      	ldr	r3, [pc, #616]	; (8016ac0 <_dtoa_r+0x2d8>)
 8016856:	bfbc      	itt	lt
 8016858:	2201      	movlt	r2, #1
 801685a:	f8c8 2000 	strlt.w	r2, [r8]
 801685e:	ea33 030b 	bics.w	r3, r3, fp
 8016862:	d11b      	bne.n	801689c <_dtoa_r+0xb4>
 8016864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016866:	f242 730f 	movw	r3, #9999	; 0x270f
 801686a:	6013      	str	r3, [r2, #0]
 801686c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016870:	4333      	orrs	r3, r6
 8016872:	f000 8592 	beq.w	801739a <_dtoa_r+0xbb2>
 8016876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016878:	b963      	cbnz	r3, 8016894 <_dtoa_r+0xac>
 801687a:	4b92      	ldr	r3, [pc, #584]	; (8016ac4 <_dtoa_r+0x2dc>)
 801687c:	e022      	b.n	80168c4 <_dtoa_r+0xdc>
 801687e:	4b92      	ldr	r3, [pc, #584]	; (8016ac8 <_dtoa_r+0x2e0>)
 8016880:	9301      	str	r3, [sp, #4]
 8016882:	3308      	adds	r3, #8
 8016884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016886:	6013      	str	r3, [r2, #0]
 8016888:	9801      	ldr	r0, [sp, #4]
 801688a:	b013      	add	sp, #76	; 0x4c
 801688c:	ecbd 8b04 	vpop	{d8-d9}
 8016890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016894:	4b8b      	ldr	r3, [pc, #556]	; (8016ac4 <_dtoa_r+0x2dc>)
 8016896:	9301      	str	r3, [sp, #4]
 8016898:	3303      	adds	r3, #3
 801689a:	e7f3      	b.n	8016884 <_dtoa_r+0x9c>
 801689c:	2200      	movs	r2, #0
 801689e:	2300      	movs	r3, #0
 80168a0:	4650      	mov	r0, sl
 80168a2:	4659      	mov	r1, fp
 80168a4:	f7ea f920 	bl	8000ae8 <__aeabi_dcmpeq>
 80168a8:	ec4b ab19 	vmov	d9, sl, fp
 80168ac:	4680      	mov	r8, r0
 80168ae:	b158      	cbz	r0, 80168c8 <_dtoa_r+0xe0>
 80168b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80168b2:	2301      	movs	r3, #1
 80168b4:	6013      	str	r3, [r2, #0]
 80168b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	f000 856b 	beq.w	8017394 <_dtoa_r+0xbac>
 80168be:	4883      	ldr	r0, [pc, #524]	; (8016acc <_dtoa_r+0x2e4>)
 80168c0:	6018      	str	r0, [r3, #0]
 80168c2:	1e43      	subs	r3, r0, #1
 80168c4:	9301      	str	r3, [sp, #4]
 80168c6:	e7df      	b.n	8016888 <_dtoa_r+0xa0>
 80168c8:	ec4b ab10 	vmov	d0, sl, fp
 80168cc:	aa10      	add	r2, sp, #64	; 0x40
 80168ce:	a911      	add	r1, sp, #68	; 0x44
 80168d0:	4620      	mov	r0, r4
 80168d2:	f001 ff27 	bl	8018724 <__d2b>
 80168d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80168da:	ee08 0a10 	vmov	s16, r0
 80168de:	2d00      	cmp	r5, #0
 80168e0:	f000 8084 	beq.w	80169ec <_dtoa_r+0x204>
 80168e4:	ee19 3a90 	vmov	r3, s19
 80168e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80168f0:	4656      	mov	r6, sl
 80168f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80168f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80168fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80168fe:	4b74      	ldr	r3, [pc, #464]	; (8016ad0 <_dtoa_r+0x2e8>)
 8016900:	2200      	movs	r2, #0
 8016902:	4630      	mov	r0, r6
 8016904:	4639      	mov	r1, r7
 8016906:	f7e9 fccf 	bl	80002a8 <__aeabi_dsub>
 801690a:	a365      	add	r3, pc, #404	; (adr r3, 8016aa0 <_dtoa_r+0x2b8>)
 801690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016910:	f7e9 fe82 	bl	8000618 <__aeabi_dmul>
 8016914:	a364      	add	r3, pc, #400	; (adr r3, 8016aa8 <_dtoa_r+0x2c0>)
 8016916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801691a:	f7e9 fcc7 	bl	80002ac <__adddf3>
 801691e:	4606      	mov	r6, r0
 8016920:	4628      	mov	r0, r5
 8016922:	460f      	mov	r7, r1
 8016924:	f7e9 fe0e 	bl	8000544 <__aeabi_i2d>
 8016928:	a361      	add	r3, pc, #388	; (adr r3, 8016ab0 <_dtoa_r+0x2c8>)
 801692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801692e:	f7e9 fe73 	bl	8000618 <__aeabi_dmul>
 8016932:	4602      	mov	r2, r0
 8016934:	460b      	mov	r3, r1
 8016936:	4630      	mov	r0, r6
 8016938:	4639      	mov	r1, r7
 801693a:	f7e9 fcb7 	bl	80002ac <__adddf3>
 801693e:	4606      	mov	r6, r0
 8016940:	460f      	mov	r7, r1
 8016942:	f7ea f919 	bl	8000b78 <__aeabi_d2iz>
 8016946:	2200      	movs	r2, #0
 8016948:	9000      	str	r0, [sp, #0]
 801694a:	2300      	movs	r3, #0
 801694c:	4630      	mov	r0, r6
 801694e:	4639      	mov	r1, r7
 8016950:	f7ea f8d4 	bl	8000afc <__aeabi_dcmplt>
 8016954:	b150      	cbz	r0, 801696c <_dtoa_r+0x184>
 8016956:	9800      	ldr	r0, [sp, #0]
 8016958:	f7e9 fdf4 	bl	8000544 <__aeabi_i2d>
 801695c:	4632      	mov	r2, r6
 801695e:	463b      	mov	r3, r7
 8016960:	f7ea f8c2 	bl	8000ae8 <__aeabi_dcmpeq>
 8016964:	b910      	cbnz	r0, 801696c <_dtoa_r+0x184>
 8016966:	9b00      	ldr	r3, [sp, #0]
 8016968:	3b01      	subs	r3, #1
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	9b00      	ldr	r3, [sp, #0]
 801696e:	2b16      	cmp	r3, #22
 8016970:	d85a      	bhi.n	8016a28 <_dtoa_r+0x240>
 8016972:	9a00      	ldr	r2, [sp, #0]
 8016974:	4b57      	ldr	r3, [pc, #348]	; (8016ad4 <_dtoa_r+0x2ec>)
 8016976:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697e:	ec51 0b19 	vmov	r0, r1, d9
 8016982:	f7ea f8bb 	bl	8000afc <__aeabi_dcmplt>
 8016986:	2800      	cmp	r0, #0
 8016988:	d050      	beq.n	8016a2c <_dtoa_r+0x244>
 801698a:	9b00      	ldr	r3, [sp, #0]
 801698c:	3b01      	subs	r3, #1
 801698e:	9300      	str	r3, [sp, #0]
 8016990:	2300      	movs	r3, #0
 8016992:	930b      	str	r3, [sp, #44]	; 0x2c
 8016994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016996:	1b5d      	subs	r5, r3, r5
 8016998:	1e6b      	subs	r3, r5, #1
 801699a:	9305      	str	r3, [sp, #20]
 801699c:	bf45      	ittet	mi
 801699e:	f1c5 0301 	rsbmi	r3, r5, #1
 80169a2:	9304      	strmi	r3, [sp, #16]
 80169a4:	2300      	movpl	r3, #0
 80169a6:	2300      	movmi	r3, #0
 80169a8:	bf4c      	ite	mi
 80169aa:	9305      	strmi	r3, [sp, #20]
 80169ac:	9304      	strpl	r3, [sp, #16]
 80169ae:	9b00      	ldr	r3, [sp, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	db3d      	blt.n	8016a30 <_dtoa_r+0x248>
 80169b4:	9b05      	ldr	r3, [sp, #20]
 80169b6:	9a00      	ldr	r2, [sp, #0]
 80169b8:	920a      	str	r2, [sp, #40]	; 0x28
 80169ba:	4413      	add	r3, r2
 80169bc:	9305      	str	r3, [sp, #20]
 80169be:	2300      	movs	r3, #0
 80169c0:	9307      	str	r3, [sp, #28]
 80169c2:	9b06      	ldr	r3, [sp, #24]
 80169c4:	2b09      	cmp	r3, #9
 80169c6:	f200 8089 	bhi.w	8016adc <_dtoa_r+0x2f4>
 80169ca:	2b05      	cmp	r3, #5
 80169cc:	bfc4      	itt	gt
 80169ce:	3b04      	subgt	r3, #4
 80169d0:	9306      	strgt	r3, [sp, #24]
 80169d2:	9b06      	ldr	r3, [sp, #24]
 80169d4:	f1a3 0302 	sub.w	r3, r3, #2
 80169d8:	bfcc      	ite	gt
 80169da:	2500      	movgt	r5, #0
 80169dc:	2501      	movle	r5, #1
 80169de:	2b03      	cmp	r3, #3
 80169e0:	f200 8087 	bhi.w	8016af2 <_dtoa_r+0x30a>
 80169e4:	e8df f003 	tbb	[pc, r3]
 80169e8:	59383a2d 	.word	0x59383a2d
 80169ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80169f0:	441d      	add	r5, r3
 80169f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80169f6:	2b20      	cmp	r3, #32
 80169f8:	bfc1      	itttt	gt
 80169fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80169fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016a02:	fa0b f303 	lslgt.w	r3, fp, r3
 8016a06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016a0a:	bfda      	itte	le
 8016a0c:	f1c3 0320 	rsble	r3, r3, #32
 8016a10:	fa06 f003 	lslle.w	r0, r6, r3
 8016a14:	4318      	orrgt	r0, r3
 8016a16:	f7e9 fd85 	bl	8000524 <__aeabi_ui2d>
 8016a1a:	2301      	movs	r3, #1
 8016a1c:	4606      	mov	r6, r0
 8016a1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016a22:	3d01      	subs	r5, #1
 8016a24:	930e      	str	r3, [sp, #56]	; 0x38
 8016a26:	e76a      	b.n	80168fe <_dtoa_r+0x116>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	e7b2      	b.n	8016992 <_dtoa_r+0x1aa>
 8016a2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8016a2e:	e7b1      	b.n	8016994 <_dtoa_r+0x1ac>
 8016a30:	9b04      	ldr	r3, [sp, #16]
 8016a32:	9a00      	ldr	r2, [sp, #0]
 8016a34:	1a9b      	subs	r3, r3, r2
 8016a36:	9304      	str	r3, [sp, #16]
 8016a38:	4253      	negs	r3, r2
 8016a3a:	9307      	str	r3, [sp, #28]
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	930a      	str	r3, [sp, #40]	; 0x28
 8016a40:	e7bf      	b.n	80169c2 <_dtoa_r+0x1da>
 8016a42:	2300      	movs	r3, #0
 8016a44:	9308      	str	r3, [sp, #32]
 8016a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	dc55      	bgt.n	8016af8 <_dtoa_r+0x310>
 8016a4c:	2301      	movs	r3, #1
 8016a4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016a52:	461a      	mov	r2, r3
 8016a54:	9209      	str	r2, [sp, #36]	; 0x24
 8016a56:	e00c      	b.n	8016a72 <_dtoa_r+0x28a>
 8016a58:	2301      	movs	r3, #1
 8016a5a:	e7f3      	b.n	8016a44 <_dtoa_r+0x25c>
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a60:	9308      	str	r3, [sp, #32]
 8016a62:	9b00      	ldr	r3, [sp, #0]
 8016a64:	4413      	add	r3, r2
 8016a66:	9302      	str	r3, [sp, #8]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	9303      	str	r3, [sp, #12]
 8016a6e:	bfb8      	it	lt
 8016a70:	2301      	movlt	r3, #1
 8016a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016a74:	2200      	movs	r2, #0
 8016a76:	6042      	str	r2, [r0, #4]
 8016a78:	2204      	movs	r2, #4
 8016a7a:	f102 0614 	add.w	r6, r2, #20
 8016a7e:	429e      	cmp	r6, r3
 8016a80:	6841      	ldr	r1, [r0, #4]
 8016a82:	d93d      	bls.n	8016b00 <_dtoa_r+0x318>
 8016a84:	4620      	mov	r0, r4
 8016a86:	f001 fa5f 	bl	8017f48 <_Balloc>
 8016a8a:	9001      	str	r0, [sp, #4]
 8016a8c:	2800      	cmp	r0, #0
 8016a8e:	d13b      	bne.n	8016b08 <_dtoa_r+0x320>
 8016a90:	4b11      	ldr	r3, [pc, #68]	; (8016ad8 <_dtoa_r+0x2f0>)
 8016a92:	4602      	mov	r2, r0
 8016a94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016a98:	e6c0      	b.n	801681c <_dtoa_r+0x34>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	e7df      	b.n	8016a5e <_dtoa_r+0x276>
 8016a9e:	bf00      	nop
 8016aa0:	636f4361 	.word	0x636f4361
 8016aa4:	3fd287a7 	.word	0x3fd287a7
 8016aa8:	8b60c8b3 	.word	0x8b60c8b3
 8016aac:	3fc68a28 	.word	0x3fc68a28
 8016ab0:	509f79fb 	.word	0x509f79fb
 8016ab4:	3fd34413 	.word	0x3fd34413
 8016ab8:	0802b858 	.word	0x0802b858
 8016abc:	0802ba16 	.word	0x0802ba16
 8016ac0:	7ff00000 	.word	0x7ff00000
 8016ac4:	0802ba12 	.word	0x0802ba12
 8016ac8:	0802ba09 	.word	0x0802ba09
 8016acc:	0802b7d9 	.word	0x0802b7d9
 8016ad0:	3ff80000 	.word	0x3ff80000
 8016ad4:	0802bbe8 	.word	0x0802bbe8
 8016ad8:	0802ba71 	.word	0x0802ba71
 8016adc:	2501      	movs	r5, #1
 8016ade:	2300      	movs	r3, #0
 8016ae0:	9306      	str	r3, [sp, #24]
 8016ae2:	9508      	str	r5, [sp, #32]
 8016ae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ae8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016aec:	2200      	movs	r2, #0
 8016aee:	2312      	movs	r3, #18
 8016af0:	e7b0      	b.n	8016a54 <_dtoa_r+0x26c>
 8016af2:	2301      	movs	r3, #1
 8016af4:	9308      	str	r3, [sp, #32]
 8016af6:	e7f5      	b.n	8016ae4 <_dtoa_r+0x2fc>
 8016af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016afa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016afe:	e7b8      	b.n	8016a72 <_dtoa_r+0x28a>
 8016b00:	3101      	adds	r1, #1
 8016b02:	6041      	str	r1, [r0, #4]
 8016b04:	0052      	lsls	r2, r2, #1
 8016b06:	e7b8      	b.n	8016a7a <_dtoa_r+0x292>
 8016b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016b0a:	9a01      	ldr	r2, [sp, #4]
 8016b0c:	601a      	str	r2, [r3, #0]
 8016b0e:	9b03      	ldr	r3, [sp, #12]
 8016b10:	2b0e      	cmp	r3, #14
 8016b12:	f200 809d 	bhi.w	8016c50 <_dtoa_r+0x468>
 8016b16:	2d00      	cmp	r5, #0
 8016b18:	f000 809a 	beq.w	8016c50 <_dtoa_r+0x468>
 8016b1c:	9b00      	ldr	r3, [sp, #0]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	dd32      	ble.n	8016b88 <_dtoa_r+0x3a0>
 8016b22:	4ab7      	ldr	r2, [pc, #732]	; (8016e00 <_dtoa_r+0x618>)
 8016b24:	f003 030f 	and.w	r3, r3, #15
 8016b28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016b2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016b30:	9b00      	ldr	r3, [sp, #0]
 8016b32:	05d8      	lsls	r0, r3, #23
 8016b34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8016b38:	d516      	bpl.n	8016b68 <_dtoa_r+0x380>
 8016b3a:	4bb2      	ldr	r3, [pc, #712]	; (8016e04 <_dtoa_r+0x61c>)
 8016b3c:	ec51 0b19 	vmov	r0, r1, d9
 8016b40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016b44:	f7e9 fe92 	bl	800086c <__aeabi_ddiv>
 8016b48:	f007 070f 	and.w	r7, r7, #15
 8016b4c:	4682      	mov	sl, r0
 8016b4e:	468b      	mov	fp, r1
 8016b50:	2503      	movs	r5, #3
 8016b52:	4eac      	ldr	r6, [pc, #688]	; (8016e04 <_dtoa_r+0x61c>)
 8016b54:	b957      	cbnz	r7, 8016b6c <_dtoa_r+0x384>
 8016b56:	4642      	mov	r2, r8
 8016b58:	464b      	mov	r3, r9
 8016b5a:	4650      	mov	r0, sl
 8016b5c:	4659      	mov	r1, fp
 8016b5e:	f7e9 fe85 	bl	800086c <__aeabi_ddiv>
 8016b62:	4682      	mov	sl, r0
 8016b64:	468b      	mov	fp, r1
 8016b66:	e028      	b.n	8016bba <_dtoa_r+0x3d2>
 8016b68:	2502      	movs	r5, #2
 8016b6a:	e7f2      	b.n	8016b52 <_dtoa_r+0x36a>
 8016b6c:	07f9      	lsls	r1, r7, #31
 8016b6e:	d508      	bpl.n	8016b82 <_dtoa_r+0x39a>
 8016b70:	4640      	mov	r0, r8
 8016b72:	4649      	mov	r1, r9
 8016b74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016b78:	f7e9 fd4e 	bl	8000618 <__aeabi_dmul>
 8016b7c:	3501      	adds	r5, #1
 8016b7e:	4680      	mov	r8, r0
 8016b80:	4689      	mov	r9, r1
 8016b82:	107f      	asrs	r7, r7, #1
 8016b84:	3608      	adds	r6, #8
 8016b86:	e7e5      	b.n	8016b54 <_dtoa_r+0x36c>
 8016b88:	f000 809b 	beq.w	8016cc2 <_dtoa_r+0x4da>
 8016b8c:	9b00      	ldr	r3, [sp, #0]
 8016b8e:	4f9d      	ldr	r7, [pc, #628]	; (8016e04 <_dtoa_r+0x61c>)
 8016b90:	425e      	negs	r6, r3
 8016b92:	4b9b      	ldr	r3, [pc, #620]	; (8016e00 <_dtoa_r+0x618>)
 8016b94:	f006 020f 	and.w	r2, r6, #15
 8016b98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ba0:	ec51 0b19 	vmov	r0, r1, d9
 8016ba4:	f7e9 fd38 	bl	8000618 <__aeabi_dmul>
 8016ba8:	1136      	asrs	r6, r6, #4
 8016baa:	4682      	mov	sl, r0
 8016bac:	468b      	mov	fp, r1
 8016bae:	2300      	movs	r3, #0
 8016bb0:	2502      	movs	r5, #2
 8016bb2:	2e00      	cmp	r6, #0
 8016bb4:	d17a      	bne.n	8016cac <_dtoa_r+0x4c4>
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d1d3      	bne.n	8016b62 <_dtoa_r+0x37a>
 8016bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	f000 8082 	beq.w	8016cc6 <_dtoa_r+0x4de>
 8016bc2:	4b91      	ldr	r3, [pc, #580]	; (8016e08 <_dtoa_r+0x620>)
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	4650      	mov	r0, sl
 8016bc8:	4659      	mov	r1, fp
 8016bca:	f7e9 ff97 	bl	8000afc <__aeabi_dcmplt>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d079      	beq.n	8016cc6 <_dtoa_r+0x4de>
 8016bd2:	9b03      	ldr	r3, [sp, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d076      	beq.n	8016cc6 <_dtoa_r+0x4de>
 8016bd8:	9b02      	ldr	r3, [sp, #8]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	dd36      	ble.n	8016c4c <_dtoa_r+0x464>
 8016bde:	9b00      	ldr	r3, [sp, #0]
 8016be0:	4650      	mov	r0, sl
 8016be2:	4659      	mov	r1, fp
 8016be4:	1e5f      	subs	r7, r3, #1
 8016be6:	2200      	movs	r2, #0
 8016be8:	4b88      	ldr	r3, [pc, #544]	; (8016e0c <_dtoa_r+0x624>)
 8016bea:	f7e9 fd15 	bl	8000618 <__aeabi_dmul>
 8016bee:	9e02      	ldr	r6, [sp, #8]
 8016bf0:	4682      	mov	sl, r0
 8016bf2:	468b      	mov	fp, r1
 8016bf4:	3501      	adds	r5, #1
 8016bf6:	4628      	mov	r0, r5
 8016bf8:	f7e9 fca4 	bl	8000544 <__aeabi_i2d>
 8016bfc:	4652      	mov	r2, sl
 8016bfe:	465b      	mov	r3, fp
 8016c00:	f7e9 fd0a 	bl	8000618 <__aeabi_dmul>
 8016c04:	4b82      	ldr	r3, [pc, #520]	; (8016e10 <_dtoa_r+0x628>)
 8016c06:	2200      	movs	r2, #0
 8016c08:	f7e9 fb50 	bl	80002ac <__adddf3>
 8016c0c:	46d0      	mov	r8, sl
 8016c0e:	46d9      	mov	r9, fp
 8016c10:	4682      	mov	sl, r0
 8016c12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8016c16:	2e00      	cmp	r6, #0
 8016c18:	d158      	bne.n	8016ccc <_dtoa_r+0x4e4>
 8016c1a:	4b7e      	ldr	r3, [pc, #504]	; (8016e14 <_dtoa_r+0x62c>)
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	4640      	mov	r0, r8
 8016c20:	4649      	mov	r1, r9
 8016c22:	f7e9 fb41 	bl	80002a8 <__aeabi_dsub>
 8016c26:	4652      	mov	r2, sl
 8016c28:	465b      	mov	r3, fp
 8016c2a:	4680      	mov	r8, r0
 8016c2c:	4689      	mov	r9, r1
 8016c2e:	f7e9 ff83 	bl	8000b38 <__aeabi_dcmpgt>
 8016c32:	2800      	cmp	r0, #0
 8016c34:	f040 8295 	bne.w	8017162 <_dtoa_r+0x97a>
 8016c38:	4652      	mov	r2, sl
 8016c3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016c3e:	4640      	mov	r0, r8
 8016c40:	4649      	mov	r1, r9
 8016c42:	f7e9 ff5b 	bl	8000afc <__aeabi_dcmplt>
 8016c46:	2800      	cmp	r0, #0
 8016c48:	f040 8289 	bne.w	801715e <_dtoa_r+0x976>
 8016c4c:	ec5b ab19 	vmov	sl, fp, d9
 8016c50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	f2c0 8148 	blt.w	8016ee8 <_dtoa_r+0x700>
 8016c58:	9a00      	ldr	r2, [sp, #0]
 8016c5a:	2a0e      	cmp	r2, #14
 8016c5c:	f300 8144 	bgt.w	8016ee8 <_dtoa_r+0x700>
 8016c60:	4b67      	ldr	r3, [pc, #412]	; (8016e00 <_dtoa_r+0x618>)
 8016c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	f280 80d5 	bge.w	8016e1c <_dtoa_r+0x634>
 8016c72:	9b03      	ldr	r3, [sp, #12]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	f300 80d1 	bgt.w	8016e1c <_dtoa_r+0x634>
 8016c7a:	f040 826f 	bne.w	801715c <_dtoa_r+0x974>
 8016c7e:	4b65      	ldr	r3, [pc, #404]	; (8016e14 <_dtoa_r+0x62c>)
 8016c80:	2200      	movs	r2, #0
 8016c82:	4640      	mov	r0, r8
 8016c84:	4649      	mov	r1, r9
 8016c86:	f7e9 fcc7 	bl	8000618 <__aeabi_dmul>
 8016c8a:	4652      	mov	r2, sl
 8016c8c:	465b      	mov	r3, fp
 8016c8e:	f7e9 ff49 	bl	8000b24 <__aeabi_dcmpge>
 8016c92:	9e03      	ldr	r6, [sp, #12]
 8016c94:	4637      	mov	r7, r6
 8016c96:	2800      	cmp	r0, #0
 8016c98:	f040 8245 	bne.w	8017126 <_dtoa_r+0x93e>
 8016c9c:	9d01      	ldr	r5, [sp, #4]
 8016c9e:	2331      	movs	r3, #49	; 0x31
 8016ca0:	f805 3b01 	strb.w	r3, [r5], #1
 8016ca4:	9b00      	ldr	r3, [sp, #0]
 8016ca6:	3301      	adds	r3, #1
 8016ca8:	9300      	str	r3, [sp, #0]
 8016caa:	e240      	b.n	801712e <_dtoa_r+0x946>
 8016cac:	07f2      	lsls	r2, r6, #31
 8016cae:	d505      	bpl.n	8016cbc <_dtoa_r+0x4d4>
 8016cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016cb4:	f7e9 fcb0 	bl	8000618 <__aeabi_dmul>
 8016cb8:	3501      	adds	r5, #1
 8016cba:	2301      	movs	r3, #1
 8016cbc:	1076      	asrs	r6, r6, #1
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	e777      	b.n	8016bb2 <_dtoa_r+0x3ca>
 8016cc2:	2502      	movs	r5, #2
 8016cc4:	e779      	b.n	8016bba <_dtoa_r+0x3d2>
 8016cc6:	9f00      	ldr	r7, [sp, #0]
 8016cc8:	9e03      	ldr	r6, [sp, #12]
 8016cca:	e794      	b.n	8016bf6 <_dtoa_r+0x40e>
 8016ccc:	9901      	ldr	r1, [sp, #4]
 8016cce:	4b4c      	ldr	r3, [pc, #304]	; (8016e00 <_dtoa_r+0x618>)
 8016cd0:	4431      	add	r1, r6
 8016cd2:	910d      	str	r1, [sp, #52]	; 0x34
 8016cd4:	9908      	ldr	r1, [sp, #32]
 8016cd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016cda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016cde:	2900      	cmp	r1, #0
 8016ce0:	d043      	beq.n	8016d6a <_dtoa_r+0x582>
 8016ce2:	494d      	ldr	r1, [pc, #308]	; (8016e18 <_dtoa_r+0x630>)
 8016ce4:	2000      	movs	r0, #0
 8016ce6:	f7e9 fdc1 	bl	800086c <__aeabi_ddiv>
 8016cea:	4652      	mov	r2, sl
 8016cec:	465b      	mov	r3, fp
 8016cee:	f7e9 fadb 	bl	80002a8 <__aeabi_dsub>
 8016cf2:	9d01      	ldr	r5, [sp, #4]
 8016cf4:	4682      	mov	sl, r0
 8016cf6:	468b      	mov	fp, r1
 8016cf8:	4649      	mov	r1, r9
 8016cfa:	4640      	mov	r0, r8
 8016cfc:	f7e9 ff3c 	bl	8000b78 <__aeabi_d2iz>
 8016d00:	4606      	mov	r6, r0
 8016d02:	f7e9 fc1f 	bl	8000544 <__aeabi_i2d>
 8016d06:	4602      	mov	r2, r0
 8016d08:	460b      	mov	r3, r1
 8016d0a:	4640      	mov	r0, r8
 8016d0c:	4649      	mov	r1, r9
 8016d0e:	f7e9 facb 	bl	80002a8 <__aeabi_dsub>
 8016d12:	3630      	adds	r6, #48	; 0x30
 8016d14:	f805 6b01 	strb.w	r6, [r5], #1
 8016d18:	4652      	mov	r2, sl
 8016d1a:	465b      	mov	r3, fp
 8016d1c:	4680      	mov	r8, r0
 8016d1e:	4689      	mov	r9, r1
 8016d20:	f7e9 feec 	bl	8000afc <__aeabi_dcmplt>
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d163      	bne.n	8016df0 <_dtoa_r+0x608>
 8016d28:	4642      	mov	r2, r8
 8016d2a:	464b      	mov	r3, r9
 8016d2c:	4936      	ldr	r1, [pc, #216]	; (8016e08 <_dtoa_r+0x620>)
 8016d2e:	2000      	movs	r0, #0
 8016d30:	f7e9 faba 	bl	80002a8 <__aeabi_dsub>
 8016d34:	4652      	mov	r2, sl
 8016d36:	465b      	mov	r3, fp
 8016d38:	f7e9 fee0 	bl	8000afc <__aeabi_dcmplt>
 8016d3c:	2800      	cmp	r0, #0
 8016d3e:	f040 80b5 	bne.w	8016eac <_dtoa_r+0x6c4>
 8016d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d44:	429d      	cmp	r5, r3
 8016d46:	d081      	beq.n	8016c4c <_dtoa_r+0x464>
 8016d48:	4b30      	ldr	r3, [pc, #192]	; (8016e0c <_dtoa_r+0x624>)
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	4650      	mov	r0, sl
 8016d4e:	4659      	mov	r1, fp
 8016d50:	f7e9 fc62 	bl	8000618 <__aeabi_dmul>
 8016d54:	4b2d      	ldr	r3, [pc, #180]	; (8016e0c <_dtoa_r+0x624>)
 8016d56:	4682      	mov	sl, r0
 8016d58:	468b      	mov	fp, r1
 8016d5a:	4640      	mov	r0, r8
 8016d5c:	4649      	mov	r1, r9
 8016d5e:	2200      	movs	r2, #0
 8016d60:	f7e9 fc5a 	bl	8000618 <__aeabi_dmul>
 8016d64:	4680      	mov	r8, r0
 8016d66:	4689      	mov	r9, r1
 8016d68:	e7c6      	b.n	8016cf8 <_dtoa_r+0x510>
 8016d6a:	4650      	mov	r0, sl
 8016d6c:	4659      	mov	r1, fp
 8016d6e:	f7e9 fc53 	bl	8000618 <__aeabi_dmul>
 8016d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d74:	9d01      	ldr	r5, [sp, #4]
 8016d76:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d78:	4682      	mov	sl, r0
 8016d7a:	468b      	mov	fp, r1
 8016d7c:	4649      	mov	r1, r9
 8016d7e:	4640      	mov	r0, r8
 8016d80:	f7e9 fefa 	bl	8000b78 <__aeabi_d2iz>
 8016d84:	4606      	mov	r6, r0
 8016d86:	f7e9 fbdd 	bl	8000544 <__aeabi_i2d>
 8016d8a:	3630      	adds	r6, #48	; 0x30
 8016d8c:	4602      	mov	r2, r0
 8016d8e:	460b      	mov	r3, r1
 8016d90:	4640      	mov	r0, r8
 8016d92:	4649      	mov	r1, r9
 8016d94:	f7e9 fa88 	bl	80002a8 <__aeabi_dsub>
 8016d98:	f805 6b01 	strb.w	r6, [r5], #1
 8016d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d9e:	429d      	cmp	r5, r3
 8016da0:	4680      	mov	r8, r0
 8016da2:	4689      	mov	r9, r1
 8016da4:	f04f 0200 	mov.w	r2, #0
 8016da8:	d124      	bne.n	8016df4 <_dtoa_r+0x60c>
 8016daa:	4b1b      	ldr	r3, [pc, #108]	; (8016e18 <_dtoa_r+0x630>)
 8016dac:	4650      	mov	r0, sl
 8016dae:	4659      	mov	r1, fp
 8016db0:	f7e9 fa7c 	bl	80002ac <__adddf3>
 8016db4:	4602      	mov	r2, r0
 8016db6:	460b      	mov	r3, r1
 8016db8:	4640      	mov	r0, r8
 8016dba:	4649      	mov	r1, r9
 8016dbc:	f7e9 febc 	bl	8000b38 <__aeabi_dcmpgt>
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	d173      	bne.n	8016eac <_dtoa_r+0x6c4>
 8016dc4:	4652      	mov	r2, sl
 8016dc6:	465b      	mov	r3, fp
 8016dc8:	4913      	ldr	r1, [pc, #76]	; (8016e18 <_dtoa_r+0x630>)
 8016dca:	2000      	movs	r0, #0
 8016dcc:	f7e9 fa6c 	bl	80002a8 <__aeabi_dsub>
 8016dd0:	4602      	mov	r2, r0
 8016dd2:	460b      	mov	r3, r1
 8016dd4:	4640      	mov	r0, r8
 8016dd6:	4649      	mov	r1, r9
 8016dd8:	f7e9 fe90 	bl	8000afc <__aeabi_dcmplt>
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	f43f af35 	beq.w	8016c4c <_dtoa_r+0x464>
 8016de2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016de4:	1e6b      	subs	r3, r5, #1
 8016de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016de8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016dec:	2b30      	cmp	r3, #48	; 0x30
 8016dee:	d0f8      	beq.n	8016de2 <_dtoa_r+0x5fa>
 8016df0:	9700      	str	r7, [sp, #0]
 8016df2:	e049      	b.n	8016e88 <_dtoa_r+0x6a0>
 8016df4:	4b05      	ldr	r3, [pc, #20]	; (8016e0c <_dtoa_r+0x624>)
 8016df6:	f7e9 fc0f 	bl	8000618 <__aeabi_dmul>
 8016dfa:	4680      	mov	r8, r0
 8016dfc:	4689      	mov	r9, r1
 8016dfe:	e7bd      	b.n	8016d7c <_dtoa_r+0x594>
 8016e00:	0802bbe8 	.word	0x0802bbe8
 8016e04:	0802bbc0 	.word	0x0802bbc0
 8016e08:	3ff00000 	.word	0x3ff00000
 8016e0c:	40240000 	.word	0x40240000
 8016e10:	401c0000 	.word	0x401c0000
 8016e14:	40140000 	.word	0x40140000
 8016e18:	3fe00000 	.word	0x3fe00000
 8016e1c:	9d01      	ldr	r5, [sp, #4]
 8016e1e:	4656      	mov	r6, sl
 8016e20:	465f      	mov	r7, fp
 8016e22:	4642      	mov	r2, r8
 8016e24:	464b      	mov	r3, r9
 8016e26:	4630      	mov	r0, r6
 8016e28:	4639      	mov	r1, r7
 8016e2a:	f7e9 fd1f 	bl	800086c <__aeabi_ddiv>
 8016e2e:	f7e9 fea3 	bl	8000b78 <__aeabi_d2iz>
 8016e32:	4682      	mov	sl, r0
 8016e34:	f7e9 fb86 	bl	8000544 <__aeabi_i2d>
 8016e38:	4642      	mov	r2, r8
 8016e3a:	464b      	mov	r3, r9
 8016e3c:	f7e9 fbec 	bl	8000618 <__aeabi_dmul>
 8016e40:	4602      	mov	r2, r0
 8016e42:	460b      	mov	r3, r1
 8016e44:	4630      	mov	r0, r6
 8016e46:	4639      	mov	r1, r7
 8016e48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8016e4c:	f7e9 fa2c 	bl	80002a8 <__aeabi_dsub>
 8016e50:	f805 6b01 	strb.w	r6, [r5], #1
 8016e54:	9e01      	ldr	r6, [sp, #4]
 8016e56:	9f03      	ldr	r7, [sp, #12]
 8016e58:	1bae      	subs	r6, r5, r6
 8016e5a:	42b7      	cmp	r7, r6
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	460b      	mov	r3, r1
 8016e60:	d135      	bne.n	8016ece <_dtoa_r+0x6e6>
 8016e62:	f7e9 fa23 	bl	80002ac <__adddf3>
 8016e66:	4642      	mov	r2, r8
 8016e68:	464b      	mov	r3, r9
 8016e6a:	4606      	mov	r6, r0
 8016e6c:	460f      	mov	r7, r1
 8016e6e:	f7e9 fe63 	bl	8000b38 <__aeabi_dcmpgt>
 8016e72:	b9d0      	cbnz	r0, 8016eaa <_dtoa_r+0x6c2>
 8016e74:	4642      	mov	r2, r8
 8016e76:	464b      	mov	r3, r9
 8016e78:	4630      	mov	r0, r6
 8016e7a:	4639      	mov	r1, r7
 8016e7c:	f7e9 fe34 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e80:	b110      	cbz	r0, 8016e88 <_dtoa_r+0x6a0>
 8016e82:	f01a 0f01 	tst.w	sl, #1
 8016e86:	d110      	bne.n	8016eaa <_dtoa_r+0x6c2>
 8016e88:	4620      	mov	r0, r4
 8016e8a:	ee18 1a10 	vmov	r1, s16
 8016e8e:	f001 f89b 	bl	8017fc8 <_Bfree>
 8016e92:	2300      	movs	r3, #0
 8016e94:	9800      	ldr	r0, [sp, #0]
 8016e96:	702b      	strb	r3, [r5, #0]
 8016e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e9a:	3001      	adds	r0, #1
 8016e9c:	6018      	str	r0, [r3, #0]
 8016e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	f43f acf1 	beq.w	8016888 <_dtoa_r+0xa0>
 8016ea6:	601d      	str	r5, [r3, #0]
 8016ea8:	e4ee      	b.n	8016888 <_dtoa_r+0xa0>
 8016eaa:	9f00      	ldr	r7, [sp, #0]
 8016eac:	462b      	mov	r3, r5
 8016eae:	461d      	mov	r5, r3
 8016eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016eb4:	2a39      	cmp	r2, #57	; 0x39
 8016eb6:	d106      	bne.n	8016ec6 <_dtoa_r+0x6de>
 8016eb8:	9a01      	ldr	r2, [sp, #4]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d1f7      	bne.n	8016eae <_dtoa_r+0x6c6>
 8016ebe:	9901      	ldr	r1, [sp, #4]
 8016ec0:	2230      	movs	r2, #48	; 0x30
 8016ec2:	3701      	adds	r7, #1
 8016ec4:	700a      	strb	r2, [r1, #0]
 8016ec6:	781a      	ldrb	r2, [r3, #0]
 8016ec8:	3201      	adds	r2, #1
 8016eca:	701a      	strb	r2, [r3, #0]
 8016ecc:	e790      	b.n	8016df0 <_dtoa_r+0x608>
 8016ece:	4ba6      	ldr	r3, [pc, #664]	; (8017168 <_dtoa_r+0x980>)
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	f7e9 fba1 	bl	8000618 <__aeabi_dmul>
 8016ed6:	2200      	movs	r2, #0
 8016ed8:	2300      	movs	r3, #0
 8016eda:	4606      	mov	r6, r0
 8016edc:	460f      	mov	r7, r1
 8016ede:	f7e9 fe03 	bl	8000ae8 <__aeabi_dcmpeq>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d09d      	beq.n	8016e22 <_dtoa_r+0x63a>
 8016ee6:	e7cf      	b.n	8016e88 <_dtoa_r+0x6a0>
 8016ee8:	9a08      	ldr	r2, [sp, #32]
 8016eea:	2a00      	cmp	r2, #0
 8016eec:	f000 80d7 	beq.w	801709e <_dtoa_r+0x8b6>
 8016ef0:	9a06      	ldr	r2, [sp, #24]
 8016ef2:	2a01      	cmp	r2, #1
 8016ef4:	f300 80ba 	bgt.w	801706c <_dtoa_r+0x884>
 8016ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016efa:	2a00      	cmp	r2, #0
 8016efc:	f000 80b2 	beq.w	8017064 <_dtoa_r+0x87c>
 8016f00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016f04:	9e07      	ldr	r6, [sp, #28]
 8016f06:	9d04      	ldr	r5, [sp, #16]
 8016f08:	9a04      	ldr	r2, [sp, #16]
 8016f0a:	441a      	add	r2, r3
 8016f0c:	9204      	str	r2, [sp, #16]
 8016f0e:	9a05      	ldr	r2, [sp, #20]
 8016f10:	2101      	movs	r1, #1
 8016f12:	441a      	add	r2, r3
 8016f14:	4620      	mov	r0, r4
 8016f16:	9205      	str	r2, [sp, #20]
 8016f18:	f001 f958 	bl	80181cc <__i2b>
 8016f1c:	4607      	mov	r7, r0
 8016f1e:	2d00      	cmp	r5, #0
 8016f20:	dd0c      	ble.n	8016f3c <_dtoa_r+0x754>
 8016f22:	9b05      	ldr	r3, [sp, #20]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	dd09      	ble.n	8016f3c <_dtoa_r+0x754>
 8016f28:	42ab      	cmp	r3, r5
 8016f2a:	9a04      	ldr	r2, [sp, #16]
 8016f2c:	bfa8      	it	ge
 8016f2e:	462b      	movge	r3, r5
 8016f30:	1ad2      	subs	r2, r2, r3
 8016f32:	9204      	str	r2, [sp, #16]
 8016f34:	9a05      	ldr	r2, [sp, #20]
 8016f36:	1aed      	subs	r5, r5, r3
 8016f38:	1ad3      	subs	r3, r2, r3
 8016f3a:	9305      	str	r3, [sp, #20]
 8016f3c:	9b07      	ldr	r3, [sp, #28]
 8016f3e:	b31b      	cbz	r3, 8016f88 <_dtoa_r+0x7a0>
 8016f40:	9b08      	ldr	r3, [sp, #32]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	f000 80af 	beq.w	80170a6 <_dtoa_r+0x8be>
 8016f48:	2e00      	cmp	r6, #0
 8016f4a:	dd13      	ble.n	8016f74 <_dtoa_r+0x78c>
 8016f4c:	4639      	mov	r1, r7
 8016f4e:	4632      	mov	r2, r6
 8016f50:	4620      	mov	r0, r4
 8016f52:	f001 f9fb 	bl	801834c <__pow5mult>
 8016f56:	ee18 2a10 	vmov	r2, s16
 8016f5a:	4601      	mov	r1, r0
 8016f5c:	4607      	mov	r7, r0
 8016f5e:	4620      	mov	r0, r4
 8016f60:	f001 f94a 	bl	80181f8 <__multiply>
 8016f64:	ee18 1a10 	vmov	r1, s16
 8016f68:	4680      	mov	r8, r0
 8016f6a:	4620      	mov	r0, r4
 8016f6c:	f001 f82c 	bl	8017fc8 <_Bfree>
 8016f70:	ee08 8a10 	vmov	s16, r8
 8016f74:	9b07      	ldr	r3, [sp, #28]
 8016f76:	1b9a      	subs	r2, r3, r6
 8016f78:	d006      	beq.n	8016f88 <_dtoa_r+0x7a0>
 8016f7a:	ee18 1a10 	vmov	r1, s16
 8016f7e:	4620      	mov	r0, r4
 8016f80:	f001 f9e4 	bl	801834c <__pow5mult>
 8016f84:	ee08 0a10 	vmov	s16, r0
 8016f88:	2101      	movs	r1, #1
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	f001 f91e 	bl	80181cc <__i2b>
 8016f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	4606      	mov	r6, r0
 8016f96:	f340 8088 	ble.w	80170aa <_dtoa_r+0x8c2>
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	4601      	mov	r1, r0
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f001 f9d4 	bl	801834c <__pow5mult>
 8016fa4:	9b06      	ldr	r3, [sp, #24]
 8016fa6:	2b01      	cmp	r3, #1
 8016fa8:	4606      	mov	r6, r0
 8016faa:	f340 8081 	ble.w	80170b0 <_dtoa_r+0x8c8>
 8016fae:	f04f 0800 	mov.w	r8, #0
 8016fb2:	6933      	ldr	r3, [r6, #16]
 8016fb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016fb8:	6918      	ldr	r0, [r3, #16]
 8016fba:	f001 f8b7 	bl	801812c <__hi0bits>
 8016fbe:	f1c0 0020 	rsb	r0, r0, #32
 8016fc2:	9b05      	ldr	r3, [sp, #20]
 8016fc4:	4418      	add	r0, r3
 8016fc6:	f010 001f 	ands.w	r0, r0, #31
 8016fca:	f000 8092 	beq.w	80170f2 <_dtoa_r+0x90a>
 8016fce:	f1c0 0320 	rsb	r3, r0, #32
 8016fd2:	2b04      	cmp	r3, #4
 8016fd4:	f340 808a 	ble.w	80170ec <_dtoa_r+0x904>
 8016fd8:	f1c0 001c 	rsb	r0, r0, #28
 8016fdc:	9b04      	ldr	r3, [sp, #16]
 8016fde:	4403      	add	r3, r0
 8016fe0:	9304      	str	r3, [sp, #16]
 8016fe2:	9b05      	ldr	r3, [sp, #20]
 8016fe4:	4403      	add	r3, r0
 8016fe6:	4405      	add	r5, r0
 8016fe8:	9305      	str	r3, [sp, #20]
 8016fea:	9b04      	ldr	r3, [sp, #16]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	dd07      	ble.n	8017000 <_dtoa_r+0x818>
 8016ff0:	ee18 1a10 	vmov	r1, s16
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f001 fa02 	bl	8018400 <__lshift>
 8016ffc:	ee08 0a10 	vmov	s16, r0
 8017000:	9b05      	ldr	r3, [sp, #20]
 8017002:	2b00      	cmp	r3, #0
 8017004:	dd05      	ble.n	8017012 <_dtoa_r+0x82a>
 8017006:	4631      	mov	r1, r6
 8017008:	461a      	mov	r2, r3
 801700a:	4620      	mov	r0, r4
 801700c:	f001 f9f8 	bl	8018400 <__lshift>
 8017010:	4606      	mov	r6, r0
 8017012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017014:	2b00      	cmp	r3, #0
 8017016:	d06e      	beq.n	80170f6 <_dtoa_r+0x90e>
 8017018:	ee18 0a10 	vmov	r0, s16
 801701c:	4631      	mov	r1, r6
 801701e:	f001 fa5f 	bl	80184e0 <__mcmp>
 8017022:	2800      	cmp	r0, #0
 8017024:	da67      	bge.n	80170f6 <_dtoa_r+0x90e>
 8017026:	9b00      	ldr	r3, [sp, #0]
 8017028:	3b01      	subs	r3, #1
 801702a:	ee18 1a10 	vmov	r1, s16
 801702e:	9300      	str	r3, [sp, #0]
 8017030:	220a      	movs	r2, #10
 8017032:	2300      	movs	r3, #0
 8017034:	4620      	mov	r0, r4
 8017036:	f000 ffe9 	bl	801800c <__multadd>
 801703a:	9b08      	ldr	r3, [sp, #32]
 801703c:	ee08 0a10 	vmov	s16, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	f000 81b1 	beq.w	80173a8 <_dtoa_r+0xbc0>
 8017046:	2300      	movs	r3, #0
 8017048:	4639      	mov	r1, r7
 801704a:	220a      	movs	r2, #10
 801704c:	4620      	mov	r0, r4
 801704e:	f000 ffdd 	bl	801800c <__multadd>
 8017052:	9b02      	ldr	r3, [sp, #8]
 8017054:	2b00      	cmp	r3, #0
 8017056:	4607      	mov	r7, r0
 8017058:	f300 808e 	bgt.w	8017178 <_dtoa_r+0x990>
 801705c:	9b06      	ldr	r3, [sp, #24]
 801705e:	2b02      	cmp	r3, #2
 8017060:	dc51      	bgt.n	8017106 <_dtoa_r+0x91e>
 8017062:	e089      	b.n	8017178 <_dtoa_r+0x990>
 8017064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017066:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801706a:	e74b      	b.n	8016f04 <_dtoa_r+0x71c>
 801706c:	9b03      	ldr	r3, [sp, #12]
 801706e:	1e5e      	subs	r6, r3, #1
 8017070:	9b07      	ldr	r3, [sp, #28]
 8017072:	42b3      	cmp	r3, r6
 8017074:	bfbf      	itttt	lt
 8017076:	9b07      	ldrlt	r3, [sp, #28]
 8017078:	9607      	strlt	r6, [sp, #28]
 801707a:	1af2      	sublt	r2, r6, r3
 801707c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801707e:	bfb6      	itet	lt
 8017080:	189b      	addlt	r3, r3, r2
 8017082:	1b9e      	subge	r6, r3, r6
 8017084:	930a      	strlt	r3, [sp, #40]	; 0x28
 8017086:	9b03      	ldr	r3, [sp, #12]
 8017088:	bfb8      	it	lt
 801708a:	2600      	movlt	r6, #0
 801708c:	2b00      	cmp	r3, #0
 801708e:	bfb7      	itett	lt
 8017090:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8017094:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8017098:	1a9d      	sublt	r5, r3, r2
 801709a:	2300      	movlt	r3, #0
 801709c:	e734      	b.n	8016f08 <_dtoa_r+0x720>
 801709e:	9e07      	ldr	r6, [sp, #28]
 80170a0:	9d04      	ldr	r5, [sp, #16]
 80170a2:	9f08      	ldr	r7, [sp, #32]
 80170a4:	e73b      	b.n	8016f1e <_dtoa_r+0x736>
 80170a6:	9a07      	ldr	r2, [sp, #28]
 80170a8:	e767      	b.n	8016f7a <_dtoa_r+0x792>
 80170aa:	9b06      	ldr	r3, [sp, #24]
 80170ac:	2b01      	cmp	r3, #1
 80170ae:	dc18      	bgt.n	80170e2 <_dtoa_r+0x8fa>
 80170b0:	f1ba 0f00 	cmp.w	sl, #0
 80170b4:	d115      	bne.n	80170e2 <_dtoa_r+0x8fa>
 80170b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170ba:	b993      	cbnz	r3, 80170e2 <_dtoa_r+0x8fa>
 80170bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170c0:	0d1b      	lsrs	r3, r3, #20
 80170c2:	051b      	lsls	r3, r3, #20
 80170c4:	b183      	cbz	r3, 80170e8 <_dtoa_r+0x900>
 80170c6:	9b04      	ldr	r3, [sp, #16]
 80170c8:	3301      	adds	r3, #1
 80170ca:	9304      	str	r3, [sp, #16]
 80170cc:	9b05      	ldr	r3, [sp, #20]
 80170ce:	3301      	adds	r3, #1
 80170d0:	9305      	str	r3, [sp, #20]
 80170d2:	f04f 0801 	mov.w	r8, #1
 80170d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f47f af6a 	bne.w	8016fb2 <_dtoa_r+0x7ca>
 80170de:	2001      	movs	r0, #1
 80170e0:	e76f      	b.n	8016fc2 <_dtoa_r+0x7da>
 80170e2:	f04f 0800 	mov.w	r8, #0
 80170e6:	e7f6      	b.n	80170d6 <_dtoa_r+0x8ee>
 80170e8:	4698      	mov	r8, r3
 80170ea:	e7f4      	b.n	80170d6 <_dtoa_r+0x8ee>
 80170ec:	f43f af7d 	beq.w	8016fea <_dtoa_r+0x802>
 80170f0:	4618      	mov	r0, r3
 80170f2:	301c      	adds	r0, #28
 80170f4:	e772      	b.n	8016fdc <_dtoa_r+0x7f4>
 80170f6:	9b03      	ldr	r3, [sp, #12]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	dc37      	bgt.n	801716c <_dtoa_r+0x984>
 80170fc:	9b06      	ldr	r3, [sp, #24]
 80170fe:	2b02      	cmp	r3, #2
 8017100:	dd34      	ble.n	801716c <_dtoa_r+0x984>
 8017102:	9b03      	ldr	r3, [sp, #12]
 8017104:	9302      	str	r3, [sp, #8]
 8017106:	9b02      	ldr	r3, [sp, #8]
 8017108:	b96b      	cbnz	r3, 8017126 <_dtoa_r+0x93e>
 801710a:	4631      	mov	r1, r6
 801710c:	2205      	movs	r2, #5
 801710e:	4620      	mov	r0, r4
 8017110:	f000 ff7c 	bl	801800c <__multadd>
 8017114:	4601      	mov	r1, r0
 8017116:	4606      	mov	r6, r0
 8017118:	ee18 0a10 	vmov	r0, s16
 801711c:	f001 f9e0 	bl	80184e0 <__mcmp>
 8017120:	2800      	cmp	r0, #0
 8017122:	f73f adbb 	bgt.w	8016c9c <_dtoa_r+0x4b4>
 8017126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017128:	9d01      	ldr	r5, [sp, #4]
 801712a:	43db      	mvns	r3, r3
 801712c:	9300      	str	r3, [sp, #0]
 801712e:	f04f 0800 	mov.w	r8, #0
 8017132:	4631      	mov	r1, r6
 8017134:	4620      	mov	r0, r4
 8017136:	f000 ff47 	bl	8017fc8 <_Bfree>
 801713a:	2f00      	cmp	r7, #0
 801713c:	f43f aea4 	beq.w	8016e88 <_dtoa_r+0x6a0>
 8017140:	f1b8 0f00 	cmp.w	r8, #0
 8017144:	d005      	beq.n	8017152 <_dtoa_r+0x96a>
 8017146:	45b8      	cmp	r8, r7
 8017148:	d003      	beq.n	8017152 <_dtoa_r+0x96a>
 801714a:	4641      	mov	r1, r8
 801714c:	4620      	mov	r0, r4
 801714e:	f000 ff3b 	bl	8017fc8 <_Bfree>
 8017152:	4639      	mov	r1, r7
 8017154:	4620      	mov	r0, r4
 8017156:	f000 ff37 	bl	8017fc8 <_Bfree>
 801715a:	e695      	b.n	8016e88 <_dtoa_r+0x6a0>
 801715c:	2600      	movs	r6, #0
 801715e:	4637      	mov	r7, r6
 8017160:	e7e1      	b.n	8017126 <_dtoa_r+0x93e>
 8017162:	9700      	str	r7, [sp, #0]
 8017164:	4637      	mov	r7, r6
 8017166:	e599      	b.n	8016c9c <_dtoa_r+0x4b4>
 8017168:	40240000 	.word	0x40240000
 801716c:	9b08      	ldr	r3, [sp, #32]
 801716e:	2b00      	cmp	r3, #0
 8017170:	f000 80ca 	beq.w	8017308 <_dtoa_r+0xb20>
 8017174:	9b03      	ldr	r3, [sp, #12]
 8017176:	9302      	str	r3, [sp, #8]
 8017178:	2d00      	cmp	r5, #0
 801717a:	dd05      	ble.n	8017188 <_dtoa_r+0x9a0>
 801717c:	4639      	mov	r1, r7
 801717e:	462a      	mov	r2, r5
 8017180:	4620      	mov	r0, r4
 8017182:	f001 f93d 	bl	8018400 <__lshift>
 8017186:	4607      	mov	r7, r0
 8017188:	f1b8 0f00 	cmp.w	r8, #0
 801718c:	d05b      	beq.n	8017246 <_dtoa_r+0xa5e>
 801718e:	6879      	ldr	r1, [r7, #4]
 8017190:	4620      	mov	r0, r4
 8017192:	f000 fed9 	bl	8017f48 <_Balloc>
 8017196:	4605      	mov	r5, r0
 8017198:	b928      	cbnz	r0, 80171a6 <_dtoa_r+0x9be>
 801719a:	4b87      	ldr	r3, [pc, #540]	; (80173b8 <_dtoa_r+0xbd0>)
 801719c:	4602      	mov	r2, r0
 801719e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80171a2:	f7ff bb3b 	b.w	801681c <_dtoa_r+0x34>
 80171a6:	693a      	ldr	r2, [r7, #16]
 80171a8:	3202      	adds	r2, #2
 80171aa:	0092      	lsls	r2, r2, #2
 80171ac:	f107 010c 	add.w	r1, r7, #12
 80171b0:	300c      	adds	r0, #12
 80171b2:	f7fd fa7b 	bl	80146ac <memcpy>
 80171b6:	2201      	movs	r2, #1
 80171b8:	4629      	mov	r1, r5
 80171ba:	4620      	mov	r0, r4
 80171bc:	f001 f920 	bl	8018400 <__lshift>
 80171c0:	9b01      	ldr	r3, [sp, #4]
 80171c2:	f103 0901 	add.w	r9, r3, #1
 80171c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80171ca:	4413      	add	r3, r2
 80171cc:	9305      	str	r3, [sp, #20]
 80171ce:	f00a 0301 	and.w	r3, sl, #1
 80171d2:	46b8      	mov	r8, r7
 80171d4:	9304      	str	r3, [sp, #16]
 80171d6:	4607      	mov	r7, r0
 80171d8:	4631      	mov	r1, r6
 80171da:	ee18 0a10 	vmov	r0, s16
 80171de:	f7ff fa75 	bl	80166cc <quorem>
 80171e2:	4641      	mov	r1, r8
 80171e4:	9002      	str	r0, [sp, #8]
 80171e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80171ea:	ee18 0a10 	vmov	r0, s16
 80171ee:	f001 f977 	bl	80184e0 <__mcmp>
 80171f2:	463a      	mov	r2, r7
 80171f4:	9003      	str	r0, [sp, #12]
 80171f6:	4631      	mov	r1, r6
 80171f8:	4620      	mov	r0, r4
 80171fa:	f001 f98d 	bl	8018518 <__mdiff>
 80171fe:	68c2      	ldr	r2, [r0, #12]
 8017200:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8017204:	4605      	mov	r5, r0
 8017206:	bb02      	cbnz	r2, 801724a <_dtoa_r+0xa62>
 8017208:	4601      	mov	r1, r0
 801720a:	ee18 0a10 	vmov	r0, s16
 801720e:	f001 f967 	bl	80184e0 <__mcmp>
 8017212:	4602      	mov	r2, r0
 8017214:	4629      	mov	r1, r5
 8017216:	4620      	mov	r0, r4
 8017218:	9207      	str	r2, [sp, #28]
 801721a:	f000 fed5 	bl	8017fc8 <_Bfree>
 801721e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8017222:	ea43 0102 	orr.w	r1, r3, r2
 8017226:	9b04      	ldr	r3, [sp, #16]
 8017228:	430b      	orrs	r3, r1
 801722a:	464d      	mov	r5, r9
 801722c:	d10f      	bne.n	801724e <_dtoa_r+0xa66>
 801722e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017232:	d02a      	beq.n	801728a <_dtoa_r+0xaa2>
 8017234:	9b03      	ldr	r3, [sp, #12]
 8017236:	2b00      	cmp	r3, #0
 8017238:	dd02      	ble.n	8017240 <_dtoa_r+0xa58>
 801723a:	9b02      	ldr	r3, [sp, #8]
 801723c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017240:	f88b a000 	strb.w	sl, [fp]
 8017244:	e775      	b.n	8017132 <_dtoa_r+0x94a>
 8017246:	4638      	mov	r0, r7
 8017248:	e7ba      	b.n	80171c0 <_dtoa_r+0x9d8>
 801724a:	2201      	movs	r2, #1
 801724c:	e7e2      	b.n	8017214 <_dtoa_r+0xa2c>
 801724e:	9b03      	ldr	r3, [sp, #12]
 8017250:	2b00      	cmp	r3, #0
 8017252:	db04      	blt.n	801725e <_dtoa_r+0xa76>
 8017254:	9906      	ldr	r1, [sp, #24]
 8017256:	430b      	orrs	r3, r1
 8017258:	9904      	ldr	r1, [sp, #16]
 801725a:	430b      	orrs	r3, r1
 801725c:	d122      	bne.n	80172a4 <_dtoa_r+0xabc>
 801725e:	2a00      	cmp	r2, #0
 8017260:	ddee      	ble.n	8017240 <_dtoa_r+0xa58>
 8017262:	ee18 1a10 	vmov	r1, s16
 8017266:	2201      	movs	r2, #1
 8017268:	4620      	mov	r0, r4
 801726a:	f001 f8c9 	bl	8018400 <__lshift>
 801726e:	4631      	mov	r1, r6
 8017270:	ee08 0a10 	vmov	s16, r0
 8017274:	f001 f934 	bl	80184e0 <__mcmp>
 8017278:	2800      	cmp	r0, #0
 801727a:	dc03      	bgt.n	8017284 <_dtoa_r+0xa9c>
 801727c:	d1e0      	bne.n	8017240 <_dtoa_r+0xa58>
 801727e:	f01a 0f01 	tst.w	sl, #1
 8017282:	d0dd      	beq.n	8017240 <_dtoa_r+0xa58>
 8017284:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8017288:	d1d7      	bne.n	801723a <_dtoa_r+0xa52>
 801728a:	2339      	movs	r3, #57	; 0x39
 801728c:	f88b 3000 	strb.w	r3, [fp]
 8017290:	462b      	mov	r3, r5
 8017292:	461d      	mov	r5, r3
 8017294:	3b01      	subs	r3, #1
 8017296:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801729a:	2a39      	cmp	r2, #57	; 0x39
 801729c:	d071      	beq.n	8017382 <_dtoa_r+0xb9a>
 801729e:	3201      	adds	r2, #1
 80172a0:	701a      	strb	r2, [r3, #0]
 80172a2:	e746      	b.n	8017132 <_dtoa_r+0x94a>
 80172a4:	2a00      	cmp	r2, #0
 80172a6:	dd07      	ble.n	80172b8 <_dtoa_r+0xad0>
 80172a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80172ac:	d0ed      	beq.n	801728a <_dtoa_r+0xaa2>
 80172ae:	f10a 0301 	add.w	r3, sl, #1
 80172b2:	f88b 3000 	strb.w	r3, [fp]
 80172b6:	e73c      	b.n	8017132 <_dtoa_r+0x94a>
 80172b8:	9b05      	ldr	r3, [sp, #20]
 80172ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80172be:	4599      	cmp	r9, r3
 80172c0:	d047      	beq.n	8017352 <_dtoa_r+0xb6a>
 80172c2:	ee18 1a10 	vmov	r1, s16
 80172c6:	2300      	movs	r3, #0
 80172c8:	220a      	movs	r2, #10
 80172ca:	4620      	mov	r0, r4
 80172cc:	f000 fe9e 	bl	801800c <__multadd>
 80172d0:	45b8      	cmp	r8, r7
 80172d2:	ee08 0a10 	vmov	s16, r0
 80172d6:	f04f 0300 	mov.w	r3, #0
 80172da:	f04f 020a 	mov.w	r2, #10
 80172de:	4641      	mov	r1, r8
 80172e0:	4620      	mov	r0, r4
 80172e2:	d106      	bne.n	80172f2 <_dtoa_r+0xb0a>
 80172e4:	f000 fe92 	bl	801800c <__multadd>
 80172e8:	4680      	mov	r8, r0
 80172ea:	4607      	mov	r7, r0
 80172ec:	f109 0901 	add.w	r9, r9, #1
 80172f0:	e772      	b.n	80171d8 <_dtoa_r+0x9f0>
 80172f2:	f000 fe8b 	bl	801800c <__multadd>
 80172f6:	4639      	mov	r1, r7
 80172f8:	4680      	mov	r8, r0
 80172fa:	2300      	movs	r3, #0
 80172fc:	220a      	movs	r2, #10
 80172fe:	4620      	mov	r0, r4
 8017300:	f000 fe84 	bl	801800c <__multadd>
 8017304:	4607      	mov	r7, r0
 8017306:	e7f1      	b.n	80172ec <_dtoa_r+0xb04>
 8017308:	9b03      	ldr	r3, [sp, #12]
 801730a:	9302      	str	r3, [sp, #8]
 801730c:	9d01      	ldr	r5, [sp, #4]
 801730e:	ee18 0a10 	vmov	r0, s16
 8017312:	4631      	mov	r1, r6
 8017314:	f7ff f9da 	bl	80166cc <quorem>
 8017318:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801731c:	9b01      	ldr	r3, [sp, #4]
 801731e:	f805 ab01 	strb.w	sl, [r5], #1
 8017322:	1aea      	subs	r2, r5, r3
 8017324:	9b02      	ldr	r3, [sp, #8]
 8017326:	4293      	cmp	r3, r2
 8017328:	dd09      	ble.n	801733e <_dtoa_r+0xb56>
 801732a:	ee18 1a10 	vmov	r1, s16
 801732e:	2300      	movs	r3, #0
 8017330:	220a      	movs	r2, #10
 8017332:	4620      	mov	r0, r4
 8017334:	f000 fe6a 	bl	801800c <__multadd>
 8017338:	ee08 0a10 	vmov	s16, r0
 801733c:	e7e7      	b.n	801730e <_dtoa_r+0xb26>
 801733e:	9b02      	ldr	r3, [sp, #8]
 8017340:	2b00      	cmp	r3, #0
 8017342:	bfc8      	it	gt
 8017344:	461d      	movgt	r5, r3
 8017346:	9b01      	ldr	r3, [sp, #4]
 8017348:	bfd8      	it	le
 801734a:	2501      	movle	r5, #1
 801734c:	441d      	add	r5, r3
 801734e:	f04f 0800 	mov.w	r8, #0
 8017352:	ee18 1a10 	vmov	r1, s16
 8017356:	2201      	movs	r2, #1
 8017358:	4620      	mov	r0, r4
 801735a:	f001 f851 	bl	8018400 <__lshift>
 801735e:	4631      	mov	r1, r6
 8017360:	ee08 0a10 	vmov	s16, r0
 8017364:	f001 f8bc 	bl	80184e0 <__mcmp>
 8017368:	2800      	cmp	r0, #0
 801736a:	dc91      	bgt.n	8017290 <_dtoa_r+0xaa8>
 801736c:	d102      	bne.n	8017374 <_dtoa_r+0xb8c>
 801736e:	f01a 0f01 	tst.w	sl, #1
 8017372:	d18d      	bne.n	8017290 <_dtoa_r+0xaa8>
 8017374:	462b      	mov	r3, r5
 8017376:	461d      	mov	r5, r3
 8017378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801737c:	2a30      	cmp	r2, #48	; 0x30
 801737e:	d0fa      	beq.n	8017376 <_dtoa_r+0xb8e>
 8017380:	e6d7      	b.n	8017132 <_dtoa_r+0x94a>
 8017382:	9a01      	ldr	r2, [sp, #4]
 8017384:	429a      	cmp	r2, r3
 8017386:	d184      	bne.n	8017292 <_dtoa_r+0xaaa>
 8017388:	9b00      	ldr	r3, [sp, #0]
 801738a:	3301      	adds	r3, #1
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	2331      	movs	r3, #49	; 0x31
 8017390:	7013      	strb	r3, [r2, #0]
 8017392:	e6ce      	b.n	8017132 <_dtoa_r+0x94a>
 8017394:	4b09      	ldr	r3, [pc, #36]	; (80173bc <_dtoa_r+0xbd4>)
 8017396:	f7ff ba95 	b.w	80168c4 <_dtoa_r+0xdc>
 801739a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801739c:	2b00      	cmp	r3, #0
 801739e:	f47f aa6e 	bne.w	801687e <_dtoa_r+0x96>
 80173a2:	4b07      	ldr	r3, [pc, #28]	; (80173c0 <_dtoa_r+0xbd8>)
 80173a4:	f7ff ba8e 	b.w	80168c4 <_dtoa_r+0xdc>
 80173a8:	9b02      	ldr	r3, [sp, #8]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	dcae      	bgt.n	801730c <_dtoa_r+0xb24>
 80173ae:	9b06      	ldr	r3, [sp, #24]
 80173b0:	2b02      	cmp	r3, #2
 80173b2:	f73f aea8 	bgt.w	8017106 <_dtoa_r+0x91e>
 80173b6:	e7a9      	b.n	801730c <_dtoa_r+0xb24>
 80173b8:	0802ba71 	.word	0x0802ba71
 80173bc:	0802b7d8 	.word	0x0802b7d8
 80173c0:	0802ba09 	.word	0x0802ba09

080173c4 <__sflush_r>:
 80173c4:	898a      	ldrh	r2, [r1, #12]
 80173c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173ca:	4605      	mov	r5, r0
 80173cc:	0710      	lsls	r0, r2, #28
 80173ce:	460c      	mov	r4, r1
 80173d0:	d458      	bmi.n	8017484 <__sflush_r+0xc0>
 80173d2:	684b      	ldr	r3, [r1, #4]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	dc05      	bgt.n	80173e4 <__sflush_r+0x20>
 80173d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80173da:	2b00      	cmp	r3, #0
 80173dc:	dc02      	bgt.n	80173e4 <__sflush_r+0x20>
 80173de:	2000      	movs	r0, #0
 80173e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173e6:	2e00      	cmp	r6, #0
 80173e8:	d0f9      	beq.n	80173de <__sflush_r+0x1a>
 80173ea:	2300      	movs	r3, #0
 80173ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80173f0:	682f      	ldr	r7, [r5, #0]
 80173f2:	602b      	str	r3, [r5, #0]
 80173f4:	d032      	beq.n	801745c <__sflush_r+0x98>
 80173f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173f8:	89a3      	ldrh	r3, [r4, #12]
 80173fa:	075a      	lsls	r2, r3, #29
 80173fc:	d505      	bpl.n	801740a <__sflush_r+0x46>
 80173fe:	6863      	ldr	r3, [r4, #4]
 8017400:	1ac0      	subs	r0, r0, r3
 8017402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017404:	b10b      	cbz	r3, 801740a <__sflush_r+0x46>
 8017406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017408:	1ac0      	subs	r0, r0, r3
 801740a:	2300      	movs	r3, #0
 801740c:	4602      	mov	r2, r0
 801740e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017410:	6a21      	ldr	r1, [r4, #32]
 8017412:	4628      	mov	r0, r5
 8017414:	47b0      	blx	r6
 8017416:	1c43      	adds	r3, r0, #1
 8017418:	89a3      	ldrh	r3, [r4, #12]
 801741a:	d106      	bne.n	801742a <__sflush_r+0x66>
 801741c:	6829      	ldr	r1, [r5, #0]
 801741e:	291d      	cmp	r1, #29
 8017420:	d82c      	bhi.n	801747c <__sflush_r+0xb8>
 8017422:	4a2a      	ldr	r2, [pc, #168]	; (80174cc <__sflush_r+0x108>)
 8017424:	40ca      	lsrs	r2, r1
 8017426:	07d6      	lsls	r6, r2, #31
 8017428:	d528      	bpl.n	801747c <__sflush_r+0xb8>
 801742a:	2200      	movs	r2, #0
 801742c:	6062      	str	r2, [r4, #4]
 801742e:	04d9      	lsls	r1, r3, #19
 8017430:	6922      	ldr	r2, [r4, #16]
 8017432:	6022      	str	r2, [r4, #0]
 8017434:	d504      	bpl.n	8017440 <__sflush_r+0x7c>
 8017436:	1c42      	adds	r2, r0, #1
 8017438:	d101      	bne.n	801743e <__sflush_r+0x7a>
 801743a:	682b      	ldr	r3, [r5, #0]
 801743c:	b903      	cbnz	r3, 8017440 <__sflush_r+0x7c>
 801743e:	6560      	str	r0, [r4, #84]	; 0x54
 8017440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017442:	602f      	str	r7, [r5, #0]
 8017444:	2900      	cmp	r1, #0
 8017446:	d0ca      	beq.n	80173de <__sflush_r+0x1a>
 8017448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801744c:	4299      	cmp	r1, r3
 801744e:	d002      	beq.n	8017456 <__sflush_r+0x92>
 8017450:	4628      	mov	r0, r5
 8017452:	f7fd f941 	bl	80146d8 <_free_r>
 8017456:	2000      	movs	r0, #0
 8017458:	6360      	str	r0, [r4, #52]	; 0x34
 801745a:	e7c1      	b.n	80173e0 <__sflush_r+0x1c>
 801745c:	6a21      	ldr	r1, [r4, #32]
 801745e:	2301      	movs	r3, #1
 8017460:	4628      	mov	r0, r5
 8017462:	47b0      	blx	r6
 8017464:	1c41      	adds	r1, r0, #1
 8017466:	d1c7      	bne.n	80173f8 <__sflush_r+0x34>
 8017468:	682b      	ldr	r3, [r5, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d0c4      	beq.n	80173f8 <__sflush_r+0x34>
 801746e:	2b1d      	cmp	r3, #29
 8017470:	d001      	beq.n	8017476 <__sflush_r+0xb2>
 8017472:	2b16      	cmp	r3, #22
 8017474:	d101      	bne.n	801747a <__sflush_r+0xb6>
 8017476:	602f      	str	r7, [r5, #0]
 8017478:	e7b1      	b.n	80173de <__sflush_r+0x1a>
 801747a:	89a3      	ldrh	r3, [r4, #12]
 801747c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017480:	81a3      	strh	r3, [r4, #12]
 8017482:	e7ad      	b.n	80173e0 <__sflush_r+0x1c>
 8017484:	690f      	ldr	r7, [r1, #16]
 8017486:	2f00      	cmp	r7, #0
 8017488:	d0a9      	beq.n	80173de <__sflush_r+0x1a>
 801748a:	0793      	lsls	r3, r2, #30
 801748c:	680e      	ldr	r6, [r1, #0]
 801748e:	bf08      	it	eq
 8017490:	694b      	ldreq	r3, [r1, #20]
 8017492:	600f      	str	r7, [r1, #0]
 8017494:	bf18      	it	ne
 8017496:	2300      	movne	r3, #0
 8017498:	eba6 0807 	sub.w	r8, r6, r7
 801749c:	608b      	str	r3, [r1, #8]
 801749e:	f1b8 0f00 	cmp.w	r8, #0
 80174a2:	dd9c      	ble.n	80173de <__sflush_r+0x1a>
 80174a4:	6a21      	ldr	r1, [r4, #32]
 80174a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80174a8:	4643      	mov	r3, r8
 80174aa:	463a      	mov	r2, r7
 80174ac:	4628      	mov	r0, r5
 80174ae:	47b0      	blx	r6
 80174b0:	2800      	cmp	r0, #0
 80174b2:	dc06      	bgt.n	80174c2 <__sflush_r+0xfe>
 80174b4:	89a3      	ldrh	r3, [r4, #12]
 80174b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174ba:	81a3      	strh	r3, [r4, #12]
 80174bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174c0:	e78e      	b.n	80173e0 <__sflush_r+0x1c>
 80174c2:	4407      	add	r7, r0
 80174c4:	eba8 0800 	sub.w	r8, r8, r0
 80174c8:	e7e9      	b.n	801749e <__sflush_r+0xda>
 80174ca:	bf00      	nop
 80174cc:	20400001 	.word	0x20400001

080174d0 <_fflush_r>:
 80174d0:	b538      	push	{r3, r4, r5, lr}
 80174d2:	690b      	ldr	r3, [r1, #16]
 80174d4:	4605      	mov	r5, r0
 80174d6:	460c      	mov	r4, r1
 80174d8:	b913      	cbnz	r3, 80174e0 <_fflush_r+0x10>
 80174da:	2500      	movs	r5, #0
 80174dc:	4628      	mov	r0, r5
 80174de:	bd38      	pop	{r3, r4, r5, pc}
 80174e0:	b118      	cbz	r0, 80174ea <_fflush_r+0x1a>
 80174e2:	6983      	ldr	r3, [r0, #24]
 80174e4:	b90b      	cbnz	r3, 80174ea <_fflush_r+0x1a>
 80174e6:	f000 f887 	bl	80175f8 <__sinit>
 80174ea:	4b14      	ldr	r3, [pc, #80]	; (801753c <_fflush_r+0x6c>)
 80174ec:	429c      	cmp	r4, r3
 80174ee:	d11b      	bne.n	8017528 <_fflush_r+0x58>
 80174f0:	686c      	ldr	r4, [r5, #4]
 80174f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d0ef      	beq.n	80174da <_fflush_r+0xa>
 80174fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174fc:	07d0      	lsls	r0, r2, #31
 80174fe:	d404      	bmi.n	801750a <_fflush_r+0x3a>
 8017500:	0599      	lsls	r1, r3, #22
 8017502:	d402      	bmi.n	801750a <_fflush_r+0x3a>
 8017504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017506:	f000 fc9a 	bl	8017e3e <__retarget_lock_acquire_recursive>
 801750a:	4628      	mov	r0, r5
 801750c:	4621      	mov	r1, r4
 801750e:	f7ff ff59 	bl	80173c4 <__sflush_r>
 8017512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017514:	07da      	lsls	r2, r3, #31
 8017516:	4605      	mov	r5, r0
 8017518:	d4e0      	bmi.n	80174dc <_fflush_r+0xc>
 801751a:	89a3      	ldrh	r3, [r4, #12]
 801751c:	059b      	lsls	r3, r3, #22
 801751e:	d4dd      	bmi.n	80174dc <_fflush_r+0xc>
 8017520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017522:	f000 fc8d 	bl	8017e40 <__retarget_lock_release_recursive>
 8017526:	e7d9      	b.n	80174dc <_fflush_r+0xc>
 8017528:	4b05      	ldr	r3, [pc, #20]	; (8017540 <_fflush_r+0x70>)
 801752a:	429c      	cmp	r4, r3
 801752c:	d101      	bne.n	8017532 <_fflush_r+0x62>
 801752e:	68ac      	ldr	r4, [r5, #8]
 8017530:	e7df      	b.n	80174f2 <_fflush_r+0x22>
 8017532:	4b04      	ldr	r3, [pc, #16]	; (8017544 <_fflush_r+0x74>)
 8017534:	429c      	cmp	r4, r3
 8017536:	bf08      	it	eq
 8017538:	68ec      	ldreq	r4, [r5, #12]
 801753a:	e7da      	b.n	80174f2 <_fflush_r+0x22>
 801753c:	0802baa4 	.word	0x0802baa4
 8017540:	0802bac4 	.word	0x0802bac4
 8017544:	0802ba84 	.word	0x0802ba84

08017548 <std>:
 8017548:	2300      	movs	r3, #0
 801754a:	b510      	push	{r4, lr}
 801754c:	4604      	mov	r4, r0
 801754e:	e9c0 3300 	strd	r3, r3, [r0]
 8017552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017556:	6083      	str	r3, [r0, #8]
 8017558:	8181      	strh	r1, [r0, #12]
 801755a:	6643      	str	r3, [r0, #100]	; 0x64
 801755c:	81c2      	strh	r2, [r0, #14]
 801755e:	6183      	str	r3, [r0, #24]
 8017560:	4619      	mov	r1, r3
 8017562:	2208      	movs	r2, #8
 8017564:	305c      	adds	r0, #92	; 0x5c
 8017566:	f7fd f8af 	bl	80146c8 <memset>
 801756a:	4b05      	ldr	r3, [pc, #20]	; (8017580 <std+0x38>)
 801756c:	6263      	str	r3, [r4, #36]	; 0x24
 801756e:	4b05      	ldr	r3, [pc, #20]	; (8017584 <std+0x3c>)
 8017570:	62a3      	str	r3, [r4, #40]	; 0x28
 8017572:	4b05      	ldr	r3, [pc, #20]	; (8017588 <std+0x40>)
 8017574:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017576:	4b05      	ldr	r3, [pc, #20]	; (801758c <std+0x44>)
 8017578:	6224      	str	r4, [r4, #32]
 801757a:	6323      	str	r3, [r4, #48]	; 0x30
 801757c:	bd10      	pop	{r4, pc}
 801757e:	bf00      	nop
 8017580:	08018ed1 	.word	0x08018ed1
 8017584:	08018ef3 	.word	0x08018ef3
 8017588:	08018f2b 	.word	0x08018f2b
 801758c:	08018f4f 	.word	0x08018f4f

08017590 <_cleanup_r>:
 8017590:	4901      	ldr	r1, [pc, #4]	; (8017598 <_cleanup_r+0x8>)
 8017592:	f000 b8c1 	b.w	8017718 <_fwalk_reent>
 8017596:	bf00      	nop
 8017598:	080174d1 	.word	0x080174d1

0801759c <__sfmoreglue>:
 801759c:	b570      	push	{r4, r5, r6, lr}
 801759e:	2268      	movs	r2, #104	; 0x68
 80175a0:	1e4d      	subs	r5, r1, #1
 80175a2:	4355      	muls	r5, r2
 80175a4:	460e      	mov	r6, r1
 80175a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80175aa:	f7fd f901 	bl	80147b0 <_malloc_r>
 80175ae:	4604      	mov	r4, r0
 80175b0:	b140      	cbz	r0, 80175c4 <__sfmoreglue+0x28>
 80175b2:	2100      	movs	r1, #0
 80175b4:	e9c0 1600 	strd	r1, r6, [r0]
 80175b8:	300c      	adds	r0, #12
 80175ba:	60a0      	str	r0, [r4, #8]
 80175bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80175c0:	f7fd f882 	bl	80146c8 <memset>
 80175c4:	4620      	mov	r0, r4
 80175c6:	bd70      	pop	{r4, r5, r6, pc}

080175c8 <__sfp_lock_acquire>:
 80175c8:	4801      	ldr	r0, [pc, #4]	; (80175d0 <__sfp_lock_acquire+0x8>)
 80175ca:	f000 bc38 	b.w	8017e3e <__retarget_lock_acquire_recursive>
 80175ce:	bf00      	nop
 80175d0:	20001b01 	.word	0x20001b01

080175d4 <__sfp_lock_release>:
 80175d4:	4801      	ldr	r0, [pc, #4]	; (80175dc <__sfp_lock_release+0x8>)
 80175d6:	f000 bc33 	b.w	8017e40 <__retarget_lock_release_recursive>
 80175da:	bf00      	nop
 80175dc:	20001b01 	.word	0x20001b01

080175e0 <__sinit_lock_acquire>:
 80175e0:	4801      	ldr	r0, [pc, #4]	; (80175e8 <__sinit_lock_acquire+0x8>)
 80175e2:	f000 bc2c 	b.w	8017e3e <__retarget_lock_acquire_recursive>
 80175e6:	bf00      	nop
 80175e8:	20001b02 	.word	0x20001b02

080175ec <__sinit_lock_release>:
 80175ec:	4801      	ldr	r0, [pc, #4]	; (80175f4 <__sinit_lock_release+0x8>)
 80175ee:	f000 bc27 	b.w	8017e40 <__retarget_lock_release_recursive>
 80175f2:	bf00      	nop
 80175f4:	20001b02 	.word	0x20001b02

080175f8 <__sinit>:
 80175f8:	b510      	push	{r4, lr}
 80175fa:	4604      	mov	r4, r0
 80175fc:	f7ff fff0 	bl	80175e0 <__sinit_lock_acquire>
 8017600:	69a3      	ldr	r3, [r4, #24]
 8017602:	b11b      	cbz	r3, 801760c <__sinit+0x14>
 8017604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017608:	f7ff bff0 	b.w	80175ec <__sinit_lock_release>
 801760c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017610:	6523      	str	r3, [r4, #80]	; 0x50
 8017612:	4b13      	ldr	r3, [pc, #76]	; (8017660 <__sinit+0x68>)
 8017614:	4a13      	ldr	r2, [pc, #76]	; (8017664 <__sinit+0x6c>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	62a2      	str	r2, [r4, #40]	; 0x28
 801761a:	42a3      	cmp	r3, r4
 801761c:	bf04      	itt	eq
 801761e:	2301      	moveq	r3, #1
 8017620:	61a3      	streq	r3, [r4, #24]
 8017622:	4620      	mov	r0, r4
 8017624:	f000 f820 	bl	8017668 <__sfp>
 8017628:	6060      	str	r0, [r4, #4]
 801762a:	4620      	mov	r0, r4
 801762c:	f000 f81c 	bl	8017668 <__sfp>
 8017630:	60a0      	str	r0, [r4, #8]
 8017632:	4620      	mov	r0, r4
 8017634:	f000 f818 	bl	8017668 <__sfp>
 8017638:	2200      	movs	r2, #0
 801763a:	60e0      	str	r0, [r4, #12]
 801763c:	2104      	movs	r1, #4
 801763e:	6860      	ldr	r0, [r4, #4]
 8017640:	f7ff ff82 	bl	8017548 <std>
 8017644:	68a0      	ldr	r0, [r4, #8]
 8017646:	2201      	movs	r2, #1
 8017648:	2109      	movs	r1, #9
 801764a:	f7ff ff7d 	bl	8017548 <std>
 801764e:	68e0      	ldr	r0, [r4, #12]
 8017650:	2202      	movs	r2, #2
 8017652:	2112      	movs	r1, #18
 8017654:	f7ff ff78 	bl	8017548 <std>
 8017658:	2301      	movs	r3, #1
 801765a:	61a3      	str	r3, [r4, #24]
 801765c:	e7d2      	b.n	8017604 <__sinit+0xc>
 801765e:	bf00      	nop
 8017660:	0802b7c4 	.word	0x0802b7c4
 8017664:	08017591 	.word	0x08017591

08017668 <__sfp>:
 8017668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801766a:	4607      	mov	r7, r0
 801766c:	f7ff ffac 	bl	80175c8 <__sfp_lock_acquire>
 8017670:	4b1e      	ldr	r3, [pc, #120]	; (80176ec <__sfp+0x84>)
 8017672:	681e      	ldr	r6, [r3, #0]
 8017674:	69b3      	ldr	r3, [r6, #24]
 8017676:	b913      	cbnz	r3, 801767e <__sfp+0x16>
 8017678:	4630      	mov	r0, r6
 801767a:	f7ff ffbd 	bl	80175f8 <__sinit>
 801767e:	3648      	adds	r6, #72	; 0x48
 8017680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017684:	3b01      	subs	r3, #1
 8017686:	d503      	bpl.n	8017690 <__sfp+0x28>
 8017688:	6833      	ldr	r3, [r6, #0]
 801768a:	b30b      	cbz	r3, 80176d0 <__sfp+0x68>
 801768c:	6836      	ldr	r6, [r6, #0]
 801768e:	e7f7      	b.n	8017680 <__sfp+0x18>
 8017690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017694:	b9d5      	cbnz	r5, 80176cc <__sfp+0x64>
 8017696:	4b16      	ldr	r3, [pc, #88]	; (80176f0 <__sfp+0x88>)
 8017698:	60e3      	str	r3, [r4, #12]
 801769a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801769e:	6665      	str	r5, [r4, #100]	; 0x64
 80176a0:	f000 fbcc 	bl	8017e3c <__retarget_lock_init_recursive>
 80176a4:	f7ff ff96 	bl	80175d4 <__sfp_lock_release>
 80176a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80176ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80176b0:	6025      	str	r5, [r4, #0]
 80176b2:	61a5      	str	r5, [r4, #24]
 80176b4:	2208      	movs	r2, #8
 80176b6:	4629      	mov	r1, r5
 80176b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80176bc:	f7fd f804 	bl	80146c8 <memset>
 80176c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80176c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80176c8:	4620      	mov	r0, r4
 80176ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176cc:	3468      	adds	r4, #104	; 0x68
 80176ce:	e7d9      	b.n	8017684 <__sfp+0x1c>
 80176d0:	2104      	movs	r1, #4
 80176d2:	4638      	mov	r0, r7
 80176d4:	f7ff ff62 	bl	801759c <__sfmoreglue>
 80176d8:	4604      	mov	r4, r0
 80176da:	6030      	str	r0, [r6, #0]
 80176dc:	2800      	cmp	r0, #0
 80176de:	d1d5      	bne.n	801768c <__sfp+0x24>
 80176e0:	f7ff ff78 	bl	80175d4 <__sfp_lock_release>
 80176e4:	230c      	movs	r3, #12
 80176e6:	603b      	str	r3, [r7, #0]
 80176e8:	e7ee      	b.n	80176c8 <__sfp+0x60>
 80176ea:	bf00      	nop
 80176ec:	0802b7c4 	.word	0x0802b7c4
 80176f0:	ffff0001 	.word	0xffff0001

080176f4 <fiprintf>:
 80176f4:	b40e      	push	{r1, r2, r3}
 80176f6:	b503      	push	{r0, r1, lr}
 80176f8:	4601      	mov	r1, r0
 80176fa:	ab03      	add	r3, sp, #12
 80176fc:	4805      	ldr	r0, [pc, #20]	; (8017714 <fiprintf+0x20>)
 80176fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017702:	6800      	ldr	r0, [r0, #0]
 8017704:	9301      	str	r3, [sp, #4]
 8017706:	f001 faab 	bl	8018c60 <_vfiprintf_r>
 801770a:	b002      	add	sp, #8
 801770c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017710:	b003      	add	sp, #12
 8017712:	4770      	bx	lr
 8017714:	200008ac 	.word	0x200008ac

08017718 <_fwalk_reent>:
 8017718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801771c:	4606      	mov	r6, r0
 801771e:	4688      	mov	r8, r1
 8017720:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017724:	2700      	movs	r7, #0
 8017726:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801772a:	f1b9 0901 	subs.w	r9, r9, #1
 801772e:	d505      	bpl.n	801773c <_fwalk_reent+0x24>
 8017730:	6824      	ldr	r4, [r4, #0]
 8017732:	2c00      	cmp	r4, #0
 8017734:	d1f7      	bne.n	8017726 <_fwalk_reent+0xe>
 8017736:	4638      	mov	r0, r7
 8017738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801773c:	89ab      	ldrh	r3, [r5, #12]
 801773e:	2b01      	cmp	r3, #1
 8017740:	d907      	bls.n	8017752 <_fwalk_reent+0x3a>
 8017742:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017746:	3301      	adds	r3, #1
 8017748:	d003      	beq.n	8017752 <_fwalk_reent+0x3a>
 801774a:	4629      	mov	r1, r5
 801774c:	4630      	mov	r0, r6
 801774e:	47c0      	blx	r8
 8017750:	4307      	orrs	r7, r0
 8017752:	3568      	adds	r5, #104	; 0x68
 8017754:	e7e9      	b.n	801772a <_fwalk_reent+0x12>

08017756 <rshift>:
 8017756:	6903      	ldr	r3, [r0, #16]
 8017758:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801775c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017760:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017764:	f100 0414 	add.w	r4, r0, #20
 8017768:	dd45      	ble.n	80177f6 <rshift+0xa0>
 801776a:	f011 011f 	ands.w	r1, r1, #31
 801776e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017772:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017776:	d10c      	bne.n	8017792 <rshift+0x3c>
 8017778:	f100 0710 	add.w	r7, r0, #16
 801777c:	4629      	mov	r1, r5
 801777e:	42b1      	cmp	r1, r6
 8017780:	d334      	bcc.n	80177ec <rshift+0x96>
 8017782:	1a9b      	subs	r3, r3, r2
 8017784:	009b      	lsls	r3, r3, #2
 8017786:	1eea      	subs	r2, r5, #3
 8017788:	4296      	cmp	r6, r2
 801778a:	bf38      	it	cc
 801778c:	2300      	movcc	r3, #0
 801778e:	4423      	add	r3, r4
 8017790:	e015      	b.n	80177be <rshift+0x68>
 8017792:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017796:	f1c1 0820 	rsb	r8, r1, #32
 801779a:	40cf      	lsrs	r7, r1
 801779c:	f105 0e04 	add.w	lr, r5, #4
 80177a0:	46a1      	mov	r9, r4
 80177a2:	4576      	cmp	r6, lr
 80177a4:	46f4      	mov	ip, lr
 80177a6:	d815      	bhi.n	80177d4 <rshift+0x7e>
 80177a8:	1a9a      	subs	r2, r3, r2
 80177aa:	0092      	lsls	r2, r2, #2
 80177ac:	3a04      	subs	r2, #4
 80177ae:	3501      	adds	r5, #1
 80177b0:	42ae      	cmp	r6, r5
 80177b2:	bf38      	it	cc
 80177b4:	2200      	movcc	r2, #0
 80177b6:	18a3      	adds	r3, r4, r2
 80177b8:	50a7      	str	r7, [r4, r2]
 80177ba:	b107      	cbz	r7, 80177be <rshift+0x68>
 80177bc:	3304      	adds	r3, #4
 80177be:	1b1a      	subs	r2, r3, r4
 80177c0:	42a3      	cmp	r3, r4
 80177c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80177c6:	bf08      	it	eq
 80177c8:	2300      	moveq	r3, #0
 80177ca:	6102      	str	r2, [r0, #16]
 80177cc:	bf08      	it	eq
 80177ce:	6143      	streq	r3, [r0, #20]
 80177d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d4:	f8dc c000 	ldr.w	ip, [ip]
 80177d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80177dc:	ea4c 0707 	orr.w	r7, ip, r7
 80177e0:	f849 7b04 	str.w	r7, [r9], #4
 80177e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80177e8:	40cf      	lsrs	r7, r1
 80177ea:	e7da      	b.n	80177a2 <rshift+0x4c>
 80177ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80177f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80177f4:	e7c3      	b.n	801777e <rshift+0x28>
 80177f6:	4623      	mov	r3, r4
 80177f8:	e7e1      	b.n	80177be <rshift+0x68>

080177fa <__hexdig_fun>:
 80177fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80177fe:	2b09      	cmp	r3, #9
 8017800:	d802      	bhi.n	8017808 <__hexdig_fun+0xe>
 8017802:	3820      	subs	r0, #32
 8017804:	b2c0      	uxtb	r0, r0
 8017806:	4770      	bx	lr
 8017808:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801780c:	2b05      	cmp	r3, #5
 801780e:	d801      	bhi.n	8017814 <__hexdig_fun+0x1a>
 8017810:	3847      	subs	r0, #71	; 0x47
 8017812:	e7f7      	b.n	8017804 <__hexdig_fun+0xa>
 8017814:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017818:	2b05      	cmp	r3, #5
 801781a:	d801      	bhi.n	8017820 <__hexdig_fun+0x26>
 801781c:	3827      	subs	r0, #39	; 0x27
 801781e:	e7f1      	b.n	8017804 <__hexdig_fun+0xa>
 8017820:	2000      	movs	r0, #0
 8017822:	4770      	bx	lr

08017824 <__gethex>:
 8017824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017828:	ed2d 8b02 	vpush	{d8}
 801782c:	b089      	sub	sp, #36	; 0x24
 801782e:	ee08 0a10 	vmov	s16, r0
 8017832:	9304      	str	r3, [sp, #16]
 8017834:	4bb4      	ldr	r3, [pc, #720]	; (8017b08 <__gethex+0x2e4>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	9301      	str	r3, [sp, #4]
 801783a:	4618      	mov	r0, r3
 801783c:	468b      	mov	fp, r1
 801783e:	4690      	mov	r8, r2
 8017840:	f7e8 fcd6 	bl	80001f0 <strlen>
 8017844:	9b01      	ldr	r3, [sp, #4]
 8017846:	f8db 2000 	ldr.w	r2, [fp]
 801784a:	4403      	add	r3, r0
 801784c:	4682      	mov	sl, r0
 801784e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017852:	9305      	str	r3, [sp, #20]
 8017854:	1c93      	adds	r3, r2, #2
 8017856:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801785a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801785e:	32fe      	adds	r2, #254	; 0xfe
 8017860:	18d1      	adds	r1, r2, r3
 8017862:	461f      	mov	r7, r3
 8017864:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017868:	9100      	str	r1, [sp, #0]
 801786a:	2830      	cmp	r0, #48	; 0x30
 801786c:	d0f8      	beq.n	8017860 <__gethex+0x3c>
 801786e:	f7ff ffc4 	bl	80177fa <__hexdig_fun>
 8017872:	4604      	mov	r4, r0
 8017874:	2800      	cmp	r0, #0
 8017876:	d13a      	bne.n	80178ee <__gethex+0xca>
 8017878:	9901      	ldr	r1, [sp, #4]
 801787a:	4652      	mov	r2, sl
 801787c:	4638      	mov	r0, r7
 801787e:	f001 fb6a 	bl	8018f56 <strncmp>
 8017882:	4605      	mov	r5, r0
 8017884:	2800      	cmp	r0, #0
 8017886:	d168      	bne.n	801795a <__gethex+0x136>
 8017888:	f817 000a 	ldrb.w	r0, [r7, sl]
 801788c:	eb07 060a 	add.w	r6, r7, sl
 8017890:	f7ff ffb3 	bl	80177fa <__hexdig_fun>
 8017894:	2800      	cmp	r0, #0
 8017896:	d062      	beq.n	801795e <__gethex+0x13a>
 8017898:	4633      	mov	r3, r6
 801789a:	7818      	ldrb	r0, [r3, #0]
 801789c:	2830      	cmp	r0, #48	; 0x30
 801789e:	461f      	mov	r7, r3
 80178a0:	f103 0301 	add.w	r3, r3, #1
 80178a4:	d0f9      	beq.n	801789a <__gethex+0x76>
 80178a6:	f7ff ffa8 	bl	80177fa <__hexdig_fun>
 80178aa:	2301      	movs	r3, #1
 80178ac:	fab0 f480 	clz	r4, r0
 80178b0:	0964      	lsrs	r4, r4, #5
 80178b2:	4635      	mov	r5, r6
 80178b4:	9300      	str	r3, [sp, #0]
 80178b6:	463a      	mov	r2, r7
 80178b8:	4616      	mov	r6, r2
 80178ba:	3201      	adds	r2, #1
 80178bc:	7830      	ldrb	r0, [r6, #0]
 80178be:	f7ff ff9c 	bl	80177fa <__hexdig_fun>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	d1f8      	bne.n	80178b8 <__gethex+0x94>
 80178c6:	9901      	ldr	r1, [sp, #4]
 80178c8:	4652      	mov	r2, sl
 80178ca:	4630      	mov	r0, r6
 80178cc:	f001 fb43 	bl	8018f56 <strncmp>
 80178d0:	b980      	cbnz	r0, 80178f4 <__gethex+0xd0>
 80178d2:	b94d      	cbnz	r5, 80178e8 <__gethex+0xc4>
 80178d4:	eb06 050a 	add.w	r5, r6, sl
 80178d8:	462a      	mov	r2, r5
 80178da:	4616      	mov	r6, r2
 80178dc:	3201      	adds	r2, #1
 80178de:	7830      	ldrb	r0, [r6, #0]
 80178e0:	f7ff ff8b 	bl	80177fa <__hexdig_fun>
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d1f8      	bne.n	80178da <__gethex+0xb6>
 80178e8:	1bad      	subs	r5, r5, r6
 80178ea:	00ad      	lsls	r5, r5, #2
 80178ec:	e004      	b.n	80178f8 <__gethex+0xd4>
 80178ee:	2400      	movs	r4, #0
 80178f0:	4625      	mov	r5, r4
 80178f2:	e7e0      	b.n	80178b6 <__gethex+0x92>
 80178f4:	2d00      	cmp	r5, #0
 80178f6:	d1f7      	bne.n	80178e8 <__gethex+0xc4>
 80178f8:	7833      	ldrb	r3, [r6, #0]
 80178fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178fe:	2b50      	cmp	r3, #80	; 0x50
 8017900:	d13b      	bne.n	801797a <__gethex+0x156>
 8017902:	7873      	ldrb	r3, [r6, #1]
 8017904:	2b2b      	cmp	r3, #43	; 0x2b
 8017906:	d02c      	beq.n	8017962 <__gethex+0x13e>
 8017908:	2b2d      	cmp	r3, #45	; 0x2d
 801790a:	d02e      	beq.n	801796a <__gethex+0x146>
 801790c:	1c71      	adds	r1, r6, #1
 801790e:	f04f 0900 	mov.w	r9, #0
 8017912:	7808      	ldrb	r0, [r1, #0]
 8017914:	f7ff ff71 	bl	80177fa <__hexdig_fun>
 8017918:	1e43      	subs	r3, r0, #1
 801791a:	b2db      	uxtb	r3, r3
 801791c:	2b18      	cmp	r3, #24
 801791e:	d82c      	bhi.n	801797a <__gethex+0x156>
 8017920:	f1a0 0210 	sub.w	r2, r0, #16
 8017924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017928:	f7ff ff67 	bl	80177fa <__hexdig_fun>
 801792c:	1e43      	subs	r3, r0, #1
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b18      	cmp	r3, #24
 8017932:	d91d      	bls.n	8017970 <__gethex+0x14c>
 8017934:	f1b9 0f00 	cmp.w	r9, #0
 8017938:	d000      	beq.n	801793c <__gethex+0x118>
 801793a:	4252      	negs	r2, r2
 801793c:	4415      	add	r5, r2
 801793e:	f8cb 1000 	str.w	r1, [fp]
 8017942:	b1e4      	cbz	r4, 801797e <__gethex+0x15a>
 8017944:	9b00      	ldr	r3, [sp, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	bf14      	ite	ne
 801794a:	2700      	movne	r7, #0
 801794c:	2706      	moveq	r7, #6
 801794e:	4638      	mov	r0, r7
 8017950:	b009      	add	sp, #36	; 0x24
 8017952:	ecbd 8b02 	vpop	{d8}
 8017956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795a:	463e      	mov	r6, r7
 801795c:	4625      	mov	r5, r4
 801795e:	2401      	movs	r4, #1
 8017960:	e7ca      	b.n	80178f8 <__gethex+0xd4>
 8017962:	f04f 0900 	mov.w	r9, #0
 8017966:	1cb1      	adds	r1, r6, #2
 8017968:	e7d3      	b.n	8017912 <__gethex+0xee>
 801796a:	f04f 0901 	mov.w	r9, #1
 801796e:	e7fa      	b.n	8017966 <__gethex+0x142>
 8017970:	230a      	movs	r3, #10
 8017972:	fb03 0202 	mla	r2, r3, r2, r0
 8017976:	3a10      	subs	r2, #16
 8017978:	e7d4      	b.n	8017924 <__gethex+0x100>
 801797a:	4631      	mov	r1, r6
 801797c:	e7df      	b.n	801793e <__gethex+0x11a>
 801797e:	1bf3      	subs	r3, r6, r7
 8017980:	3b01      	subs	r3, #1
 8017982:	4621      	mov	r1, r4
 8017984:	2b07      	cmp	r3, #7
 8017986:	dc0b      	bgt.n	80179a0 <__gethex+0x17c>
 8017988:	ee18 0a10 	vmov	r0, s16
 801798c:	f000 fadc 	bl	8017f48 <_Balloc>
 8017990:	4604      	mov	r4, r0
 8017992:	b940      	cbnz	r0, 80179a6 <__gethex+0x182>
 8017994:	4b5d      	ldr	r3, [pc, #372]	; (8017b0c <__gethex+0x2e8>)
 8017996:	4602      	mov	r2, r0
 8017998:	21de      	movs	r1, #222	; 0xde
 801799a:	485d      	ldr	r0, [pc, #372]	; (8017b10 <__gethex+0x2ec>)
 801799c:	f7fe fe78 	bl	8016690 <__assert_func>
 80179a0:	3101      	adds	r1, #1
 80179a2:	105b      	asrs	r3, r3, #1
 80179a4:	e7ee      	b.n	8017984 <__gethex+0x160>
 80179a6:	f100 0914 	add.w	r9, r0, #20
 80179aa:	f04f 0b00 	mov.w	fp, #0
 80179ae:	f1ca 0301 	rsb	r3, sl, #1
 80179b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80179b6:	f8cd b000 	str.w	fp, [sp]
 80179ba:	9306      	str	r3, [sp, #24]
 80179bc:	42b7      	cmp	r7, r6
 80179be:	d340      	bcc.n	8017a42 <__gethex+0x21e>
 80179c0:	9802      	ldr	r0, [sp, #8]
 80179c2:	9b00      	ldr	r3, [sp, #0]
 80179c4:	f840 3b04 	str.w	r3, [r0], #4
 80179c8:	eba0 0009 	sub.w	r0, r0, r9
 80179cc:	1080      	asrs	r0, r0, #2
 80179ce:	0146      	lsls	r6, r0, #5
 80179d0:	6120      	str	r0, [r4, #16]
 80179d2:	4618      	mov	r0, r3
 80179d4:	f000 fbaa 	bl	801812c <__hi0bits>
 80179d8:	1a30      	subs	r0, r6, r0
 80179da:	f8d8 6000 	ldr.w	r6, [r8]
 80179de:	42b0      	cmp	r0, r6
 80179e0:	dd63      	ble.n	8017aaa <__gethex+0x286>
 80179e2:	1b87      	subs	r7, r0, r6
 80179e4:	4639      	mov	r1, r7
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 ff4e 	bl	8018888 <__any_on>
 80179ec:	4682      	mov	sl, r0
 80179ee:	b1a8      	cbz	r0, 8017a1c <__gethex+0x1f8>
 80179f0:	1e7b      	subs	r3, r7, #1
 80179f2:	1159      	asrs	r1, r3, #5
 80179f4:	f003 021f 	and.w	r2, r3, #31
 80179f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80179fc:	f04f 0a01 	mov.w	sl, #1
 8017a00:	fa0a f202 	lsl.w	r2, sl, r2
 8017a04:	420a      	tst	r2, r1
 8017a06:	d009      	beq.n	8017a1c <__gethex+0x1f8>
 8017a08:	4553      	cmp	r3, sl
 8017a0a:	dd05      	ble.n	8017a18 <__gethex+0x1f4>
 8017a0c:	1eb9      	subs	r1, r7, #2
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f000 ff3a 	bl	8018888 <__any_on>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d145      	bne.n	8017aa4 <__gethex+0x280>
 8017a18:	f04f 0a02 	mov.w	sl, #2
 8017a1c:	4639      	mov	r1, r7
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f7ff fe99 	bl	8017756 <rshift>
 8017a24:	443d      	add	r5, r7
 8017a26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a2a:	42ab      	cmp	r3, r5
 8017a2c:	da4c      	bge.n	8017ac8 <__gethex+0x2a4>
 8017a2e:	ee18 0a10 	vmov	r0, s16
 8017a32:	4621      	mov	r1, r4
 8017a34:	f000 fac8 	bl	8017fc8 <_Bfree>
 8017a38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	6013      	str	r3, [r2, #0]
 8017a3e:	27a3      	movs	r7, #163	; 0xa3
 8017a40:	e785      	b.n	801794e <__gethex+0x12a>
 8017a42:	1e73      	subs	r3, r6, #1
 8017a44:	9a05      	ldr	r2, [sp, #20]
 8017a46:	9303      	str	r3, [sp, #12]
 8017a48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017a4c:	4293      	cmp	r3, r2
 8017a4e:	d019      	beq.n	8017a84 <__gethex+0x260>
 8017a50:	f1bb 0f20 	cmp.w	fp, #32
 8017a54:	d107      	bne.n	8017a66 <__gethex+0x242>
 8017a56:	9b02      	ldr	r3, [sp, #8]
 8017a58:	9a00      	ldr	r2, [sp, #0]
 8017a5a:	f843 2b04 	str.w	r2, [r3], #4
 8017a5e:	9302      	str	r3, [sp, #8]
 8017a60:	2300      	movs	r3, #0
 8017a62:	9300      	str	r3, [sp, #0]
 8017a64:	469b      	mov	fp, r3
 8017a66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017a6a:	f7ff fec6 	bl	80177fa <__hexdig_fun>
 8017a6e:	9b00      	ldr	r3, [sp, #0]
 8017a70:	f000 000f 	and.w	r0, r0, #15
 8017a74:	fa00 f00b 	lsl.w	r0, r0, fp
 8017a78:	4303      	orrs	r3, r0
 8017a7a:	9300      	str	r3, [sp, #0]
 8017a7c:	f10b 0b04 	add.w	fp, fp, #4
 8017a80:	9b03      	ldr	r3, [sp, #12]
 8017a82:	e00d      	b.n	8017aa0 <__gethex+0x27c>
 8017a84:	9b03      	ldr	r3, [sp, #12]
 8017a86:	9a06      	ldr	r2, [sp, #24]
 8017a88:	4413      	add	r3, r2
 8017a8a:	42bb      	cmp	r3, r7
 8017a8c:	d3e0      	bcc.n	8017a50 <__gethex+0x22c>
 8017a8e:	4618      	mov	r0, r3
 8017a90:	9901      	ldr	r1, [sp, #4]
 8017a92:	9307      	str	r3, [sp, #28]
 8017a94:	4652      	mov	r2, sl
 8017a96:	f001 fa5e 	bl	8018f56 <strncmp>
 8017a9a:	9b07      	ldr	r3, [sp, #28]
 8017a9c:	2800      	cmp	r0, #0
 8017a9e:	d1d7      	bne.n	8017a50 <__gethex+0x22c>
 8017aa0:	461e      	mov	r6, r3
 8017aa2:	e78b      	b.n	80179bc <__gethex+0x198>
 8017aa4:	f04f 0a03 	mov.w	sl, #3
 8017aa8:	e7b8      	b.n	8017a1c <__gethex+0x1f8>
 8017aaa:	da0a      	bge.n	8017ac2 <__gethex+0x29e>
 8017aac:	1a37      	subs	r7, r6, r0
 8017aae:	4621      	mov	r1, r4
 8017ab0:	ee18 0a10 	vmov	r0, s16
 8017ab4:	463a      	mov	r2, r7
 8017ab6:	f000 fca3 	bl	8018400 <__lshift>
 8017aba:	1bed      	subs	r5, r5, r7
 8017abc:	4604      	mov	r4, r0
 8017abe:	f100 0914 	add.w	r9, r0, #20
 8017ac2:	f04f 0a00 	mov.w	sl, #0
 8017ac6:	e7ae      	b.n	8017a26 <__gethex+0x202>
 8017ac8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017acc:	42a8      	cmp	r0, r5
 8017ace:	dd72      	ble.n	8017bb6 <__gethex+0x392>
 8017ad0:	1b45      	subs	r5, r0, r5
 8017ad2:	42ae      	cmp	r6, r5
 8017ad4:	dc36      	bgt.n	8017b44 <__gethex+0x320>
 8017ad6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ada:	2b02      	cmp	r3, #2
 8017adc:	d02a      	beq.n	8017b34 <__gethex+0x310>
 8017ade:	2b03      	cmp	r3, #3
 8017ae0:	d02c      	beq.n	8017b3c <__gethex+0x318>
 8017ae2:	2b01      	cmp	r3, #1
 8017ae4:	d11c      	bne.n	8017b20 <__gethex+0x2fc>
 8017ae6:	42ae      	cmp	r6, r5
 8017ae8:	d11a      	bne.n	8017b20 <__gethex+0x2fc>
 8017aea:	2e01      	cmp	r6, #1
 8017aec:	d112      	bne.n	8017b14 <__gethex+0x2f0>
 8017aee:	9a04      	ldr	r2, [sp, #16]
 8017af0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017af4:	6013      	str	r3, [r2, #0]
 8017af6:	2301      	movs	r3, #1
 8017af8:	6123      	str	r3, [r4, #16]
 8017afa:	f8c9 3000 	str.w	r3, [r9]
 8017afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b00:	2762      	movs	r7, #98	; 0x62
 8017b02:	601c      	str	r4, [r3, #0]
 8017b04:	e723      	b.n	801794e <__gethex+0x12a>
 8017b06:	bf00      	nop
 8017b08:	0802bb4c 	.word	0x0802bb4c
 8017b0c:	0802ba71 	.word	0x0802ba71
 8017b10:	0802bae4 	.word	0x0802bae4
 8017b14:	1e71      	subs	r1, r6, #1
 8017b16:	4620      	mov	r0, r4
 8017b18:	f000 feb6 	bl	8018888 <__any_on>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d1e6      	bne.n	8017aee <__gethex+0x2ca>
 8017b20:	ee18 0a10 	vmov	r0, s16
 8017b24:	4621      	mov	r1, r4
 8017b26:	f000 fa4f 	bl	8017fc8 <_Bfree>
 8017b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	6013      	str	r3, [r2, #0]
 8017b30:	2750      	movs	r7, #80	; 0x50
 8017b32:	e70c      	b.n	801794e <__gethex+0x12a>
 8017b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d1f2      	bne.n	8017b20 <__gethex+0x2fc>
 8017b3a:	e7d8      	b.n	8017aee <__gethex+0x2ca>
 8017b3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d1d5      	bne.n	8017aee <__gethex+0x2ca>
 8017b42:	e7ed      	b.n	8017b20 <__gethex+0x2fc>
 8017b44:	1e6f      	subs	r7, r5, #1
 8017b46:	f1ba 0f00 	cmp.w	sl, #0
 8017b4a:	d131      	bne.n	8017bb0 <__gethex+0x38c>
 8017b4c:	b127      	cbz	r7, 8017b58 <__gethex+0x334>
 8017b4e:	4639      	mov	r1, r7
 8017b50:	4620      	mov	r0, r4
 8017b52:	f000 fe99 	bl	8018888 <__any_on>
 8017b56:	4682      	mov	sl, r0
 8017b58:	117b      	asrs	r3, r7, #5
 8017b5a:	2101      	movs	r1, #1
 8017b5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8017b60:	f007 071f 	and.w	r7, r7, #31
 8017b64:	fa01 f707 	lsl.w	r7, r1, r7
 8017b68:	421f      	tst	r7, r3
 8017b6a:	4629      	mov	r1, r5
 8017b6c:	4620      	mov	r0, r4
 8017b6e:	bf18      	it	ne
 8017b70:	f04a 0a02 	orrne.w	sl, sl, #2
 8017b74:	1b76      	subs	r6, r6, r5
 8017b76:	f7ff fdee 	bl	8017756 <rshift>
 8017b7a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017b7e:	2702      	movs	r7, #2
 8017b80:	f1ba 0f00 	cmp.w	sl, #0
 8017b84:	d048      	beq.n	8017c18 <__gethex+0x3f4>
 8017b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b8a:	2b02      	cmp	r3, #2
 8017b8c:	d015      	beq.n	8017bba <__gethex+0x396>
 8017b8e:	2b03      	cmp	r3, #3
 8017b90:	d017      	beq.n	8017bc2 <__gethex+0x39e>
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d109      	bne.n	8017baa <__gethex+0x386>
 8017b96:	f01a 0f02 	tst.w	sl, #2
 8017b9a:	d006      	beq.n	8017baa <__gethex+0x386>
 8017b9c:	f8d9 0000 	ldr.w	r0, [r9]
 8017ba0:	ea4a 0a00 	orr.w	sl, sl, r0
 8017ba4:	f01a 0f01 	tst.w	sl, #1
 8017ba8:	d10e      	bne.n	8017bc8 <__gethex+0x3a4>
 8017baa:	f047 0710 	orr.w	r7, r7, #16
 8017bae:	e033      	b.n	8017c18 <__gethex+0x3f4>
 8017bb0:	f04f 0a01 	mov.w	sl, #1
 8017bb4:	e7d0      	b.n	8017b58 <__gethex+0x334>
 8017bb6:	2701      	movs	r7, #1
 8017bb8:	e7e2      	b.n	8017b80 <__gethex+0x35c>
 8017bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017bbc:	f1c3 0301 	rsb	r3, r3, #1
 8017bc0:	9315      	str	r3, [sp, #84]	; 0x54
 8017bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d0f0      	beq.n	8017baa <__gethex+0x386>
 8017bc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017bcc:	f104 0314 	add.w	r3, r4, #20
 8017bd0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017bd4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017bd8:	f04f 0c00 	mov.w	ip, #0
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8017be2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8017be6:	d01c      	beq.n	8017c22 <__gethex+0x3fe>
 8017be8:	3201      	adds	r2, #1
 8017bea:	6002      	str	r2, [r0, #0]
 8017bec:	2f02      	cmp	r7, #2
 8017bee:	f104 0314 	add.w	r3, r4, #20
 8017bf2:	d13f      	bne.n	8017c74 <__gethex+0x450>
 8017bf4:	f8d8 2000 	ldr.w	r2, [r8]
 8017bf8:	3a01      	subs	r2, #1
 8017bfa:	42b2      	cmp	r2, r6
 8017bfc:	d10a      	bne.n	8017c14 <__gethex+0x3f0>
 8017bfe:	1171      	asrs	r1, r6, #5
 8017c00:	2201      	movs	r2, #1
 8017c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017c06:	f006 061f 	and.w	r6, r6, #31
 8017c0a:	fa02 f606 	lsl.w	r6, r2, r6
 8017c0e:	421e      	tst	r6, r3
 8017c10:	bf18      	it	ne
 8017c12:	4617      	movne	r7, r2
 8017c14:	f047 0720 	orr.w	r7, r7, #32
 8017c18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c1a:	601c      	str	r4, [r3, #0]
 8017c1c:	9b04      	ldr	r3, [sp, #16]
 8017c1e:	601d      	str	r5, [r3, #0]
 8017c20:	e695      	b.n	801794e <__gethex+0x12a>
 8017c22:	4299      	cmp	r1, r3
 8017c24:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c28:	d8d8      	bhi.n	8017bdc <__gethex+0x3b8>
 8017c2a:	68a3      	ldr	r3, [r4, #8]
 8017c2c:	459b      	cmp	fp, r3
 8017c2e:	db19      	blt.n	8017c64 <__gethex+0x440>
 8017c30:	6861      	ldr	r1, [r4, #4]
 8017c32:	ee18 0a10 	vmov	r0, s16
 8017c36:	3101      	adds	r1, #1
 8017c38:	f000 f986 	bl	8017f48 <_Balloc>
 8017c3c:	4681      	mov	r9, r0
 8017c3e:	b918      	cbnz	r0, 8017c48 <__gethex+0x424>
 8017c40:	4b1a      	ldr	r3, [pc, #104]	; (8017cac <__gethex+0x488>)
 8017c42:	4602      	mov	r2, r0
 8017c44:	2184      	movs	r1, #132	; 0x84
 8017c46:	e6a8      	b.n	801799a <__gethex+0x176>
 8017c48:	6922      	ldr	r2, [r4, #16]
 8017c4a:	3202      	adds	r2, #2
 8017c4c:	f104 010c 	add.w	r1, r4, #12
 8017c50:	0092      	lsls	r2, r2, #2
 8017c52:	300c      	adds	r0, #12
 8017c54:	f7fc fd2a 	bl	80146ac <memcpy>
 8017c58:	4621      	mov	r1, r4
 8017c5a:	ee18 0a10 	vmov	r0, s16
 8017c5e:	f000 f9b3 	bl	8017fc8 <_Bfree>
 8017c62:	464c      	mov	r4, r9
 8017c64:	6923      	ldr	r3, [r4, #16]
 8017c66:	1c5a      	adds	r2, r3, #1
 8017c68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017c6c:	6122      	str	r2, [r4, #16]
 8017c6e:	2201      	movs	r2, #1
 8017c70:	615a      	str	r2, [r3, #20]
 8017c72:	e7bb      	b.n	8017bec <__gethex+0x3c8>
 8017c74:	6922      	ldr	r2, [r4, #16]
 8017c76:	455a      	cmp	r2, fp
 8017c78:	dd0b      	ble.n	8017c92 <__gethex+0x46e>
 8017c7a:	2101      	movs	r1, #1
 8017c7c:	4620      	mov	r0, r4
 8017c7e:	f7ff fd6a 	bl	8017756 <rshift>
 8017c82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c86:	3501      	adds	r5, #1
 8017c88:	42ab      	cmp	r3, r5
 8017c8a:	f6ff aed0 	blt.w	8017a2e <__gethex+0x20a>
 8017c8e:	2701      	movs	r7, #1
 8017c90:	e7c0      	b.n	8017c14 <__gethex+0x3f0>
 8017c92:	f016 061f 	ands.w	r6, r6, #31
 8017c96:	d0fa      	beq.n	8017c8e <__gethex+0x46a>
 8017c98:	4453      	add	r3, sl
 8017c9a:	f1c6 0620 	rsb	r6, r6, #32
 8017c9e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017ca2:	f000 fa43 	bl	801812c <__hi0bits>
 8017ca6:	42b0      	cmp	r0, r6
 8017ca8:	dbe7      	blt.n	8017c7a <__gethex+0x456>
 8017caa:	e7f0      	b.n	8017c8e <__gethex+0x46a>
 8017cac:	0802ba71 	.word	0x0802ba71

08017cb0 <L_shift>:
 8017cb0:	f1c2 0208 	rsb	r2, r2, #8
 8017cb4:	0092      	lsls	r2, r2, #2
 8017cb6:	b570      	push	{r4, r5, r6, lr}
 8017cb8:	f1c2 0620 	rsb	r6, r2, #32
 8017cbc:	6843      	ldr	r3, [r0, #4]
 8017cbe:	6804      	ldr	r4, [r0, #0]
 8017cc0:	fa03 f506 	lsl.w	r5, r3, r6
 8017cc4:	432c      	orrs	r4, r5
 8017cc6:	40d3      	lsrs	r3, r2
 8017cc8:	6004      	str	r4, [r0, #0]
 8017cca:	f840 3f04 	str.w	r3, [r0, #4]!
 8017cce:	4288      	cmp	r0, r1
 8017cd0:	d3f4      	bcc.n	8017cbc <L_shift+0xc>
 8017cd2:	bd70      	pop	{r4, r5, r6, pc}

08017cd4 <__match>:
 8017cd4:	b530      	push	{r4, r5, lr}
 8017cd6:	6803      	ldr	r3, [r0, #0]
 8017cd8:	3301      	adds	r3, #1
 8017cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cde:	b914      	cbnz	r4, 8017ce6 <__match+0x12>
 8017ce0:	6003      	str	r3, [r0, #0]
 8017ce2:	2001      	movs	r0, #1
 8017ce4:	bd30      	pop	{r4, r5, pc}
 8017ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017cee:	2d19      	cmp	r5, #25
 8017cf0:	bf98      	it	ls
 8017cf2:	3220      	addls	r2, #32
 8017cf4:	42a2      	cmp	r2, r4
 8017cf6:	d0f0      	beq.n	8017cda <__match+0x6>
 8017cf8:	2000      	movs	r0, #0
 8017cfa:	e7f3      	b.n	8017ce4 <__match+0x10>

08017cfc <__hexnan>:
 8017cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d00:	680b      	ldr	r3, [r1, #0]
 8017d02:	115e      	asrs	r6, r3, #5
 8017d04:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017d08:	f013 031f 	ands.w	r3, r3, #31
 8017d0c:	b087      	sub	sp, #28
 8017d0e:	bf18      	it	ne
 8017d10:	3604      	addne	r6, #4
 8017d12:	2500      	movs	r5, #0
 8017d14:	1f37      	subs	r7, r6, #4
 8017d16:	4690      	mov	r8, r2
 8017d18:	6802      	ldr	r2, [r0, #0]
 8017d1a:	9301      	str	r3, [sp, #4]
 8017d1c:	4682      	mov	sl, r0
 8017d1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8017d22:	46b9      	mov	r9, r7
 8017d24:	463c      	mov	r4, r7
 8017d26:	9502      	str	r5, [sp, #8]
 8017d28:	46ab      	mov	fp, r5
 8017d2a:	7851      	ldrb	r1, [r2, #1]
 8017d2c:	1c53      	adds	r3, r2, #1
 8017d2e:	9303      	str	r3, [sp, #12]
 8017d30:	b341      	cbz	r1, 8017d84 <__hexnan+0x88>
 8017d32:	4608      	mov	r0, r1
 8017d34:	9205      	str	r2, [sp, #20]
 8017d36:	9104      	str	r1, [sp, #16]
 8017d38:	f7ff fd5f 	bl	80177fa <__hexdig_fun>
 8017d3c:	2800      	cmp	r0, #0
 8017d3e:	d14f      	bne.n	8017de0 <__hexnan+0xe4>
 8017d40:	9904      	ldr	r1, [sp, #16]
 8017d42:	9a05      	ldr	r2, [sp, #20]
 8017d44:	2920      	cmp	r1, #32
 8017d46:	d818      	bhi.n	8017d7a <__hexnan+0x7e>
 8017d48:	9b02      	ldr	r3, [sp, #8]
 8017d4a:	459b      	cmp	fp, r3
 8017d4c:	dd13      	ble.n	8017d76 <__hexnan+0x7a>
 8017d4e:	454c      	cmp	r4, r9
 8017d50:	d206      	bcs.n	8017d60 <__hexnan+0x64>
 8017d52:	2d07      	cmp	r5, #7
 8017d54:	dc04      	bgt.n	8017d60 <__hexnan+0x64>
 8017d56:	462a      	mov	r2, r5
 8017d58:	4649      	mov	r1, r9
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	f7ff ffa8 	bl	8017cb0 <L_shift>
 8017d60:	4544      	cmp	r4, r8
 8017d62:	d950      	bls.n	8017e06 <__hexnan+0x10a>
 8017d64:	2300      	movs	r3, #0
 8017d66:	f1a4 0904 	sub.w	r9, r4, #4
 8017d6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d6e:	f8cd b008 	str.w	fp, [sp, #8]
 8017d72:	464c      	mov	r4, r9
 8017d74:	461d      	mov	r5, r3
 8017d76:	9a03      	ldr	r2, [sp, #12]
 8017d78:	e7d7      	b.n	8017d2a <__hexnan+0x2e>
 8017d7a:	2929      	cmp	r1, #41	; 0x29
 8017d7c:	d156      	bne.n	8017e2c <__hexnan+0x130>
 8017d7e:	3202      	adds	r2, #2
 8017d80:	f8ca 2000 	str.w	r2, [sl]
 8017d84:	f1bb 0f00 	cmp.w	fp, #0
 8017d88:	d050      	beq.n	8017e2c <__hexnan+0x130>
 8017d8a:	454c      	cmp	r4, r9
 8017d8c:	d206      	bcs.n	8017d9c <__hexnan+0xa0>
 8017d8e:	2d07      	cmp	r5, #7
 8017d90:	dc04      	bgt.n	8017d9c <__hexnan+0xa0>
 8017d92:	462a      	mov	r2, r5
 8017d94:	4649      	mov	r1, r9
 8017d96:	4620      	mov	r0, r4
 8017d98:	f7ff ff8a 	bl	8017cb0 <L_shift>
 8017d9c:	4544      	cmp	r4, r8
 8017d9e:	d934      	bls.n	8017e0a <__hexnan+0x10e>
 8017da0:	f1a8 0204 	sub.w	r2, r8, #4
 8017da4:	4623      	mov	r3, r4
 8017da6:	f853 1b04 	ldr.w	r1, [r3], #4
 8017daa:	f842 1f04 	str.w	r1, [r2, #4]!
 8017dae:	429f      	cmp	r7, r3
 8017db0:	d2f9      	bcs.n	8017da6 <__hexnan+0xaa>
 8017db2:	1b3b      	subs	r3, r7, r4
 8017db4:	f023 0303 	bic.w	r3, r3, #3
 8017db8:	3304      	adds	r3, #4
 8017dba:	3401      	adds	r4, #1
 8017dbc:	3e03      	subs	r6, #3
 8017dbe:	42b4      	cmp	r4, r6
 8017dc0:	bf88      	it	hi
 8017dc2:	2304      	movhi	r3, #4
 8017dc4:	4443      	add	r3, r8
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	f843 2b04 	str.w	r2, [r3], #4
 8017dcc:	429f      	cmp	r7, r3
 8017dce:	d2fb      	bcs.n	8017dc8 <__hexnan+0xcc>
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	b91b      	cbnz	r3, 8017ddc <__hexnan+0xe0>
 8017dd4:	4547      	cmp	r7, r8
 8017dd6:	d127      	bne.n	8017e28 <__hexnan+0x12c>
 8017dd8:	2301      	movs	r3, #1
 8017dda:	603b      	str	r3, [r7, #0]
 8017ddc:	2005      	movs	r0, #5
 8017dde:	e026      	b.n	8017e2e <__hexnan+0x132>
 8017de0:	3501      	adds	r5, #1
 8017de2:	2d08      	cmp	r5, #8
 8017de4:	f10b 0b01 	add.w	fp, fp, #1
 8017de8:	dd06      	ble.n	8017df8 <__hexnan+0xfc>
 8017dea:	4544      	cmp	r4, r8
 8017dec:	d9c3      	bls.n	8017d76 <__hexnan+0x7a>
 8017dee:	2300      	movs	r3, #0
 8017df0:	f844 3c04 	str.w	r3, [r4, #-4]
 8017df4:	2501      	movs	r5, #1
 8017df6:	3c04      	subs	r4, #4
 8017df8:	6822      	ldr	r2, [r4, #0]
 8017dfa:	f000 000f 	and.w	r0, r0, #15
 8017dfe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8017e02:	6022      	str	r2, [r4, #0]
 8017e04:	e7b7      	b.n	8017d76 <__hexnan+0x7a>
 8017e06:	2508      	movs	r5, #8
 8017e08:	e7b5      	b.n	8017d76 <__hexnan+0x7a>
 8017e0a:	9b01      	ldr	r3, [sp, #4]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d0df      	beq.n	8017dd0 <__hexnan+0xd4>
 8017e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e14:	f1c3 0320 	rsb	r3, r3, #32
 8017e18:	fa22 f303 	lsr.w	r3, r2, r3
 8017e1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017e20:	401a      	ands	r2, r3
 8017e22:	f846 2c04 	str.w	r2, [r6, #-4]
 8017e26:	e7d3      	b.n	8017dd0 <__hexnan+0xd4>
 8017e28:	3f04      	subs	r7, #4
 8017e2a:	e7d1      	b.n	8017dd0 <__hexnan+0xd4>
 8017e2c:	2004      	movs	r0, #4
 8017e2e:	b007      	add	sp, #28
 8017e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017e34 <_localeconv_r>:
 8017e34:	4800      	ldr	r0, [pc, #0]	; (8017e38 <_localeconv_r+0x4>)
 8017e36:	4770      	bx	lr
 8017e38:	20000a04 	.word	0x20000a04

08017e3c <__retarget_lock_init_recursive>:
 8017e3c:	4770      	bx	lr

08017e3e <__retarget_lock_acquire_recursive>:
 8017e3e:	4770      	bx	lr

08017e40 <__retarget_lock_release_recursive>:
 8017e40:	4770      	bx	lr

08017e42 <__swhatbuf_r>:
 8017e42:	b570      	push	{r4, r5, r6, lr}
 8017e44:	460e      	mov	r6, r1
 8017e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e4a:	2900      	cmp	r1, #0
 8017e4c:	b096      	sub	sp, #88	; 0x58
 8017e4e:	4614      	mov	r4, r2
 8017e50:	461d      	mov	r5, r3
 8017e52:	da08      	bge.n	8017e66 <__swhatbuf_r+0x24>
 8017e54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	602a      	str	r2, [r5, #0]
 8017e5c:	061a      	lsls	r2, r3, #24
 8017e5e:	d410      	bmi.n	8017e82 <__swhatbuf_r+0x40>
 8017e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e64:	e00e      	b.n	8017e84 <__swhatbuf_r+0x42>
 8017e66:	466a      	mov	r2, sp
 8017e68:	f001 f8c0 	bl	8018fec <_fstat_r>
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	dbf1      	blt.n	8017e54 <__swhatbuf_r+0x12>
 8017e70:	9a01      	ldr	r2, [sp, #4]
 8017e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017e7a:	425a      	negs	r2, r3
 8017e7c:	415a      	adcs	r2, r3
 8017e7e:	602a      	str	r2, [r5, #0]
 8017e80:	e7ee      	b.n	8017e60 <__swhatbuf_r+0x1e>
 8017e82:	2340      	movs	r3, #64	; 0x40
 8017e84:	2000      	movs	r0, #0
 8017e86:	6023      	str	r3, [r4, #0]
 8017e88:	b016      	add	sp, #88	; 0x58
 8017e8a:	bd70      	pop	{r4, r5, r6, pc}

08017e8c <__smakebuf_r>:
 8017e8c:	898b      	ldrh	r3, [r1, #12]
 8017e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017e90:	079d      	lsls	r5, r3, #30
 8017e92:	4606      	mov	r6, r0
 8017e94:	460c      	mov	r4, r1
 8017e96:	d507      	bpl.n	8017ea8 <__smakebuf_r+0x1c>
 8017e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017e9c:	6023      	str	r3, [r4, #0]
 8017e9e:	6123      	str	r3, [r4, #16]
 8017ea0:	2301      	movs	r3, #1
 8017ea2:	6163      	str	r3, [r4, #20]
 8017ea4:	b002      	add	sp, #8
 8017ea6:	bd70      	pop	{r4, r5, r6, pc}
 8017ea8:	ab01      	add	r3, sp, #4
 8017eaa:	466a      	mov	r2, sp
 8017eac:	f7ff ffc9 	bl	8017e42 <__swhatbuf_r>
 8017eb0:	9900      	ldr	r1, [sp, #0]
 8017eb2:	4605      	mov	r5, r0
 8017eb4:	4630      	mov	r0, r6
 8017eb6:	f7fc fc7b 	bl	80147b0 <_malloc_r>
 8017eba:	b948      	cbnz	r0, 8017ed0 <__smakebuf_r+0x44>
 8017ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ec0:	059a      	lsls	r2, r3, #22
 8017ec2:	d4ef      	bmi.n	8017ea4 <__smakebuf_r+0x18>
 8017ec4:	f023 0303 	bic.w	r3, r3, #3
 8017ec8:	f043 0302 	orr.w	r3, r3, #2
 8017ecc:	81a3      	strh	r3, [r4, #12]
 8017ece:	e7e3      	b.n	8017e98 <__smakebuf_r+0xc>
 8017ed0:	4b0d      	ldr	r3, [pc, #52]	; (8017f08 <__smakebuf_r+0x7c>)
 8017ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8017ed4:	89a3      	ldrh	r3, [r4, #12]
 8017ed6:	6020      	str	r0, [r4, #0]
 8017ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017edc:	81a3      	strh	r3, [r4, #12]
 8017ede:	9b00      	ldr	r3, [sp, #0]
 8017ee0:	6163      	str	r3, [r4, #20]
 8017ee2:	9b01      	ldr	r3, [sp, #4]
 8017ee4:	6120      	str	r0, [r4, #16]
 8017ee6:	b15b      	cbz	r3, 8017f00 <__smakebuf_r+0x74>
 8017ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017eec:	4630      	mov	r0, r6
 8017eee:	f001 f88f 	bl	8019010 <_isatty_r>
 8017ef2:	b128      	cbz	r0, 8017f00 <__smakebuf_r+0x74>
 8017ef4:	89a3      	ldrh	r3, [r4, #12]
 8017ef6:	f023 0303 	bic.w	r3, r3, #3
 8017efa:	f043 0301 	orr.w	r3, r3, #1
 8017efe:	81a3      	strh	r3, [r4, #12]
 8017f00:	89a0      	ldrh	r0, [r4, #12]
 8017f02:	4305      	orrs	r5, r0
 8017f04:	81a5      	strh	r5, [r4, #12]
 8017f06:	e7cd      	b.n	8017ea4 <__smakebuf_r+0x18>
 8017f08:	08017591 	.word	0x08017591

08017f0c <__ascii_mbtowc>:
 8017f0c:	b082      	sub	sp, #8
 8017f0e:	b901      	cbnz	r1, 8017f12 <__ascii_mbtowc+0x6>
 8017f10:	a901      	add	r1, sp, #4
 8017f12:	b142      	cbz	r2, 8017f26 <__ascii_mbtowc+0x1a>
 8017f14:	b14b      	cbz	r3, 8017f2a <__ascii_mbtowc+0x1e>
 8017f16:	7813      	ldrb	r3, [r2, #0]
 8017f18:	600b      	str	r3, [r1, #0]
 8017f1a:	7812      	ldrb	r2, [r2, #0]
 8017f1c:	1e10      	subs	r0, r2, #0
 8017f1e:	bf18      	it	ne
 8017f20:	2001      	movne	r0, #1
 8017f22:	b002      	add	sp, #8
 8017f24:	4770      	bx	lr
 8017f26:	4610      	mov	r0, r2
 8017f28:	e7fb      	b.n	8017f22 <__ascii_mbtowc+0x16>
 8017f2a:	f06f 0001 	mvn.w	r0, #1
 8017f2e:	e7f8      	b.n	8017f22 <__ascii_mbtowc+0x16>

08017f30 <__malloc_lock>:
 8017f30:	4801      	ldr	r0, [pc, #4]	; (8017f38 <__malloc_lock+0x8>)
 8017f32:	f7ff bf84 	b.w	8017e3e <__retarget_lock_acquire_recursive>
 8017f36:	bf00      	nop
 8017f38:	20001b00 	.word	0x20001b00

08017f3c <__malloc_unlock>:
 8017f3c:	4801      	ldr	r0, [pc, #4]	; (8017f44 <__malloc_unlock+0x8>)
 8017f3e:	f7ff bf7f 	b.w	8017e40 <__retarget_lock_release_recursive>
 8017f42:	bf00      	nop
 8017f44:	20001b00 	.word	0x20001b00

08017f48 <_Balloc>:
 8017f48:	b570      	push	{r4, r5, r6, lr}
 8017f4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017f4c:	4604      	mov	r4, r0
 8017f4e:	460d      	mov	r5, r1
 8017f50:	b976      	cbnz	r6, 8017f70 <_Balloc+0x28>
 8017f52:	2010      	movs	r0, #16
 8017f54:	f7fc fb9a 	bl	801468c <malloc>
 8017f58:	4602      	mov	r2, r0
 8017f5a:	6260      	str	r0, [r4, #36]	; 0x24
 8017f5c:	b920      	cbnz	r0, 8017f68 <_Balloc+0x20>
 8017f5e:	4b18      	ldr	r3, [pc, #96]	; (8017fc0 <_Balloc+0x78>)
 8017f60:	4818      	ldr	r0, [pc, #96]	; (8017fc4 <_Balloc+0x7c>)
 8017f62:	2166      	movs	r1, #102	; 0x66
 8017f64:	f7fe fb94 	bl	8016690 <__assert_func>
 8017f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f6c:	6006      	str	r6, [r0, #0]
 8017f6e:	60c6      	str	r6, [r0, #12]
 8017f70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017f72:	68f3      	ldr	r3, [r6, #12]
 8017f74:	b183      	cbz	r3, 8017f98 <_Balloc+0x50>
 8017f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017f7e:	b9b8      	cbnz	r0, 8017fb0 <_Balloc+0x68>
 8017f80:	2101      	movs	r1, #1
 8017f82:	fa01 f605 	lsl.w	r6, r1, r5
 8017f86:	1d72      	adds	r2, r6, #5
 8017f88:	0092      	lsls	r2, r2, #2
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	f000 fc9d 	bl	80188ca <_calloc_r>
 8017f90:	b160      	cbz	r0, 8017fac <_Balloc+0x64>
 8017f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017f96:	e00e      	b.n	8017fb6 <_Balloc+0x6e>
 8017f98:	2221      	movs	r2, #33	; 0x21
 8017f9a:	2104      	movs	r1, #4
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	f000 fc94 	bl	80188ca <_calloc_r>
 8017fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fa4:	60f0      	str	r0, [r6, #12]
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d1e4      	bne.n	8017f76 <_Balloc+0x2e>
 8017fac:	2000      	movs	r0, #0
 8017fae:	bd70      	pop	{r4, r5, r6, pc}
 8017fb0:	6802      	ldr	r2, [r0, #0]
 8017fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017fbc:	e7f7      	b.n	8017fae <_Balloc+0x66>
 8017fbe:	bf00      	nop
 8017fc0:	0802b858 	.word	0x0802b858
 8017fc4:	0802bb60 	.word	0x0802bb60

08017fc8 <_Bfree>:
 8017fc8:	b570      	push	{r4, r5, r6, lr}
 8017fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017fcc:	4605      	mov	r5, r0
 8017fce:	460c      	mov	r4, r1
 8017fd0:	b976      	cbnz	r6, 8017ff0 <_Bfree+0x28>
 8017fd2:	2010      	movs	r0, #16
 8017fd4:	f7fc fb5a 	bl	801468c <malloc>
 8017fd8:	4602      	mov	r2, r0
 8017fda:	6268      	str	r0, [r5, #36]	; 0x24
 8017fdc:	b920      	cbnz	r0, 8017fe8 <_Bfree+0x20>
 8017fde:	4b09      	ldr	r3, [pc, #36]	; (8018004 <_Bfree+0x3c>)
 8017fe0:	4809      	ldr	r0, [pc, #36]	; (8018008 <_Bfree+0x40>)
 8017fe2:	218a      	movs	r1, #138	; 0x8a
 8017fe4:	f7fe fb54 	bl	8016690 <__assert_func>
 8017fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017fec:	6006      	str	r6, [r0, #0]
 8017fee:	60c6      	str	r6, [r0, #12]
 8017ff0:	b13c      	cbz	r4, 8018002 <_Bfree+0x3a>
 8017ff2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017ff4:	6862      	ldr	r2, [r4, #4]
 8017ff6:	68db      	ldr	r3, [r3, #12]
 8017ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ffc:	6021      	str	r1, [r4, #0]
 8017ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018002:	bd70      	pop	{r4, r5, r6, pc}
 8018004:	0802b858 	.word	0x0802b858
 8018008:	0802bb60 	.word	0x0802bb60

0801800c <__multadd>:
 801800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018010:	690d      	ldr	r5, [r1, #16]
 8018012:	4607      	mov	r7, r0
 8018014:	460c      	mov	r4, r1
 8018016:	461e      	mov	r6, r3
 8018018:	f101 0c14 	add.w	ip, r1, #20
 801801c:	2000      	movs	r0, #0
 801801e:	f8dc 3000 	ldr.w	r3, [ip]
 8018022:	b299      	uxth	r1, r3
 8018024:	fb02 6101 	mla	r1, r2, r1, r6
 8018028:	0c1e      	lsrs	r6, r3, #16
 801802a:	0c0b      	lsrs	r3, r1, #16
 801802c:	fb02 3306 	mla	r3, r2, r6, r3
 8018030:	b289      	uxth	r1, r1
 8018032:	3001      	adds	r0, #1
 8018034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018038:	4285      	cmp	r5, r0
 801803a:	f84c 1b04 	str.w	r1, [ip], #4
 801803e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018042:	dcec      	bgt.n	801801e <__multadd+0x12>
 8018044:	b30e      	cbz	r6, 801808a <__multadd+0x7e>
 8018046:	68a3      	ldr	r3, [r4, #8]
 8018048:	42ab      	cmp	r3, r5
 801804a:	dc19      	bgt.n	8018080 <__multadd+0x74>
 801804c:	6861      	ldr	r1, [r4, #4]
 801804e:	4638      	mov	r0, r7
 8018050:	3101      	adds	r1, #1
 8018052:	f7ff ff79 	bl	8017f48 <_Balloc>
 8018056:	4680      	mov	r8, r0
 8018058:	b928      	cbnz	r0, 8018066 <__multadd+0x5a>
 801805a:	4602      	mov	r2, r0
 801805c:	4b0c      	ldr	r3, [pc, #48]	; (8018090 <__multadd+0x84>)
 801805e:	480d      	ldr	r0, [pc, #52]	; (8018094 <__multadd+0x88>)
 8018060:	21b5      	movs	r1, #181	; 0xb5
 8018062:	f7fe fb15 	bl	8016690 <__assert_func>
 8018066:	6922      	ldr	r2, [r4, #16]
 8018068:	3202      	adds	r2, #2
 801806a:	f104 010c 	add.w	r1, r4, #12
 801806e:	0092      	lsls	r2, r2, #2
 8018070:	300c      	adds	r0, #12
 8018072:	f7fc fb1b 	bl	80146ac <memcpy>
 8018076:	4621      	mov	r1, r4
 8018078:	4638      	mov	r0, r7
 801807a:	f7ff ffa5 	bl	8017fc8 <_Bfree>
 801807e:	4644      	mov	r4, r8
 8018080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018084:	3501      	adds	r5, #1
 8018086:	615e      	str	r6, [r3, #20]
 8018088:	6125      	str	r5, [r4, #16]
 801808a:	4620      	mov	r0, r4
 801808c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018090:	0802ba71 	.word	0x0802ba71
 8018094:	0802bb60 	.word	0x0802bb60

08018098 <__s2b>:
 8018098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801809c:	460c      	mov	r4, r1
 801809e:	4615      	mov	r5, r2
 80180a0:	461f      	mov	r7, r3
 80180a2:	2209      	movs	r2, #9
 80180a4:	3308      	adds	r3, #8
 80180a6:	4606      	mov	r6, r0
 80180a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80180ac:	2100      	movs	r1, #0
 80180ae:	2201      	movs	r2, #1
 80180b0:	429a      	cmp	r2, r3
 80180b2:	db09      	blt.n	80180c8 <__s2b+0x30>
 80180b4:	4630      	mov	r0, r6
 80180b6:	f7ff ff47 	bl	8017f48 <_Balloc>
 80180ba:	b940      	cbnz	r0, 80180ce <__s2b+0x36>
 80180bc:	4602      	mov	r2, r0
 80180be:	4b19      	ldr	r3, [pc, #100]	; (8018124 <__s2b+0x8c>)
 80180c0:	4819      	ldr	r0, [pc, #100]	; (8018128 <__s2b+0x90>)
 80180c2:	21ce      	movs	r1, #206	; 0xce
 80180c4:	f7fe fae4 	bl	8016690 <__assert_func>
 80180c8:	0052      	lsls	r2, r2, #1
 80180ca:	3101      	adds	r1, #1
 80180cc:	e7f0      	b.n	80180b0 <__s2b+0x18>
 80180ce:	9b08      	ldr	r3, [sp, #32]
 80180d0:	6143      	str	r3, [r0, #20]
 80180d2:	2d09      	cmp	r5, #9
 80180d4:	f04f 0301 	mov.w	r3, #1
 80180d8:	6103      	str	r3, [r0, #16]
 80180da:	dd16      	ble.n	801810a <__s2b+0x72>
 80180dc:	f104 0909 	add.w	r9, r4, #9
 80180e0:	46c8      	mov	r8, r9
 80180e2:	442c      	add	r4, r5
 80180e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80180e8:	4601      	mov	r1, r0
 80180ea:	3b30      	subs	r3, #48	; 0x30
 80180ec:	220a      	movs	r2, #10
 80180ee:	4630      	mov	r0, r6
 80180f0:	f7ff ff8c 	bl	801800c <__multadd>
 80180f4:	45a0      	cmp	r8, r4
 80180f6:	d1f5      	bne.n	80180e4 <__s2b+0x4c>
 80180f8:	f1a5 0408 	sub.w	r4, r5, #8
 80180fc:	444c      	add	r4, r9
 80180fe:	1b2d      	subs	r5, r5, r4
 8018100:	1963      	adds	r3, r4, r5
 8018102:	42bb      	cmp	r3, r7
 8018104:	db04      	blt.n	8018110 <__s2b+0x78>
 8018106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801810a:	340a      	adds	r4, #10
 801810c:	2509      	movs	r5, #9
 801810e:	e7f6      	b.n	80180fe <__s2b+0x66>
 8018110:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018114:	4601      	mov	r1, r0
 8018116:	3b30      	subs	r3, #48	; 0x30
 8018118:	220a      	movs	r2, #10
 801811a:	4630      	mov	r0, r6
 801811c:	f7ff ff76 	bl	801800c <__multadd>
 8018120:	e7ee      	b.n	8018100 <__s2b+0x68>
 8018122:	bf00      	nop
 8018124:	0802ba71 	.word	0x0802ba71
 8018128:	0802bb60 	.word	0x0802bb60

0801812c <__hi0bits>:
 801812c:	0c03      	lsrs	r3, r0, #16
 801812e:	041b      	lsls	r3, r3, #16
 8018130:	b9d3      	cbnz	r3, 8018168 <__hi0bits+0x3c>
 8018132:	0400      	lsls	r0, r0, #16
 8018134:	2310      	movs	r3, #16
 8018136:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801813a:	bf04      	itt	eq
 801813c:	0200      	lsleq	r0, r0, #8
 801813e:	3308      	addeq	r3, #8
 8018140:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018144:	bf04      	itt	eq
 8018146:	0100      	lsleq	r0, r0, #4
 8018148:	3304      	addeq	r3, #4
 801814a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801814e:	bf04      	itt	eq
 8018150:	0080      	lsleq	r0, r0, #2
 8018152:	3302      	addeq	r3, #2
 8018154:	2800      	cmp	r0, #0
 8018156:	db05      	blt.n	8018164 <__hi0bits+0x38>
 8018158:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801815c:	f103 0301 	add.w	r3, r3, #1
 8018160:	bf08      	it	eq
 8018162:	2320      	moveq	r3, #32
 8018164:	4618      	mov	r0, r3
 8018166:	4770      	bx	lr
 8018168:	2300      	movs	r3, #0
 801816a:	e7e4      	b.n	8018136 <__hi0bits+0xa>

0801816c <__lo0bits>:
 801816c:	6803      	ldr	r3, [r0, #0]
 801816e:	f013 0207 	ands.w	r2, r3, #7
 8018172:	4601      	mov	r1, r0
 8018174:	d00b      	beq.n	801818e <__lo0bits+0x22>
 8018176:	07da      	lsls	r2, r3, #31
 8018178:	d423      	bmi.n	80181c2 <__lo0bits+0x56>
 801817a:	0798      	lsls	r0, r3, #30
 801817c:	bf49      	itett	mi
 801817e:	085b      	lsrmi	r3, r3, #1
 8018180:	089b      	lsrpl	r3, r3, #2
 8018182:	2001      	movmi	r0, #1
 8018184:	600b      	strmi	r3, [r1, #0]
 8018186:	bf5c      	itt	pl
 8018188:	600b      	strpl	r3, [r1, #0]
 801818a:	2002      	movpl	r0, #2
 801818c:	4770      	bx	lr
 801818e:	b298      	uxth	r0, r3
 8018190:	b9a8      	cbnz	r0, 80181be <__lo0bits+0x52>
 8018192:	0c1b      	lsrs	r3, r3, #16
 8018194:	2010      	movs	r0, #16
 8018196:	b2da      	uxtb	r2, r3
 8018198:	b90a      	cbnz	r2, 801819e <__lo0bits+0x32>
 801819a:	3008      	adds	r0, #8
 801819c:	0a1b      	lsrs	r3, r3, #8
 801819e:	071a      	lsls	r2, r3, #28
 80181a0:	bf04      	itt	eq
 80181a2:	091b      	lsreq	r3, r3, #4
 80181a4:	3004      	addeq	r0, #4
 80181a6:	079a      	lsls	r2, r3, #30
 80181a8:	bf04      	itt	eq
 80181aa:	089b      	lsreq	r3, r3, #2
 80181ac:	3002      	addeq	r0, #2
 80181ae:	07da      	lsls	r2, r3, #31
 80181b0:	d403      	bmi.n	80181ba <__lo0bits+0x4e>
 80181b2:	085b      	lsrs	r3, r3, #1
 80181b4:	f100 0001 	add.w	r0, r0, #1
 80181b8:	d005      	beq.n	80181c6 <__lo0bits+0x5a>
 80181ba:	600b      	str	r3, [r1, #0]
 80181bc:	4770      	bx	lr
 80181be:	4610      	mov	r0, r2
 80181c0:	e7e9      	b.n	8018196 <__lo0bits+0x2a>
 80181c2:	2000      	movs	r0, #0
 80181c4:	4770      	bx	lr
 80181c6:	2020      	movs	r0, #32
 80181c8:	4770      	bx	lr
	...

080181cc <__i2b>:
 80181cc:	b510      	push	{r4, lr}
 80181ce:	460c      	mov	r4, r1
 80181d0:	2101      	movs	r1, #1
 80181d2:	f7ff feb9 	bl	8017f48 <_Balloc>
 80181d6:	4602      	mov	r2, r0
 80181d8:	b928      	cbnz	r0, 80181e6 <__i2b+0x1a>
 80181da:	4b05      	ldr	r3, [pc, #20]	; (80181f0 <__i2b+0x24>)
 80181dc:	4805      	ldr	r0, [pc, #20]	; (80181f4 <__i2b+0x28>)
 80181de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80181e2:	f7fe fa55 	bl	8016690 <__assert_func>
 80181e6:	2301      	movs	r3, #1
 80181e8:	6144      	str	r4, [r0, #20]
 80181ea:	6103      	str	r3, [r0, #16]
 80181ec:	bd10      	pop	{r4, pc}
 80181ee:	bf00      	nop
 80181f0:	0802ba71 	.word	0x0802ba71
 80181f4:	0802bb60 	.word	0x0802bb60

080181f8 <__multiply>:
 80181f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181fc:	4691      	mov	r9, r2
 80181fe:	690a      	ldr	r2, [r1, #16]
 8018200:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018204:	429a      	cmp	r2, r3
 8018206:	bfb8      	it	lt
 8018208:	460b      	movlt	r3, r1
 801820a:	460c      	mov	r4, r1
 801820c:	bfbc      	itt	lt
 801820e:	464c      	movlt	r4, r9
 8018210:	4699      	movlt	r9, r3
 8018212:	6927      	ldr	r7, [r4, #16]
 8018214:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018218:	68a3      	ldr	r3, [r4, #8]
 801821a:	6861      	ldr	r1, [r4, #4]
 801821c:	eb07 060a 	add.w	r6, r7, sl
 8018220:	42b3      	cmp	r3, r6
 8018222:	b085      	sub	sp, #20
 8018224:	bfb8      	it	lt
 8018226:	3101      	addlt	r1, #1
 8018228:	f7ff fe8e 	bl	8017f48 <_Balloc>
 801822c:	b930      	cbnz	r0, 801823c <__multiply+0x44>
 801822e:	4602      	mov	r2, r0
 8018230:	4b44      	ldr	r3, [pc, #272]	; (8018344 <__multiply+0x14c>)
 8018232:	4845      	ldr	r0, [pc, #276]	; (8018348 <__multiply+0x150>)
 8018234:	f240 115d 	movw	r1, #349	; 0x15d
 8018238:	f7fe fa2a 	bl	8016690 <__assert_func>
 801823c:	f100 0514 	add.w	r5, r0, #20
 8018240:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018244:	462b      	mov	r3, r5
 8018246:	2200      	movs	r2, #0
 8018248:	4543      	cmp	r3, r8
 801824a:	d321      	bcc.n	8018290 <__multiply+0x98>
 801824c:	f104 0314 	add.w	r3, r4, #20
 8018250:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018254:	f109 0314 	add.w	r3, r9, #20
 8018258:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801825c:	9202      	str	r2, [sp, #8]
 801825e:	1b3a      	subs	r2, r7, r4
 8018260:	3a15      	subs	r2, #21
 8018262:	f022 0203 	bic.w	r2, r2, #3
 8018266:	3204      	adds	r2, #4
 8018268:	f104 0115 	add.w	r1, r4, #21
 801826c:	428f      	cmp	r7, r1
 801826e:	bf38      	it	cc
 8018270:	2204      	movcc	r2, #4
 8018272:	9201      	str	r2, [sp, #4]
 8018274:	9a02      	ldr	r2, [sp, #8]
 8018276:	9303      	str	r3, [sp, #12]
 8018278:	429a      	cmp	r2, r3
 801827a:	d80c      	bhi.n	8018296 <__multiply+0x9e>
 801827c:	2e00      	cmp	r6, #0
 801827e:	dd03      	ble.n	8018288 <__multiply+0x90>
 8018280:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018284:	2b00      	cmp	r3, #0
 8018286:	d05a      	beq.n	801833e <__multiply+0x146>
 8018288:	6106      	str	r6, [r0, #16]
 801828a:	b005      	add	sp, #20
 801828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018290:	f843 2b04 	str.w	r2, [r3], #4
 8018294:	e7d8      	b.n	8018248 <__multiply+0x50>
 8018296:	f8b3 a000 	ldrh.w	sl, [r3]
 801829a:	f1ba 0f00 	cmp.w	sl, #0
 801829e:	d024      	beq.n	80182ea <__multiply+0xf2>
 80182a0:	f104 0e14 	add.w	lr, r4, #20
 80182a4:	46a9      	mov	r9, r5
 80182a6:	f04f 0c00 	mov.w	ip, #0
 80182aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80182ae:	f8d9 1000 	ldr.w	r1, [r9]
 80182b2:	fa1f fb82 	uxth.w	fp, r2
 80182b6:	b289      	uxth	r1, r1
 80182b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80182bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80182c0:	f8d9 2000 	ldr.w	r2, [r9]
 80182c4:	4461      	add	r1, ip
 80182c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80182ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80182d2:	b289      	uxth	r1, r1
 80182d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80182d8:	4577      	cmp	r7, lr
 80182da:	f849 1b04 	str.w	r1, [r9], #4
 80182de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80182e2:	d8e2      	bhi.n	80182aa <__multiply+0xb2>
 80182e4:	9a01      	ldr	r2, [sp, #4]
 80182e6:	f845 c002 	str.w	ip, [r5, r2]
 80182ea:	9a03      	ldr	r2, [sp, #12]
 80182ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80182f0:	3304      	adds	r3, #4
 80182f2:	f1b9 0f00 	cmp.w	r9, #0
 80182f6:	d020      	beq.n	801833a <__multiply+0x142>
 80182f8:	6829      	ldr	r1, [r5, #0]
 80182fa:	f104 0c14 	add.w	ip, r4, #20
 80182fe:	46ae      	mov	lr, r5
 8018300:	f04f 0a00 	mov.w	sl, #0
 8018304:	f8bc b000 	ldrh.w	fp, [ip]
 8018308:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801830c:	fb09 220b 	mla	r2, r9, fp, r2
 8018310:	4492      	add	sl, r2
 8018312:	b289      	uxth	r1, r1
 8018314:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8018318:	f84e 1b04 	str.w	r1, [lr], #4
 801831c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018320:	f8be 1000 	ldrh.w	r1, [lr]
 8018324:	0c12      	lsrs	r2, r2, #16
 8018326:	fb09 1102 	mla	r1, r9, r2, r1
 801832a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801832e:	4567      	cmp	r7, ip
 8018330:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018334:	d8e6      	bhi.n	8018304 <__multiply+0x10c>
 8018336:	9a01      	ldr	r2, [sp, #4]
 8018338:	50a9      	str	r1, [r5, r2]
 801833a:	3504      	adds	r5, #4
 801833c:	e79a      	b.n	8018274 <__multiply+0x7c>
 801833e:	3e01      	subs	r6, #1
 8018340:	e79c      	b.n	801827c <__multiply+0x84>
 8018342:	bf00      	nop
 8018344:	0802ba71 	.word	0x0802ba71
 8018348:	0802bb60 	.word	0x0802bb60

0801834c <__pow5mult>:
 801834c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018350:	4615      	mov	r5, r2
 8018352:	f012 0203 	ands.w	r2, r2, #3
 8018356:	4606      	mov	r6, r0
 8018358:	460f      	mov	r7, r1
 801835a:	d007      	beq.n	801836c <__pow5mult+0x20>
 801835c:	4c25      	ldr	r4, [pc, #148]	; (80183f4 <__pow5mult+0xa8>)
 801835e:	3a01      	subs	r2, #1
 8018360:	2300      	movs	r3, #0
 8018362:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018366:	f7ff fe51 	bl	801800c <__multadd>
 801836a:	4607      	mov	r7, r0
 801836c:	10ad      	asrs	r5, r5, #2
 801836e:	d03d      	beq.n	80183ec <__pow5mult+0xa0>
 8018370:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018372:	b97c      	cbnz	r4, 8018394 <__pow5mult+0x48>
 8018374:	2010      	movs	r0, #16
 8018376:	f7fc f989 	bl	801468c <malloc>
 801837a:	4602      	mov	r2, r0
 801837c:	6270      	str	r0, [r6, #36]	; 0x24
 801837e:	b928      	cbnz	r0, 801838c <__pow5mult+0x40>
 8018380:	4b1d      	ldr	r3, [pc, #116]	; (80183f8 <__pow5mult+0xac>)
 8018382:	481e      	ldr	r0, [pc, #120]	; (80183fc <__pow5mult+0xb0>)
 8018384:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018388:	f7fe f982 	bl	8016690 <__assert_func>
 801838c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018390:	6004      	str	r4, [r0, #0]
 8018392:	60c4      	str	r4, [r0, #12]
 8018394:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018398:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801839c:	b94c      	cbnz	r4, 80183b2 <__pow5mult+0x66>
 801839e:	f240 2171 	movw	r1, #625	; 0x271
 80183a2:	4630      	mov	r0, r6
 80183a4:	f7ff ff12 	bl	80181cc <__i2b>
 80183a8:	2300      	movs	r3, #0
 80183aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80183ae:	4604      	mov	r4, r0
 80183b0:	6003      	str	r3, [r0, #0]
 80183b2:	f04f 0900 	mov.w	r9, #0
 80183b6:	07eb      	lsls	r3, r5, #31
 80183b8:	d50a      	bpl.n	80183d0 <__pow5mult+0x84>
 80183ba:	4639      	mov	r1, r7
 80183bc:	4622      	mov	r2, r4
 80183be:	4630      	mov	r0, r6
 80183c0:	f7ff ff1a 	bl	80181f8 <__multiply>
 80183c4:	4639      	mov	r1, r7
 80183c6:	4680      	mov	r8, r0
 80183c8:	4630      	mov	r0, r6
 80183ca:	f7ff fdfd 	bl	8017fc8 <_Bfree>
 80183ce:	4647      	mov	r7, r8
 80183d0:	106d      	asrs	r5, r5, #1
 80183d2:	d00b      	beq.n	80183ec <__pow5mult+0xa0>
 80183d4:	6820      	ldr	r0, [r4, #0]
 80183d6:	b938      	cbnz	r0, 80183e8 <__pow5mult+0x9c>
 80183d8:	4622      	mov	r2, r4
 80183da:	4621      	mov	r1, r4
 80183dc:	4630      	mov	r0, r6
 80183de:	f7ff ff0b 	bl	80181f8 <__multiply>
 80183e2:	6020      	str	r0, [r4, #0]
 80183e4:	f8c0 9000 	str.w	r9, [r0]
 80183e8:	4604      	mov	r4, r0
 80183ea:	e7e4      	b.n	80183b6 <__pow5mult+0x6a>
 80183ec:	4638      	mov	r0, r7
 80183ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183f2:	bf00      	nop
 80183f4:	0802bcb0 	.word	0x0802bcb0
 80183f8:	0802b858 	.word	0x0802b858
 80183fc:	0802bb60 	.word	0x0802bb60

08018400 <__lshift>:
 8018400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018404:	460c      	mov	r4, r1
 8018406:	6849      	ldr	r1, [r1, #4]
 8018408:	6923      	ldr	r3, [r4, #16]
 801840a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801840e:	68a3      	ldr	r3, [r4, #8]
 8018410:	4607      	mov	r7, r0
 8018412:	4691      	mov	r9, r2
 8018414:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018418:	f108 0601 	add.w	r6, r8, #1
 801841c:	42b3      	cmp	r3, r6
 801841e:	db0b      	blt.n	8018438 <__lshift+0x38>
 8018420:	4638      	mov	r0, r7
 8018422:	f7ff fd91 	bl	8017f48 <_Balloc>
 8018426:	4605      	mov	r5, r0
 8018428:	b948      	cbnz	r0, 801843e <__lshift+0x3e>
 801842a:	4602      	mov	r2, r0
 801842c:	4b2a      	ldr	r3, [pc, #168]	; (80184d8 <__lshift+0xd8>)
 801842e:	482b      	ldr	r0, [pc, #172]	; (80184dc <__lshift+0xdc>)
 8018430:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018434:	f7fe f92c 	bl	8016690 <__assert_func>
 8018438:	3101      	adds	r1, #1
 801843a:	005b      	lsls	r3, r3, #1
 801843c:	e7ee      	b.n	801841c <__lshift+0x1c>
 801843e:	2300      	movs	r3, #0
 8018440:	f100 0114 	add.w	r1, r0, #20
 8018444:	f100 0210 	add.w	r2, r0, #16
 8018448:	4618      	mov	r0, r3
 801844a:	4553      	cmp	r3, sl
 801844c:	db37      	blt.n	80184be <__lshift+0xbe>
 801844e:	6920      	ldr	r0, [r4, #16]
 8018450:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018454:	f104 0314 	add.w	r3, r4, #20
 8018458:	f019 091f 	ands.w	r9, r9, #31
 801845c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018460:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8018464:	d02f      	beq.n	80184c6 <__lshift+0xc6>
 8018466:	f1c9 0e20 	rsb	lr, r9, #32
 801846a:	468a      	mov	sl, r1
 801846c:	f04f 0c00 	mov.w	ip, #0
 8018470:	681a      	ldr	r2, [r3, #0]
 8018472:	fa02 f209 	lsl.w	r2, r2, r9
 8018476:	ea42 020c 	orr.w	r2, r2, ip
 801847a:	f84a 2b04 	str.w	r2, [sl], #4
 801847e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018482:	4298      	cmp	r0, r3
 8018484:	fa22 fc0e 	lsr.w	ip, r2, lr
 8018488:	d8f2      	bhi.n	8018470 <__lshift+0x70>
 801848a:	1b03      	subs	r3, r0, r4
 801848c:	3b15      	subs	r3, #21
 801848e:	f023 0303 	bic.w	r3, r3, #3
 8018492:	3304      	adds	r3, #4
 8018494:	f104 0215 	add.w	r2, r4, #21
 8018498:	4290      	cmp	r0, r2
 801849a:	bf38      	it	cc
 801849c:	2304      	movcc	r3, #4
 801849e:	f841 c003 	str.w	ip, [r1, r3]
 80184a2:	f1bc 0f00 	cmp.w	ip, #0
 80184a6:	d001      	beq.n	80184ac <__lshift+0xac>
 80184a8:	f108 0602 	add.w	r6, r8, #2
 80184ac:	3e01      	subs	r6, #1
 80184ae:	4638      	mov	r0, r7
 80184b0:	612e      	str	r6, [r5, #16]
 80184b2:	4621      	mov	r1, r4
 80184b4:	f7ff fd88 	bl	8017fc8 <_Bfree>
 80184b8:	4628      	mov	r0, r5
 80184ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80184be:	f842 0f04 	str.w	r0, [r2, #4]!
 80184c2:	3301      	adds	r3, #1
 80184c4:	e7c1      	b.n	801844a <__lshift+0x4a>
 80184c6:	3904      	subs	r1, #4
 80184c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80184d0:	4298      	cmp	r0, r3
 80184d2:	d8f9      	bhi.n	80184c8 <__lshift+0xc8>
 80184d4:	e7ea      	b.n	80184ac <__lshift+0xac>
 80184d6:	bf00      	nop
 80184d8:	0802ba71 	.word	0x0802ba71
 80184dc:	0802bb60 	.word	0x0802bb60

080184e0 <__mcmp>:
 80184e0:	b530      	push	{r4, r5, lr}
 80184e2:	6902      	ldr	r2, [r0, #16]
 80184e4:	690c      	ldr	r4, [r1, #16]
 80184e6:	1b12      	subs	r2, r2, r4
 80184e8:	d10e      	bne.n	8018508 <__mcmp+0x28>
 80184ea:	f100 0314 	add.w	r3, r0, #20
 80184ee:	3114      	adds	r1, #20
 80184f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80184f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80184f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80184fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018500:	42a5      	cmp	r5, r4
 8018502:	d003      	beq.n	801850c <__mcmp+0x2c>
 8018504:	d305      	bcc.n	8018512 <__mcmp+0x32>
 8018506:	2201      	movs	r2, #1
 8018508:	4610      	mov	r0, r2
 801850a:	bd30      	pop	{r4, r5, pc}
 801850c:	4283      	cmp	r3, r0
 801850e:	d3f3      	bcc.n	80184f8 <__mcmp+0x18>
 8018510:	e7fa      	b.n	8018508 <__mcmp+0x28>
 8018512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018516:	e7f7      	b.n	8018508 <__mcmp+0x28>

08018518 <__mdiff>:
 8018518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801851c:	460c      	mov	r4, r1
 801851e:	4606      	mov	r6, r0
 8018520:	4611      	mov	r1, r2
 8018522:	4620      	mov	r0, r4
 8018524:	4690      	mov	r8, r2
 8018526:	f7ff ffdb 	bl	80184e0 <__mcmp>
 801852a:	1e05      	subs	r5, r0, #0
 801852c:	d110      	bne.n	8018550 <__mdiff+0x38>
 801852e:	4629      	mov	r1, r5
 8018530:	4630      	mov	r0, r6
 8018532:	f7ff fd09 	bl	8017f48 <_Balloc>
 8018536:	b930      	cbnz	r0, 8018546 <__mdiff+0x2e>
 8018538:	4b3a      	ldr	r3, [pc, #232]	; (8018624 <__mdiff+0x10c>)
 801853a:	4602      	mov	r2, r0
 801853c:	f240 2132 	movw	r1, #562	; 0x232
 8018540:	4839      	ldr	r0, [pc, #228]	; (8018628 <__mdiff+0x110>)
 8018542:	f7fe f8a5 	bl	8016690 <__assert_func>
 8018546:	2301      	movs	r3, #1
 8018548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801854c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018550:	bfa4      	itt	ge
 8018552:	4643      	movge	r3, r8
 8018554:	46a0      	movge	r8, r4
 8018556:	4630      	mov	r0, r6
 8018558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801855c:	bfa6      	itte	ge
 801855e:	461c      	movge	r4, r3
 8018560:	2500      	movge	r5, #0
 8018562:	2501      	movlt	r5, #1
 8018564:	f7ff fcf0 	bl	8017f48 <_Balloc>
 8018568:	b920      	cbnz	r0, 8018574 <__mdiff+0x5c>
 801856a:	4b2e      	ldr	r3, [pc, #184]	; (8018624 <__mdiff+0x10c>)
 801856c:	4602      	mov	r2, r0
 801856e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018572:	e7e5      	b.n	8018540 <__mdiff+0x28>
 8018574:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018578:	6926      	ldr	r6, [r4, #16]
 801857a:	60c5      	str	r5, [r0, #12]
 801857c:	f104 0914 	add.w	r9, r4, #20
 8018580:	f108 0514 	add.w	r5, r8, #20
 8018584:	f100 0e14 	add.w	lr, r0, #20
 8018588:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801858c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8018590:	f108 0210 	add.w	r2, r8, #16
 8018594:	46f2      	mov	sl, lr
 8018596:	2100      	movs	r1, #0
 8018598:	f859 3b04 	ldr.w	r3, [r9], #4
 801859c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80185a0:	fa1f f883 	uxth.w	r8, r3
 80185a4:	fa11 f18b 	uxtah	r1, r1, fp
 80185a8:	0c1b      	lsrs	r3, r3, #16
 80185aa:	eba1 0808 	sub.w	r8, r1, r8
 80185ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80185b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80185b6:	fa1f f888 	uxth.w	r8, r8
 80185ba:	1419      	asrs	r1, r3, #16
 80185bc:	454e      	cmp	r6, r9
 80185be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80185c2:	f84a 3b04 	str.w	r3, [sl], #4
 80185c6:	d8e7      	bhi.n	8018598 <__mdiff+0x80>
 80185c8:	1b33      	subs	r3, r6, r4
 80185ca:	3b15      	subs	r3, #21
 80185cc:	f023 0303 	bic.w	r3, r3, #3
 80185d0:	3304      	adds	r3, #4
 80185d2:	3415      	adds	r4, #21
 80185d4:	42a6      	cmp	r6, r4
 80185d6:	bf38      	it	cc
 80185d8:	2304      	movcc	r3, #4
 80185da:	441d      	add	r5, r3
 80185dc:	4473      	add	r3, lr
 80185de:	469e      	mov	lr, r3
 80185e0:	462e      	mov	r6, r5
 80185e2:	4566      	cmp	r6, ip
 80185e4:	d30e      	bcc.n	8018604 <__mdiff+0xec>
 80185e6:	f10c 0203 	add.w	r2, ip, #3
 80185ea:	1b52      	subs	r2, r2, r5
 80185ec:	f022 0203 	bic.w	r2, r2, #3
 80185f0:	3d03      	subs	r5, #3
 80185f2:	45ac      	cmp	ip, r5
 80185f4:	bf38      	it	cc
 80185f6:	2200      	movcc	r2, #0
 80185f8:	441a      	add	r2, r3
 80185fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80185fe:	b17b      	cbz	r3, 8018620 <__mdiff+0x108>
 8018600:	6107      	str	r7, [r0, #16]
 8018602:	e7a3      	b.n	801854c <__mdiff+0x34>
 8018604:	f856 8b04 	ldr.w	r8, [r6], #4
 8018608:	fa11 f288 	uxtah	r2, r1, r8
 801860c:	1414      	asrs	r4, r2, #16
 801860e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018612:	b292      	uxth	r2, r2
 8018614:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8018618:	f84e 2b04 	str.w	r2, [lr], #4
 801861c:	1421      	asrs	r1, r4, #16
 801861e:	e7e0      	b.n	80185e2 <__mdiff+0xca>
 8018620:	3f01      	subs	r7, #1
 8018622:	e7ea      	b.n	80185fa <__mdiff+0xe2>
 8018624:	0802ba71 	.word	0x0802ba71
 8018628:	0802bb60 	.word	0x0802bb60

0801862c <__ulp>:
 801862c:	b082      	sub	sp, #8
 801862e:	ed8d 0b00 	vstr	d0, [sp]
 8018632:	9b01      	ldr	r3, [sp, #4]
 8018634:	4912      	ldr	r1, [pc, #72]	; (8018680 <__ulp+0x54>)
 8018636:	4019      	ands	r1, r3
 8018638:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801863c:	2900      	cmp	r1, #0
 801863e:	dd05      	ble.n	801864c <__ulp+0x20>
 8018640:	2200      	movs	r2, #0
 8018642:	460b      	mov	r3, r1
 8018644:	ec43 2b10 	vmov	d0, r2, r3
 8018648:	b002      	add	sp, #8
 801864a:	4770      	bx	lr
 801864c:	4249      	negs	r1, r1
 801864e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8018652:	ea4f 5021 	mov.w	r0, r1, asr #20
 8018656:	f04f 0200 	mov.w	r2, #0
 801865a:	f04f 0300 	mov.w	r3, #0
 801865e:	da04      	bge.n	801866a <__ulp+0x3e>
 8018660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8018664:	fa41 f300 	asr.w	r3, r1, r0
 8018668:	e7ec      	b.n	8018644 <__ulp+0x18>
 801866a:	f1a0 0114 	sub.w	r1, r0, #20
 801866e:	291e      	cmp	r1, #30
 8018670:	bfda      	itte	le
 8018672:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8018676:	fa20 f101 	lsrle.w	r1, r0, r1
 801867a:	2101      	movgt	r1, #1
 801867c:	460a      	mov	r2, r1
 801867e:	e7e1      	b.n	8018644 <__ulp+0x18>
 8018680:	7ff00000 	.word	0x7ff00000

08018684 <__b2d>:
 8018684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018686:	6905      	ldr	r5, [r0, #16]
 8018688:	f100 0714 	add.w	r7, r0, #20
 801868c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018690:	1f2e      	subs	r6, r5, #4
 8018692:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018696:	4620      	mov	r0, r4
 8018698:	f7ff fd48 	bl	801812c <__hi0bits>
 801869c:	f1c0 0320 	rsb	r3, r0, #32
 80186a0:	280a      	cmp	r0, #10
 80186a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8018720 <__b2d+0x9c>
 80186a6:	600b      	str	r3, [r1, #0]
 80186a8:	dc14      	bgt.n	80186d4 <__b2d+0x50>
 80186aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80186ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80186b2:	42b7      	cmp	r7, r6
 80186b4:	ea41 030c 	orr.w	r3, r1, ip
 80186b8:	bf34      	ite	cc
 80186ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80186be:	2100      	movcs	r1, #0
 80186c0:	3015      	adds	r0, #21
 80186c2:	fa04 f000 	lsl.w	r0, r4, r0
 80186c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80186ca:	ea40 0201 	orr.w	r2, r0, r1
 80186ce:	ec43 2b10 	vmov	d0, r2, r3
 80186d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80186d4:	42b7      	cmp	r7, r6
 80186d6:	bf3a      	itte	cc
 80186d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80186dc:	f1a5 0608 	subcc.w	r6, r5, #8
 80186e0:	2100      	movcs	r1, #0
 80186e2:	380b      	subs	r0, #11
 80186e4:	d017      	beq.n	8018716 <__b2d+0x92>
 80186e6:	f1c0 0c20 	rsb	ip, r0, #32
 80186ea:	fa04 f500 	lsl.w	r5, r4, r0
 80186ee:	42be      	cmp	r6, r7
 80186f0:	fa21 f40c 	lsr.w	r4, r1, ip
 80186f4:	ea45 0504 	orr.w	r5, r5, r4
 80186f8:	bf8c      	ite	hi
 80186fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80186fe:	2400      	movls	r4, #0
 8018700:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8018704:	fa01 f000 	lsl.w	r0, r1, r0
 8018708:	fa24 f40c 	lsr.w	r4, r4, ip
 801870c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018710:	ea40 0204 	orr.w	r2, r0, r4
 8018714:	e7db      	b.n	80186ce <__b2d+0x4a>
 8018716:	ea44 030c 	orr.w	r3, r4, ip
 801871a:	460a      	mov	r2, r1
 801871c:	e7d7      	b.n	80186ce <__b2d+0x4a>
 801871e:	bf00      	nop
 8018720:	3ff00000 	.word	0x3ff00000

08018724 <__d2b>:
 8018724:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018728:	4689      	mov	r9, r1
 801872a:	2101      	movs	r1, #1
 801872c:	ec57 6b10 	vmov	r6, r7, d0
 8018730:	4690      	mov	r8, r2
 8018732:	f7ff fc09 	bl	8017f48 <_Balloc>
 8018736:	4604      	mov	r4, r0
 8018738:	b930      	cbnz	r0, 8018748 <__d2b+0x24>
 801873a:	4602      	mov	r2, r0
 801873c:	4b25      	ldr	r3, [pc, #148]	; (80187d4 <__d2b+0xb0>)
 801873e:	4826      	ldr	r0, [pc, #152]	; (80187d8 <__d2b+0xb4>)
 8018740:	f240 310a 	movw	r1, #778	; 0x30a
 8018744:	f7fd ffa4 	bl	8016690 <__assert_func>
 8018748:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801874c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018750:	bb35      	cbnz	r5, 80187a0 <__d2b+0x7c>
 8018752:	2e00      	cmp	r6, #0
 8018754:	9301      	str	r3, [sp, #4]
 8018756:	d028      	beq.n	80187aa <__d2b+0x86>
 8018758:	4668      	mov	r0, sp
 801875a:	9600      	str	r6, [sp, #0]
 801875c:	f7ff fd06 	bl	801816c <__lo0bits>
 8018760:	9900      	ldr	r1, [sp, #0]
 8018762:	b300      	cbz	r0, 80187a6 <__d2b+0x82>
 8018764:	9a01      	ldr	r2, [sp, #4]
 8018766:	f1c0 0320 	rsb	r3, r0, #32
 801876a:	fa02 f303 	lsl.w	r3, r2, r3
 801876e:	430b      	orrs	r3, r1
 8018770:	40c2      	lsrs	r2, r0
 8018772:	6163      	str	r3, [r4, #20]
 8018774:	9201      	str	r2, [sp, #4]
 8018776:	9b01      	ldr	r3, [sp, #4]
 8018778:	61a3      	str	r3, [r4, #24]
 801877a:	2b00      	cmp	r3, #0
 801877c:	bf14      	ite	ne
 801877e:	2202      	movne	r2, #2
 8018780:	2201      	moveq	r2, #1
 8018782:	6122      	str	r2, [r4, #16]
 8018784:	b1d5      	cbz	r5, 80187bc <__d2b+0x98>
 8018786:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801878a:	4405      	add	r5, r0
 801878c:	f8c9 5000 	str.w	r5, [r9]
 8018790:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018794:	f8c8 0000 	str.w	r0, [r8]
 8018798:	4620      	mov	r0, r4
 801879a:	b003      	add	sp, #12
 801879c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80187a4:	e7d5      	b.n	8018752 <__d2b+0x2e>
 80187a6:	6161      	str	r1, [r4, #20]
 80187a8:	e7e5      	b.n	8018776 <__d2b+0x52>
 80187aa:	a801      	add	r0, sp, #4
 80187ac:	f7ff fcde 	bl	801816c <__lo0bits>
 80187b0:	9b01      	ldr	r3, [sp, #4]
 80187b2:	6163      	str	r3, [r4, #20]
 80187b4:	2201      	movs	r2, #1
 80187b6:	6122      	str	r2, [r4, #16]
 80187b8:	3020      	adds	r0, #32
 80187ba:	e7e3      	b.n	8018784 <__d2b+0x60>
 80187bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80187c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80187c4:	f8c9 0000 	str.w	r0, [r9]
 80187c8:	6918      	ldr	r0, [r3, #16]
 80187ca:	f7ff fcaf 	bl	801812c <__hi0bits>
 80187ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80187d2:	e7df      	b.n	8018794 <__d2b+0x70>
 80187d4:	0802ba71 	.word	0x0802ba71
 80187d8:	0802bb60 	.word	0x0802bb60

080187dc <__ratio>:
 80187dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187e0:	4688      	mov	r8, r1
 80187e2:	4669      	mov	r1, sp
 80187e4:	4681      	mov	r9, r0
 80187e6:	f7ff ff4d 	bl	8018684 <__b2d>
 80187ea:	a901      	add	r1, sp, #4
 80187ec:	4640      	mov	r0, r8
 80187ee:	ec55 4b10 	vmov	r4, r5, d0
 80187f2:	f7ff ff47 	bl	8018684 <__b2d>
 80187f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80187fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80187fe:	eba3 0c02 	sub.w	ip, r3, r2
 8018802:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018806:	1a9b      	subs	r3, r3, r2
 8018808:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801880c:	ec51 0b10 	vmov	r0, r1, d0
 8018810:	2b00      	cmp	r3, #0
 8018812:	bfd6      	itet	le
 8018814:	460a      	movle	r2, r1
 8018816:	462a      	movgt	r2, r5
 8018818:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801881c:	468b      	mov	fp, r1
 801881e:	462f      	mov	r7, r5
 8018820:	bfd4      	ite	le
 8018822:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8018826:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801882a:	4620      	mov	r0, r4
 801882c:	ee10 2a10 	vmov	r2, s0
 8018830:	465b      	mov	r3, fp
 8018832:	4639      	mov	r1, r7
 8018834:	f7e8 f81a 	bl	800086c <__aeabi_ddiv>
 8018838:	ec41 0b10 	vmov	d0, r0, r1
 801883c:	b003      	add	sp, #12
 801883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018842 <__copybits>:
 8018842:	3901      	subs	r1, #1
 8018844:	b570      	push	{r4, r5, r6, lr}
 8018846:	1149      	asrs	r1, r1, #5
 8018848:	6914      	ldr	r4, [r2, #16]
 801884a:	3101      	adds	r1, #1
 801884c:	f102 0314 	add.w	r3, r2, #20
 8018850:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018854:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018858:	1f05      	subs	r5, r0, #4
 801885a:	42a3      	cmp	r3, r4
 801885c:	d30c      	bcc.n	8018878 <__copybits+0x36>
 801885e:	1aa3      	subs	r3, r4, r2
 8018860:	3b11      	subs	r3, #17
 8018862:	f023 0303 	bic.w	r3, r3, #3
 8018866:	3211      	adds	r2, #17
 8018868:	42a2      	cmp	r2, r4
 801886a:	bf88      	it	hi
 801886c:	2300      	movhi	r3, #0
 801886e:	4418      	add	r0, r3
 8018870:	2300      	movs	r3, #0
 8018872:	4288      	cmp	r0, r1
 8018874:	d305      	bcc.n	8018882 <__copybits+0x40>
 8018876:	bd70      	pop	{r4, r5, r6, pc}
 8018878:	f853 6b04 	ldr.w	r6, [r3], #4
 801887c:	f845 6f04 	str.w	r6, [r5, #4]!
 8018880:	e7eb      	b.n	801885a <__copybits+0x18>
 8018882:	f840 3b04 	str.w	r3, [r0], #4
 8018886:	e7f4      	b.n	8018872 <__copybits+0x30>

08018888 <__any_on>:
 8018888:	f100 0214 	add.w	r2, r0, #20
 801888c:	6900      	ldr	r0, [r0, #16]
 801888e:	114b      	asrs	r3, r1, #5
 8018890:	4298      	cmp	r0, r3
 8018892:	b510      	push	{r4, lr}
 8018894:	db11      	blt.n	80188ba <__any_on+0x32>
 8018896:	dd0a      	ble.n	80188ae <__any_on+0x26>
 8018898:	f011 011f 	ands.w	r1, r1, #31
 801889c:	d007      	beq.n	80188ae <__any_on+0x26>
 801889e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80188a2:	fa24 f001 	lsr.w	r0, r4, r1
 80188a6:	fa00 f101 	lsl.w	r1, r0, r1
 80188aa:	428c      	cmp	r4, r1
 80188ac:	d10b      	bne.n	80188c6 <__any_on+0x3e>
 80188ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188b2:	4293      	cmp	r3, r2
 80188b4:	d803      	bhi.n	80188be <__any_on+0x36>
 80188b6:	2000      	movs	r0, #0
 80188b8:	bd10      	pop	{r4, pc}
 80188ba:	4603      	mov	r3, r0
 80188bc:	e7f7      	b.n	80188ae <__any_on+0x26>
 80188be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80188c2:	2900      	cmp	r1, #0
 80188c4:	d0f5      	beq.n	80188b2 <__any_on+0x2a>
 80188c6:	2001      	movs	r0, #1
 80188c8:	e7f6      	b.n	80188b8 <__any_on+0x30>

080188ca <_calloc_r>:
 80188ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80188cc:	fba1 2402 	umull	r2, r4, r1, r2
 80188d0:	b94c      	cbnz	r4, 80188e6 <_calloc_r+0x1c>
 80188d2:	4611      	mov	r1, r2
 80188d4:	9201      	str	r2, [sp, #4]
 80188d6:	f7fb ff6b 	bl	80147b0 <_malloc_r>
 80188da:	9a01      	ldr	r2, [sp, #4]
 80188dc:	4605      	mov	r5, r0
 80188de:	b930      	cbnz	r0, 80188ee <_calloc_r+0x24>
 80188e0:	4628      	mov	r0, r5
 80188e2:	b003      	add	sp, #12
 80188e4:	bd30      	pop	{r4, r5, pc}
 80188e6:	220c      	movs	r2, #12
 80188e8:	6002      	str	r2, [r0, #0]
 80188ea:	2500      	movs	r5, #0
 80188ec:	e7f8      	b.n	80188e0 <_calloc_r+0x16>
 80188ee:	4621      	mov	r1, r4
 80188f0:	f7fb feea 	bl	80146c8 <memset>
 80188f4:	e7f4      	b.n	80188e0 <_calloc_r+0x16>

080188f6 <_realloc_r>:
 80188f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188fa:	4680      	mov	r8, r0
 80188fc:	4614      	mov	r4, r2
 80188fe:	460e      	mov	r6, r1
 8018900:	b921      	cbnz	r1, 801890c <_realloc_r+0x16>
 8018902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018906:	4611      	mov	r1, r2
 8018908:	f7fb bf52 	b.w	80147b0 <_malloc_r>
 801890c:	b92a      	cbnz	r2, 801891a <_realloc_r+0x24>
 801890e:	f7fb fee3 	bl	80146d8 <_free_r>
 8018912:	4625      	mov	r5, r4
 8018914:	4628      	mov	r0, r5
 8018916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801891a:	f000 fbb5 	bl	8019088 <_malloc_usable_size_r>
 801891e:	4284      	cmp	r4, r0
 8018920:	4607      	mov	r7, r0
 8018922:	d802      	bhi.n	801892a <_realloc_r+0x34>
 8018924:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018928:	d812      	bhi.n	8018950 <_realloc_r+0x5a>
 801892a:	4621      	mov	r1, r4
 801892c:	4640      	mov	r0, r8
 801892e:	f7fb ff3f 	bl	80147b0 <_malloc_r>
 8018932:	4605      	mov	r5, r0
 8018934:	2800      	cmp	r0, #0
 8018936:	d0ed      	beq.n	8018914 <_realloc_r+0x1e>
 8018938:	42bc      	cmp	r4, r7
 801893a:	4622      	mov	r2, r4
 801893c:	4631      	mov	r1, r6
 801893e:	bf28      	it	cs
 8018940:	463a      	movcs	r2, r7
 8018942:	f7fb feb3 	bl	80146ac <memcpy>
 8018946:	4631      	mov	r1, r6
 8018948:	4640      	mov	r0, r8
 801894a:	f7fb fec5 	bl	80146d8 <_free_r>
 801894e:	e7e1      	b.n	8018914 <_realloc_r+0x1e>
 8018950:	4635      	mov	r5, r6
 8018952:	e7df      	b.n	8018914 <_realloc_r+0x1e>

08018954 <__ssputs_r>:
 8018954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018958:	688e      	ldr	r6, [r1, #8]
 801895a:	429e      	cmp	r6, r3
 801895c:	4682      	mov	sl, r0
 801895e:	460c      	mov	r4, r1
 8018960:	4690      	mov	r8, r2
 8018962:	461f      	mov	r7, r3
 8018964:	d838      	bhi.n	80189d8 <__ssputs_r+0x84>
 8018966:	898a      	ldrh	r2, [r1, #12]
 8018968:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801896c:	d032      	beq.n	80189d4 <__ssputs_r+0x80>
 801896e:	6825      	ldr	r5, [r4, #0]
 8018970:	6909      	ldr	r1, [r1, #16]
 8018972:	eba5 0901 	sub.w	r9, r5, r1
 8018976:	6965      	ldr	r5, [r4, #20]
 8018978:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801897c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018980:	3301      	adds	r3, #1
 8018982:	444b      	add	r3, r9
 8018984:	106d      	asrs	r5, r5, #1
 8018986:	429d      	cmp	r5, r3
 8018988:	bf38      	it	cc
 801898a:	461d      	movcc	r5, r3
 801898c:	0553      	lsls	r3, r2, #21
 801898e:	d531      	bpl.n	80189f4 <__ssputs_r+0xa0>
 8018990:	4629      	mov	r1, r5
 8018992:	f7fb ff0d 	bl	80147b0 <_malloc_r>
 8018996:	4606      	mov	r6, r0
 8018998:	b950      	cbnz	r0, 80189b0 <__ssputs_r+0x5c>
 801899a:	230c      	movs	r3, #12
 801899c:	f8ca 3000 	str.w	r3, [sl]
 80189a0:	89a3      	ldrh	r3, [r4, #12]
 80189a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189a6:	81a3      	strh	r3, [r4, #12]
 80189a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189b0:	6921      	ldr	r1, [r4, #16]
 80189b2:	464a      	mov	r2, r9
 80189b4:	f7fb fe7a 	bl	80146ac <memcpy>
 80189b8:	89a3      	ldrh	r3, [r4, #12]
 80189ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189c2:	81a3      	strh	r3, [r4, #12]
 80189c4:	6126      	str	r6, [r4, #16]
 80189c6:	6165      	str	r5, [r4, #20]
 80189c8:	444e      	add	r6, r9
 80189ca:	eba5 0509 	sub.w	r5, r5, r9
 80189ce:	6026      	str	r6, [r4, #0]
 80189d0:	60a5      	str	r5, [r4, #8]
 80189d2:	463e      	mov	r6, r7
 80189d4:	42be      	cmp	r6, r7
 80189d6:	d900      	bls.n	80189da <__ssputs_r+0x86>
 80189d8:	463e      	mov	r6, r7
 80189da:	6820      	ldr	r0, [r4, #0]
 80189dc:	4632      	mov	r2, r6
 80189de:	4641      	mov	r1, r8
 80189e0:	f000 fb38 	bl	8019054 <memmove>
 80189e4:	68a3      	ldr	r3, [r4, #8]
 80189e6:	1b9b      	subs	r3, r3, r6
 80189e8:	60a3      	str	r3, [r4, #8]
 80189ea:	6823      	ldr	r3, [r4, #0]
 80189ec:	4433      	add	r3, r6
 80189ee:	6023      	str	r3, [r4, #0]
 80189f0:	2000      	movs	r0, #0
 80189f2:	e7db      	b.n	80189ac <__ssputs_r+0x58>
 80189f4:	462a      	mov	r2, r5
 80189f6:	f7ff ff7e 	bl	80188f6 <_realloc_r>
 80189fa:	4606      	mov	r6, r0
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d1e1      	bne.n	80189c4 <__ssputs_r+0x70>
 8018a00:	6921      	ldr	r1, [r4, #16]
 8018a02:	4650      	mov	r0, sl
 8018a04:	f7fb fe68 	bl	80146d8 <_free_r>
 8018a08:	e7c7      	b.n	801899a <__ssputs_r+0x46>
	...

08018a0c <_svfiprintf_r>:
 8018a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a10:	4698      	mov	r8, r3
 8018a12:	898b      	ldrh	r3, [r1, #12]
 8018a14:	061b      	lsls	r3, r3, #24
 8018a16:	b09d      	sub	sp, #116	; 0x74
 8018a18:	4607      	mov	r7, r0
 8018a1a:	460d      	mov	r5, r1
 8018a1c:	4614      	mov	r4, r2
 8018a1e:	d50e      	bpl.n	8018a3e <_svfiprintf_r+0x32>
 8018a20:	690b      	ldr	r3, [r1, #16]
 8018a22:	b963      	cbnz	r3, 8018a3e <_svfiprintf_r+0x32>
 8018a24:	2140      	movs	r1, #64	; 0x40
 8018a26:	f7fb fec3 	bl	80147b0 <_malloc_r>
 8018a2a:	6028      	str	r0, [r5, #0]
 8018a2c:	6128      	str	r0, [r5, #16]
 8018a2e:	b920      	cbnz	r0, 8018a3a <_svfiprintf_r+0x2e>
 8018a30:	230c      	movs	r3, #12
 8018a32:	603b      	str	r3, [r7, #0]
 8018a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a38:	e0d1      	b.n	8018bde <_svfiprintf_r+0x1d2>
 8018a3a:	2340      	movs	r3, #64	; 0x40
 8018a3c:	616b      	str	r3, [r5, #20]
 8018a3e:	2300      	movs	r3, #0
 8018a40:	9309      	str	r3, [sp, #36]	; 0x24
 8018a42:	2320      	movs	r3, #32
 8018a44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a4c:	2330      	movs	r3, #48	; 0x30
 8018a4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018bf8 <_svfiprintf_r+0x1ec>
 8018a52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a56:	f04f 0901 	mov.w	r9, #1
 8018a5a:	4623      	mov	r3, r4
 8018a5c:	469a      	mov	sl, r3
 8018a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a62:	b10a      	cbz	r2, 8018a68 <_svfiprintf_r+0x5c>
 8018a64:	2a25      	cmp	r2, #37	; 0x25
 8018a66:	d1f9      	bne.n	8018a5c <_svfiprintf_r+0x50>
 8018a68:	ebba 0b04 	subs.w	fp, sl, r4
 8018a6c:	d00b      	beq.n	8018a86 <_svfiprintf_r+0x7a>
 8018a6e:	465b      	mov	r3, fp
 8018a70:	4622      	mov	r2, r4
 8018a72:	4629      	mov	r1, r5
 8018a74:	4638      	mov	r0, r7
 8018a76:	f7ff ff6d 	bl	8018954 <__ssputs_r>
 8018a7a:	3001      	adds	r0, #1
 8018a7c:	f000 80aa 	beq.w	8018bd4 <_svfiprintf_r+0x1c8>
 8018a80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a82:	445a      	add	r2, fp
 8018a84:	9209      	str	r2, [sp, #36]	; 0x24
 8018a86:	f89a 3000 	ldrb.w	r3, [sl]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	f000 80a2 	beq.w	8018bd4 <_svfiprintf_r+0x1c8>
 8018a90:	2300      	movs	r3, #0
 8018a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a9a:	f10a 0a01 	add.w	sl, sl, #1
 8018a9e:	9304      	str	r3, [sp, #16]
 8018aa0:	9307      	str	r3, [sp, #28]
 8018aa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018aa6:	931a      	str	r3, [sp, #104]	; 0x68
 8018aa8:	4654      	mov	r4, sl
 8018aaa:	2205      	movs	r2, #5
 8018aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ab0:	4851      	ldr	r0, [pc, #324]	; (8018bf8 <_svfiprintf_r+0x1ec>)
 8018ab2:	f7e7 fba5 	bl	8000200 <memchr>
 8018ab6:	9a04      	ldr	r2, [sp, #16]
 8018ab8:	b9d8      	cbnz	r0, 8018af2 <_svfiprintf_r+0xe6>
 8018aba:	06d0      	lsls	r0, r2, #27
 8018abc:	bf44      	itt	mi
 8018abe:	2320      	movmi	r3, #32
 8018ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ac4:	0711      	lsls	r1, r2, #28
 8018ac6:	bf44      	itt	mi
 8018ac8:	232b      	movmi	r3, #43	; 0x2b
 8018aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ace:	f89a 3000 	ldrb.w	r3, [sl]
 8018ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8018ad4:	d015      	beq.n	8018b02 <_svfiprintf_r+0xf6>
 8018ad6:	9a07      	ldr	r2, [sp, #28]
 8018ad8:	4654      	mov	r4, sl
 8018ada:	2000      	movs	r0, #0
 8018adc:	f04f 0c0a 	mov.w	ip, #10
 8018ae0:	4621      	mov	r1, r4
 8018ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ae6:	3b30      	subs	r3, #48	; 0x30
 8018ae8:	2b09      	cmp	r3, #9
 8018aea:	d94e      	bls.n	8018b8a <_svfiprintf_r+0x17e>
 8018aec:	b1b0      	cbz	r0, 8018b1c <_svfiprintf_r+0x110>
 8018aee:	9207      	str	r2, [sp, #28]
 8018af0:	e014      	b.n	8018b1c <_svfiprintf_r+0x110>
 8018af2:	eba0 0308 	sub.w	r3, r0, r8
 8018af6:	fa09 f303 	lsl.w	r3, r9, r3
 8018afa:	4313      	orrs	r3, r2
 8018afc:	9304      	str	r3, [sp, #16]
 8018afe:	46a2      	mov	sl, r4
 8018b00:	e7d2      	b.n	8018aa8 <_svfiprintf_r+0x9c>
 8018b02:	9b03      	ldr	r3, [sp, #12]
 8018b04:	1d19      	adds	r1, r3, #4
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	9103      	str	r1, [sp, #12]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	bfbb      	ittet	lt
 8018b0e:	425b      	neglt	r3, r3
 8018b10:	f042 0202 	orrlt.w	r2, r2, #2
 8018b14:	9307      	strge	r3, [sp, #28]
 8018b16:	9307      	strlt	r3, [sp, #28]
 8018b18:	bfb8      	it	lt
 8018b1a:	9204      	strlt	r2, [sp, #16]
 8018b1c:	7823      	ldrb	r3, [r4, #0]
 8018b1e:	2b2e      	cmp	r3, #46	; 0x2e
 8018b20:	d10c      	bne.n	8018b3c <_svfiprintf_r+0x130>
 8018b22:	7863      	ldrb	r3, [r4, #1]
 8018b24:	2b2a      	cmp	r3, #42	; 0x2a
 8018b26:	d135      	bne.n	8018b94 <_svfiprintf_r+0x188>
 8018b28:	9b03      	ldr	r3, [sp, #12]
 8018b2a:	1d1a      	adds	r2, r3, #4
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	9203      	str	r2, [sp, #12]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	bfb8      	it	lt
 8018b34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b38:	3402      	adds	r4, #2
 8018b3a:	9305      	str	r3, [sp, #20]
 8018b3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c08 <_svfiprintf_r+0x1fc>
 8018b40:	7821      	ldrb	r1, [r4, #0]
 8018b42:	2203      	movs	r2, #3
 8018b44:	4650      	mov	r0, sl
 8018b46:	f7e7 fb5b 	bl	8000200 <memchr>
 8018b4a:	b140      	cbz	r0, 8018b5e <_svfiprintf_r+0x152>
 8018b4c:	2340      	movs	r3, #64	; 0x40
 8018b4e:	eba0 000a 	sub.w	r0, r0, sl
 8018b52:	fa03 f000 	lsl.w	r0, r3, r0
 8018b56:	9b04      	ldr	r3, [sp, #16]
 8018b58:	4303      	orrs	r3, r0
 8018b5a:	3401      	adds	r4, #1
 8018b5c:	9304      	str	r3, [sp, #16]
 8018b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b62:	4826      	ldr	r0, [pc, #152]	; (8018bfc <_svfiprintf_r+0x1f0>)
 8018b64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b68:	2206      	movs	r2, #6
 8018b6a:	f7e7 fb49 	bl	8000200 <memchr>
 8018b6e:	2800      	cmp	r0, #0
 8018b70:	d038      	beq.n	8018be4 <_svfiprintf_r+0x1d8>
 8018b72:	4b23      	ldr	r3, [pc, #140]	; (8018c00 <_svfiprintf_r+0x1f4>)
 8018b74:	bb1b      	cbnz	r3, 8018bbe <_svfiprintf_r+0x1b2>
 8018b76:	9b03      	ldr	r3, [sp, #12]
 8018b78:	3307      	adds	r3, #7
 8018b7a:	f023 0307 	bic.w	r3, r3, #7
 8018b7e:	3308      	adds	r3, #8
 8018b80:	9303      	str	r3, [sp, #12]
 8018b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b84:	4433      	add	r3, r6
 8018b86:	9309      	str	r3, [sp, #36]	; 0x24
 8018b88:	e767      	b.n	8018a5a <_svfiprintf_r+0x4e>
 8018b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b8e:	460c      	mov	r4, r1
 8018b90:	2001      	movs	r0, #1
 8018b92:	e7a5      	b.n	8018ae0 <_svfiprintf_r+0xd4>
 8018b94:	2300      	movs	r3, #0
 8018b96:	3401      	adds	r4, #1
 8018b98:	9305      	str	r3, [sp, #20]
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	f04f 0c0a 	mov.w	ip, #10
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ba6:	3a30      	subs	r2, #48	; 0x30
 8018ba8:	2a09      	cmp	r2, #9
 8018baa:	d903      	bls.n	8018bb4 <_svfiprintf_r+0x1a8>
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d0c5      	beq.n	8018b3c <_svfiprintf_r+0x130>
 8018bb0:	9105      	str	r1, [sp, #20]
 8018bb2:	e7c3      	b.n	8018b3c <_svfiprintf_r+0x130>
 8018bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bb8:	4604      	mov	r4, r0
 8018bba:	2301      	movs	r3, #1
 8018bbc:	e7f0      	b.n	8018ba0 <_svfiprintf_r+0x194>
 8018bbe:	ab03      	add	r3, sp, #12
 8018bc0:	9300      	str	r3, [sp, #0]
 8018bc2:	462a      	mov	r2, r5
 8018bc4:	4b0f      	ldr	r3, [pc, #60]	; (8018c04 <_svfiprintf_r+0x1f8>)
 8018bc6:	a904      	add	r1, sp, #16
 8018bc8:	4638      	mov	r0, r7
 8018bca:	f7fb ff05 	bl	80149d8 <_printf_float>
 8018bce:	1c42      	adds	r2, r0, #1
 8018bd0:	4606      	mov	r6, r0
 8018bd2:	d1d6      	bne.n	8018b82 <_svfiprintf_r+0x176>
 8018bd4:	89ab      	ldrh	r3, [r5, #12]
 8018bd6:	065b      	lsls	r3, r3, #25
 8018bd8:	f53f af2c 	bmi.w	8018a34 <_svfiprintf_r+0x28>
 8018bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bde:	b01d      	add	sp, #116	; 0x74
 8018be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be4:	ab03      	add	r3, sp, #12
 8018be6:	9300      	str	r3, [sp, #0]
 8018be8:	462a      	mov	r2, r5
 8018bea:	4b06      	ldr	r3, [pc, #24]	; (8018c04 <_svfiprintf_r+0x1f8>)
 8018bec:	a904      	add	r1, sp, #16
 8018bee:	4638      	mov	r0, r7
 8018bf0:	f7fc f996 	bl	8014f20 <_printf_i>
 8018bf4:	e7eb      	b.n	8018bce <_svfiprintf_r+0x1c2>
 8018bf6:	bf00      	nop
 8018bf8:	0802bcbc 	.word	0x0802bcbc
 8018bfc:	0802bcc6 	.word	0x0802bcc6
 8018c00:	080149d9 	.word	0x080149d9
 8018c04:	08018955 	.word	0x08018955
 8018c08:	0802bcc2 	.word	0x0802bcc2

08018c0c <__sfputc_r>:
 8018c0c:	6893      	ldr	r3, [r2, #8]
 8018c0e:	3b01      	subs	r3, #1
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	b410      	push	{r4}
 8018c14:	6093      	str	r3, [r2, #8]
 8018c16:	da08      	bge.n	8018c2a <__sfputc_r+0x1e>
 8018c18:	6994      	ldr	r4, [r2, #24]
 8018c1a:	42a3      	cmp	r3, r4
 8018c1c:	db01      	blt.n	8018c22 <__sfputc_r+0x16>
 8018c1e:	290a      	cmp	r1, #10
 8018c20:	d103      	bne.n	8018c2a <__sfputc_r+0x1e>
 8018c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c26:	f7fd bc73 	b.w	8016510 <__swbuf_r>
 8018c2a:	6813      	ldr	r3, [r2, #0]
 8018c2c:	1c58      	adds	r0, r3, #1
 8018c2e:	6010      	str	r0, [r2, #0]
 8018c30:	7019      	strb	r1, [r3, #0]
 8018c32:	4608      	mov	r0, r1
 8018c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c38:	4770      	bx	lr

08018c3a <__sfputs_r>:
 8018c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c3c:	4606      	mov	r6, r0
 8018c3e:	460f      	mov	r7, r1
 8018c40:	4614      	mov	r4, r2
 8018c42:	18d5      	adds	r5, r2, r3
 8018c44:	42ac      	cmp	r4, r5
 8018c46:	d101      	bne.n	8018c4c <__sfputs_r+0x12>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	e007      	b.n	8018c5c <__sfputs_r+0x22>
 8018c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c50:	463a      	mov	r2, r7
 8018c52:	4630      	mov	r0, r6
 8018c54:	f7ff ffda 	bl	8018c0c <__sfputc_r>
 8018c58:	1c43      	adds	r3, r0, #1
 8018c5a:	d1f3      	bne.n	8018c44 <__sfputs_r+0xa>
 8018c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c60 <_vfiprintf_r>:
 8018c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c64:	460d      	mov	r5, r1
 8018c66:	b09d      	sub	sp, #116	; 0x74
 8018c68:	4614      	mov	r4, r2
 8018c6a:	4698      	mov	r8, r3
 8018c6c:	4606      	mov	r6, r0
 8018c6e:	b118      	cbz	r0, 8018c78 <_vfiprintf_r+0x18>
 8018c70:	6983      	ldr	r3, [r0, #24]
 8018c72:	b90b      	cbnz	r3, 8018c78 <_vfiprintf_r+0x18>
 8018c74:	f7fe fcc0 	bl	80175f8 <__sinit>
 8018c78:	4b89      	ldr	r3, [pc, #548]	; (8018ea0 <_vfiprintf_r+0x240>)
 8018c7a:	429d      	cmp	r5, r3
 8018c7c:	d11b      	bne.n	8018cb6 <_vfiprintf_r+0x56>
 8018c7e:	6875      	ldr	r5, [r6, #4]
 8018c80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c82:	07d9      	lsls	r1, r3, #31
 8018c84:	d405      	bmi.n	8018c92 <_vfiprintf_r+0x32>
 8018c86:	89ab      	ldrh	r3, [r5, #12]
 8018c88:	059a      	lsls	r2, r3, #22
 8018c8a:	d402      	bmi.n	8018c92 <_vfiprintf_r+0x32>
 8018c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c8e:	f7ff f8d6 	bl	8017e3e <__retarget_lock_acquire_recursive>
 8018c92:	89ab      	ldrh	r3, [r5, #12]
 8018c94:	071b      	lsls	r3, r3, #28
 8018c96:	d501      	bpl.n	8018c9c <_vfiprintf_r+0x3c>
 8018c98:	692b      	ldr	r3, [r5, #16]
 8018c9a:	b9eb      	cbnz	r3, 8018cd8 <_vfiprintf_r+0x78>
 8018c9c:	4629      	mov	r1, r5
 8018c9e:	4630      	mov	r0, r6
 8018ca0:	f7fd fc88 	bl	80165b4 <__swsetup_r>
 8018ca4:	b1c0      	cbz	r0, 8018cd8 <_vfiprintf_r+0x78>
 8018ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ca8:	07dc      	lsls	r4, r3, #31
 8018caa:	d50e      	bpl.n	8018cca <_vfiprintf_r+0x6a>
 8018cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cb0:	b01d      	add	sp, #116	; 0x74
 8018cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cb6:	4b7b      	ldr	r3, [pc, #492]	; (8018ea4 <_vfiprintf_r+0x244>)
 8018cb8:	429d      	cmp	r5, r3
 8018cba:	d101      	bne.n	8018cc0 <_vfiprintf_r+0x60>
 8018cbc:	68b5      	ldr	r5, [r6, #8]
 8018cbe:	e7df      	b.n	8018c80 <_vfiprintf_r+0x20>
 8018cc0:	4b79      	ldr	r3, [pc, #484]	; (8018ea8 <_vfiprintf_r+0x248>)
 8018cc2:	429d      	cmp	r5, r3
 8018cc4:	bf08      	it	eq
 8018cc6:	68f5      	ldreq	r5, [r6, #12]
 8018cc8:	e7da      	b.n	8018c80 <_vfiprintf_r+0x20>
 8018cca:	89ab      	ldrh	r3, [r5, #12]
 8018ccc:	0598      	lsls	r0, r3, #22
 8018cce:	d4ed      	bmi.n	8018cac <_vfiprintf_r+0x4c>
 8018cd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018cd2:	f7ff f8b5 	bl	8017e40 <__retarget_lock_release_recursive>
 8018cd6:	e7e9      	b.n	8018cac <_vfiprintf_r+0x4c>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	9309      	str	r3, [sp, #36]	; 0x24
 8018cdc:	2320      	movs	r3, #32
 8018cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ce6:	2330      	movs	r3, #48	; 0x30
 8018ce8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018eac <_vfiprintf_r+0x24c>
 8018cec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018cf0:	f04f 0901 	mov.w	r9, #1
 8018cf4:	4623      	mov	r3, r4
 8018cf6:	469a      	mov	sl, r3
 8018cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cfc:	b10a      	cbz	r2, 8018d02 <_vfiprintf_r+0xa2>
 8018cfe:	2a25      	cmp	r2, #37	; 0x25
 8018d00:	d1f9      	bne.n	8018cf6 <_vfiprintf_r+0x96>
 8018d02:	ebba 0b04 	subs.w	fp, sl, r4
 8018d06:	d00b      	beq.n	8018d20 <_vfiprintf_r+0xc0>
 8018d08:	465b      	mov	r3, fp
 8018d0a:	4622      	mov	r2, r4
 8018d0c:	4629      	mov	r1, r5
 8018d0e:	4630      	mov	r0, r6
 8018d10:	f7ff ff93 	bl	8018c3a <__sfputs_r>
 8018d14:	3001      	adds	r0, #1
 8018d16:	f000 80aa 	beq.w	8018e6e <_vfiprintf_r+0x20e>
 8018d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018d1c:	445a      	add	r2, fp
 8018d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8018d20:	f89a 3000 	ldrb.w	r3, [sl]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	f000 80a2 	beq.w	8018e6e <_vfiprintf_r+0x20e>
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d34:	f10a 0a01 	add.w	sl, sl, #1
 8018d38:	9304      	str	r3, [sp, #16]
 8018d3a:	9307      	str	r3, [sp, #28]
 8018d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018d40:	931a      	str	r3, [sp, #104]	; 0x68
 8018d42:	4654      	mov	r4, sl
 8018d44:	2205      	movs	r2, #5
 8018d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d4a:	4858      	ldr	r0, [pc, #352]	; (8018eac <_vfiprintf_r+0x24c>)
 8018d4c:	f7e7 fa58 	bl	8000200 <memchr>
 8018d50:	9a04      	ldr	r2, [sp, #16]
 8018d52:	b9d8      	cbnz	r0, 8018d8c <_vfiprintf_r+0x12c>
 8018d54:	06d1      	lsls	r1, r2, #27
 8018d56:	bf44      	itt	mi
 8018d58:	2320      	movmi	r3, #32
 8018d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d5e:	0713      	lsls	r3, r2, #28
 8018d60:	bf44      	itt	mi
 8018d62:	232b      	movmi	r3, #43	; 0x2b
 8018d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018d68:	f89a 3000 	ldrb.w	r3, [sl]
 8018d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8018d6e:	d015      	beq.n	8018d9c <_vfiprintf_r+0x13c>
 8018d70:	9a07      	ldr	r2, [sp, #28]
 8018d72:	4654      	mov	r4, sl
 8018d74:	2000      	movs	r0, #0
 8018d76:	f04f 0c0a 	mov.w	ip, #10
 8018d7a:	4621      	mov	r1, r4
 8018d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d80:	3b30      	subs	r3, #48	; 0x30
 8018d82:	2b09      	cmp	r3, #9
 8018d84:	d94e      	bls.n	8018e24 <_vfiprintf_r+0x1c4>
 8018d86:	b1b0      	cbz	r0, 8018db6 <_vfiprintf_r+0x156>
 8018d88:	9207      	str	r2, [sp, #28]
 8018d8a:	e014      	b.n	8018db6 <_vfiprintf_r+0x156>
 8018d8c:	eba0 0308 	sub.w	r3, r0, r8
 8018d90:	fa09 f303 	lsl.w	r3, r9, r3
 8018d94:	4313      	orrs	r3, r2
 8018d96:	9304      	str	r3, [sp, #16]
 8018d98:	46a2      	mov	sl, r4
 8018d9a:	e7d2      	b.n	8018d42 <_vfiprintf_r+0xe2>
 8018d9c:	9b03      	ldr	r3, [sp, #12]
 8018d9e:	1d19      	adds	r1, r3, #4
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	9103      	str	r1, [sp, #12]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	bfbb      	ittet	lt
 8018da8:	425b      	neglt	r3, r3
 8018daa:	f042 0202 	orrlt.w	r2, r2, #2
 8018dae:	9307      	strge	r3, [sp, #28]
 8018db0:	9307      	strlt	r3, [sp, #28]
 8018db2:	bfb8      	it	lt
 8018db4:	9204      	strlt	r2, [sp, #16]
 8018db6:	7823      	ldrb	r3, [r4, #0]
 8018db8:	2b2e      	cmp	r3, #46	; 0x2e
 8018dba:	d10c      	bne.n	8018dd6 <_vfiprintf_r+0x176>
 8018dbc:	7863      	ldrb	r3, [r4, #1]
 8018dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8018dc0:	d135      	bne.n	8018e2e <_vfiprintf_r+0x1ce>
 8018dc2:	9b03      	ldr	r3, [sp, #12]
 8018dc4:	1d1a      	adds	r2, r3, #4
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	9203      	str	r2, [sp, #12]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	bfb8      	it	lt
 8018dce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018dd2:	3402      	adds	r4, #2
 8018dd4:	9305      	str	r3, [sp, #20]
 8018dd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018ebc <_vfiprintf_r+0x25c>
 8018dda:	7821      	ldrb	r1, [r4, #0]
 8018ddc:	2203      	movs	r2, #3
 8018dde:	4650      	mov	r0, sl
 8018de0:	f7e7 fa0e 	bl	8000200 <memchr>
 8018de4:	b140      	cbz	r0, 8018df8 <_vfiprintf_r+0x198>
 8018de6:	2340      	movs	r3, #64	; 0x40
 8018de8:	eba0 000a 	sub.w	r0, r0, sl
 8018dec:	fa03 f000 	lsl.w	r0, r3, r0
 8018df0:	9b04      	ldr	r3, [sp, #16]
 8018df2:	4303      	orrs	r3, r0
 8018df4:	3401      	adds	r4, #1
 8018df6:	9304      	str	r3, [sp, #16]
 8018df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dfc:	482c      	ldr	r0, [pc, #176]	; (8018eb0 <_vfiprintf_r+0x250>)
 8018dfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018e02:	2206      	movs	r2, #6
 8018e04:	f7e7 f9fc 	bl	8000200 <memchr>
 8018e08:	2800      	cmp	r0, #0
 8018e0a:	d03f      	beq.n	8018e8c <_vfiprintf_r+0x22c>
 8018e0c:	4b29      	ldr	r3, [pc, #164]	; (8018eb4 <_vfiprintf_r+0x254>)
 8018e0e:	bb1b      	cbnz	r3, 8018e58 <_vfiprintf_r+0x1f8>
 8018e10:	9b03      	ldr	r3, [sp, #12]
 8018e12:	3307      	adds	r3, #7
 8018e14:	f023 0307 	bic.w	r3, r3, #7
 8018e18:	3308      	adds	r3, #8
 8018e1a:	9303      	str	r3, [sp, #12]
 8018e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e1e:	443b      	add	r3, r7
 8018e20:	9309      	str	r3, [sp, #36]	; 0x24
 8018e22:	e767      	b.n	8018cf4 <_vfiprintf_r+0x94>
 8018e24:	fb0c 3202 	mla	r2, ip, r2, r3
 8018e28:	460c      	mov	r4, r1
 8018e2a:	2001      	movs	r0, #1
 8018e2c:	e7a5      	b.n	8018d7a <_vfiprintf_r+0x11a>
 8018e2e:	2300      	movs	r3, #0
 8018e30:	3401      	adds	r4, #1
 8018e32:	9305      	str	r3, [sp, #20]
 8018e34:	4619      	mov	r1, r3
 8018e36:	f04f 0c0a 	mov.w	ip, #10
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e40:	3a30      	subs	r2, #48	; 0x30
 8018e42:	2a09      	cmp	r2, #9
 8018e44:	d903      	bls.n	8018e4e <_vfiprintf_r+0x1ee>
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d0c5      	beq.n	8018dd6 <_vfiprintf_r+0x176>
 8018e4a:	9105      	str	r1, [sp, #20]
 8018e4c:	e7c3      	b.n	8018dd6 <_vfiprintf_r+0x176>
 8018e4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e52:	4604      	mov	r4, r0
 8018e54:	2301      	movs	r3, #1
 8018e56:	e7f0      	b.n	8018e3a <_vfiprintf_r+0x1da>
 8018e58:	ab03      	add	r3, sp, #12
 8018e5a:	9300      	str	r3, [sp, #0]
 8018e5c:	462a      	mov	r2, r5
 8018e5e:	4b16      	ldr	r3, [pc, #88]	; (8018eb8 <_vfiprintf_r+0x258>)
 8018e60:	a904      	add	r1, sp, #16
 8018e62:	4630      	mov	r0, r6
 8018e64:	f7fb fdb8 	bl	80149d8 <_printf_float>
 8018e68:	4607      	mov	r7, r0
 8018e6a:	1c78      	adds	r0, r7, #1
 8018e6c:	d1d6      	bne.n	8018e1c <_vfiprintf_r+0x1bc>
 8018e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e70:	07d9      	lsls	r1, r3, #31
 8018e72:	d405      	bmi.n	8018e80 <_vfiprintf_r+0x220>
 8018e74:	89ab      	ldrh	r3, [r5, #12]
 8018e76:	059a      	lsls	r2, r3, #22
 8018e78:	d402      	bmi.n	8018e80 <_vfiprintf_r+0x220>
 8018e7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e7c:	f7fe ffe0 	bl	8017e40 <__retarget_lock_release_recursive>
 8018e80:	89ab      	ldrh	r3, [r5, #12]
 8018e82:	065b      	lsls	r3, r3, #25
 8018e84:	f53f af12 	bmi.w	8018cac <_vfiprintf_r+0x4c>
 8018e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e8a:	e711      	b.n	8018cb0 <_vfiprintf_r+0x50>
 8018e8c:	ab03      	add	r3, sp, #12
 8018e8e:	9300      	str	r3, [sp, #0]
 8018e90:	462a      	mov	r2, r5
 8018e92:	4b09      	ldr	r3, [pc, #36]	; (8018eb8 <_vfiprintf_r+0x258>)
 8018e94:	a904      	add	r1, sp, #16
 8018e96:	4630      	mov	r0, r6
 8018e98:	f7fc f842 	bl	8014f20 <_printf_i>
 8018e9c:	e7e4      	b.n	8018e68 <_vfiprintf_r+0x208>
 8018e9e:	bf00      	nop
 8018ea0:	0802baa4 	.word	0x0802baa4
 8018ea4:	0802bac4 	.word	0x0802bac4
 8018ea8:	0802ba84 	.word	0x0802ba84
 8018eac:	0802bcbc 	.word	0x0802bcbc
 8018eb0:	0802bcc6 	.word	0x0802bcc6
 8018eb4:	080149d9 	.word	0x080149d9
 8018eb8:	08018c3b 	.word	0x08018c3b
 8018ebc:	0802bcc2 	.word	0x0802bcc2

08018ec0 <nan>:
 8018ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018ec8 <nan+0x8>
 8018ec4:	4770      	bx	lr
 8018ec6:	bf00      	nop
 8018ec8:	00000000 	.word	0x00000000
 8018ecc:	7ff80000 	.word	0x7ff80000

08018ed0 <__sread>:
 8018ed0:	b510      	push	{r4, lr}
 8018ed2:	460c      	mov	r4, r1
 8018ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018ed8:	f000 f8de 	bl	8019098 <_read_r>
 8018edc:	2800      	cmp	r0, #0
 8018ede:	bfab      	itete	ge
 8018ee0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018ee2:	89a3      	ldrhlt	r3, [r4, #12]
 8018ee4:	181b      	addge	r3, r3, r0
 8018ee6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018eea:	bfac      	ite	ge
 8018eec:	6563      	strge	r3, [r4, #84]	; 0x54
 8018eee:	81a3      	strhlt	r3, [r4, #12]
 8018ef0:	bd10      	pop	{r4, pc}

08018ef2 <__swrite>:
 8018ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ef6:	461f      	mov	r7, r3
 8018ef8:	898b      	ldrh	r3, [r1, #12]
 8018efa:	05db      	lsls	r3, r3, #23
 8018efc:	4605      	mov	r5, r0
 8018efe:	460c      	mov	r4, r1
 8018f00:	4616      	mov	r6, r2
 8018f02:	d505      	bpl.n	8018f10 <__swrite+0x1e>
 8018f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f08:	2302      	movs	r3, #2
 8018f0a:	2200      	movs	r2, #0
 8018f0c:	f000 f890 	bl	8019030 <_lseek_r>
 8018f10:	89a3      	ldrh	r3, [r4, #12]
 8018f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018f16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018f1a:	81a3      	strh	r3, [r4, #12]
 8018f1c:	4632      	mov	r2, r6
 8018f1e:	463b      	mov	r3, r7
 8018f20:	4628      	mov	r0, r5
 8018f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f26:	f000 b837 	b.w	8018f98 <_write_r>

08018f2a <__sseek>:
 8018f2a:	b510      	push	{r4, lr}
 8018f2c:	460c      	mov	r4, r1
 8018f2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f32:	f000 f87d 	bl	8019030 <_lseek_r>
 8018f36:	1c43      	adds	r3, r0, #1
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	bf15      	itete	ne
 8018f3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8018f3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018f42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018f46:	81a3      	strheq	r3, [r4, #12]
 8018f48:	bf18      	it	ne
 8018f4a:	81a3      	strhne	r3, [r4, #12]
 8018f4c:	bd10      	pop	{r4, pc}

08018f4e <__sclose>:
 8018f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f52:	f000 b83b 	b.w	8018fcc <_close_r>

08018f56 <strncmp>:
 8018f56:	b510      	push	{r4, lr}
 8018f58:	b17a      	cbz	r2, 8018f7a <strncmp+0x24>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	3901      	subs	r1, #1
 8018f5e:	1884      	adds	r4, r0, r2
 8018f60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018f64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018f68:	4290      	cmp	r0, r2
 8018f6a:	d101      	bne.n	8018f70 <strncmp+0x1a>
 8018f6c:	42a3      	cmp	r3, r4
 8018f6e:	d101      	bne.n	8018f74 <strncmp+0x1e>
 8018f70:	1a80      	subs	r0, r0, r2
 8018f72:	bd10      	pop	{r4, pc}
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d1f3      	bne.n	8018f60 <strncmp+0xa>
 8018f78:	e7fa      	b.n	8018f70 <strncmp+0x1a>
 8018f7a:	4610      	mov	r0, r2
 8018f7c:	e7f9      	b.n	8018f72 <strncmp+0x1c>

08018f7e <__ascii_wctomb>:
 8018f7e:	b149      	cbz	r1, 8018f94 <__ascii_wctomb+0x16>
 8018f80:	2aff      	cmp	r2, #255	; 0xff
 8018f82:	bf85      	ittet	hi
 8018f84:	238a      	movhi	r3, #138	; 0x8a
 8018f86:	6003      	strhi	r3, [r0, #0]
 8018f88:	700a      	strbls	r2, [r1, #0]
 8018f8a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018f8e:	bf98      	it	ls
 8018f90:	2001      	movls	r0, #1
 8018f92:	4770      	bx	lr
 8018f94:	4608      	mov	r0, r1
 8018f96:	4770      	bx	lr

08018f98 <_write_r>:
 8018f98:	b538      	push	{r3, r4, r5, lr}
 8018f9a:	4d07      	ldr	r5, [pc, #28]	; (8018fb8 <_write_r+0x20>)
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	4608      	mov	r0, r1
 8018fa0:	4611      	mov	r1, r2
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	602a      	str	r2, [r5, #0]
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	f7e9 fd78 	bl	8002a9c <_write>
 8018fac:	1c43      	adds	r3, r0, #1
 8018fae:	d102      	bne.n	8018fb6 <_write_r+0x1e>
 8018fb0:	682b      	ldr	r3, [r5, #0]
 8018fb2:	b103      	cbz	r3, 8018fb6 <_write_r+0x1e>
 8018fb4:	6023      	str	r3, [r4, #0]
 8018fb6:	bd38      	pop	{r3, r4, r5, pc}
 8018fb8:	20001b04 	.word	0x20001b04

08018fbc <abort>:
 8018fbc:	b508      	push	{r3, lr}
 8018fbe:	2006      	movs	r0, #6
 8018fc0:	f000 f8a4 	bl	801910c <raise>
 8018fc4:	2001      	movs	r0, #1
 8018fc6:	f7e9 fc50 	bl	800286a <_exit>
	...

08018fcc <_close_r>:
 8018fcc:	b538      	push	{r3, r4, r5, lr}
 8018fce:	4d06      	ldr	r5, [pc, #24]	; (8018fe8 <_close_r+0x1c>)
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	4604      	mov	r4, r0
 8018fd4:	4608      	mov	r0, r1
 8018fd6:	602b      	str	r3, [r5, #0]
 8018fd8:	f7e9 fc6e 	bl	80028b8 <_close>
 8018fdc:	1c43      	adds	r3, r0, #1
 8018fde:	d102      	bne.n	8018fe6 <_close_r+0x1a>
 8018fe0:	682b      	ldr	r3, [r5, #0]
 8018fe2:	b103      	cbz	r3, 8018fe6 <_close_r+0x1a>
 8018fe4:	6023      	str	r3, [r4, #0]
 8018fe6:	bd38      	pop	{r3, r4, r5, pc}
 8018fe8:	20001b04 	.word	0x20001b04

08018fec <_fstat_r>:
 8018fec:	b538      	push	{r3, r4, r5, lr}
 8018fee:	4d07      	ldr	r5, [pc, #28]	; (801900c <_fstat_r+0x20>)
 8018ff0:	2300      	movs	r3, #0
 8018ff2:	4604      	mov	r4, r0
 8018ff4:	4608      	mov	r0, r1
 8018ff6:	4611      	mov	r1, r2
 8018ff8:	602b      	str	r3, [r5, #0]
 8018ffa:	f7e9 fc69 	bl	80028d0 <_fstat>
 8018ffe:	1c43      	adds	r3, r0, #1
 8019000:	d102      	bne.n	8019008 <_fstat_r+0x1c>
 8019002:	682b      	ldr	r3, [r5, #0]
 8019004:	b103      	cbz	r3, 8019008 <_fstat_r+0x1c>
 8019006:	6023      	str	r3, [r4, #0]
 8019008:	bd38      	pop	{r3, r4, r5, pc}
 801900a:	bf00      	nop
 801900c:	20001b04 	.word	0x20001b04

08019010 <_isatty_r>:
 8019010:	b538      	push	{r3, r4, r5, lr}
 8019012:	4d06      	ldr	r5, [pc, #24]	; (801902c <_isatty_r+0x1c>)
 8019014:	2300      	movs	r3, #0
 8019016:	4604      	mov	r4, r0
 8019018:	4608      	mov	r0, r1
 801901a:	602b      	str	r3, [r5, #0]
 801901c:	f7e9 fc68 	bl	80028f0 <_isatty>
 8019020:	1c43      	adds	r3, r0, #1
 8019022:	d102      	bne.n	801902a <_isatty_r+0x1a>
 8019024:	682b      	ldr	r3, [r5, #0]
 8019026:	b103      	cbz	r3, 801902a <_isatty_r+0x1a>
 8019028:	6023      	str	r3, [r4, #0]
 801902a:	bd38      	pop	{r3, r4, r5, pc}
 801902c:	20001b04 	.word	0x20001b04

08019030 <_lseek_r>:
 8019030:	b538      	push	{r3, r4, r5, lr}
 8019032:	4d07      	ldr	r5, [pc, #28]	; (8019050 <_lseek_r+0x20>)
 8019034:	4604      	mov	r4, r0
 8019036:	4608      	mov	r0, r1
 8019038:	4611      	mov	r1, r2
 801903a:	2200      	movs	r2, #0
 801903c:	602a      	str	r2, [r5, #0]
 801903e:	461a      	mov	r2, r3
 8019040:	f7e9 fc61 	bl	8002906 <_lseek>
 8019044:	1c43      	adds	r3, r0, #1
 8019046:	d102      	bne.n	801904e <_lseek_r+0x1e>
 8019048:	682b      	ldr	r3, [r5, #0]
 801904a:	b103      	cbz	r3, 801904e <_lseek_r+0x1e>
 801904c:	6023      	str	r3, [r4, #0]
 801904e:	bd38      	pop	{r3, r4, r5, pc}
 8019050:	20001b04 	.word	0x20001b04

08019054 <memmove>:
 8019054:	4288      	cmp	r0, r1
 8019056:	b510      	push	{r4, lr}
 8019058:	eb01 0402 	add.w	r4, r1, r2
 801905c:	d902      	bls.n	8019064 <memmove+0x10>
 801905e:	4284      	cmp	r4, r0
 8019060:	4623      	mov	r3, r4
 8019062:	d807      	bhi.n	8019074 <memmove+0x20>
 8019064:	1e43      	subs	r3, r0, #1
 8019066:	42a1      	cmp	r1, r4
 8019068:	d008      	beq.n	801907c <memmove+0x28>
 801906a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801906e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019072:	e7f8      	b.n	8019066 <memmove+0x12>
 8019074:	4402      	add	r2, r0
 8019076:	4601      	mov	r1, r0
 8019078:	428a      	cmp	r2, r1
 801907a:	d100      	bne.n	801907e <memmove+0x2a>
 801907c:	bd10      	pop	{r4, pc}
 801907e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019086:	e7f7      	b.n	8019078 <memmove+0x24>

08019088 <_malloc_usable_size_r>:
 8019088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801908c:	1f18      	subs	r0, r3, #4
 801908e:	2b00      	cmp	r3, #0
 8019090:	bfbc      	itt	lt
 8019092:	580b      	ldrlt	r3, [r1, r0]
 8019094:	18c0      	addlt	r0, r0, r3
 8019096:	4770      	bx	lr

08019098 <_read_r>:
 8019098:	b538      	push	{r3, r4, r5, lr}
 801909a:	4d07      	ldr	r5, [pc, #28]	; (80190b8 <_read_r+0x20>)
 801909c:	4604      	mov	r4, r0
 801909e:	4608      	mov	r0, r1
 80190a0:	4611      	mov	r1, r2
 80190a2:	2200      	movs	r2, #0
 80190a4:	602a      	str	r2, [r5, #0]
 80190a6:	461a      	mov	r2, r3
 80190a8:	f7e9 fbe9 	bl	800287e <_read>
 80190ac:	1c43      	adds	r3, r0, #1
 80190ae:	d102      	bne.n	80190b6 <_read_r+0x1e>
 80190b0:	682b      	ldr	r3, [r5, #0]
 80190b2:	b103      	cbz	r3, 80190b6 <_read_r+0x1e>
 80190b4:	6023      	str	r3, [r4, #0]
 80190b6:	bd38      	pop	{r3, r4, r5, pc}
 80190b8:	20001b04 	.word	0x20001b04

080190bc <_raise_r>:
 80190bc:	291f      	cmp	r1, #31
 80190be:	b538      	push	{r3, r4, r5, lr}
 80190c0:	4604      	mov	r4, r0
 80190c2:	460d      	mov	r5, r1
 80190c4:	d904      	bls.n	80190d0 <_raise_r+0x14>
 80190c6:	2316      	movs	r3, #22
 80190c8:	6003      	str	r3, [r0, #0]
 80190ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190ce:	bd38      	pop	{r3, r4, r5, pc}
 80190d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80190d2:	b112      	cbz	r2, 80190da <_raise_r+0x1e>
 80190d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80190d8:	b94b      	cbnz	r3, 80190ee <_raise_r+0x32>
 80190da:	4620      	mov	r0, r4
 80190dc:	f000 f830 	bl	8019140 <_getpid_r>
 80190e0:	462a      	mov	r2, r5
 80190e2:	4601      	mov	r1, r0
 80190e4:	4620      	mov	r0, r4
 80190e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80190ea:	f000 b817 	b.w	801911c <_kill_r>
 80190ee:	2b01      	cmp	r3, #1
 80190f0:	d00a      	beq.n	8019108 <_raise_r+0x4c>
 80190f2:	1c59      	adds	r1, r3, #1
 80190f4:	d103      	bne.n	80190fe <_raise_r+0x42>
 80190f6:	2316      	movs	r3, #22
 80190f8:	6003      	str	r3, [r0, #0]
 80190fa:	2001      	movs	r0, #1
 80190fc:	e7e7      	b.n	80190ce <_raise_r+0x12>
 80190fe:	2400      	movs	r4, #0
 8019100:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019104:	4628      	mov	r0, r5
 8019106:	4798      	blx	r3
 8019108:	2000      	movs	r0, #0
 801910a:	e7e0      	b.n	80190ce <_raise_r+0x12>

0801910c <raise>:
 801910c:	4b02      	ldr	r3, [pc, #8]	; (8019118 <raise+0xc>)
 801910e:	4601      	mov	r1, r0
 8019110:	6818      	ldr	r0, [r3, #0]
 8019112:	f7ff bfd3 	b.w	80190bc <_raise_r>
 8019116:	bf00      	nop
 8019118:	200008ac 	.word	0x200008ac

0801911c <_kill_r>:
 801911c:	b538      	push	{r3, r4, r5, lr}
 801911e:	4d07      	ldr	r5, [pc, #28]	; (801913c <_kill_r+0x20>)
 8019120:	2300      	movs	r3, #0
 8019122:	4604      	mov	r4, r0
 8019124:	4608      	mov	r0, r1
 8019126:	4611      	mov	r1, r2
 8019128:	602b      	str	r3, [r5, #0]
 801912a:	f7e9 fb8e 	bl	800284a <_kill>
 801912e:	1c43      	adds	r3, r0, #1
 8019130:	d102      	bne.n	8019138 <_kill_r+0x1c>
 8019132:	682b      	ldr	r3, [r5, #0]
 8019134:	b103      	cbz	r3, 8019138 <_kill_r+0x1c>
 8019136:	6023      	str	r3, [r4, #0]
 8019138:	bd38      	pop	{r3, r4, r5, pc}
 801913a:	bf00      	nop
 801913c:	20001b04 	.word	0x20001b04

08019140 <_getpid_r>:
 8019140:	f7e9 bb7b 	b.w	800283a <_getpid>

08019144 <expf>:
 8019144:	b508      	push	{r3, lr}
 8019146:	ed2d 8b02 	vpush	{d8}
 801914a:	eef0 8a40 	vmov.f32	s17, s0
 801914e:	f000 f82f 	bl	80191b0 <__ieee754_expf>
 8019152:	eeb0 8a40 	vmov.f32	s16, s0
 8019156:	eeb0 0a68 	vmov.f32	s0, s17
 801915a:	f000 f919 	bl	8019390 <finitef>
 801915e:	b160      	cbz	r0, 801917a <expf+0x36>
 8019160:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80191a0 <expf+0x5c>
 8019164:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801916c:	dd0a      	ble.n	8019184 <expf+0x40>
 801916e:	f7fb fa63 	bl	8014638 <__errno>
 8019172:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80191a4 <expf+0x60>
 8019176:	2322      	movs	r3, #34	; 0x22
 8019178:	6003      	str	r3, [r0, #0]
 801917a:	eeb0 0a48 	vmov.f32	s0, s16
 801917e:	ecbd 8b02 	vpop	{d8}
 8019182:	bd08      	pop	{r3, pc}
 8019184:	eddf 7a08 	vldr	s15, [pc, #32]	; 80191a8 <expf+0x64>
 8019188:	eef4 8ae7 	vcmpe.f32	s17, s15
 801918c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019190:	d5f3      	bpl.n	801917a <expf+0x36>
 8019192:	f7fb fa51 	bl	8014638 <__errno>
 8019196:	2322      	movs	r3, #34	; 0x22
 8019198:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80191ac <expf+0x68>
 801919c:	6003      	str	r3, [r0, #0]
 801919e:	e7ec      	b.n	801917a <expf+0x36>
 80191a0:	42b17180 	.word	0x42b17180
 80191a4:	7f800000 	.word	0x7f800000
 80191a8:	c2cff1b5 	.word	0xc2cff1b5
 80191ac:	00000000 	.word	0x00000000

080191b0 <__ieee754_expf>:
 80191b0:	ee10 2a10 	vmov	r2, s0
 80191b4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80191b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80191bc:	d902      	bls.n	80191c4 <__ieee754_expf+0x14>
 80191be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80191c2:	4770      	bx	lr
 80191c4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80191c8:	d106      	bne.n	80191d8 <__ieee754_expf+0x28>
 80191ca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8019304 <__ieee754_expf+0x154>
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	bf18      	it	ne
 80191d2:	eeb0 0a67 	vmovne.f32	s0, s15
 80191d6:	4770      	bx	lr
 80191d8:	484b      	ldr	r0, [pc, #300]	; (8019308 <__ieee754_expf+0x158>)
 80191da:	4282      	cmp	r2, r0
 80191dc:	dd02      	ble.n	80191e4 <__ieee754_expf+0x34>
 80191de:	2000      	movs	r0, #0
 80191e0:	f000 b8d0 	b.w	8019384 <__math_oflowf>
 80191e4:	2a00      	cmp	r2, #0
 80191e6:	da05      	bge.n	80191f4 <__ieee754_expf+0x44>
 80191e8:	4a48      	ldr	r2, [pc, #288]	; (801930c <__ieee754_expf+0x15c>)
 80191ea:	4291      	cmp	r1, r2
 80191ec:	d902      	bls.n	80191f4 <__ieee754_expf+0x44>
 80191ee:	2000      	movs	r0, #0
 80191f0:	f000 b8c2 	b.w	8019378 <__math_uflowf>
 80191f4:	4a46      	ldr	r2, [pc, #280]	; (8019310 <__ieee754_expf+0x160>)
 80191f6:	4291      	cmp	r1, r2
 80191f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80191fc:	d952      	bls.n	80192a4 <__ieee754_expf+0xf4>
 80191fe:	4a45      	ldr	r2, [pc, #276]	; (8019314 <__ieee754_expf+0x164>)
 8019200:	4291      	cmp	r1, r2
 8019202:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019206:	d834      	bhi.n	8019272 <__ieee754_expf+0xc2>
 8019208:	4943      	ldr	r1, [pc, #268]	; (8019318 <__ieee754_expf+0x168>)
 801920a:	4411      	add	r1, r2
 801920c:	ed91 7a00 	vldr	s14, [r1]
 8019210:	4942      	ldr	r1, [pc, #264]	; (801931c <__ieee754_expf+0x16c>)
 8019212:	440a      	add	r2, r1
 8019214:	edd2 7a00 	vldr	s15, [r2]
 8019218:	ee30 7a47 	vsub.f32	s14, s0, s14
 801921c:	f1c3 0201 	rsb	r2, r3, #1
 8019220:	1ad2      	subs	r2, r2, r3
 8019222:	ee37 0a67 	vsub.f32	s0, s14, s15
 8019226:	ee20 6a00 	vmul.f32	s12, s0, s0
 801922a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8019320 <__ieee754_expf+0x170>
 801922e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019324 <__ieee754_expf+0x174>
 8019232:	eee6 6a05 	vfma.f32	s13, s12, s10
 8019236:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019328 <__ieee754_expf+0x178>
 801923a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801923e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801932c <__ieee754_expf+0x17c>
 8019242:	eee5 6a06 	vfma.f32	s13, s10, s12
 8019246:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019330 <__ieee754_expf+0x180>
 801924a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801924e:	eef0 6a40 	vmov.f32	s13, s0
 8019252:	eee5 6a46 	vfms.f32	s13, s10, s12
 8019256:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801925a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801925e:	bb92      	cbnz	r2, 80192c6 <__ieee754_expf+0x116>
 8019260:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019264:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019268:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801926c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019270:	4770      	bx	lr
 8019272:	4b30      	ldr	r3, [pc, #192]	; (8019334 <__ieee754_expf+0x184>)
 8019274:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8019338 <__ieee754_expf+0x188>
 8019278:	eddf 6a30 	vldr	s13, [pc, #192]	; 801933c <__ieee754_expf+0x18c>
 801927c:	4413      	add	r3, r2
 801927e:	edd3 7a00 	vldr	s15, [r3]
 8019282:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019286:	eeb0 7a40 	vmov.f32	s14, s0
 801928a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801928e:	ee17 2a90 	vmov	r2, s15
 8019292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019296:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801929a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019340 <__ieee754_expf+0x190>
 801929e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80192a2:	e7be      	b.n	8019222 <__ieee754_expf+0x72>
 80192a4:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 80192a8:	d20b      	bcs.n	80192c2 <__ieee754_expf+0x112>
 80192aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8019344 <__ieee754_expf+0x194>
 80192ae:	ee70 6a26 	vadd.f32	s13, s0, s13
 80192b2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80192b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ba:	dd02      	ble.n	80192c2 <__ieee754_expf+0x112>
 80192bc:	ee30 0a25 	vadd.f32	s0, s0, s11
 80192c0:	4770      	bx	lr
 80192c2:	2200      	movs	r2, #0
 80192c4:	e7af      	b.n	8019226 <__ieee754_expf+0x76>
 80192c6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80192ca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80192ce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80192d2:	bfb8      	it	lt
 80192d4:	3264      	addlt	r2, #100	; 0x64
 80192d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80192da:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80192de:	ee75 7ac0 	vsub.f32	s15, s11, s0
 80192e2:	ee17 3a90 	vmov	r3, s15
 80192e6:	bfab      	itete	ge
 80192e8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80192ec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80192f0:	ee00 3a10 	vmovge	s0, r3
 80192f4:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8019348 <__ieee754_expf+0x198>
 80192f8:	bfbc      	itt	lt
 80192fa:	ee00 3a10 	vmovlt	s0, r3
 80192fe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019302:	4770      	bx	lr
 8019304:	00000000 	.word	0x00000000
 8019308:	42b17217 	.word	0x42b17217
 801930c:	42cff1b5 	.word	0x42cff1b5
 8019310:	3eb17218 	.word	0x3eb17218
 8019314:	3f851591 	.word	0x3f851591
 8019318:	0802bcd8 	.word	0x0802bcd8
 801931c:	0802bce0 	.word	0x0802bce0
 8019320:	3331bb4c 	.word	0x3331bb4c
 8019324:	b5ddea0e 	.word	0xb5ddea0e
 8019328:	388ab355 	.word	0x388ab355
 801932c:	bb360b61 	.word	0xbb360b61
 8019330:	3e2aaaab 	.word	0x3e2aaaab
 8019334:	0802bcd0 	.word	0x0802bcd0
 8019338:	3fb8aa3b 	.word	0x3fb8aa3b
 801933c:	3f317180 	.word	0x3f317180
 8019340:	3717f7d1 	.word	0x3717f7d1
 8019344:	7149f2ca 	.word	0x7149f2ca
 8019348:	0d800000 	.word	0x0d800000

0801934c <with_errnof>:
 801934c:	b513      	push	{r0, r1, r4, lr}
 801934e:	4604      	mov	r4, r0
 8019350:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019354:	f7fb f970 	bl	8014638 <__errno>
 8019358:	ed9d 0a01 	vldr	s0, [sp, #4]
 801935c:	6004      	str	r4, [r0, #0]
 801935e:	b002      	add	sp, #8
 8019360:	bd10      	pop	{r4, pc}

08019362 <xflowf>:
 8019362:	b130      	cbz	r0, 8019372 <xflowf+0x10>
 8019364:	eef1 7a40 	vneg.f32	s15, s0
 8019368:	ee27 0a80 	vmul.f32	s0, s15, s0
 801936c:	2022      	movs	r0, #34	; 0x22
 801936e:	f7ff bfed 	b.w	801934c <with_errnof>
 8019372:	eef0 7a40 	vmov.f32	s15, s0
 8019376:	e7f7      	b.n	8019368 <xflowf+0x6>

08019378 <__math_uflowf>:
 8019378:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019380 <__math_uflowf+0x8>
 801937c:	f7ff bff1 	b.w	8019362 <xflowf>
 8019380:	10000000 	.word	0x10000000

08019384 <__math_oflowf>:
 8019384:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801938c <__math_oflowf+0x8>
 8019388:	f7ff bfeb 	b.w	8019362 <xflowf>
 801938c:	70000000 	.word	0x70000000

08019390 <finitef>:
 8019390:	b082      	sub	sp, #8
 8019392:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019396:	9801      	ldr	r0, [sp, #4]
 8019398:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801939c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80193a0:	bfac      	ite	ge
 80193a2:	2000      	movge	r0, #0
 80193a4:	2001      	movlt	r0, #1
 80193a6:	b002      	add	sp, #8
 80193a8:	4770      	bx	lr
	...

080193ac <_init>:
 80193ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ae:	bf00      	nop
 80193b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193b2:	bc08      	pop	{r3}
 80193b4:	469e      	mov	lr, r3
 80193b6:	4770      	bx	lr

080193b8 <_fini>:
 80193b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193ba:	bf00      	nop
 80193bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193be:	bc08      	pop	{r3}
 80193c0:	469e      	mov	lr, r3
 80193c2:	4770      	bx	lr
